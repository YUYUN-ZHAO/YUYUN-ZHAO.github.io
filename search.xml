<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Linux】tmux 常用命令</title>
      <link href="2021/08/21/%E3%80%90Linux%E3%80%91tmux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/08/21/%E3%80%90Linux%E3%80%91tmux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[        <h2 id="tmux-简介"   >          <a href="#tmux-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tmux-简介"></a> tmux 简介</h2>      <p>tmux 是一个 terminal multiplexer（终端复用器），它可以启动一系列终端会话。它解绑了会话和终端窗口。关闭终端窗口再打开，会话并不终止，而是继续运行在执行。将会话与终端窗后彻底分离。</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/98384704" >https://zhuanlan.zhihu.com/p/98384704</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h3 id="安装方法一"   >          <a href="#安装方法一" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装方法一"></a> 安装方法一</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tmux/tmux.git</span><br><span class="line">$ <span class="built_in">cd</span> tmux</span><br><span class="line">$ sh autogen.sh</span><br><span class="line">$ ./configure &amp;&amp; make</span><br></pre></td></tr></table></div></figure>        <h3 id="安装方法二"   >          <a href="#安装方法二" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装方法二"></a> 安装方法二</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 或 Debian</span></span><br><span class="line">$ sudo apt-get install tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 或 Fedora</span></span><br><span class="line">$ sudo yum install tmux</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac</span></span><br><span class="line">$ brew install tmux</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MacOS】MacOS 安装 Homebrew</title>
      <link href="2021/08/21/%E3%80%90MacOS%E3%80%91MacOS%E5%AE%89%E8%A3%85Homebrew/"/>
      <url>2021/08/21/%E3%80%90MacOS%E3%80%91MacOS%E5%AE%89%E8%A3%85Homebrew/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90MacOS%E3%80%91MacOS%E5%AE%89%E8%A3%85Homebrew/v2-0b3ccbc27e177698d793ebb341ef6fb8_1440w.jpg" alt="有趣的Homebrew 命名及 keg-only 的意思" /></p>        <h2 id="homebrew-简介"   >          <a href="#homebrew-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#homebrew-简介"></a> Homebrew 简介</h2>      <p>Homebrew是一款MacOS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能，类似于CentOS下的apt-get/yum。只需简单的一条指令就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</p>        <h2 id="homebrew-名称由来"   >          <a href="#homebrew-名称由来" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#homebrew-名称由来"></a> Homebrew 名称由来</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/196667957" >https://zhuanlan.zhihu.com/p/196667957</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>首先， <strong>brew</strong> 本身是酿造、酿酒的意思，会用这个字的原因是 <strong>homebrew</strong> 的安装方式为下载 <strong>source code</strong> 回来做编译，由于是在自己电脑做 <strong>local compile</strong> 编译套件，所以这个工具叫做 <strong>homebrew</strong> <strong>自家酿酒</strong>。</p><p>酿酒需要有配方 <strong>formula</strong>，当你需要安装套件时，流程就是下 <strong>brew</strong> 命令去根据配方 <strong>formula</strong>, 酿造出一桶（ <strong>keg</strong>）酒来。所以 <strong>keg</strong> 指的是整个编译完成的套件资料夹。</p><p>再来，放置套件的位置在 <strong>/usr/local/Cellar/</strong>（或**/opt/homebrew/Cellar/**）， <strong>Cellar</strong> 就是地窖，一桶一桶酿好的酒当然要存放在地窖里，所以编译安成的套件资料夹 <strong>keg</strong> 预设目录在 <strong>/usr/local/Cellar/</strong>。</p><p>回到「<strong>keg-only</strong>」整个词，字面上意思现在就很清楚，表示这个套件只会存放在桶子里，不会跑出桶子外。实际上的行为是 <strong>brew</strong> 不会帮你做 <strong>symlink</strong> 到 <strong>/usr/local</strong>，避免你的原生系统内还有一套 <strong>readline</strong> 而打架，所以提示消息说 <strong>readline</strong> 套件是 <strong>keg-only</strong>。</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/people/morlay" >https://www.zhihu.com/people/morlay</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>brew cask（木桶）</strong> 是对于 <strong>brew</strong> 的扩展，可以采用 <strong>brew</strong> 的方式安装<strong>图形界面</strong>的软件。<strong>brew cask</strong> 仅仅是下载解压已经编译好了的应用包 （.dmg/.pkg），并放在统一的目录中（ <strong>/opt/homebrew-cask/Caskroom</strong> ），省掉了自己去下载、解压、拖拽等步骤。</p>        <h2 id="脚本配置安装"   >          <a href="#脚本配置安装" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#脚本配置安装"></a> 脚本配置安装</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/98384704" >https://zhuanlan.zhihu.com/p/98384704</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>使用作者<span class="exturl"><a class="exturl__link"   href="https://www.mintimate.cn/2020/04/05/Homebrew/" >@Mintimate</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>配置的脚本安装：</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>/bin/zsh -c <span class="string">&quot;$(curl -fsSL &#x27;https://host.mintimate.cn/fileHost/download/MTEyMjMz&#x27;)&quot;</span></span><br></pre></td></tr></table></div></figure><p>卸载homebrew：</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>/bin/zsh -c <span class="string">&quot;$(curl -fsSL &#x27;https://host.mintimate.cn/fileHost/download/MjIzMzQ0&#x27;)&quot;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="homebrew-常用命令"   >          <a href="#homebrew-常用命令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#homebrew-常用命令"></a> Homebrew 常用命令</h2>      <p>安装任意包</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install &lt;packageName&gt;</span><br></pre></td></tr></table></div></figure><p>示例：安装node</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install node</span><br></pre></td></tr></table></div></figure><p>卸载任意包</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew uninstall &lt;packageName&gt;</span><br></pre></td></tr></table></div></figure><p>查询可用包</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew search &lt;packageName&gt;</span><br></pre></td></tr></table></div></figure><p>查看已安装包列表</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew list</span><br></pre></td></tr></table></div></figure><p>查看任意包信息</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew info &lt;packageName&gt;</span><br></pre></td></tr></table></div></figure><p>更新Homebrew</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew update</span><br></pre></td></tr></table></div></figure><p>查看Homebrew版本</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew -v</span><br></pre></td></tr></table></div></figure><p>Homebrew帮助信息</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew -h</span><br></pre></td></tr></table></div></figure><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/de6f1d2d37bf" >https://www.jianshu.com/p/de6f1d2d37bf</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><span id="more"></span><p>下载的脚本内容：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HomeBrew自动安装脚本</span></span><br><span class="line"><span class="comment">#路径表.</span></span><br><span class="line">UNAME_MACHINE=<span class="string">&quot;<span class="subst">$(uname -m)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$UNAME_MACHINE</span>&quot;</span> == <span class="string">&quot;arm64&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># On ARM macOS, this script installs to /opt/homebrew only</span></span><br><span class="line">    HOMEBREW_PREFIX=<span class="string">&quot;/opt/homebrew&quot;</span></span><br><span class="line">    HOMEBREW_REPOSITORY=<span class="string">&quot;<span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># On Intel macOS, this script installs to /usr/local only</span></span><br><span class="line">    HOMEBREW_PREFIX=<span class="string">&quot;/usr/local&quot;</span></span><br><span class="line">    HOMEBREW_REPOSITORY=<span class="string">&quot;<span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">HOMEBREW_CACHE=<span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/Library/Caches/Homebrew&quot;</span></span><br><span class="line"></span><br><span class="line">STAT=<span class="string">&quot;stat -f&quot;</span></span><br><span class="line">CHOWN=<span class="string">&quot;/usr/sbin/chown&quot;</span></span><br><span class="line">CHGRP=<span class="string">&quot;/usr/bin/chgrp&quot;</span></span><br><span class="line">GROUP=<span class="string">&quot;admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取前面两个.的数据</span></span><br><span class="line"><span class="function"><span class="title">major_minor</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;1%%.*&#125;</span>.<span class="subst">$(x=<span class="string">&quot;<span class="variable">$&#123;1#*.&#125;</span>&quot;</span>; echo <span class="string">&quot;<span class="variable">$&#123;x%%.*&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取系统版本</span></span><br><span class="line">macos_version=<span class="string">&quot;<span class="subst">$(major_minor <span class="string">&quot;<span class="subst">$(/usr/bin/sw_vers -productVersion)</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="comment">#获取系统时间</span></span><br><span class="line">TIME=$(date <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">JudgeSuccess()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;\033[1;31m此步骤失败 &#x27;</span><span class="variable">$1</span><span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;\033[1;32m此步骤成功\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 判断是否有系统权限</span></span><br><span class="line"><span class="function"><span class="title">have_sudo_access</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$&#123;HAVE_SUDO_ACCESS-&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/sudo -l mkdir &amp;&gt;/dev/null</span><br><span class="line">    HAVE_SUDO_ACCESS=<span class="string">&quot;$?&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$HAVE_SUDO_ACCESS</span>&quot;</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;获取权限失败!&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> <span class="string">&quot;<span class="variable">$HAVE_SUDO_ACCESS</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">shell_join</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> arg</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$&#123;arg// /\ &#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">execute</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> ! <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    abort <span class="string">&quot;<span class="subst">$(printf <span class="string">&quot;Failed during: %s&quot;</span> <span class="string">&quot;<span class="subst">$(shell_join <span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员运行</span></span><br><span class="line"><span class="function"><span class="title">execute_sudo</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> -a args=(<span class="string">&quot;<span class="variable">$@</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    args=(<span class="string">&quot;-A&quot;</span> <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> have_sudo_access; <span class="keyword">then</span></span><br><span class="line">    execute <span class="string">&quot;/usr/bin/sudo&quot;</span> <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    execute <span class="string">&quot;<span class="variable">$&#123;args[@]&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateFolder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;-&gt; 创建文件夹&#x27;</span> <span class="variable">$1</span></span><br><span class="line">    execute_sudo <span class="string">&quot;/bin/mkdir&quot;</span> <span class="string">&quot;-p&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    JudgeSuccess</span><br><span class="line">    execute_sudo <span class="string">&quot;/bin/chmod&quot;</span> <span class="string">&quot;g+rwx&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    execute_sudo <span class="string">&quot;<span class="variable">$CHOWN</span>&quot;</span> <span class="string">&quot;<span class="variable">$USER</span>&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    execute_sudo <span class="string">&quot;<span class="variable">$CHGRP</span>&quot;</span> <span class="string">&quot;<span class="variable">$GROUP</span>&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RmCreate()</span><br><span class="line">&#123;</span><br><span class="line">    sudo rm -rf <span class="variable">$1</span></span><br><span class="line">    CreateFolder <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#git提交</span></span><br><span class="line"><span class="function"><span class="title">git_commit</span></span>()&#123;</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m <span class="string">&quot;your del&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#version_gt 判断$1是否大于$2</span></span><br><span class="line"><span class="function"><span class="title">version_gt</span></span>() &#123;</span><br><span class="line">  [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="string">&quot;<span class="variable">$&#123;1#*.&#125;</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$&#123;2#*.&#125;</span>&quot;</span> ]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#version_ge 判断$1是否大于等于$2</span></span><br><span class="line"><span class="function"><span class="title">version_ge</span></span>() &#123;</span><br><span class="line">  [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="string">&quot;<span class="variable">$&#123;1#*.&#125;</span>&quot;</span> -ge <span class="string">&quot;<span class="variable">$&#123;2#*.&#125;</span>&quot;</span> ]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#version_lt 判断$1是否小于$2</span></span><br><span class="line"><span class="function"><span class="title">version_lt</span></span>() &#123;</span><br><span class="line">  [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="string">&quot;<span class="variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="string">&quot;<span class="variable">$&#123;1#*.&#125;</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$&#123;2#*.&#125;</span>&quot;</span> ]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#一些警告判断</span></span><br><span class="line"><span class="function"><span class="title">warning_if</span></span>()&#123;</span><br><span class="line">  git_https_proxy=$(git config --global https.proxy)</span><br><span class="line">  git_http_proxy=$(git config --global http.proxy)</span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$git_https_proxy</span>&quot;</span>  &amp;&amp;  -z <span class="string">&quot;<span class="variable">$git_http_proxy</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;未发现Git代理（属于正常状态）&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;\033[1;33m</span></span><br><span class="line"><span class="string">      提示：发现你电脑设置了Git代理，如果Git报错，请运行下面两句话：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              git config --global --unset https.proxy</span></span><br><span class="line"><span class="string">              git config --global --unset http.proxy</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">033[1;32m开始执行Brew自动安装程序\033[0m</span></span><br><span class="line"><span class="string">[&#x27;</span><span class="variable">$TIME</span><span class="string">&#x27;][&#x27;</span><span class="variable">$macos_version</span><span class="string">&#x27;]</span></span><br><span class="line"><span class="string">\033[1;36m_____________________________________________________________\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m    _   _\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m    /  /|     ,                 ,\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m---/| /-|----------__---_/_---------_--_-----__---_/_-----__-\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m  / |/  |   /    /   )  /     /    / /  )  /   )  /     /___)\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m_/__/___|__/____/___/__(_ ___/____/_/__/__(___(__(_ ___(___ _\033[0m</span></span><br><span class="line"><span class="string">\033[1;36m         Mintimate’s Blog:https://www.mintimate.cn \033[0m</span></span><br><span class="line"><span class="string">\033[1;36m_____________________________________________________________\033[0m</span></span><br><span class="line"><span class="string">              \033[1;36m作者：Mintimate\033[0m&#x27;</span></span><br><span class="line"><span class="comment">#选择一个下载源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;\033[1;32m</span></span><br><span class="line"><span class="string">请选择一个下载镜像，例如中科大，输入1回车。</span></span><br><span class="line"><span class="string">\033[1;33m 1、中科大下载源(推荐)  2、清华大学下载源  3、阿里下载源（cask使用中科大）\033[0m&#x27;</span></span><br><span class="line"><span class="built_in">read</span> <span class="string">&quot;MY_DOWN_NUM?请输入序号: &quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$MY_DOWN_NUM</span>&quot;</span> -eq <span class="string">&quot;2&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;你选择了清华大学下载源&quot;</span></span><br><span class="line">  USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</span><br><span class="line">  <span class="comment">#HomeBrew基础框架</span></span><br><span class="line">  USER_BREW_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line">  <span class="comment">#HomeBrew Core</span></span><br><span class="line">  USER_CORE_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">  <span class="comment">#HomeBrew Cask</span></span><br><span class="line">  USER_CASK_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">  USER_CASK_FONTS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line">  USER_CASK_DRIVERS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line"><span class="keyword">elif</span>  [[ <span class="string">&quot;<span class="variable">$MY_DOWN_NUM</span>&quot;</span> -eq <span class="string">&quot;3&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你选择了阿里下载源&quot;</span></span><br><span class="line">  USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles</span><br><span class="line">  <span class="comment">#HomeBrew基础框架</span></span><br><span class="line">  USER_BREW_GIT=https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line">  <span class="comment">#HomeBrew Core</span></span><br><span class="line">  USER_CORE_GIT=https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line">  <span class="comment">#HomeBrew Cask</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;阿里无cask源，使用清华大学cask源&quot;</span></span><br><span class="line">  USER_CASK_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">  USER_CASK_FONTS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line">  USER_CASK_DRIVERS_GIT=https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;你选择了中国科学技术大学下载源&quot;</span></span><br><span class="line">  <span class="comment">#HomeBrew 下载源 install</span></span><br><span class="line">  USER_HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles</span><br><span class="line">  <span class="comment">#HomeBrew基础框架</span></span><br><span class="line">  USER_BREW_GIT=https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line">  <span class="comment">#HomeBrew Core</span></span><br><span class="line">  USER_CORE_GIT=https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line">  <span class="comment">#HomeBrew Cask</span></span><br><span class="line">  USER_CASK_GIT=https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 通过命令删除之前的brew、创建一个新的Homebrew文件夹</span></span><br><span class="line"><span class="string">\033[1;36m请输入开机密码，输入过程不显示，输入完后回车\033[0m&#x27;</span></span><br><span class="line"><span class="comment"># 让环境暂时纯粹，重启终端后恢复</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line">RmCreate <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 删除之前brew环境，重新创建&#x27;</span></span><br><span class="line">sudo rm -rf <span class="variable">$&#123;HOMEBREW_CACHE&#125;</span>/</span><br><span class="line">sudo rm -rf /Users/$(whoami)/Library/Logs/Homebrew/</span><br><span class="line">sudo rm -rf <span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Caskroom</span><br><span class="line">sudo rm -rf <span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Cellar</span><br><span class="line">sudo rm -rf <span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/var/homebrew</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 克隆Homebrew基本文件(brew.git仓库 32M+)&#x27;</span></span><br><span class="line">sudo git --version</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">  sudo rm -rf <span class="string">&quot;/Library/Developer/CommandLineTools/&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;\033[1;36m安装Git\033[0m后再运行此脚本，\033[1;31m在系统弹窗中点击“安装”按钮</span></span><br><span class="line"><span class="string">如果没有弹窗的老系统，需要自己下载安装：https://git-scm.com/downloads \033[0m&#x27;</span></span><br><span class="line">  xcode-select --install</span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sudo git <span class="built_in">clone</span> <span class="variable">$USER_BREW_GIT</span> <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span></span><br><span class="line">JudgeSuccess 尝试切换下载源或者网络</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 创建brew的快捷方式到系统环境变量&#x27;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$UNAME_MACHINE</span>&quot;</span> == <span class="string">&quot;arm64&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&#x27;arm64架构，自动跳过软链接&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    find <span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin -name brew -<span class="built_in">exec</span> sudo rm -f &#123;&#125; \;</span><br><span class="line">    sudo ln -s <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew <span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew</span><br><span class="line">    JudgeSuccess</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">warning_if</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 克隆Homebrew Core(Homebrew core仓库 224M+) </span></span><br><span class="line"><span class="string">\033[1;36m此处如果显示Password表示需要再次输入开机密码，输入完后回车\033[0m&#x27;</span></span><br><span class="line">sudo mkdir -p <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-core</span><br><span class="line">sudo git <span class="built_in">clone</span> <span class="variable">$USER_CORE_GIT</span> <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-core/</span><br><span class="line">JudgeSuccess 尝试切换下载源或者网络</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 克隆Homebrew Cask(Homebrew cask仓库 248M+) </span></span><br><span class="line"><span class="string">\033[1;36m此处如果显示Password表示需要再次输入开机密码，输入完后回车\033[0m&#x27;</span></span><br><span class="line">sudo mkdir -p <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">sudo git <span class="built_in">clone</span> <span class="variable">$USER_CASK_GIT</span> <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/Library/Taps/homebrew/homebrew-cask/</span><br><span class="line">JudgeSuccess 尝试切换下载源或者网络</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$UNAME_MACHINE</span>&quot;</span> == <span class="string">&quot;arm64&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;==&gt; 配置ARM64架构Homebrew初始化到配置文件&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;eval $(/opt/homebrew/bin/brew shellenv)&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;==&gt; 配置X86架构Homebrew初始化到配置文件&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;/usr/local/sbin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;==&gt; 配置国内下载地址&#x27;</span></span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-fonts)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-drivers)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git</span><br><span class="line">git -C <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask-versions)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-versions.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">==&gt; 安装完成，brew版本</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="comment">#判断系统版本</span></span><br><span class="line"><span class="keyword">if</span> version_gt <span class="string">&quot;<span class="variable">$macos_version</span>&quot;</span> <span class="string">&quot;10.13&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$macos_version</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;\033[1;31m检测到你的系统比较老，会有一些报错，请稍等Ruby下载安装;</span></span><br><span class="line"><span class="string">    &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo chown -R $(whoami) <span class="variable">$&#123;HOMEBREW_REPOSITORY&#125;</span></span><br><span class="line"><span class="comment">#先暂时设置到清华大学源，中科大没有Ruby下载镜像</span></span><br><span class="line">HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;brew -v</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line">brew -v</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    \033[1;31m失败 留言我看到会回复(附带前面提示“此步骤失败”以及它的前6句)</span></span><br><span class="line"><span class="string">    或者使用手动安装方法（https://www.mintimate.cn/categories/Mac/）</span></span><br><span class="line"><span class="string">    或QQ咨询：198330181（可能会收费）</span></span><br><span class="line"><span class="string">    &#x27;</span></span><br><span class="line">    ls -al /usr/<span class="built_in">local</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;--end</span></span><br><span class="line"><span class="string">    \033[0m&#x27;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;\033[1;32mBrew前期配置成功\033[0m&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">==&gt; brew update</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line">HOMEBREW_BOTTLE_DOMAIN=<span class="variable">$&#123;USER_HOMEBREW_BOTTLE_DOMAIN&#125;</span></span><br><span class="line">brew update</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">    \033[1;31m失败 留言我看到会回复(附带前面提示“此步骤失败”以及它的前6句)</span></span><br><span class="line"><span class="string">    &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">        \033[1;32m上一句如果提示Already up-to-date表示成功\033[0m</span></span><br><span class="line"><span class="string">            \033[1;32mBrew自动安装程序运行完成\033[0m</span></span><br><span class="line"><span class="string">              \033[1;32m国内地址已经配置完成\033[0m</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                初步介绍几个brew命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        本地软件库列表：brew ls</span></span><br><span class="line"><span class="string">        查找软件：brew search Software（其中SoftWare替换为要查找的软件关键字）</span></span><br><span class="line"><span class="string">        查看brew版本：brew -v  更新brew版本：brew update</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Formulae（方案库 例如安装Python3）</span></span><br><span class="line"><span class="string">        安装方案库：brew install Python3（其中Python3替换为要安装的软件库名称）</span></span><br><span class="line"><span class="string">        卸载方案库：brew uninstall Python3（其中Python3替换为要卸载的软件库名称）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Casks   （界面软件 例如谷歌浏览器）</span></span><br><span class="line"><span class="string">        安装软件：brew cask install visual-studio-code（其中visual-studio-code替换为安装的软件名字，例如google-chrome）</span></span><br><span class="line"><span class="string">        卸载软件：brew cask uninstall visual-studio-code（其中visual-studio-code替换为要卸载的软件名字，例如google-chrom</span></span><br><span class="line"><span class="string">    &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MacOS】Iterm2 常用快捷键</title>
      <link href="2021/08/21/%E3%80%90MacOS%E3%80%91Iterm2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2021/08/21/%E3%80%90MacOS%E3%80%91Iterm2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90MacOS%E3%80%91Iterm2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/image-20210821160959204.png" alt="image-20210821160959204" /></p>        <h2 id="标签"   >          <a href="#标签" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">新建标签：<span class="built_in">command</span> + t</span><br><span class="line"></span><br><span class="line">关闭标签：<span class="built_in">command</span> + w</span><br><span class="line"></span><br><span class="line">切换标签：<span class="built_in">command</span> + 数字 <span class="built_in">command</span> + 左右方向键</span><br><span class="line"></span><br><span class="line">切换全屏：<span class="built_in">command</span> + enter</span><br><span class="line"></span><br><span class="line">查找：<span class="built_in">command</span> + f</span><br></pre></td></tr></table></div></figure><p><code>command + f</code> 选中文本后按<code>Tab</code>键自动高亮当前文本后的内容，再按<code>Enter</code>键将高亮文本自动保存到剪切板上。</p><ul><li><code>fn + 左右方向键</code>：移动到行首/尾</li><li><code>command + 左右方向键</code>：切换窗口</li><li><code>option + 左右方向键</code>：移动到下一个单词（需要设置映射keys替换默认的<code>esc + b/f</code>）</li></ul>        <h2 id="分屏"   >          <a href="#分屏" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分屏"></a> 分屏</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">垂直分屏：<span class="built_in">command</span> + d</span><br><span class="line"></span><br><span class="line">水平分屏：<span class="built_in">command</span> + <span class="built_in">shift</span> + d</span><br><span class="line"></span><br><span class="line">切换屏幕：<span class="built_in">command</span> + option + 方向键 <span class="built_in">command</span> + [ 或 <span class="built_in">command</span> + ]</span><br><span class="line"></span><br><span class="line">查看历史命令：<span class="built_in">command</span> + ;</span><br><span class="line"></span><br><span class="line">查看剪贴板历史：<span class="built_in">command</span> + <span class="built_in">shift</span> + h</span><br></pre></td></tr></table></div></figure>        <h2 id="其他"   >          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">清除当前行：ctrl + u</span><br><span class="line"></span><br><span class="line">到行首：ctrl + a</span><br><span class="line"></span><br><span class="line">到行尾：ctrl + e</span><br><span class="line"></span><br><span class="line">前进后退：ctrl + f/b (相当于左右方向键)</span><br><span class="line"></span><br><span class="line">上一条命令：ctrl + p</span><br><span class="line"></span><br><span class="line">搜索命令历史：ctrl + r</span><br><span class="line"></span><br><span class="line">删除当前光标的字符：ctrl + d</span><br><span class="line"></span><br><span class="line">删除光标之前的字符：ctrl + h</span><br><span class="line"></span><br><span class="line">删除光标之前的单词：ctrl + w</span><br><span class="line"></span><br><span class="line">删除到文本末尾：ctrl + k</span><br><span class="line"></span><br><span class="line">交换光标处文本：ctrl + t</span><br><span class="line"></span><br><span class="line">清屏1：<span class="built_in">command</span> + r</span><br><span class="line"></span><br><span class="line">清屏2：ctrl + l</span><br><span class="line"></span><br><span class="line">⌘ + 数字在各 tab 标签直接来回切换</span><br><span class="line"></span><br><span class="line">选择即复制 + 鼠标中键粘贴，这个很实用</span><br><span class="line"></span><br><span class="line">⌘ + f 所查找的内容会被自动复制</span><br><span class="line"></span><br><span class="line">⌘ + d 横着分屏 / ⌘ + <span class="built_in">shift</span> + d 竖着分屏</span><br><span class="line"></span><br><span class="line">⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</span><br><span class="line"></span><br><span class="line">ctrl + u 清空当前行，无论光标在什么位置</span><br><span class="line"></span><br><span class="line">输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</span><br><span class="line"></span><br><span class="line">⌘ + <span class="built_in">shift</span> + h 会列出剪切板历史</span><br><span class="line"></span><br><span class="line">可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</span><br></pre></td></tr></table></div></figure><blockquote><p>原文地址：<span class="exturl"><a class="exturl__link"   href="https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/" >https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Linux/Mac 配置 zsh + oh-my-zsh</title>
      <link href="2021/08/20/%E3%80%90Linux%E3%80%91Linux-Mac%E9%85%8D%E7%BD%AEZSH-Oh-My-ZSH/"/>
      <url>2021/08/20/%E3%80%90Linux%E3%80%91Linux-Mac%E9%85%8D%E7%BD%AEZSH-Oh-My-ZSH/</url>
      
        <content type="html"><![CDATA[        <h2 id="安装-zsh"   >          <a href="#安装-zsh" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-zsh"></a> 安装 zsh</h2>      <p>查看自己操作系统上都安装了哪些shell：</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cat /etc/shells</span><br></pre></td></tr></table></div></figure><p>显示如下：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh <span class="comment"># 默认没有</span></span><br></pre></td></tr></table></div></figure>        <h3 id="安装-zsh-2"   >          <a href="#安装-zsh-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-zsh-2"></a> 安装 zsh</h3>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/57acb275806c" >https://www.jianshu.com/p/57acb275806c</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># macOS</span></span><br><span class="line"><span class="variable">$ </span>brew install zsh zsh-completions</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="variable">$ </span>sudo apt-get install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="variable">$ </span>sudo yum -y install zsh</span><br></pre></td></tr></table></div></figure>        <h3 id="切换为默认-shell"   >          <a href="#切换为默认-shell" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#切换为默认-shell"></a> 切换为默认 shell</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="安装-oh-my-zsh"   >          <a href="#安装-oh-my-zsh" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-oh-my-zsh"></a> 安装 Oh My Zsh</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.mintimate.cn/2021/02/05/configZsh/" >https://www.mintimate.cn/2021/02/05/configZsh/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h3 id="官方安装"   >          <a href="#官方安装" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#官方安装"></a> 官方安装</h3>      <p><code>Linux/Mac</code> 打开终端，输入官方提供的脚本：</p><figure class="highlight ruby"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sh -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></div></figure><p>为了保证脚本能顺利运行，你的 <code>Linux/Mac</code> 服务器需要：</p><ul><li>提前安装<code>git</code>、<code>curl</code></li><li>可以成功连接GitHub</li><li>如果有<code>~/.zshrc</code>文件，最好提前备份</li></ul><p><img src="/images/%E3%80%90Linux%E3%80%91Linux-Mac%E9%85%8D%E7%BD%AEZSH-Oh-My-ZSH/installOhMyZshOfficial.png" alt="官方方法安装" /></p>        <h3 id="脚本安装"   >          <a href="#脚本安装" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#脚本安装"></a> 脚本安装</h3>      <p>若连接 Github 超时，可以使用作者<span class="exturl"><a class="exturl__link"   href="https://www.mintimate.cn/2021/02/05/configZsh/" >@Mintimate</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>配置的脚本安装：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh -c &quot;$(curl -fsSL &#39;https:&#x2F;&#x2F;host.mintimate.cn&#x2F;fileHost&#x2F;download&#x2F;MTM1NjkzNzI1OTIxMDg0NjIwOQ&#x3D;&#x3D;&#39;)&quot;</span><br></pre></td></tr></table></div></figure><p>为了保证脚本能顺利运行，你的<code>Linux/Mac</code>服务器需要：</p><ul><li>提前安装<code>curl</code>、<code>unzip</code></li><li>如果有<code>~/.zshrc</code>文件，最好提前备份，否则本脚本自动更改原本的<code>.zshrc</code>文件为<code>zshrcBak</code></li></ul>        <h3 id="配置插件"   >          <a href="#配置插件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置插件"></a> 配置插件</h3>      <p>Oh My ZSH 支持许多插件，例如：</p><ul><li><code>zsh-autosuggesstions</code>：命令自动补全</li><li><code>autojump</code>：自动跳转</li><li><code>zsh-syntax-highlighting</code>：命令高亮</li></ul><p>在<code>~/.zshrc</code>文件中添加这些插件：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins&#x3D;(zsh-autosuggesstions autojump zsh-syntax-highlighting)</span><br></pre></td></tr></table></div></figure>        <h3 id="插件安装方法"   >          <a href="#插件安装方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#插件安装方法"></a> 插件安装方法</h3>      <p>将第三方插件 <code>git clone</code> 到 <code>$ZSH_CUSTOM/plugins/</code> ，再配置到 <code>~/.zshrc</code> 文件中即可</p><p><code>zsh-autosuggesstions</code>插件：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></div></figure><p><code>zsh-syntax-highlighting</code>插件：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></div></figure><p><code>autojump</code>插件：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载插件autojump到/.oh-my-zsh/custom/plugins目录中</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/null_454_5218/autojump.git <span class="variable">$ZSH_CUSTOM</span>/plugins/autojump</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd到目录autojump中</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$ZSH_CUSTOM</span>/plugins/autojump</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行install.py</span></span><br><span class="line">$ ./install.py</span><br></pre></td></tr></table></div></figure><p>之后根据提示在<code>.zshrc</code>文件中添加：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -s ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . ~&#x2F;.autojump&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh</span><br></pre></td></tr></table></div></figure>        <h3 id="安装主题"   >          <a href="#安装主题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h3>      <p>若想安装第三方主题，只需先将对应主题从 Github 上<code>clone</code>到本地，再将<code>clone</code>得到的<code>xxx-.zsh-theme</code>文件拷贝到<code>~/.oh-my-zsh/themes/</code>下即可。（个别主题可能需要将lib文件下的配置文件也拷贝到<code>~/.oh-my-zsh/themes/lib/</code>下）</p>        <h2 id="安装-powerlevel10k-主题"   >          <a href="#安装-powerlevel10k-主题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-powerlevel10k-主题"></a> 安装 Powerlevel10k 主题</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/57acb275806c" >https://www.jianshu.com/p/57acb275806c</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fromkatv%2Fpowerlevel10k%2F" >Powerlevel10k </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>主题安装：</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></div></figure><p>克隆下来之后，在 zsh 的配置文件 <code>~/.zshrc</code> 中设置 <code>ZSH_THEME=powerlevel10k/powerlevel10k</code> 即可。</p>        <h3 id="安装-nerd-font-字体"   >          <a href="#安装-nerd-font-字体" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-nerd-font-字体"></a> 安装 Nerd Font 字体</h3>      <p>完成上述操作之后，你可能会发现终端出现了乱码，这是因为你的电脑不支持那么多字体，需要安装扩展字体。</p><p>Nerd 字体是支持 icon 最多的，可以直接在 <span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fryanoasis%2Fnerd-fonts%23patched-fonts" >nerd-fonts GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 或者<span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.nerdfonts.com%2Ffont-downloads" >官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>下载 Hack Nerd Font。Powerlevel10k 作者推荐使用 <span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fromkatv%2Fpowerlevel10k%23meslo-nerd-font-patched-for-powerlevel10k" >Meslo Nerd Font</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 字体，但发现在 iTerm2 下 Hack Nerd Font 更好看一点，其他系统还是下载 Meslo Nerd Font 比较保险。</p><p>对于 macOS 和 WSL 来说，直接双击下载的 ttf 文件即可安装。对于 Linux 来说，需要将文件放入指定目录并刷新缓存，请看<span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fryanoasis%2Fnerd-fonts%2Ftree%2Fmaster%2Fpatched-fonts%2FHack%23quick-installation" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>安装之后，对于 iTerm2 来说，在 <code>Preferences-Profiles-Text-Font</code> 设置为对应字体。Windows Terminal 在 <code>settings.json</code> 配置中加入 <code>&quot;fontFace&quot;: &quot;MesloLGS NF&quot;</code> 即可。</p>        <h3 id="配置-powerlevel10k"   >          <a href="#配置-powerlevel10k" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置-powerlevel10k"></a> 配置 Powerlevel10k</h3>      <p>配置分为两步，首先使用自动化配置脚本，其次根据个人喜好进行个性化设置。Powerlevel10k 提供了一个配置脚本，运行脚本后只需回答几个简单的问题即可完成配置。</p><p>直接输入 <code>p10k configure</code> 即可进入配置问答界面，完成后会生成一个配置文件 <code>~/.p10k.zsh</code>，并且在 <code>~/.zshrc</code> 中自动加入了</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.</span></span><br><span class="line">[[ -f ~/.p10k.zsh ]] &amp;&amp; <span class="built_in">source</span> ~/.p10k.zsh</span><br></pre></td></tr></table></div></figure><p>在配置过程中需要注意的是，<code>Instant Promt Mode</code> 尽量选择打开，可以加快终端启动速度，详情请见<span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fromkatv%2Fpowerlevel10k%23instant-prompt" >这里</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h2 id="安装-dracula-主题"   >          <a href="#安装-dracula-主题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#安装-dracula-主题"></a> 安装 Dracula 主题</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://juejin.cn/post/6844904071359545352" >https://juejin.cn/post/6844904071359545352</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/daiyuhe/article/details/88667875" >https://blog.csdn.net/daiyuhe/article/details/88667875</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ZooKeeper】ZooKeeper</title>
      <link href="2021/08/18/%E3%80%90ZooKeeper%E3%80%91ZooKeeper/"/>
      <url>2021/08/18/%E3%80%90ZooKeeper%E3%80%91ZooKeeper/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】Web中访问资源路径问题汇总</title>
      <link href="2021/08/17/%E3%80%90JavaWeb%E3%80%91Web%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/08/17/%E3%80%90JavaWeb%E3%80%91Web%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[        <h2 id="web中-斜杠的不同意义"   >          <a href="#web中-斜杠的不同意义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web中-斜杠的不同意义"></a> Web中 / 斜杠的不同意义</h2>      <ul><li>浏览器内代表所有资源：<code>/**</code></li><li>服务器内代表所有资源：<code>/</code></li></ul><p>在Web中，/ 是<strong>绝对路径</strong>：</p><ul><li>/ 如果被<strong>浏览器</strong>解析，得到的地址是：<code>http://ip:port/</code> （指写在静态html代码中，无法被服务器解析，只能被浏览器解析）</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>/ 如果被<strong>服务器</strong>解析，得到的地址是：<code>http://ip:port/工程路径/</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 映射</span></span><br><span class="line">&lt;url-pattern&gt;/servlet1&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line">servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求转发</span></span><br><span class="line">request.getRequestDispacther(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></div></figure><ul><li>特殊情况：<code>response.sendRedirect(&quot;/&quot;);</code>会将斜杠发送给浏览器解析，得到<code>http://ip:port/</code> ，因此需要再加上工程名<code>response.sendRedirect(&quot;/projectName/xxx&quot;);</code></li></ul><p><strong>/WEB-INF/目录下的资源文件，客户端无法直接访问（即不能在浏览器中输入url直接跳转），而只能在servlet程序中跳转</strong></p><p><strong>在IDEA中，&quot;/“代表的项目文件路径为”<code>target/项目名-1.0-SNAPSHOT/</code>&quot;</strong></p><p>在Web应用的前端程序（.jsp）中：</p><ul><li>不以 / 开始的相对路径找资源时以<strong>当前资源的路径为基准</strong>，容易出现问题（不推荐使用）</li><li>以 / 开始的相对路径找资源时以<code>http://ip:port/</code>为基准，不包含<strong>当前项目名称路径</strong>，因此需要在资源前加上<code>$&#123;pageContext.request.contextPath&#125;/</code>以使程序能找到&quot;<code>target/项目名-1.0-SNAPSHOT/</code>&quot;下的资源文件（<code>项目名-1.0-SNAPSHOT</code>为Maven工程打包后生成的工程根目录）。例如若想在.jsp文件中引入css文件的路径，需要写 <code>href=&quot;$&#123;pageContext.request.contextPath&#125;/css/style.css&quot;</code></li></ul><p><img src="/images/%E3%80%90Memo%E3%80%91Web%E4%B8%AD%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20210604105603326.png" alt="image-20210604105603326" /></p><span id="more"></span>        <h2 id="spring-mvc资源路径映射"   >          <a href="#spring-mvc资源路径映射" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc资源路径映射"></a> Spring MVC资源路径映射</h2>      <p>在Spring MVC的<code>web.xml</code>中配置路径时，常用 <code>/</code></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- / 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>注意点</strong>：</p><ul><li><code>/</code> 不会匹配 .jsp</li><li><code>/*</code> 匹配所有的请求，包括 .jsp</li></ul><p><code>*.jsp</code> 由Tomcat负责处理，不需要SpringMVC拦截处理。因此常用 <code>/</code></p>        <h3 id="原因分析"   >          <a href="#原因分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原因分析"></a> 原因分析</h3>      <p>所有JavaWeb项目里的<code>web.xml</code>都继承自Tomcat的父<code>web.xml</code>，其内配置了一个默认的<strong>DefaultServlet</strong>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>DefaultServlet</strong>是Tomcat用于处理静态资源（除了jsp和servlet之外都是静态资源）的处理器，当<strong>DefaultServlet</strong>判断得知url中访问的是静态资源文件时，就会直接去服务器目录下找该资源是否存在。其配置了<code>url-pattern：/</code></p><p>而Spring MVC中我们同样配置了<code>url-pattern：/</code>，因此会覆盖Tomcat中的DefaultServlet，使得静态资源不能被Tomcat里的<strong>DefaultServlet</strong>所处理，只能被我们配置的<strong>DispatcherServlet</strong>拦截处理。静态资源被<strong>DispatcherServlet</strong>拦截时会判断哪个方法的<code>@RequestMapping</code>是这个静态资源，显然并不能找到，因此无法正常显示。</p><p><code>*.jsp</code> 处理问题：Tomcat里的web.xml中配置了对jsp文件的处理，该处理器将处理jsp文件：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>若我们在SpringMVC配置中只添加<code>url-pattern：/</code>而没有添加<code>url-pattern：*.jsp</code>，则将只覆盖父web.xml里的<code>url-pattern：/</code>（处理静态资源），并没有覆盖<code>url-pattern：*.jsp</code>。因此这种情况下，遇到jsp文件，则由Tomcat里的默认处理器处理；遇到普通请求，由<strong>DispatcherServlet</strong>处理；遇到静态资源，因覆盖了Tomcat，则无法处理。</p><p>若配置<code>url-pattern：/*</code>，则所有请求资源都将被拦截处理。</p><p>因此，若想在使用Spring MVC的<strong>DispatcherServlet</strong>的同时仍能处理静态资源，则需要添加：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><p>其能将Spring MVC无法处理的请求交给Tomcat默认的Servlet处理，让Spring MVC不处理静态资源。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Netty】Netty</title>
      <link href="2021/08/14/%E3%80%90Netty%E3%80%91Netty/"/>
      <url>2021/08/14/%E3%80%90Netty%E3%80%91Netty/</url>
      
        <content type="html"><![CDATA[        <h2 id="netty-概述"   >          <a href="#netty-概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-概述"></a> Netty 概述</h2>              <h3 id="原生-nio-存在的问题"   >          <a href="#原生-nio-存在的问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原生-nio-存在的问题"></a> 原生 NIO 存在的问题</h3>      <blockquote><p>NIO的介绍见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/08/13/%E3%80%90Java%E3%80%91NIO/" >【Java】NIO</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><ul><li><code>NIO</code> 的类库和 <code>API</code> 繁杂，使用麻烦：需要熟练掌握 <code>Selector</code>、<code>ServerSocketChannel</code>、<code>SocketChannel</code>、<code>ByteBuffer</code>等。</li><li>需要具备其他的额外技能：要熟悉 <code>Java</code> 多线程编程，因为 <code>NIO</code> 编程涉及到 <code>Reactor</code> 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 <code>NIO</code> 程序。</li><li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。</li><li><code>JDK NIO</code> 的 <code>Bug</code>：例如臭名昭著的 <code>Epoll Bug</code>，它会导致 <code>Selector</code> 空轮询，最终导致 <code>CPU100%</code>。直到 <code>JDK1.7</code> 版本该问题仍旧存在，没有被根本解决。</li></ul>        <h3 id="netty-官网说明"   >          <a href="#netty-官网说明" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-官网说明"></a> Netty 官网说明</h3>      <p>官网：<span class="exturl"><a class="exturl__link"   href="https://netty.io/" >https://netty.io/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p></blockquote><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter04_01.png" alt="img" /></p>        <h3 id="netty-的优点"   >          <a href="#netty-的优点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-的优点"></a> Netty 的优点</h3>      <p><code>Netty</code> 对 <code>JDK</code> 自带的 <code>NIO</code> 的 <code>API</code> 进行了封装，解决了上述问题。</p><ul><li>设计优雅：适用于各种传输类型的统一 <code>API</code> 阻塞和非阻塞 <code>Socket</code>；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。</li><li>使用方便：详细记录的 <code>Javadoc</code>，用户指南和示例；没有其他依赖项，<code>JDK5（Netty3.x）</code>或 <code>6（Netty4.x）</code>就足够了。</li><li>高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。</li><li>安全：完整的 <code>SSL/TLS</code> 和 <code>StartTLS</code> 支持。</li><li>社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 <code>Bug</code> 可以被及时修复，同时，更多的新功能会被加入。</li></ul>        <h3 id="netty-版本说明"   >          <a href="#netty-版本说明" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-版本说明"></a> Netty 版本说明</h3>      <p><code>Netty</code> 版本分为 <code>Netty 3.x</code> 和 <code>Netty 4.x</code>、<code>Netty 5.x</code>。目前推荐使用的是 <code>Netty 4.x</code>的稳定版本。</p><span id="more"></span><blockquote><p>博客参考：<span class="exturl"><a class="exturl__link"   href="https://dongzl.github.io/netty-handbook/#/_content/chapter01" >https://dongzl.github.io/netty-handbook/#/_content/chapter01</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="netty-高性能架构设计"   >          <a href="#netty-高性能架构设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-高性能架构设计"></a> Netty 高性能架构设计</h2>              <h3 id="线程模型基本介绍"   >          <a href="#线程模型基本介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程模型基本介绍"></a> 线程模型基本介绍</h3>      <p>目前存在的线程模型有：传统阻塞 <code>I/O</code> 服务模型 <code>Reactor</code> 模式。</p><p>根据 <code>Reactor</code> 的数量和处理资源池线程的数量不同，有 <code>3</code> 种典型的实现：</p><ul><li>单 <code>Reactor</code> 单线程；</li><li>单 <code>Reactor</code>多线程；</li><li>主从 <code>Reactor</code>多线程</li></ul><p><code>Netty</code> 线程模式主要基于<strong>主从 <code>Reactor</code> 多线程模型</strong>做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>        <h3 id="传统阻塞-io-服务模型"   >          <a href="#传统阻塞-io-服务模型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#传统阻塞-io-服务模型"></a> 传统阻塞 I/O 服务模型</h3>      <p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_01.png" alt="img" /></p><p>黄色的框表示对象，蓝色的框表示线程，白色的框表示方法（<code>API</code>）</p><p>模型特点：</p><ul><li>采用阻塞 <code>IO</code> 模式获取输入的数据</li><li>每个连接都需要独立的线程完成数据的输入，业务处理，数据返回</li></ul><p>问题分析：</p><ul><li>当并发数很大，就会创建大量的线程，占用很大系统资源</li><li>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 <code>read</code> 操作，造成线程资源浪费</li></ul>        <h3 id="reactor-模式"   >          <a href="#reactor-模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#reactor-模式"></a> Reactor 模式</h3>      <p>针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：</p><ol><li><strong>基于 <code>I/O</code> 复用模型</strong>：<strong>多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接</strong>。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理 <code>Reactor</code> 对应的叫法：<ul><li>反应器模式</li><li>分发者模式（Dispatcher）</li><li>通知者模式（notifier）</li></ul></li><li><strong>基于线程池复用线程资源</strong>：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。</li></ol><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_02.png" alt="img" /></p><p>I/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_03.png" alt="img" /></p><p>对上图说明：</p><ul><li><code>Reactor</code> 模式，通过一个或多个输入同时传递给服务处理器的模式（基于事件驱动）</li><li>服务器端程序处理传入的多个请求，并将它们同步分派到相应的处理线程，因此 <code>Reactor</code> 模式也叫 <code>Dispatcher</code> 模式</li><li><code>Reactor</code> 模式使用 <code>IO</code> 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键</li></ul>        <h3 id="reactor-模式中核心组成"   >          <a href="#reactor-模式中核心组成" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#reactor-模式中核心组成"></a> Reactor 模式中核心组成</h3>      <p><code>Reactor</code>：<code>Reactor</code> 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 <code>IO</code> 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人。</p><p><code>Handlers</code>：处理程序执行 <code>I/O</code> 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。<code>Reactor</code> 通过调度适当的处理程序来响应 <code>I/O</code> 事件，处理程序执行非阻塞操作。</p>        <h3 id="reactor-模式分类"   >          <a href="#reactor-模式分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#reactor-模式分类"></a> Reactor 模式分类</h3>      <p>根据 <code>Reactor</code> 的数量和处理资源池线程的数量不同，有 <code>3</code> 种典型的实现</p><ul><li>单 <code>Reactor</code> 单线程</li><li>单 <code>Reactor</code> 多线程</li><li>主从 <code>Reactor</code> 多线程</li></ul>        <h3 id="单-reactor-单线程"   >          <a href="#单-reactor-单线程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#单-reactor-单线程"></a> 单 Reactor 单线程</h3>      <p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_04.png" alt="img" /></p><ul><li><code>Select</code> 是前面 <code>I/O</code> 复用模型介绍的标准网络编程 <code>API</code>，可以实现应用程序通过一个阻塞对象监听多路连接请求</li><li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后通过 <code>Dispatch</code> 进行分发</li><li>如果是建立连接请求事件，则由 <code>Acceptor</code> 通过 <code>Accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理连接完成后的后续业务处理</li><li>如果不是建立连接事件，则 <code>Reactor</code> 会分发调用连接对应的 <code>Handler</code> 来响应</li><li><code>Handler</code> 会完成 <code>Read</code> → 业务处理 → <code>Send</code> 的完整业务流程</li></ul><p>结合实例：服务器端用一个线程通过多路复用搞定所有的 <code>IO</code> 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，<strong>NIO 就属于这种模型</strong>。</p><p>优缺点分析：</p><ul><li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li><li>缺点：性能问题，只有一个线程，无法完全发挥多核 <code>CPU</code> 的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li><li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li></ul><p>使用场景：客户端的数量有限，业务处理非常快速，比如 <code>Redis</code> 在业务处理的时间复杂度 <code>O(1)</code> 的情况</p>        <h3 id="单-reactor-多线程"   >          <a href="#单-reactor-多线程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#单-reactor-多线程"></a> 单 Reactor 多线程</h3>      <p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_05.png" alt="img" /></p><ul><li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后，通过 <code>Dispatch</code> 进行分发</li><li>如果建立连接请求，则右 <code>Acceptor</code> 通过 <code>accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理完成连接后的各种事件</li><li>如果不是连接请求，则由 <code>Reactor</code> 分发调用连接对应的 <code>handler</code> 来处理</li><li><code>handler</code> 只负责响应事件，不做具体的业务处理，通过 <code>read</code> 读取数据后，会分发给后面的 <code>worker</code> 线程池的某个线程处理业务</li><li><code>worker</code> 线程池会分配独立线程完成真正的业务，并将结果返回给 <code>handler</code></li><li><code>handler</code> 收到响应后，通过 <code>send</code> 将结果返回给 <code>client</code></li></ul><p>优缺点分析：</p><ul><li>优点：可以充分利用多核 <code>cpu</code> 的处理能力</li><li>缺点：多线程数据共享和访问比较复杂，<code>Reactor</code> 处理所有的事件的监听和响应，在单线程运行，在高并发场景容易出现性能瓶颈。</li></ul>        <h3 id="主从-reactor-多线程"   >          <a href="#主从-reactor-多线程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主从-reactor-多线程"></a> 主从 Reactor 多线程</h3>      <p>针对单 <code>Reactor</code> 多线程模型中，<code>Reactor</code> 在单线程中运行，高并发场景下容易成为性能瓶颈，<strong>可以让 <code>Reactor</code> 在多线程中运行</strong>：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_06.png" alt="img" /></p><ul><li><code>Reactor</code> 主线程 <code>MainReactor</code> 对象通过 <code>select</code> 监听连接事件，收到事件后，通过 <code>Acceptor</code> 处理连接事件</li><li>当 <code>Acceptor</code> 处理连接事件后，<code>MainReactor</code> 将连接分配给 <code>SubReactor</code></li><li><code>subreactor</code> 将连接加入到连接队列进行监听，并创建 <code>handler</code> 进行各种事件处理</li><li>当有新事件发生时，<code>Subreactor</code> 就会调用对应的 <code>handler</code> 处理</li><li><code>handler</code> 通过 <code>read</code> 读取数据，分发给后面的 <code>worker</code> 线程处理</li><li><code>worker</code> 线程池分配独立的 <code>worker</code> 线程进行业务处理，并返回结果</li><li><code>handler</code> 收到响应的结果后，再通过 <code>send</code> 将结果返回给 <code>client</code></li><li><code>Reactor</code> 主线程可以对应多个 <code>Reactor</code> 子线程，即 <code>MainRecator</code> 可以关联多个 <code>SubReactor</code></li></ul><p>Scalable IO in Java 对 Multiple Reactors 的原理图解：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_07.png" alt="img" /></p><p>优缺点说明：</p><ul><li>优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</li><li>优点：父线程与子线程的数据交互简单，<code>Reactor</code> 主线程只需要把新连接传给子线程，子线程无需返回数据。</li><li>缺点：编程复杂度较高</li></ul><p>结合实例：这种模型在许多项目中广泛使用，包括 <code>Nginx</code> 主从 <code>Reactor</code> 多进程模型，<code>Memcached</code> 主从多线程，<code>Netty</code> 主从多线程模型的支持</p>        <h3 id="reactor-模式小结"   >          <a href="#reactor-模式小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#reactor-模式小结"></a> Reactor 模式小结</h3>      <p>3 种模式用生活案例来理解：</p><ul><li>单 <code>Reactor</code> 单线程，前台接待员和服务员是同一个人，全程为顾客服务</li><li>单 <code>Reactor</code> 多线程，<code>1</code> 个前台接待员，多个服务员，接待员只负责接待</li><li>主从 <code>Reactor</code> 多线程，多个前台接待员，多个服务生</li></ul><p>Reactor 模式具有如下的优点：</p><ul><li>响应快，不必为单个同步时间所阻塞，虽然 <code>Reactor</code> 本身依然是同步的</li><li>可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li><li>扩展性好，可以方便的通过增加 <code>Reactor</code> 实例个数来充分利用 <code>CPU</code> 资源</li><li>复用性好，<code>Reactor</code> 模型本身与具体事件处理逻辑无关，具有很高的复用性</li></ul>        <h2 id="netty-模型"   >          <a href="#netty-模型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-模型"></a> Netty 模型</h2>              <h3 id="netty-模型工作原理图"   >          <a href="#netty-模型工作原理图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-模型工作原理图"></a> Netty 模型工作原理图</h3>      <p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_09.png" alt="img" /></p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_10.png" alt="img" /></p><ul><li><code>Netty</code> 抽象出两组线程池： <code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写。<code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code></li><li><code>NioEventLoopGroup</code> 相当于一个<strong>事件循环组</strong>，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code>。</li><li><strong><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯，该Selector会一直循环查询哪个注册过的Channel有就绪的I/O事件（与NIO原理相同）</strong></li><li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code></li></ul><p>每个<strong>BossNioEventLoop</strong>循环执行的步骤：</p><ul><li>轮询 <code>accept</code> 事件</li><li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>Worker</code> 的<code>NIOEventLoop</code> 中的 <code>Selector</code>上</li><li>处理任务队列的任务，即 <code>runAllTasks</code></li></ul><p>每个<strong>WorkerNIOEventLoop</strong>循环执行的步骤：</p><ul><li>轮询 <code>read</code>，<code>write</code> 事件</li><li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li><li>处理任务队列的任务，即 <code>runAllTasks</code></li></ul><p>每个 <code>Worker</code> 的<code>NIOEventLoop</code> 在处理业务时，会使用 <code>Pipeline</code>（管道），每个<code>Pipeline</code> 都对应了一个 <code>Channel</code>，即通过 <code>Pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器<code>Handler</code>，在管道内按照处理器的注册顺序执行这些处理器，直到所有处理器执行完毕。</p><p>总结：</p><ul><li><code>Netty</code> 抽象出两组线程池，<strong>BossGroup</strong>专门负责接收客户端连接，<strong>WorkerGroup</strong>专门负责网络读写操作。这两组线程池都是<strong>NioEventLoopGroup</strong>类型。</li><li><strong>NioEventLoop</strong>表示一个不断循环执行处理任务的<strong>线程</strong>，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code>网络通道。</li><li><code>NioEventLoop</code> 内部采用<strong>串行化</strong>设计，从消息的 <strong>读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送</strong>，始终由 <code>IO</code> 线程 <code>NioEventLoop</code> 负责</li></ul><p><strong>NioEventLoopGroup</strong>下包含多个 <strong>NioEventLoop</strong></p><ul><li>每个 <code>NioEventLoop</code> 中包含有一个 <code>Selector</code>，一个 <code>taskQueue</code></li><li>每个 <code>NioEventLoop</code> 的 <code>Selector</code> 上可以注册监听多个 <code>NioChannel</code></li><li>每个 <code>NioChannel</code> 只会绑定在唯一的 <code>NioEventLoop</code> 上</li><li>每个 <code>NioChannel</code> 都绑定有一个自己的 <code>ChannelPipeline</code></li></ul><p><code>Pipeline</code>中<code>Handler</code>执行顺序：</p><p><code>Pipeline</code>双向链表中维护了一些<code>ChannelHandlerContext</code>，每个<code>ChannelHandlerContext</code>维护了一个<code>Handler</code>。每个<code>ChannelHandlerContext</code>都维护了两个属性<code>inbound/outbound(boolean)</code>，其代表了当前<code>Handler</code>属于入站/出站类型。这样在<code>Pipeline</code>中不同类型的<code>Handler</code>就能区分开，从而互不干扰的工作：</p><p><code>Socket</code>收到消息后，入站事件在<code>Pipeline</code>中按照 <code>head -&gt; tail</code> 的顺序依次通过入站类型的<code>Handler</code>（不通过出站类型的），全部入站类型的<code>Handler</code>执行完毕后再按照 <code>tail -&gt; head</code> 的顺序依次通过出站类型的<code>Handler</code>，最后通过Socket发出出站消息。</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_01.png" alt="img" /></p><p>上图中各个核心组件的分析见[Netty 核心组件](##Netty 核心组件)章节</p>        <h3 id="netty-快速入门实例-tcp-服务"   >          <a href="#netty-快速入门实例-tcp-服务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-快速入门实例-tcp-服务"></a> Netty 快速入门实例 - TCP 服务</h3>      <p>实例要求：</p><ol><li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，客户端能发送消息给服务器<code>&quot;hello, 服务器~&quot;</code></li><li>服务器可以回复消息给客户端<code>&quot;hello, 客户端~&quot;</code></li></ol><p><code>NettyServer.java</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFutureListener;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BossGroup 和 WorkerGroup</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class="line">        <span class="comment">//2. bossGroup 只是处理连接请求, 真正的和客户端业务处理，会交给 workerGroup完成</span></span><br><span class="line">        <span class="comment">//3. 两个都是无限循环</span></span><br><span class="line">        <span class="comment">//4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span></span><br><span class="line">        <span class="comment">//   默认实际 cpu核数 * 2</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//默认为cpu核数 * 2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//使用链式编程来进行设置</span></span><br><span class="line">            bootstrap.group(bossGroup, workerGroup) <span class="comment">//设置两个线程组</span></span><br><span class="line">                .channel(NioServerSocketChannel.class) <span class="comment">//使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>) <span class="comment">//设置保持活动连接状态</span></span><br><span class="line">                <span class="comment">//.handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class="comment">//创建一个通道初始化对象(匿名对象)</span></span><br><span class="line">                    <span class="comment">//给pipeline 设置处理器</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户socketchannel hashcode=&quot;</span> + ch.hashCode()); <span class="comment">//可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;); <span class="comment">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class="line">            <span class="comment">//启动服务器(并绑定端口)</span></span><br><span class="line">            ChannelFuture cf = bootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给cf注册监听器，监控我们关心的事件</span></span><br><span class="line"></span><br><span class="line">            cf.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cf.isSuccess()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>NettyServerHandler.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明</span></span><br><span class="line"><span class="comment"> * 1. 我们自定义一个Handler 需要继承netty规定好的某个HandlerAdapter(规范)</span></span><br><span class="line"><span class="comment"> * 2. 这时我们自定义一个Handler, 才能称为一个handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. ChannelHandlerContext ctx:上下文对象, 含有管道pipeline, 通道channel, 地址等信息；</span></span><br><span class="line"><span class="comment">     每一个处理器Handler都有一个对应的ChannelHandlerContext，其内保存了上一个Context：prev和下一个Context：next </span></span><br><span class="line"><span class="comment">     * 2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器读取线程 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; channle =&quot;</span> + ctx.channel());</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx =&quot;</span> + ctx);</span><br><span class="line">        System.out.println(<span class="string">&quot;看看channel 和 pipeline的关系&quot;</span>);</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        ChannelPipeline pipeline = ctx.pipeline(); <span class="comment">//本质是一个双向链接, 出站入站</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 msg 转成一个 ByteBuf</span></span><br><span class="line">        <span class="comment">//ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息是:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址:&quot;</span> + channel.remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据读取完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//writeAndFlush 是 write + flush</span></span><br><span class="line">        <span class="comment">//将数据写入到缓存，并刷新</span></span><br><span class="line">        <span class="comment">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常, 一般是需要关闭通道</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>NettyClient.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            <span class="comment">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(group) <span class="comment">//设置线程组</span></span><br><span class="line">                .channel(NioSocketChannel.class) <span class="comment">// 设置客户端通道的实现类(反射)</span></span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler()); <span class="comment">//加入自己的处理器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;客户端 ok..&quot;</span>);</span><br><span class="line">            <span class="comment">//启动客户端去连接服务器端</span></span><br><span class="line">            <span class="comment">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line">            <span class="comment">//给关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>NettyClientHandler.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> + ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, server: (&gt;^ω^&lt;)喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通道有读取事件时，会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址： &quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="任务队列"   >          <a href="#任务队列" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#任务队列"></a> 任务队列</h3>      <p>任务队列中的 Task 有 3 种典型使用场景</p><ol><li>用户程序自定义的普通任务</li><li>用户自定义定时任务</li><li>非当前 <code>Reactor</code> 线程调用 <code>Channel</code> 的各种方法。例如在推送系统的业务线程里面，根据用户的标识，找到对应的 <code>Channel</code> 引用，然后调用 <code>Write</code> 类方法向该用户推送消息，就会进入到这种场景。最终的 <code>Write</code> 会提交到任务队列中后被异步消费</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明</span></span><br><span class="line"><span class="comment"> * 1. 我们自定义一个Handler 需要继承netty规定好的某个HandlerAdapter(规范)</span></span><br><span class="line"><span class="comment"> * 2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class="line"><span class="comment">     * 2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比如这里我们有一个非常耗时长的业务-&gt; 异步执行 -&gt; 提交该channel对应的</span></span><br><span class="line">        <span class="comment">// NIOEventLoop 到 taskQueue中,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解决方案1：用户程序自定义的普通任务</span></span><br><span class="line">        ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, 客户端~(&gt;^ω^&lt;)喵2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">                    System.out.println(<span class="string">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, 客户端~(&gt;^ω^&lt;)喵3&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">                    System.out.println(<span class="string">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决方案2: 用户自定义定时任务 -&gt; 该任务提交到scheduleTaskQueue中</span></span><br><span class="line">        ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, 客户端~(&gt;^ω^&lt;)喵4&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">                    System.out.println(<span class="string">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;go on ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据读取完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//writeAndFlush 是 write + flush</span></span><br><span class="line">        <span class="comment">//将数据写入到缓存，并刷新</span></span><br><span class="line">        <span class="comment">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常, 一般是需要关闭通道</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="netty-异步模型"   >          <a href="#netty-异步模型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-异步模型"></a> Netty 异步模型</h3>      <p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</p><p><strong><code>Netty</code> 中的 <code>I/O</code> 操作是异步的</strong>，包括 <code>Bind、Write、Connect</code> 等操作会简单的返回一个 <code>ChannelFuture</code>。调用者并不能立刻获得结果，而是通过 <strong>Future-Listener</strong> 机制，用户可以方便的主动获取或者通过通知机制获得 <code>IO</code> 操作结果。</p><p><code>Netty</code> 的异步模型是建立在 <code>Future</code> 和 <code>Callback</code> 的之上的。<code>callback</code> 就是回调。重点说 <code>Future</code>，它的核心思想是：假设一个方法 <code>fun</code>，计算过程可能非常耗时，等待 <code>fun</code> 返回显然不合适。那么可以在调用 <code>fun</code> 的时候，立马返回一个 <code>Future</code>，后续可以通过 <code>Future</code> 去监控方法 <code>fun</code> 的处理过程（即：<code>Future-Listener</code> 机制）</p><p><code>Future</code> 说明：</p><ul><li>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成，比如检索计算等等。</li><li><code>ChannelFuture</code> 是一个接口：<code>public interface ChannelFuture extends Future&lt;void&gt;</code> 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。</li></ul><p>工作原理示意图：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_11.png" alt="img" /></p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter05_12.png" alt="img" /></p><p>说明：</p><ul><li>在使用 <code>Netty</code> 进行编程时，拦截操作和转换出入站数据只需要提供 <code>Callback</code> 或利用 <code>Future</code> 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。</li><li><code>Netty</code> 框架的目标就是让业务逻辑从网络基础应用编码中分离出来、解脱出来。</li></ul>        <h3 id="future-listener-机制"   >          <a href="#future-listener-机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#future-listener-机制"></a> Future-Listener 机制</h3>      <p>当 <code>Future</code> 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 <code>ChannelFuture</code> 来获取操作执行的状态，注册监听函数来执行完成后的操作。</p><p>常见有如下操作：</p><ul><li>通过 <code>isDone</code> 方法来判断当前操作是否完成；</li><li>通过 <code>isSuccess</code> 方法来判断已完成的当前操作是否成功；</li><li>通过 <code>getCause</code> 方法来获取已完成的当前操作失败的原因；</li><li>通过 <code>isCancelled</code> 方法来判断已完成的当前操作是否被取消；</li><li>通过 <code>addListener</code> 方法来注册监听器，当操作已完成（<code>isDone</code>方法返回完成），将会通知指定的监听器；如果 <code>Future</code> 对象已完成，则通知指定的监听器</li></ul><p>举例说明：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定一个端口并且同步,生成了一个ChannelFuture对象</span></span><br><span class="line"><span class="comment">//启动服务器(并绑定端口)</span></span><br><span class="line">ChannelFuture cf = bootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"><span class="comment">//给cf注册监听器，监控我们关心的事件</span></span><br><span class="line">cf.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span> <span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cf.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;监听端口6668成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;监听端口6668失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="netty-快速入门实例-http服务"   >          <a href="#netty-快速入门实例-http服务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-快速入门实例-http服务"></a> Netty 快速入门实例 - HTTP服务</h3>      <ol><li>实例要求：使用 <code>IDEA</code> 创建 <code>Netty</code> 项目</li><li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，浏览器发出请求 <code>http://localhost:6668/</code></li><li>服务器可以回复消息给客户端<code>&quot;Hello!我是服务器5&quot;</code>,并对特定请求资源进行过滤。</li></ol><p><code>TestServer.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>TestServerInitializer.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//向管道加入处理器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="comment">//得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入一个netty提供的httpServerCodec codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">//HttpServerCodec 说明</span></span><br><span class="line">        <span class="comment">//1. HttpServerCodec是netty提供的处理http的编-解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//2. 增加一个自定义的handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestHttpServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>TestHttpServerHandler.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明</span></span><br><span class="line"><span class="comment"> * 1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter</span></span><br><span class="line"><span class="comment"> * 2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//channelRead0 读取客户端数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;对应的channel=&quot;</span> + ctx.channel() + <span class="string">&quot; pipeline=&quot;</span> + ctx</span><br><span class="line">                           .pipeline() + <span class="string">&quot; 通过pipeline获取channel&quot;</span> + ctx.pipeline().channel());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前ctx的handler=&quot;</span> + ctx.handler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断 msg 是不是 httprequest请求</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;ctx 类型=&quot;</span> + ctx.getClass());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;pipeline hashcode&quot;</span> + ctx.pipeline().hashCode() + <span class="string">&quot; TestHttpServerHandler hash=&quot;</span> + <span class="keyword">this</span>.hashCode());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;msg 类型=&quot;</span> + msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端地址&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class="line">            <span class="comment">//获取uri, 过滤指定的资源</span></span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请求了 favicon.ico, 不做响应&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回复信息给浏览器 [http协议]</span></span><br><span class="line"></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello, 我是服务器&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造一个http的相应，即 httpresponse</span></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line"></span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将构建好 response返回</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="netty-核心组件"   >          <a href="#netty-核心组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-核心组件"></a> Netty 核心组件</h2>              <h3 id="bootstrap-serverbootstrap"   >          <a href="#bootstrap-serverbootstrap" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bootstrap-serverbootstrap"></a> Bootstrap、ServerBootstrap</h3>      <p><code>Bootstrap</code> 意思是引导，一个 <code>Netty</code> 应用通常由一个 <code>Bootstrap</code> 开始，主要作用是配置整个 <code>Netty</code> 程序，串联各个组件，<code>Netty</code> 中 <code>Bootstrap</code> 类是客户端程序的启动引导类，<code>ServerBootstrap</code> 是服务端启动引导类。</p><p><code>Bootstrap</code> 常见的方法有：</p><ul><li><code>public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</code>，该方法用于服务器端，用来设置两个 <code>EventLoop</code></li><li><code>public B group(EventLoopGroup group)</code>，该方法用于客户端，用来设置一个 <code>EventLoop</code></li><li><code>public B channel(Class&lt;? extends C&gt; channelClass)</code>，该方法用来设置一个服务器端的通道实现</li><li><code>public &lt;T&gt; B option(ChannelOption&lt;T&gt; option, T value)</code>，用来给 <code>ServerChannel</code> 添加配置</li><li><code>public &lt;T&gt; ServerBootstrap childOption(ChannelOption&lt;T&gt; childOption, T value)</code>，用来给接收到的通道添加配置</li><li><code>public ServerBootstrap childHandler(ChannelHandler childHandler)</code>，该方法用来设置业务处理类（自定义的<code>handler</code>）</li><li><code>public ChannelFuture bind(int inetPort)</code>，该方法用于服务器端，用来设置占用的端口号</li><li><code>public ChannelFuture connect(String inetHost, int inetPort)</code>，该方法用于客户端，用来连接服务器端</li></ul>        <h3 id="future-channelfuture"   >          <a href="#future-channelfuture" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#future-channelfuture"></a> Future、ChannelFuture</h3>      <p><code>Netty</code> 中所有的 <code>IO</code> 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 <code>Future</code> 和 <code>ChannelFutures</code>，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p><p>常见的方法有：</p><ul><li><code>Channel channel()</code>，返回当前正在进行 <code>IO</code> 操作的通道</li><li><code>ChannelFuture sync()</code>，等待异步操作执行完毕</li></ul>        <h3 id="channel"   >          <a href="#channel" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#channel"></a> Channel</h3>      <p><code>Channel</code>是<code>Netty</code> 网络通信的组件，能够用于执行网络 <code>I/O</code> 操作。通过 <code>Channel</code> 可获得当前网络连接的通道的状态和网络连接的配置参数（例如接收缓冲区大小）。</p><p><code>Channel</code> 提供异步的网络 <code>I/O</code> 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 <code>I/O</code> 调用都将立即返回，并且不保证在调用结束时所请求的 <code>I/O</code> 操作已完成。调用立即返回一个 <code>ChannelFuture</code> 实例，通过注册监听器到 <code>ChannelFuture</code> 上，可以 在<code>I/O</code> 操作成功、失败或取消时回调通知调用方</p><p>不同协议、不同的阻塞类型的连接都有不同的<code>Channel</code>类型与之对应，常用的<code>Channel</code>类型：</p><ul><li><code>NioSocketChannel</code>，异步的客户端 <code>TCP</code> <code>Socket</code> 连接。</li><li><code>NioServerSocketChannel</code>，异步的服务器端 <code>TCP</code> <code>Socket</code> 连接。</li><li><code>NioDatagramChannel</code>，异步的 <code>UDP</code> 连接。</li><li><code>NioSctpChannel</code>，异步的客户端 <code>Sctp</code> 连接。</li><li><code>NioSctpServerChannel</code>，异步的 <code>Sctp</code> 服务器端连接，这些通道涵盖了 <code>UDP</code> 和 <code>TCP</code> 网络 <code>IO</code> 以及文件 <code>IO</code>。</li></ul>        <h3 id="selector"   >          <a href="#selector" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#selector"></a> Selector</h3>      <p><code>Netty</code> 基于 <code>Selector</code> 对象实现 <code>I/O</code> 多路复用，通过 <code>Selector</code> 一个线程可以监听多个连接的 <code>Channel</code> 事件。</p><p>当向一个 <code>Selector</code> 中注册 <code>Channel</code> 后，<code>Selector</code> 内部的机制就可以自动不断地查询（<code>Select</code>）这些注册的 <code>Channel</code> 是否有已就绪的 <code>I/O</code> 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 <code>Channel</code></p>        <h3 id="channelhandler-及其实现类"   >          <a href="#channelhandler-及其实现类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#channelhandler-及其实现类"></a> ChannelHandler 及其实现类</h3>      <p><code>ChannelHandler</code> 是一个接口，处理 <code>I/O</code> 事件或拦截 <code>I/O</code> 操作，并将其转发到其 <code>ChannelPipeline</code>（业务处理链）中的下一个处理程序。</p><p><code>ChannelHandler</code> 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类。<code>ChannelHandler</code> 及其实现类一览图：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_01.png" alt="img" /></p><p>我们经常需要自定义一个 <code>Handler</code> 类去继承 <code>ChannelInboundHandlerAdapter</code>，同时根据该处理器传入的参数对象类型指定相应的<code>泛型&lt;&gt;</code>。例如处理<code>String</code>的<code>Handler</code>需要在泛型中指定<code>&lt;String&gt;</code>；处理<code>HttpObject</code>的<code>Handler</code>需要在泛型中指定<code>&lt;HttpObject&gt;</code>。</p><p>然后通过重写相应方法实现业务逻辑，一般都需要重写：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_02.png" alt="img" /></p>        <h3 id="pipeline-和-channelpipeline"   >          <a href="#pipeline-和-channelpipeline" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pipeline-和-channelpipeline"></a> Pipeline 和 ChannelPipeline</h3>      <p><strong><code>ChannelPipeline</code> 是一个 <code>Handler</code> 的集合</strong>，它负责处理和拦截 <code>inbound</code> 或者 <code>outbound</code> 的事件和操作，相当于一个贯穿 <code>Netty</code> 的链。（也可以这样理解：<code>ChannelPipeline</code> 是保存 <code>ChannelHandler</code> 的 <code>List</code>，用于处理或拦截 <code>Channel</code> 的入站事件和出站操作）</p><p><code>ChannelPipeline</code> 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 <code>Channel</code> 中各个的 <code>ChannelHandler</code> 如何相互交互</p><p>在 <code>Netty</code> 中每个 <code>Channel</code> 都有且仅有一个 <code>ChannelPipeline</code> 与之对应，它们的组成关系如下：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_03.png" alt="img" /></p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_04.png" alt="img" /></p><p><strong>入事件和出站事件在一个双向链表中，入站事件会从链表head往后传递到最后一个入站的handler，出站事件会从链表tail往前传递到最前一个出站的handler，两种类型的handler互不干扰。</strong></p><p>常用方法：</p><ul><li><code>ChannelPipeline addFirst(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的第一个位置</li><li><code>ChannelPipeline addLast(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的最后一个位置</li></ul><p><code>Pipeline</code>双向链表中维护了一些<code>ChannelHandlerContext</code>，每个<code>ChannelHandlerContext</code>维护了一个<code>Handler</code>。每个<code>ChannelHandlerContext</code>都维护了两个属性<code>inbound/outbound(boolean)</code>，其代表了当前<code>Handler</code>属于入站/出站类型。这样在<code>Pipeline</code>中不同类型的<code>Handler</code>就能区分开，从而互不干扰的工作：</p><p><code>Socket</code>收到消息后，入站事件在<code>Pipeline</code>中按照 <code>head -&gt; tail</code> 的顺序依次通过入站类型的<code>Handler</code>（不通过出站类型的），全部入站类型的<code>Handler</code>执行完毕后再按照 <code>tail -&gt; head</code> 的顺序依次通过出站类型的<code>Handler</code>，最后通过Socket发出出站消息。</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_01.png" alt="img" /></p>        <h3 id="channelhandlercontext"   >          <a href="#channelhandlercontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#channelhandlercontext"></a> ChannelHandlerContext</h3>      <p><code>ChannelHandlerContext</code>用于保存 <code>Channel</code> 相关的所有上下文信息，同时关联一个 <code>ChannelHandler</code> 对象。即 <code>ChannelHandlerContext</code> 中包含一个具体的事件处理器 <code>ChannelHandler</code>。</p><p><code>Pipeline</code>双向链表中维护了一些<code>ChannelHandlerContext</code>，每个<code>ChannelHandlerContext</code>维护了一个<code>Handler</code>。每个<code>ChannelHandlerContext</code>都维护了两个属性<code>inbound/outbound(boolean)</code>，其代表了当前<code>Handler</code>属于入站/出站类型。这样在<code>Pipeline</code>中不同类型的<code>Handler</code>就能区分开，从而互不干扰的工作。</p><p>同时 <code>ChannelHandlerContext</code> 中也绑定了对应的 <code>Pipeline</code> 和 <code>Channel</code> 的信息，方便对 <code>ChannelHandler</code> 进行调用。</p><p>每一个处理器<code>Handler</code>都有一个对应的<code>ChannelHandlerContext</code>，其内保存了上一个<code>ChannelHandlerContext：prev</code>和下一个<code>ChannelHandlerContext：next</code></p><p>常用方法：</p><ul><li><code>ChannelFuture close()</code>，关闭通道</li><li><code>ChannelOutboundInvoker flush()</code>，刷新</li><li><code>ChannelFuture writeAndFlush(Object msg)</code>，将数据写到<code>ChannelPipeline</code> 中当前 <code>ChannelHandler</code> 的下一个 <code>ChannelHandler</code> 开始处理（出站）</li></ul><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_05.png" alt="img" /></p>        <h3 id="channeloption"   >          <a href="#channeloption" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#channeloption"></a> ChannelOption</h3>      <p><code>Netty</code> 在创建 <code>Channel</code> 实例后，一般都需要设置 <code>ChannelOption</code> 参数。<code>ChannelOption</code> 参数如下：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_06.png" alt="img" /></p>        <h3 id="eventloopgroup-和其实现类-nioeventloopgroup"   >          <a href="#eventloopgroup-和其实现类-nioeventloopgroup" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#eventloopgroup-和其实现类-nioeventloopgroup"></a> EventLoopGroup 和其实现类 NioEventLoopGroup</h3>      <p><code>EventLoopGroup</code> 是一组 <code>EventLoop</code> 的抽象，<code>Netty</code> 为了更好的利用多核 <code>CPU</code> 资源，一般会有多个 <code>EventLoop</code> 同时工作，每个 <code>EventLoop</code> 维护着一个 <code>Selector</code> 实例。</p><p><code>EventLoopGroup</code> 提供 <code>next</code> 接口，可以从组里面按照一定规则获取其中一个 <code>EventLoop</code> 来处理任务。在 <code>Netty</code> 服务器端编程中，我们一般都需要提供两个 <code>EventLoopGroup</code>，例如：<code>BossEventLoopGroup</code> 和 <code>WorkerEventLoopGroup</code>。</p><p>通常一个服务端口即一个 <code>ServerSocketChannel</code> 对应一个 <code>Selector</code> 和一个 <code>EventLoop</code> 线程。<code>BossEventLoop</code> 负责接收客户端的连接并将 <code>SocketChannel</code> 交给 <code>WorkerEventLoopGroup</code> 来进行 <code>IO</code> 处理，如下图所示</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_07.png" alt="img" /></p><p>常用方法 <code>public NioEventLoopGroup()</code>，构造方法 <code>public Future&lt;?&gt; shutdownGracefully()</code>，断开连接，关闭线程</p>        <h3 id="unpooled-类"   >          <a href="#unpooled-类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#unpooled-类"></a> Unpooled 类</h3>      <p><code>Netty</code> 提供一个专门用来操作缓冲区（即 <code>Netty</code> 的数据容器）的工具类。常用方法如下：</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_08.png" alt="img" /></p><p>举例说明 <code>Unpooled</code> 获取 <code>Netty</code> 的数据容器 <code>ByteBuf</code> 的基本使用</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_09.png" alt="img" /></p><p>案例 1</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.buf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个ByteBuf</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. 创建 对象，该对象包含一个数组arr , 是一个byte[10]</span></span><br><span class="line">        <span class="comment">//2. 在netty 的buffer中，不需要使用flip 进行反转</span></span><br><span class="line">        <span class="comment">//   底层维护了 readerindex 和 writerIndex</span></span><br><span class="line">        <span class="comment">//3. 通过 readerindex 和  writerIndex 和  capacity， 将buffer分成三个区域</span></span><br><span class="line">        <span class="comment">// 0---readerindex 已经读取的区域</span></span><br><span class="line">        <span class="comment">// readerindex---writerIndex ， 可读的区域</span></span><br><span class="line">        <span class="comment">// writerIndex -- capacity, 可写的区域</span></span><br><span class="line">        ByteBuf buffer = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            buffer.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;capacity=&quot;</span> + buffer.capacity());<span class="comment">//10</span></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="comment">//        for(int i = 0; i&lt;buffer.capacity(); i++) &#123;</span></span><br><span class="line">        <span class="comment">//            System.out.println(buffer.getByte(i));</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            System.out.println(buffer.readByte());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>案例 2</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.buf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyByteBuf02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ByteBuf</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello,world!&quot;</span>, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用相关的方法</span></span><br><span class="line">        <span class="keyword">if</span> (byteBuf.hasArray()) &#123; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] content = byteBuf.array();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将 content 转成字符串</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(content, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class="line"></span><br><span class="line">            System.out.println(byteBuf.arrayOffset()); <span class="comment">// 0</span></span><br><span class="line">            System.out.println(byteBuf.readerIndex()); <span class="comment">// 0</span></span><br><span class="line">            System.out.println(byteBuf.writerIndex()); <span class="comment">// 12</span></span><br><span class="line">            System.out.println(byteBuf.capacity()); <span class="comment">// 36</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println(byteBuf.readByte()); //</span></span><br><span class="line">            System.out.println(byteBuf.getByte(<span class="number">0</span>)); <span class="comment">// 104</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len = byteBuf.readableBytes(); <span class="comment">//可读的字节数  12</span></span><br><span class="line">            System.out.println(<span class="string">&quot;len=&quot;</span> + len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用for取出各个字节</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) byteBuf.getByte(i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//按照某个范围读取</span></span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">0</span>, <span class="number">4</span>, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line">            System.out.println(byteBuf.getCharSequence(<span class="number">4</span>, <span class="number">6</span>, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="netty-应用实例-群聊系统"   >          <a href="#netty-应用实例-群聊系统" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-应用实例-群聊系统"></a> Netty 应用实例-群聊系统</h3>      <p>实例要求：</p><ol><li>编写一个 <code>Netty</code> 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li><li>实现多人群聊</li><li>服务器端：可以监测用户上线，离线，并实现消息转发功能</li><li>客户端：通过 <code>channel</code> 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）</li></ol><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter06_10.png" alt="img" /></p><p>代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port; <span class="comment">//监听端口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写run方法，处理客户端的请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//8个NioEventLoop</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//获取到pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                        <span class="comment">//向pipeline加入解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        <span class="comment">//向pipeline加入编码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">//加入自己的业务处理handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;netty 服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public static List&lt;Channel&gt; channels = new ArrayList&lt;Channel&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用一个hashmap 管理</span></span><br><span class="line">    <span class="comment">//public static Map&lt;String, Channel&gt; channels = new HashMap&lt;String,Channel&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个channle 组，管理所有的channel</span></span><br><span class="line">    <span class="comment">//GlobalEventExecutor.INSTANCE) 是全局的事件执行器，是一个单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//handlerAdded 表示连接建立，一旦连接，第一个被执行</span></span><br><span class="line">    <span class="comment">//将当前channel 加入到  channelGroup</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//将该客户加入聊天的信息推送给其它在线的客户端</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        该方法会将 channelGroup 中所有的channel 遍历，并发送 消息，</span></span><br><span class="line"><span class="comment">        我们不需要自己遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot; 加入聊天&quot;</span> + sdf.format(<span class="keyword">new</span> java.util.Date()) + <span class="string">&quot; \n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开连接, 将xx客户离开信息推送给当前在线的客户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot; 离开了\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;channelGroup size&quot;</span> + channelGroup.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示channel 处于活动状态, 提示 xx上线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; 上线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示channel 处于不活动状态, 提示 xx离线了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot; 离线了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到当前channel</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//这时我们遍历channelGroup, 根据不同的情况，回送不同的消息</span></span><br><span class="line"></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) &#123; <span class="comment">//不是当前的channel,转发消息</span></span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot; 发送了消息&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//回显自己发送的消息给自己</span></span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[自己]发送了消息&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭通道</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                .group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//得到pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                        <span class="comment">//加入相关handler</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">//加入自定义的handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            <span class="comment">//得到channel</span></span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;-------&quot;</span> + channel.localAddress() + <span class="string">&quot;--------&quot;</span>);</span><br><span class="line">            <span class="comment">//客户端需要输入信息，创建一个扫描器</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">//通过channel 发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="netty-心跳检测机制"   >          <a href="#netty-心跳检测机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-心跳检测机制"></a> Netty 心跳检测机制</h3>      <p>使用空闲状态处理器<strong>IdleStateHandler</strong>发送读写空闲事件<strong>IdleStateEvent</strong>。当 <code>IdleStateEvent</code> 触发后，就会传递给管道的下一个<code>handler</code>去处理。通过调用（触发）下一个<code>handler</code> 的 <code>userEventTiggered()</code>方法 ，在该方法中去处理 <code>IdleStateEvent</code>（读空闲，写空闲，读写空闲）</p><p>实例要求：</p><ol><li>编写一个 <code>Netty</code> 心跳检测机制案例,当服务器超过 <code>3</code> 秒没有读时，就提示读空闲</li><li>当服务器超过 <code>5</code> 秒没有写操作时，就提示写空闲</li><li>实现当服务器超过 <code>7</code> 秒没有读或者写操作时，就提示读写空闲</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//8个NioEventLoop</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup);</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">            serverBootstrap.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO));</span><br><span class="line">            serverBootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                    <span class="comment">//加入一个netty 提供 IdleStateHandler</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    说明</span></span><br><span class="line"><span class="comment">                    1. IdleStateHandler 是netty 提供的处理空闲状态的处理器</span></span><br><span class="line"><span class="comment">                    2. long readerIdleTime : 表示多长时间没有读, 就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment">                    3. long writerIdleTime : 表示多长时间没有写, 就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment">                    4. long allIdleTime : 表示多长时间没有读写, 就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    5. 文档说明</span></span><br><span class="line"><span class="comment">                    triggers an &#123;@link IdleStateEvent&#125; when a &#123;@link Channel&#125; has not performed</span></span><br><span class="line"><span class="comment"> * read, write, or both operation for a while.</span></span><br><span class="line"><span class="comment"> *                  6. 当 IdleStateEvent 触发后, 就会传递给管道的下一个handler去处理</span></span><br><span class="line"><span class="comment"> *                  通过调用(触发)下一个handler 的 userEventTiggered , 在该方法中去处理 IdleStateEvent(读空闲，写空闲，读写空闲)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">7000</span>, <span class="number">7000</span>, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line">                    <span class="comment">//加入一个对空闲检测进一步处理的handler(自定义)</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">//将 evt 向下转型 IdleStateEvent</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;--超时时间--&quot;</span> + eventType);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器做相应处理..&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果发生空闲，我们关闭通道</span></span><br><span class="line">            <span class="comment">// ctx.channel().close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="netty-通过-websocket-编程实现服务器和客户端长连接"   >          <a href="#netty-通过-websocket-编程实现服务器和客户端长连接" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-通过-websocket-编程实现服务器和客户端长连接"></a> Netty 通过 WebSocket 编程实现服务器和客户端长连接</h3>      <blockquote><p>WebSocket介绍：<span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" >http://www.ruanyifeng.com/blog/2017/05/websocket.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>实例要求：</p><ol><li><code>Http</code> 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。</li><li>要求：实现基于 <code>WebSocket</code> 的长连接的全双工的交互</li><li>改变 <code>Http</code> 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器</li><li>客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//8个NioEventLoop</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup);</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">            serverBootstrap.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO));</span><br><span class="line">            serverBootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//因为基于http协议，使用http的编码和解码器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                    <span class="comment">//是以块方式写，添加ChunkedWriteHandler处理器</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    说明</span></span><br><span class="line"><span class="comment">                    1. http数据在传输过程中是分段, HttpObjectAggregator ，就是可以将多个段聚合</span></span><br><span class="line"><span class="comment">                    2. 这就就是为什么，当浏览器发送大量数据时，就会发出多次http请求</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    说明</span></span><br><span class="line"><span class="comment">                    1. 对应websocket ，它的数据是以 帧(frame) 形式传递</span></span><br><span class="line"><span class="comment">                    2. 可以看到WebSocketFrame 下面有六个子类</span></span><br><span class="line"><span class="comment">                    3. 浏览器请求时 ws://localhost:7000/hello 表示请求的uri</span></span><br><span class="line"><span class="comment">                    4. WebSocketServerProtocolHandler 核心功能是将 http协议升级为 ws协议 , 保持长连接</span></span><br><span class="line"><span class="comment">                    5. 是通过一个 状态码 101</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello2&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//自定义的handler ，处理业务逻辑</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> MyTextWebSocketFrameHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里 TextWebSocketFrame 类型，表示一个文本帧(frame)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到消息 &quot;</span> + msg.text());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回复消息</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">&quot;服务器时间&quot;</span> + LocalDateTime.now() + <span class="string">&quot; &quot;</span> + msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当web客户端连接后， 触发方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//id 表示唯一的值，LongText 是唯一的 ShortText 不是唯一</span></span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常发生 &quot;</span> + cause.getMessage());</span><br><span class="line">        ctx.close(); <span class="comment">//关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>hello.html</code></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断当前浏览器是否支持websocket</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">window</span>.WebSocket) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//go on</span></span></span><br><span class="line"><span class="javascript">                socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:7000/hello2&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//相当于channelReado, ev 收到服务器端回送的消息</span></span></span><br><span class="line"><span class="javascript">                socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + ev.data;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//相当于连接开启(感知到连接开启)</span></span></span><br><span class="line"><span class="javascript">                socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    rt.value = <span class="string">&quot;连接开启了..&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//相当于连接关闭(感知到连接关闭)</span></span></span><br><span class="line"><span class="javascript">                socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> rt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    rt.value = rt.value + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;连接关闭了..&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;当前浏览器不支持websocket&quot;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//发送消息到服务器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(!<span class="built_in">window</span>.socket) &#123; <span class="comment">//先判断socket是否创建好</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                if(socket.readyState == WebSocket.OPEN) &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">//通过socket 发送消息</span></span></span><br><span class="line">                    socket.send(message)</span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;连接没有开启&quot;</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px; width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发生消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;responseText&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 300px; width: 300px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空内容&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="google-protobuf"   >          <a href="#google-protobuf" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#google-protobuf"></a> Google Protobuf</h2>              <h3 id="编码和解码的基本介绍"   >          <a href="#编码和解码的基本介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#编码和解码的基本介绍"></a> 编码和解码的基本介绍</h3>      <p>编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码。</p><p><code>codec</code>（编解码器）的组成部分有两个：<code>decoder</code>（解码器）和 <code>encoder</code>（编码器）。<code>encoder</code> 负责把业务数据转换成字节码数据，<code>decoder</code> 负责把字节码数据转换成业务数据。</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter07_01.png" alt="img" /></p>        <h3 id="netty-本身的编码解码的机制和问题分析"   >          <a href="#netty-本身的编码解码的机制和问题分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-本身的编码解码的机制和问题分析"></a> Netty 本身的编码解码的机制和问题分析</h3>      <p><code>Netty</code> 自身提供了一些 <code>codec</code>(编解码器)：</p><ul><li><code>Netty</code> 提供的编码器 <code>StringEncoder</code>，对字符串数据进行编码 <code>ObjectEncoder</code>，对Java对象进行编码…</li><li><code>Netty</code> 提供的解码器 <code>StringDecoder</code>，对字符串数据进行解码 <code>ObjectDecoder</code>，对 <code>Java</code> 对象进行解码…</li><li><code>Netty</code> 本身自带的 <code>ObjectDecoder</code> 和 <code>ObjectEncoder</code> 可以用来实现 <code>POJO</code> 对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题<ul><li>无法跨语言</li><li>序列化后的体积太大，是二进制编码的5倍多。</li><li>序列化性能太低</li></ul></li></ul><p>引出新的解决方案：<code>Google</code> 的 <code>Protobuf</code></p>        <h3 id="protobuf"   >          <a href="#protobuf" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#protobuf"></a> Protobuf</h3>      <p><code>Protobuf</code> 是 <code>Google</code> 发布的开源项目，全称 <code>Google Protocol Buffers</code>，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 <code>RPC</code> [远程过程调用 <code>remote procedure call</code> ]数据交换格式。目前很多公司使用 <code>http + json tcp + protobuf</code></p><blockquote><p>参考文档：<span class="exturl"><a class="exturl__link"   href="https://developers.google.com/protocol-buffers/docs/proto" >https://developers.google.com/protocol-buffers/docs/proto</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 语言指南</p></blockquote><p><code>Protobuf</code> 是以 <code>message</code> 的方式来管理数据的。优点：</p><ul><li>支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 <code>C++</code>、<code>C#</code>、<code>Java</code>、<code>python</code> 等）</li><li>高性能，高可靠性</li><li>使用 <code>Protobuf</code> 编译器能自动生成代码，<code>Protobuf</code> 是将类的定义使用 <code>.proto</code> 文件进行描述。说明，在 <code>idea</code> 中编写 <code>.proto</code> 文件时，会自动提示是否下载 <code>.ptoto</code> 编写插件.可以让语法高亮。</li><li>然后通过 <code>protoc.exe</code> 编译器根据 <code>.proto</code> 自动生成 <code>.java</code> 文件</li></ul><p><code>Protobuf</code> 使用示意图</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter07_02.png" alt="img" /></p>        <h3 id="protobuf-快速入门实例"   >          <a href="#protobuf-快速入门实例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#protobuf-快速入门实例"></a> Protobuf 快速入门实例</h3>      <p>编写程序，使用 <code>Protobuf</code> 完成如下功能</p><ol><li>客户端可以发送一个 <code>StudentPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li><li>服务端能接收 <code>StudentPoJo</code> 对象，并显示信息(通过 <code>Protobuf</code> 解码)</li></ol><p><code>Student.proto</code>：</p><figure class="highlight protobuf"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//版本</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;StudentPOJO&quot;</span>; <span class="comment">// 生成的外部类名，同时也是文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// protobuf 使用message 管理数据</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123; <span class="comment">//会在 StudentPOJO 外部类生成一个内部类 Student， 他是真正发送的POJO对象</span></span><br><span class="line">    <span class="built_in">int32</span> id = <span class="number">1</span>; <span class="comment">// Student 类中有 一个属性 名字为 id 类型为int32(protobuf类型) 1表示属性序号，不是值</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>编译：<code>protoc.exe --java_out=.Student.proto</code>。将生成的 <code>StudentPOJO</code> 放入到项目使用。</p>        <h3 id="protobuf-快速入门实例-2"   >          <a href="#protobuf-快速入门实例-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#protobuf-快速入门实例-2"></a> Protobuf 快速入门实例 2</h3>      <p>编写程序，使用 <code>Protobuf</code> 完成如下功能</p><ol><li>客户端可以随机发送 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li><li>服务端能接收 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象(需要判断是哪种类型)，并显示信息(通过 <code>Protobuf</code> 解码)</li></ol><p><code>Student.proto：</code></p><figure class="highlight protobuf"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED; <span class="comment">// 加快解析</span></span><br><span class="line"><span class="keyword">option</span> java_package=<span class="string">&quot;com.zhao.netty.codec2&quot;</span>;   <span class="comment">//指定生成到哪个包下</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname=<span class="string">&quot;MyDataInfo&quot;</span>; <span class="comment">// 外部类名, 文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//protobuf 可以使用message 管理其他的message</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个枚举类型</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DataType</span> </span>&#123;</span><br><span class="line">        StudentType = <span class="number">0</span>; <span class="comment">//在proto3 要求enum的编号从0开始</span></span><br><span class="line">        WorkerType = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用data_type 来标识传的是哪一个枚举类型</span></span><br><span class="line">    DataType data_type = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示每次枚举类型最多只能出现其中的一个, 节省空间</span></span><br><span class="line">    <span class="keyword">oneof</span> dataBody &#123;</span><br><span class="line">        Student student = <span class="number">2</span>;</span><br><span class="line">        Worker worker = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int32</span> id = <span class="number">1</span>;<span class="comment">//Student类的属性</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">2</span>; <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int32</span> age=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1DJ411m7NR?p=77" >https://www.bilibili.com/video/BV1DJ411m7NR?p=77</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="netty-编解码器和-handler-调用机制"   >          <a href="#netty-编解码器和-handler-调用机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-编解码器和-handler-调用机制"></a> Netty 编解码器和 Handler 调用机制</h2>              <h3 id="基本说明"   >          <a href="#基本说明" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本说明"></a> 基本说明</h3>      <p><code>Netty</code> 的组件设计：<code>Netty</code> 的主要组件有 <code>Channel</code>、<code>EventLoop</code>、<code>ChannelFuture</code>、<code>ChannelHandler</code>、<code>ChannelPipe</code> 等</p><p><code>ChannelHandler</code> 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 <code>ChannelInboundHandler</code> 接口（或 <code>ChannelInboundHandlerAdapter</code>），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 <code>ChannelInboundHandler</code> 冲刷数据。业务逻辑通常写在一个或者多个 <code>ChannelInboundHandler</code> 中。<code>ChannelOutboundHandler</code> 原理一样，只不过它是用来处理出站数据的</p><p><code>ChannelPipeline</code> 提供了 <code>ChannelHandler</code> 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 <code>pipeline</code> 中的一系列 <code>ChannelOutboundHandler</code>，并被这些 <code>Handler</code> 处理，反之则称为入站的。</p><p><code>Pipeline</code>双向链表中维护了一些<code>ChannelHandlerContext</code>，每个<code>ChannelHandlerContext</code>维护了一个<code>Handler</code>。每个<code>ChannelHandlerContext</code>都维护了两个属性<code>inbound/outbound(boolean)</code>，其代表了当前<code>Handler</code>属于入站/出站类型。这样在<code>Pipeline</code>中不同类型的<code>Handler</code>就能区分开，从而互不干扰的工作：</p><p><code>Socket</code>收到消息后，入站事件在<code>Pipeline</code>中按照 <code>head -&gt; tail</code> 的顺序依次通过入站类型的<code>Handler</code>（不通过出站类型的），全部入站类型的<code>Handler</code>执行完毕后再按照 <code>tail -&gt; head</code> 的顺序依次通过出站类型的<code>Handler</code>，最后通过Socket发出出站消息。</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_01.png" alt="img" /></p>        <h3 id="编码解码器"   >          <a href="#编码解码器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#编码解码器"></a> 编码解码器</h3>      <p>当 <code>Netty</code> 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 <code>java</code> 对象）；如果是出站消息，它会被编码成字节。</p><p><code>Netty</code> 提供一系列实用的编解码器，他们都实现了 <code>ChannelInboundHadnler</code> 或者 <code>ChannelOutboundHandler</code> 接口。在这些类中，<code>channelRead</code> 方法已经被重写了。以入站为例，对于每个从入站 <code>Channel</code> 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 <code>decode()</code> 方法进行解码，并将已经解码的字节转发给 <code>ChannelPipeline</code> 中的下一个 <code>ChannelInboundHandler</code>。</p>        <h3 id="解码器-bytetomessagedecoder"   >          <a href="#解码器-bytetomessagedecoder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解码器-bytetomessagedecoder"></a> 解码器 - ByteToMessageDecoder</h3>      <p>关系继承图</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_02.png" alt="img" /></p><p>由于不可能知道远程节点是否会一次性发送一个完整的信息，<code>tcp</code> 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.</p><p>一个关于 <code>ByteToMessageDecoder</code> 实例分析</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_03.png" alt="img" /></p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_04.png" alt="img" /></p>        <h3 id="netty-的-handler-链的调用机制"   >          <a href="#netty-的-handler-链的调用机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#netty-的-handler-链的调用机制"></a> Netty 的 handler 链的调用机制</h3>      <p><code>Pipeline</code>双向链表中维护了一些<code>ChannelHandlerContext</code>，每个<code>ChannelHandlerContext</code>维护了一个<code>Handler</code>。每个<code>ChannelHandlerContext</code>都维护了两个属性<code>inbound/outbound(boolean)</code>，其代表了当前<code>Handler</code>属于入站/出站类型。这样在<code>Pipeline</code>中不同类型的<code>Handler</code>就能区分开，从而互不干扰的工作：</p><p><code>Socket</code>收到消息后，入站事件在<code>Pipeline</code>中按照 <code>head -&gt; tail</code> 的顺序依次通过入站类型的<code>Handler</code>（不通过出站类型的），全部入站类型的<code>Handler</code>执行完毕后再按照 <code>tail -&gt; head</code> 的顺序依次通过出站类型的<code>Handler</code>，最后通过Socket发出出站消息。</p><ul><li>不论解码器 <code>handler</code> 还是编码器 <code>handler</code> 即接收的消息类型必须与待处理的消息类型一致，否则该 <code>handler</code> 不会被执行</li><li>在解码器进行数据解码时，需要判断缓存区（<code>ByteBuf</code>）的数据是否足够，否则接收到的结果会期望结果可能不一致</li></ul><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_05.png" alt="img" /></p>        <h3 id="解码器-replayingdecoder"   >          <a href="#解码器-replayingdecoder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解码器-replayingdecoder"></a> 解码器 - ReplayingDecoder</h3>      <p><code>public abstract class ReplayingDecoder&lt;S&gt; extends ByteToMessageDecoder</code></p><p><code>ReplayingDecoder</code> 扩展了 <code>ByteToMessageDecoder</code> 类，使用这个类，我们不必调用 <code>readableBytes()</code> 方法。参数 <code>S</code> 指定了用户状态管理的类型，其中 <code>Void</code> 代表不需要状态管理</p><p>应用实例：使用 <code>ReplayingDecoder</code> 编写解码器，对前面的案例进行简化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.inboundhandlerandoutboundhandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyByteToLongDecoder2</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyByteToLongDecoder2 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//在 ReplayingDecoder 不需要判断数据是否足够读取，内部会进行处理判断</span></span><br><span class="line">        out.add(in.readLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>ReplayingDecoder</code>使用方便，但它也有一些局限性：</p><ul><li>并不是所有的 <code>ByteBuf</code> 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 <code>UnsupportedOperationException</code>。</li><li><code>ReplayingDecoder</code> 在某些情况下可能稍慢于 <code>ByteToMessageDecoder</code>，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢</li></ul>        <h3 id="其它编解码器"   >          <a href="#其它编解码器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其它编解码器"></a> 其它编解码器</h3>      <p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter08_06.png" alt="img" /></p><ul><li><code>LineBasedFrameDecoder</code>：这个类在 <code>Netty</code> 内部也有使用，它使用行尾控制字符（\n或者\r\n）作为分隔符来解析数据。</li><li><code>DelimiterBasedFrameDecoder</code>：使用自定义的特殊字符作为消息的分隔符。</li><li><code>HttpObjectDecoder</code>：一个 <code>HTTP</code> 数据的解码器</li><li><code>LengthFieldBasedFrameDecoder</code>：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。</li></ul>        <h2 id="tcp-粘包和拆包及解决方案"   >          <a href="#tcp-粘包和拆包及解决方案" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-粘包和拆包及解决方案"></a> TCP 粘包和拆包及解决方案</h2>              <h3 id="tcp-粘包和拆包基本介绍"   >          <a href="#tcp-粘包和拆包基本介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-粘包和拆包基本介绍"></a> TCP 粘包和拆包基本介绍</h3>      <p><code>TCP</code> 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 <code>socket</code>，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（<code>Nagle</code> 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的</p><p>由于 <code>TCP</code> 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题</p><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter09_01.png" alt="img" /></p><p>对图的说明: 假设客户端分别发送了两个数据包 <code>D1</code> 和 <code>D2</code> 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况：</p><ol><li>服务端分两次读取到了两个独立的数据包，分别是 <code>D1</code> 和 <code>D2</code>，没有粘包和拆包</li><li>服务端一次接受到了两个数据包，<code>D1</code> 和 <code>D2</code> 粘合在一起，称之为 <code>TCP</code> 粘包</li><li>服务端分两次读取到了数据包，第一次读取到了完整的 <code>D1</code> 包和 <code>D2</code> 包的部分内容，第二次读取到了 <code>D2</code> 包的剩余内容，这称之为 <code>TCP</code> 拆包</li><li>服务端分两次读取到了数据包，第一次读取到了 <code>D1</code> 包的部分内容 <code>D1_1</code>，第二次读取到了 <code>D1</code> 包的剩余部分内容 <code>D1_2</code> 和完整的 <code>D2</code> 包。</li></ol>        <h3 id="tcp-粘包和拆包现象实例"   >          <a href="#tcp-粘包和拆包现象实例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-粘包和拆包现象实例"></a> TCP 粘包和拆包现象实例</h3>      <p>在编写 <code>Netty</code> 程序时，如果没有做处理，就会发生粘包和拆包的问题</p><p><code>MyClientHandler.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用客户端发送10条数据 hello,server 编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            ByteBuf buffer = Unpooled.copiedBuffer(<span class="string">&quot;hello,server &quot;</span> + i, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            ctx.writeAndFlush(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[msg.readableBytes()];</span><br><span class="line">        msg.readBytes(buffer);</span><br><span class="line"></span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收到消息=&quot;</span> + message);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收消息数量=&quot;</span> + (++<span class="keyword">this</span>.count));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>MyServerHandler.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//cause.printStackTrace();</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[msg.readableBytes()];</span><br><span class="line">        msg.readBytes(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将buffer转成字符串</span></span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收到数据 &quot;</span> + message);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收到消息量=&quot;</span> + (++<span class="keyword">this</span>.count));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务器回送数据给客户端, 回送一个随机id ,</span></span><br><span class="line">        ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + <span class="string">&quot; &quot;</span>, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        ctx.writeAndFlush(responseByteBuf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="tcp-粘包和拆包解决方案"   >          <a href="#tcp-粘包和拆包解决方案" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-粘包和拆包解决方案"></a> TCP 粘包和拆包解决方案</h3>      <ol><li>使用自定义协议+编解码器来解决</li><li>关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 <code>TCP</code> 粘包、拆包。</li></ol><p>实例</p><ol><li>要求客户端发送 <code>5</code> 个 <code>Message</code> 对象，客户端每次发送一个 <code>Message</code> 对象</li><li>服务器端每次接收一个 <code>Message</code>，分 <code>5</code> 次进行解码，每读取到一个 <code>Message</code>，会回复一个 <code>Message</code> 对象给客户端。</li></ol><p><img src="/images/%E3%80%90Netty%E3%80%91Netty/chapter09_02.png" alt="img" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.netty.protocoltcp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//协议包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len; <span class="comment">//关键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLen</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.len = len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(<span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.protocoltcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">MessageProtocol</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用客户端发送10条数据 &quot;今天天气冷，吃火锅&quot; 编号</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            String mes = <span class="string">&quot;今天天气冷，吃火锅&quot;</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] content = mes.getBytes(Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="keyword">int</span> length = mes.getBytes(Charset.forName(<span class="string">&quot;utf-8&quot;</span>)).length;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建协议包对象</span></span><br><span class="line">            MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">            messageProtocol.setLen(length);</span><br><span class="line">            messageProtocol.setContent(content);</span><br><span class="line">            ctx.writeAndFlush(messageProtocol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = msg.getLen();</span><br><span class="line">        <span class="keyword">byte</span>[] content = msg.getContent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收到消息如下&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度=&quot;</span> + len);</span><br><span class="line">        System.out.println(<span class="string">&quot;内容=&quot;</span> + <span class="keyword">new</span> String(content, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端接收消息数量=&quot;</span> + (++<span class="keyword">this</span>.count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常消息=&quot;</span> + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.protocoltcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">MessageProtocol</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyMessageEncoder encode 方法被调用&quot;</span>);</span><br><span class="line">        out.writeInt(msg.getLen());</span><br><span class="line">        out.writeBytes(msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.protocoltcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageDecoder</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyMessageDecoder decode 被调用&quot;</span>);</span><br><span class="line">        <span class="comment">//需要将得到二进制字节码-&gt; MessageProtocol 数据包(对象)</span></span><br><span class="line">        <span class="keyword">int</span> length = in.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] content = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        in.readBytes(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装成 MessageProtocol 对象，放入 out， 传递下一个handler业务处理</span></span><br><span class="line">        MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">        messageProtocol.setLen(length);</span><br><span class="line">        messageProtocol.setContent(content);</span><br><span class="line">        out.add(messageProtocol);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.netty.protocoltcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理业务的handler</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">MessageProtocol</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//cause.printStackTrace();</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//接收到数据，并处理</span></span><br><span class="line">        <span class="keyword">int</span> len = msg.getLen();</span><br><span class="line">        <span class="keyword">byte</span>[] content = msg.getContent();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收到信息如下&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度=&quot;</span> + len);</span><br><span class="line">        System.out.println(<span class="string">&quot;内容=&quot;</span> + <span class="keyword">new</span> String(content, Charset.forName(<span class="string">&quot;utf-8&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器接收到消息包数量=&quot;</span> + (++<span class="keyword">this</span>.count));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回复消息</span></span><br><span class="line">        String responseContent = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">int</span> responseLen = responseContent.getBytes(<span class="string">&quot;utf-8&quot;</span>).length;</span><br><span class="line">        <span class="keyword">byte</span>[] responseContent2 = responseContent.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//构建一个协议包</span></span><br><span class="line">        MessageProtocol messageProtocol = <span class="keyword">new</span> MessageProtocol();</span><br><span class="line">        messageProtocol.setLen(responseLen);</span><br><span class="line">        messageProtocol.setContent(responseContent2);</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(messageProtocol);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>zhao</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】NIO</title>
      <link href="2021/08/13/%E3%80%90Java%E3%80%91NIO/"/>
      <url>2021/08/13/%E3%80%90Java%E3%80%91NIO/</url>
      
        <content type="html"><![CDATA[        <h2 id="io-模型"   >          <a href="#io-模型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io-模型"></a> I/O 模型</h2>              <h3 id="io-模型简介"   >          <a href="#io-模型简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io-模型简介"></a> I/O 模型简介</h3>      <p><code>I/O</code> 模型简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。</p><p>共有三种<code>I/O</code> 模型：</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/tomcyndi/article/details/79087578" >https://blog.csdn.net/tomcyndi/article/details/79087578</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>1. 同步阻塞</strong>：在调用read方法时，stream里没有数据可读，线程停止向下执行，直至stream有数据。</p><blockquote><p>阻塞：体现在这个线程不能干别的了，只能在这里等着</p><p>同步：是体现在消息通知机制上的，即stream有没有数据是需要我自己来判断的。</p></blockquote><p><strong>2. 同步非阻塞</strong>：调用read方法后，如果stream没有数据，方法就返回，然后这个线程就就干别的事（例如NIO中<code>Selector</code>所在的线程不会一直阻塞在某一个IO，而是会循环判断当前有没有能处理的IO，没有就做别的事，过一段时间再判断一下有没有要处理的IO，此时仍然是同步的，因为线程一直在循环）。</p><blockquote><p>非阻塞：体现在这个线程可以去干别的，不需要一直在这等着</p><p>同步：体现在消息通知机制，这个线程仍然要定时的读取stream，判断数据有没有准备好，client采用循环的方式去读取，可以看出CPU大部分被浪费了</p></blockquote><p><strong>3. 异步非阻塞</strong>：服务端调用read方法，若stream中无数据则返回，程序继续向下执行。当stream中有数据时，操作系统会负责把数据拷贝到用户空间，然后通知这个线程，这里的消息通知机制就是异步。而不是像NIO那样，自己起一个线程去监控stream里面有没有数据。</p>        <h3 id="bio-nio-aio"   >          <a href="#bio-nio-aio" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-nio-aio"></a> BIO、NIO、AIO</h3>      <p><code>Java</code> 共支持 <code>3</code> 种网络编程模型 <code>I/O</code> 模式：<code>BIO</code>、<code>NIO</code>、<code>AIO</code>。</p><ol><li><code>Java BIO</code>：同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813230944094.png" alt="image-20210813230944094" /></p><span id="more"></span><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://dongzl.github.io/netty-handbook/#/_content/chapter02" >https://dongzl.github.io/netty-handbook/#/_content/chapter02</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><ol start="2"><li><code>Java NIO</code>：同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 <code>I/O</code> 请求就进行处理。</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/chapter02_02.png" alt="img" /></p><ol start="3"><li><code>Java AIO(NIO.2)</code>：异步非阻塞，<code>AIO</code> 引入异步通道的概念，采用了 <code>Proactor</code> 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</li></ol>        <h3 id="bio-nio-aio-使用场景"   >          <a href="#bio-nio-aio-使用场景" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-nio-aio-使用场景"></a> BIO、NIO、AIO 使用场景</h3>      <ol><li><code>BIO</code> 方式适用于<strong>连接数目比较小且固定</strong>的架构，这种方式对服务器资源要求比较高，并发局限于应用中，<code>JDK1.4</code> 以前的唯一选择，但程序简单易理解。</li><li><code>NIO</code> 方式适用于<strong>连接数目多且连接比较短</strong>（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，<code>JDK1.4</code> 开始支持。</li><li><code>AIO</code> 方式使用于<strong>连接数目多且连接比较长</strong>（重操作）的架构，比如相册服务器，充分调用 <code>OS</code> 参与并发操作，编程比较复杂，<code>JDK7</code> 开始支持。</li></ol>        <h2 id="bio"   >          <a href="#bio" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio"></a> BIO</h2>      <ul><li><code>Java BIO</code> 就是传统的 <code>Java I/O</code> 编程，其相关的类和接口在 <code>java.io</code>。</li><li><code>BIO(BlockingI/O)</code>：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善（实现多个客户连接服务器）。</li><li><code>BIO</code> 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，<code>JDK1.4</code> 以前的唯一选择，程序简单易理解。</li></ul>        <h3 id="bio-工作机制"   >          <a href="#bio-工作机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-工作机制"></a> BIO 工作机制</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91NIO/chapter02_03.png" alt="img" /></p><p>对 <code>BIO</code> 编程流程的梳理</p><ol><li>服务器端启动一个 <code>ServerSocket</code>。</li><li>客户端启动 <code>Socket</code> 对服务器进行通信，默认情况下服务器端需要对每个客户建立一个线程与之通讯。</li><li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝。</li><li>如果有响应，客户端线程会等待请求结束后，在继续执行。</li></ol>        <h3 id="bio-应用实例"   >          <a href="#bio-应用实例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-应用实例"></a> BIO 应用实例</h3>      <p>实例说明：</p><ol><li>使用 <code>BIO</code> 模型编写一个服务器端，监听 <code>6666</code> 端口，当有客户端连接时，就启动一个线程与之通讯。</li><li>要求使用线程池机制改善，可以连接多个客户端。</li><li>服务器端可以接收客户端发送的数据（<code>telnet</code> 方式即可）。</li><li>代码演示：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//线程池机制</span></span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 创建一个线程池</span></span><br><span class="line">        <span class="comment">//2. 如果有客户端连接，就创建一个线程，与之通讯(单独写一个方法)</span></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//创建ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器启动了&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息id = &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;名字 = &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//监听，等待客户端连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;等待连接....&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line">            <span class="comment">//就创建一个线程，与之通讯(单独写一个方法)</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//我们重写</span></span><br><span class="line">                    <span class="comment">//可以和客户端通讯</span></span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个handler方法，和客户端通讯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息id = &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;名字 = &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//通过socket获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="comment">//循环的读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程信息id = &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;名字 = &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;read....&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, read));<span class="comment">//输出客户端发送的数据</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭和client的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="bio-问题分析"   >          <a href="#bio-问题分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-问题分析"></a> BIO 问题分析</h3>      <ol><li>每个请求都需要创建独立的线程，与对应的客户端进行数据 <code>Read</code>，业务处理，数据 <code>Write</code>。</li><li>当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大。</li><li>连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在 <code>Read</code> 操作上，造成线程资源浪费。</li></ol>        <h2 id="nio"   >          <a href="#nio" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio"></a> NIO</h2>      <p><code>Java NIO</code> 全称 <strong><code>Java non-blocking IO</code></strong> ，是指 <code>JDK</code> 提供的新 <code>API</code>。从 <code>JDK1.4</code> 开始，<code>Java</code> 提供了一系列改进的输入/输出的新特性，被统称为 <code>NIO</code>（即 <code>NewIO</code>），是同步非阻塞的。</p><p><strong>阻塞IO和非阻塞IO的区别在于，发起IO请求是否会被阻塞，如果阻塞直到IO请求完成那么就是传统的阻塞IO，如果不阻塞，那么就是非阻塞IO。</strong></p><p>同步非阻塞：调用read方法后，如果stream没有数据，方法就返回，然后这个线程就就干别的事。例如NIO中<code>Selector</code>所在的线程不会一直阻塞在某一个IO，而是会循环判断当前有没有能处理的IO，没有就做别的事，过一段时间再判断一下有没有要处理的IO，此时仍然是同步的，因为线程一直在循环。</p><ul><li>非阻塞：体现在这个线程可以去干别的，不需要一直在这等着</li><li>同步：体现在消息通知机制，这个线程仍然要定时的读取stream，判断数据有没有准备好，client采用循环的方式去读取，可以看出CPU大部分被浪费了</li></ul><p><code>NIO</code> 相关类都被放在 <strong><code>java.nio</code></strong> 包及子包下，并且对原 <code>java.io</code> 包中的很多类进行改写。<code>NIO</code> 有三大核心部分:</p><ul><li><strong>Channel（通道）</strong></li><li><strong>Buffer（缓冲区）</strong></li><li><strong>Selector（选择器）</strong></li></ul><p><code>NIO</code> 是<strong>面向缓冲区，或者面向块编程</strong>的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络。</p><p><code>Java NIO</code> 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</p><p>通俗理解：<code>NIO</code> 是可以做到用一个线程来处理多个操作的。假设有 <code>10000</code> 个请求过来,根据实际情况，可以分配 <code>50</code> 或者 <code>100</code> 个线程来处理。不像之前的阻塞 <code>IO</code> 那样，非得分配 <code>10000</code> 个。</p><p><code>HTTP 2.0</code> 使用了<strong>多路复用技术</strong>，做到同一个连接并发处理多个请求，而且并发请求的数量比 <code>HTTP 1.1</code> 大了好几个数量级。</p><p>NIO符合<strong>单 Reactor 单线程</strong>模型：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/chapter05_04.png" alt="img" /></p>        <h3 id="nio-三大核心原理示意图"   >          <a href="#nio-三大核心原理示意图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio-三大核心原理示意图"></a> NIO 三大核心原理示意图</h3>      <p><code>NIO</code> 的 <code>Selector</code>、<code>Channel</code> 和 <code>Buffer</code> 的关系图：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/chapter03_01.png" alt="img" /></p><ul><li>每个 <code>Channel</code> 都会对应一个 <code>Buffer</code>。</li><li><code>Selector</code> 对应一个线程，一个线程对应多个 <code>Channel</code>（连接）。</li><li>该图反应了有三个 <code>Channel</code> 注册到该 <code>Selector</code> //程序</li><li>程序切换到哪个 <code>Channel</code> 是由事件决定的，<code>Event</code> 就是一个重要的概念。</li><li><code>Selector</code> 会根据不同的事件，在各个通道上切换。</li><li><code>Buffer</code> 就是一个内存块，底层是有一个数组。</li><li>数据的读取写入是通过 <code>Buffer</code>，这个和 <code>BIO</code>，<code>BIO</code> 中要么是输入流，或者是输出流，不能双向，但是 <code>NIO</code> 的 <code>Buffer</code> 是可以读也可以写，需要 <code>flip</code> 方法切换 <code>Channel</code> 是双向的，可以返回底层操作系统的情况，比如 <code>Linux</code>，底层的操作系统通道就是双向的。</li></ul>        <h3 id="nio-和-bio-的比较"   >          <a href="#nio-和-bio-的比较" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio-和-bio-的比较"></a> NIO 和 BIO 的比较</h3>      <ul><li><code>BIO</code> 以流的方式处理数据，而 <code>NIO</code> 以块的方式处理数据，块 <code>I/O</code> 的效率比流 <code>I/O</code> 高很多。</li><li><code>BIO</code> 是阻塞的，<code>NIO</code> 则是非阻塞的。</li><li><code>BIO</code> 基于字节流和字符流进行操作，而 <code>NIO</code> 基于 <code>Channel</code>（通道）和 <code>Buffer</code>（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。<code>Selector</code>（选择器）用于监听多个通道的事件（比如：连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。</li></ul>        <h2 id="缓冲区buffer"   >          <a href="#缓冲区buffer" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缓冲区buffer"></a> 缓冲区（Buffer）</h2>              <h3 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>      <p>缓冲区（<code>Buffer</code>）：缓冲区本质上是一个<strong>可以读写数据的内存块</strong>，可以理解成是一个<strong>容器对象（含数组）</strong>，该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。<code>Channel</code> 提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由 <code>Buffer</code>，如图：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/chapter03_02.png" alt="img" /></p><p><code>Channel</code>通过<code>Buffer</code>进行读写：</p><ul><li>从Channel中读取数据时，使用<code>Channel.read(Buffer)</code>将<code>Channel</code>中的数据读取到<code>Buffer</code>中，用户再从<code>Buffer</code>中读取传来的数据。</li><li>向<code>Channel</code>中写出数据时，用户首先将数据写出到<code>Buffer</code>中，再使用<code>Channel.write(Buffer)</code>将<code>Buffer</code>中的数据写到<code>Channel</code>中。</li></ul>        <h3 id="buffer类及其子类"   >          <a href="#buffer类及其子类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#buffer类及其子类"></a> Buffer类及其子类</h3>      <p>在 <code>NIO</code> 中，<code>Buffer</code> 是一个顶层父类，它是一个抽象类，类的层级关系图：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231415284.png" alt="image-20210813231415284" /></p><p><code>Buffer</code> 类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素的信息：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231435261.png" alt="image-20210813231435261" /></p><p><code>Buffer</code> 类相关方法一览</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231523283.png" alt="image-20210813231523283" /></p>        <h3 id="bytebuffer"   >          <a href="#bytebuffer" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bytebuffer"></a> ByteBuffer</h3>      <p>从前面可以看出对于 <code>Java</code> 中的基本数据类型（<code>boolean</code> 除外），都有一个 <code>Buffer</code> 类型与之相对应，最常用的自然是 <code>ByteBuffer</code> 类（二进制数据），该类的主要方法如下：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231558337.png" alt="image-20210813231558337" /></p><p>案例说明 <code>NIO</code> 的 <code>Buffer</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.IntBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例说明 Buffer 的使用(简单说明)</span></span><br><span class="line">        <span class="comment">//创建一个 Buffer，大小为 5，即可以存放 5 个 int</span></span><br><span class="line">        IntBuffer intBuffer = IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向buffer存放数据</span></span><br><span class="line">        <span class="comment">//intBuffer.put(10);</span></span><br><span class="line">        <span class="comment">//intBuffer.put(11);</span></span><br><span class="line">        <span class="comment">//intBuffer.put(12);</span></span><br><span class="line">        <span class="comment">//intBuffer.put(13);</span></span><br><span class="line">        <span class="comment">//intBuffer.put(14);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intBuffer.capacity(); i++) &#123;</span><br><span class="line">            intBuffer.put(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如何从 buffer 读取数据</span></span><br><span class="line">        <span class="comment">//将 buffer 转换，读写切换(!!!)</span></span><br><span class="line">        intBuffer.flip();</span><br><span class="line">        <span class="keyword">while</span> (intBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(intBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="通道channel"   >          <a href="#通道channel" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#通道channel"></a> 通道（Channel）</h2>              <h3 id="简介-2"   >          <a href="#简介-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介-2"></a> 简介</h3>      <p>NIO的通道类似于流，但有些区别如下：</p><ul><li>通道可以同时进行读写，而流只能读或者只能写</li><li>通道可以实现异步读写数据</li><li>通道可以从缓冲读数据，也可以写数据到缓冲s</li></ul><p><code>BIO</code> 中的 <code>Stream</code> 是单向的，例如 <code>FileInputStream</code> 对象只能进行读取数据的操作，而 <code>NIO</code> 中的通道（<code>Channel</code>）是双向的，可以读操作，也可以写操作。</p><p><code>Channel</code> 在 <code>NIO</code> 中是一个接口 <code>public interface Channel extends Closeable&#123;&#125;</code>。常用的 <code>Channel</code> 子类有：<strong><code>FileChannel</code>、<code>DatagramChannel</code>、<code>ServerSocketChannel</code> 和 <code>SocketChannel</code></strong>。【<code>ServerSocketChanne</code> 类似 <code>ServerSocket</code>、<code>SocketChannel</code> 类似 <code>Socket</code>】</p><p><code>FileChannel</code> 用于文件的数据读写，<code>DatagramChannel</code> 用于 <code>UDP</code> 的数据读写，<code>ServerSocketChannel</code> 和 <code>SocketChannel</code> 用于 <code>TCP</code> 的数据读写。</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231614234.png" alt="image-20210813231614234" /></p>        <h3 id="filechannel-类"   >          <a href="#filechannel-类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filechannel-类"></a> FileChannel 类</h3>      <p><code>FileChannel</code> 主要用来对本地文件进行 <code>IO</code> 操作，常见的方法有：</p><ul><li><code>public int read(ByteBuffer dst)</code>，从通道读取数据并放到缓冲区中</li><li><code>public int write(ByteBuffer src)</code>，把缓冲区的数据写到通道中</li><li><code>public long transferFrom(ReadableByteChannel src, long position, long count)</code>，从目标通道中复制数据到当前通道</li><li><code>public long transferTo(long position, long count, WritableByteChannel target)</code>，把数据从当前通道复制给目标通道</li></ul>        <h3 id="应用实例1-本地文件写数据"   >          <a href="#应用实例1-本地文件写数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#应用实例1-本地文件写数据"></a> 应用实例1 - 本地文件写数据</h3>      <p>实例要求：</p><ul><li>使用 <code>ByteBuffer</code>（缓冲）和 <code>FileChannel</code>（通道），将 “hello,尚硅谷” 写入到 <code>file01.txt</code> 中</li><li>文件不存在就创建</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;hello,尚硅谷&quot;</span>;</span><br><span class="line">        <span class="comment">//创建一个输出流 -&gt; channel</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过 fileOutputStream 获取对应的 FileChannel</span></span><br><span class="line">        <span class="comment">//这个 fileChannel 真实类型是 FileChannelImpl</span></span><br><span class="line">        FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个缓冲区 ByteBuffer</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 str 放入 byteBuffer</span></span><br><span class="line">        byteBuffer.put(str.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对 byteBuffer 进行 flip</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 byteBuffer 数据写入到 fileChannel</span></span><br><span class="line">        fileChannel.write(byteBuffer);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="应用实例2-本地文件读数据"   >          <a href="#应用实例2-本地文件读数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#应用实例2-本地文件读数据"></a> 应用实例2 - 本地文件读数据</h3>      <p>实例要求：</p><ul><li>使用 <code>ByteBuffer</code>（缓冲）和 <code>FileChannel</code>（通道），将 <code>file01.txt</code> 中的数据读入到程序，并显示在控制台屏幕</li><li>假定文件已经存在</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件的输入流</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;d:\\file01.txt&quot;</span>);</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过 fileInputStream 获取对应的 FileChannel -&gt; 实际类型 FileChannelImpl</span></span><br><span class="line">        FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建缓冲区</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate((<span class="keyword">int</span>)file.length());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将通道的数据读入到 Buffer</span></span><br><span class="line">        fileChannel.read(byteBuffer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将 byteBuffer 的字节数据转成 String</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="应用实例3-使用一个-buffer-完成文件读取-写入"   >          <a href="#应用实例3-使用一个-buffer-完成文件读取-写入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#应用实例3-使用一个-buffer-完成文件读取-写入"></a> 应用实例3 - 使用一个 Buffer 完成文件读取、写入</h3>      <p>实例要求：</p><ul><li>使用 <code>FileChannel</code>（通道）和方法 <code>read、write</code>，完成文件的拷贝</li><li>拷贝一个文本文件 <code>1.txt</code>，放在项目下即可</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231631581.png" alt="image-20210813231631581" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel01 = fileInputStream.getChannel();</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;2.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel02 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">//循环读取</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里有一个重要的操作，一定不要忘了</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public final Buffer clear() &#123;</span></span><br><span class="line"><span class="comment">                position = 0;</span></span><br><span class="line"><span class="comment">                limit = capacity;</span></span><br><span class="line"><span class="comment">                mark = -1;</span></span><br><span class="line"><span class="comment">                return this;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            byteBuffer.clear(); <span class="comment">//清空 buffer</span></span><br><span class="line">            <span class="keyword">int</span> read = fileChannel01.read(byteBuffer);</span><br><span class="line">            System.out.println(<span class="string">&quot;read = &quot;</span> + read);</span><br><span class="line">            <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123; <span class="comment">//表示读完</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将 buffer 中的数据写入到 fileChannel02--2.txt</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            fileChannel02.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关的流</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="应用实例4-拷贝文件-transferfrom-方法"   >          <a href="#应用实例4-拷贝文件-transferfrom-方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#应用实例4-拷贝文件-transferfrom-方法"></a> 应用实例4 - 拷贝文件 transferFrom 方法</h3>      <p>实例要求：</p><ul><li>使用 <code>FileChannel</code>（通道）和方法 <code>transferFrom</code>，完成文件的拷贝</li><li>拷贝一张图片</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建相关流</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\a.jpg&quot;</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\a2.jpg&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取各个流对应的 FileChannel</span></span><br><span class="line">        FileChannel sourceCh = fileInputStream.getChannel();</span><br><span class="line">        FileChannel destCh = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 transferForm 完成拷贝</span></span><br><span class="line">        destCh.transferFrom(sourceCh, <span class="number">0</span>, sourceCh.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关通道和流</span></span><br><span class="line">        sourceCh.close();</span><br><span class="line">        destCh.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="关于-buffer-和-channel-的注意事项和细节"   >          <a href="#关于-buffer-和-channel-的注意事项和细节" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#关于-buffer-和-channel-的注意事项和细节"></a> 关于 Buffer 和 Channel 的注意事项和细节</h3>      <p><code>ByteBuffer</code> 支持类型化的 <code>put</code> 和 <code>get</code>，<code>put</code> 放入的是什么数据类型，<code>get</code> 就应该使用相应的数据类型来取出，否则可能有 <code>BufferUnderflowException</code> 异常。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOByteBufferPutGet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个 Buffer</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型化方式放入数据</span></span><br><span class="line">        buffer.putInt(<span class="number">100</span>);</span><br><span class="line">        buffer.putLong(<span class="number">9</span>);</span><br><span class="line">        buffer.putChar(<span class="string">&#x27;尚&#x27;</span>);</span><br><span class="line">        buffer.putShort((<span class="keyword">short</span>) <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        System.out.println(buffer.getInt());</span><br><span class="line">        System.out.println(buffer.getLong());</span><br><span class="line">        System.out.println(buffer.getChar());</span><br><span class="line">        System.out.println(buffer.getShort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>可以将一个普通 <code>Buffer</code> 转成只读 <code>Buffer</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个 buffer</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">            buffer.put((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到一个只读的 Buffer</span></span><br><span class="line">        ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();</span><br><span class="line">        System.out.println(readOnlyBuffer.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">while</span> (readOnlyBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(readOnlyBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        readOnlyBuffer.put((<span class="keyword">byte</span>) <span class="number">100</span>); <span class="comment">//ReadOnlyBufferException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>NIO</code> 还提供了 <code>MappedByteBuffer</code>，可以让文件直接在内存（堆外的内存）中进行修改，而如何同步到文件由 <code>NIO</code> 来完成。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.nio.MappedByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明 1.MappedByteBuffer 可让文件直接在内存（堆外内存）修改,操作系统不需要拷贝一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="comment">//获取对应的通道</span></span><br><span class="line">        FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数 1:FileChannel.MapMode.READ_WRITE 使用的读写模式</span></span><br><span class="line"><span class="comment">         * 参数 2：0：可以直接修改的起始位置</span></span><br><span class="line"><span class="comment">         * 参数 3:5: 是映射到内存的大小（不是索引位置），即将 1.txt 的多少个字节映射到内存</span></span><br><span class="line"><span class="comment">         * 可以直接修改的范围就是 0-5</span></span><br><span class="line"><span class="comment">         * 实际类型 DirectByteBuffer</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        mappedByteBuffer.put(<span class="number">0</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">3</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        mappedByteBuffer.put(<span class="number">5</span>, (<span class="keyword">byte</span>) <span class="string">&#x27;Y&#x27;</span>);<span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>前面的读写操作，都是通过一个 <code>Buffer</code> 完成的，<code>NIO</code> 还支持通过多个 <code>Buffer</code>（即 <code>Buffer</code>数组）完成读写操作，即 <code>Scattering</code> 和 <code>Gathering</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Scattering：将数据写入到 buffer 时，可以采用 buffer 数组，依次写入 [分散]</span></span><br><span class="line"><span class="comment"> * Gathering：从 buffer 读取数据时，可以采用 buffer 数组，依次读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用 ServerSocketChannel 和 SocketChannel 网络</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定端口到 socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 buffer 数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等客户端连接 (telnet)</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>; <span class="comment">//假定从客户端接收 8 个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += l; <span class="comment">//累计读取的字节数</span></span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead = &quot;</span> + byteRead);</span><br><span class="line">                <span class="comment">//使用流打印,看看当前的这个 buffer 的 position 和 limit</span></span><br><span class="line">                Arrays.asList(byteBuffers).stream().map(buffer -&gt; <span class="string">&quot;position = &quot;</span> + buffer.position() + <span class="string">&quot;, limit = &quot;</span> + buffer.limit()).forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将所有的 buffer 进行 flip</span></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line">            <span class="comment">//将数据读出显示到客户端</span></span><br><span class="line">            <span class="keyword">long</span> byteWirte = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (byteWirte &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.write(byteBuffers);<span class="comment">//</span></span><br><span class="line">                byteWirte += l;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将所有的buffer进行clear</span></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;byteRead = &quot;</span> + byteRead + <span class="string">&quot;, byteWrite = &quot;</span> + byteWirte + <span class="string">&quot;, messagelength = &quot;</span> + messageLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="selector选择器"   >          <a href="#selector选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#selector选择器"></a> Selector（选择器）</h2>              <h3 id="简介-3"   >          <a href="#简介-3" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介-3"></a> 简介</h3>      <p><code>Java</code> 的 <code>NIO</code>，用非阻塞的 <code>IO</code> 方式。可以用一个线程，处理多个的客户端连接，就会使用到 <code>Selector</code>（选择器）。</p><p><code>Selector</code> 能够检测多个注册的通道上是否有事件发生（注意：多个 <code>Channel</code> 以事件的方式可以注册到同一个 <code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</p><p>只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。避免了多线程之间的上下文切换导致的开销。</p>        <h3 id="selector示意图和特点说明"   >          <a href="#selector示意图和特点说明" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#selector示意图和特点说明"></a> Selector示意图和特点说明</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231658958.png" alt="image-20210813231658958" /></p><p>说明如下：</p><ul><li><code>Netty</code> 的 <code>IO</code> 线程 <code>NioEventLoop</code> 聚合了 <code>Selector</code>（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。</li><li>当线程从某客户端 <code>Socket</code> 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。</li><li>线程通常将非阻塞 <code>IO</code> 的空闲时间用于在其他通道上执行 <code>IO</code> 操作，所以单独的线程可以管理多个输入和输出通道。</li><li>由于读写操作都是非阻塞的，这就可以充分提升 <code>IO</code> 线程的运行效率，避免由于频繁 <code>I/O</code> 阻塞导致的线程挂起。</li><li>一个 <code>I/O</code> 线程可以并发处理 <code>N</code> 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 <code>I/O</code> 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</li></ul>        <h3 id="selector类相关方法"   >          <a href="#selector类相关方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#selector类相关方法"></a> Selector类相关方法</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231714990.png" alt="image-20210813231714990" /></p><p>注意事项：</p><p><code>NIO</code> 中的 <code>ServerSocketChannel</code> 功能类似 <code>ServerSocket</code>、<code>SocketChannel</code> 功能类似 <code>Socket</code>。</p><p>Selector相关方法说明</p><ul><li><code>selector.select();</code> ：阻塞</li><li><code>selector.select(1000);</code> ：阻塞 1000 毫秒，在 1000 毫秒后返回</li><li><code>selector.wakeup();</code> ：唤醒 selector</li><li><code>selector.selectNow();</code> ：不阻塞，立马返还</li></ul>        <h3 id="nio-非阻塞网络编程原理分析图"   >          <a href="#nio-非阻塞网络编程原理分析图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio-非阻塞网络编程原理分析图"></a> NIO 非阻塞网络编程原理分析图</h3>      <p><code>NIO</code> 非阻塞网络编程相关的（<code>Selector</code>、<code>SelectionKey</code>、<code>ServerScoketChannel</code> 和 <code>SocketChannel</code>）关系梳理图</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231729938.png" alt="image-20210813231729938" /></p><p>对上图的说明：</p><ol><li>当客户端连接时，会通过 <code>ServerSocketChannel</code> 得到 <code>SocketChannel</code>。</li><li><code>Selector</code> 进行监听 <code>select</code> 方法，返回有事件发生的通道的个数。</li><li>将 <code>socketChannel</code> 注册到 <code>Selector</code> 上，<code>register(Selector sel, int ops)</code>，一个 <code>Selector</code> 上可以注册多个 <code>SocketChannel</code>。</li><li>注册后返回一个 <code>SelectionKey</code>，会和该 <code>Selector</code> 关联（集合）。</li><li>进一步得到各个 <code>SelectionKey</code>（有事件发生）。</li><li>在通过 <code>SelectionKey</code> 反向获取 <code>SocketChannel</code>，方法 <code>channel()</code>。</li><li>可以通过得到的 <code>channel</code>，完成业务处理。</li></ol>        <h3 id="selectionkey"   >          <a href="#selectionkey" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#selectionkey"></a> SelectionKey</h3>      <p><code>SelectionKey</code>表示<code>Selector</code>和网络通道的注册关系，共四种：</p><ul><li><code>int OP_ACCEPT</code>：有新的网络连接可以 <code>accept</code>，值为 <code>16</code></li><li><code>int OP_CONNECT</code>：代表连接已经建立，值为 <code>8</code></li><li><code>int OP_READ</code>：代表读操作，值为 <code>1</code></li><li><code>int OP_WRITE</code>：代表写操作，值为 <code>4</code></li></ul><p>源码中：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_READ = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_WRITE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_CONNECT = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_ACCEPT = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br></pre></td></tr></table></div></figure><ol><li><code>SelectionKey</code> 相关方法</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231747671.png" alt="image-20210813231747671" /></p>        <h3 id="serversocketchannel"   >          <a href="#serversocketchannel" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#serversocketchannel"></a> ServerSocketChannel</h3>      <p><code>ServerSocketChannel</code> 在服务器端监听新的客户端 <code>Socket</code> 连接。相关方法如下：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231800081.png" alt="image-20210813231800081" /></p>        <h3 id="socketchannel"   >          <a href="#socketchannel" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#socketchannel"></a> SocketChannel</h3>      <p><code>SocketChannel</code>，网络 <code>IO</code> 通道，具体负责进行读写操作。<code>NIO</code> 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。相关方法如下：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231833709.png" alt="image-20210813231833709" /></p>        <h3 id="nio-网络编程应用实例-群聊系统"   >          <a href="#nio-网络编程应用实例-群聊系统" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio-网络编程应用实例-群聊系统"></a> NIO 网络编程应用实例 - 群聊系统</h3>      <p>实例要求：</p><ol><li>编写一个 <code>NIO</code> 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li><li>实现多人群聊</li><li>服务器端：可以监测用户上线，离线，并实现消息转发功能</li><li>客户端：通过 <code>Channel</code> 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）</li><li>目的：进一步理解 <code>NIO</code> 非阻塞网络编程机制</li></ol><p>示意图：</p><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231853991.png" alt="image-20210813231853991" /></p><p>代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Channel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//初始化工作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">//ServerSocketChannel</span></span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">//绑定端口</span></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">//设置非阻塞模式</span></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//将该 listenChannel 注册到 selector</span></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//循环处理</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123; <span class="comment">//有事件处理</span></span><br><span class="line">                    <span class="comment">// 遍历得到 selectionKey 集合</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">//取出 selectionkey</span></span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="comment">//监听到 accept</span></span><br><span class="line">                        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                            SocketChannel sc = listenChannel.accept();</span><br><span class="line">                            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">//将该 sc 注册到 seletor</span></span><br><span class="line">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            <span class="comment">//提示</span></span><br><span class="line">                            System.out.println(sc.getRemoteAddress() + <span class="string">&quot; 上线 &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (key.isReadable()) &#123;<span class="comment">//通道发送read事件，即通道是可读的状态</span></span><br><span class="line">                            <span class="comment">// 处理读(专门写方法..)</span></span><br><span class="line">                            readData(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//当前的 key 删除，防止重复处理</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待....&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//发生异常处理....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到 channel</span></span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//创建 buffer</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">int</span> count = channel.read(buffer);</span><br><span class="line">            <span class="comment">//根据 count 的值做处理</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//把缓存区的数据转成字符串</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">//输出该消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;form客户端:&quot;</span> + msg);</span><br><span class="line">                <span class="comment">//向其它的客户端转发消息(去掉自己),专门写一个方法来处理</span></span><br><span class="line">                sendInfoToOtherClients(msg, channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress() + <span class="string">&quot;离线了..&quot;</span>);</span><br><span class="line">                <span class="comment">//取消注册</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">//关闭通道</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息给其它客户(通道)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendInfoToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器转发消息中...&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历所有注册到 selector 上的 SocketChannel,并排除 self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            <span class="comment">//通过 key 取出对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line">            <span class="comment">//排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                <span class="comment">//转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                <span class="comment">//将 msg 存储到 buffer</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                <span class="comment">//将 buffer 的数据写入通道</span></span><br><span class="line">                dest.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义相关的属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//服务器的ip</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6667</span>;<span class="comment">//服务器端口</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器,完成初始化工作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        socketChannel = SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        <span class="comment">//设置非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//将 channel 注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">//得到 username</span></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(username + <span class="string">&quot; is ok...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        info = username + <span class="string">&quot; 说：&quot;</span> + info;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取从服务器端回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;<span class="comment">//有可以用的通道</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">//得到相关的通道</span></span><br><span class="line">                        SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">//得到一个 Buffer</span></span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">//读取</span></span><br><span class="line">                        sc.read(buffer);</span><br><span class="line">                        <span class="comment">//把读到的缓冲区的数据转成字符串</span></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove(); <span class="comment">//删除当前的 selectionKey,防止重复操作</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;没有可以用的通道...&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动我们客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line">        <span class="comment">//启动一个线程,每个 3 秒，读取从服务器发送数据</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readInfo();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送数据给服务器端</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="nio与零拷贝"   >          <a href="#nio与零拷贝" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio与零拷贝"></a> NIO与零拷贝</h2>              <h3 id="零拷贝基本介绍"   >          <a href="#零拷贝基本介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#零拷贝基本介绍"></a> 零拷贝基本介绍</h3>      <ol><li>零拷贝是网络编程的关键，很多性能优化都离不开。</li><li>在 <code>Java</code> 程序中，常用的零拷贝有 <code>mmap</code>（内存映射）和 <code>sendFile</code>。那么，他们在 <code>OS</code> 里，到底是怎么样的一个的设计？我们分析 <code>mmap</code> 和 <code>sendFile</code> 这两个零拷贝</li><li>另外我们看下 <code>NIO</code> 中如何使用零拷贝</li></ol>        <h3 id="传统-io-数据读写"   >          <a href="#传统-io-数据读写" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#传统-io-数据读写"></a> 传统 IO 数据读写</h3>      <p><code>Java</code> 传统 <code>IO</code> 和网络编程的一段代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] arr = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">raf.read(arr);</span><br><span class="line"></span><br><span class="line">Socket socket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>).accept();</span><br><span class="line">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></div></figure>        <h3 id="传统-io-模型"   >          <a href="#传统-io-模型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#传统-io-模型"></a> 传统 IO 模型</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231925494.png" alt="image-20210813231925494" /></p><p><strong>DMA</strong>：<code>direct memory access</code> 直接内存拷贝（不使用 <code>CPU</code>）</p>        <h3 id="mmap-优化"   >          <a href="#mmap-优化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mmap-优化"></a> mmap 优化</h3>      <ol><li><code>mmap</code> 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图<br />2. <code>mmap</code> 示意图</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231940879.png" alt="image-20210813231940879" /></p>        <h3 id="sendfile-优化"   >          <a href="#sendfile-优化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#sendfile-优化"></a> sendFile 优化</h3>      <ol><li><code>Linux2.1</code> 版本提供了 <code>sendFile</code> 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 <code>SocketBuffer</code>，同时，由于和用户态完全无关，就减少了一次上下文切换</li><li>示意图和小结</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813231958625.png" alt="image-20210813231958625" /></p><ol><li>提示：零拷贝从操作系统角度，是没有 <code>cpu</code> 拷贝</li><li><code>Linux在2.4</code> 版本中，做了一些修改，避免了从内核缓冲区拷贝到 <code>Socketbuffer</code> 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91NIO/image-20210813232020998.png" alt="image-20210813232020998" /></p><ol><li>这里其实有一次 <code>cpu</code> 拷贝 <code>kernel buffer</code> -&gt; <code>socket buffer</code> 但是，拷贝的信息很少，比如 <code>lenght</code>、<code>offset</code> 消耗低，可以忽略</li></ol>        <h3 id="零拷贝的再次理解"   >          <a href="#零拷贝的再次理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#零拷贝的再次理解"></a> 零拷贝的再次理解</h3>      <ol><li>我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 <code>kernel buffer</code> 有一份数据）。</li><li>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 <code>CPU</code> 缓存伪共享以及无 <code>CPU</code> 校验和计算。</li></ol>        <h3 id="mmap-和-sendfile-的区别"   >          <a href="#mmap-和-sendfile-的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mmap-和-sendfile-的区别"></a> mmap 和 sendFile 的区别</h3>      <ol><li><code>mmap</code> 适合小数据量读写，<code>sendFile</code> 适合大文件传输。</li><li><code>mmap</code> 需要 <code>4</code> 次上下文切换，<code>3</code> 次数据拷贝；<code>sendFile</code> 需要 <code>3</code> 次上下文切换，最少 <code>2</code> 次数据拷贝。</li><li><code>sendFile</code> 可以利用 <code>DMA</code> 方式，减少 <code>CPU</code> 拷贝，<code>mmap</code> 则不能（必须从内核拷贝到 <code>Socket</code>缓冲区）。</li></ol>        <h3 id="nio-零拷贝案例"   >          <a href="#nio-零拷贝案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nio-零拷贝案例"></a> NIO 零拷贝案例</h3>      <p>案例要求：</p><ol><li>使用传统的 <code>IO</code> 方法传递一个大文件</li><li>使用 <code>NIO</code> 零拷贝方式传递（<code>transferTo</code>）一个大文件</li><li>看看两种传递方式耗时时间分别是多少</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">NewIOServer.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.nio.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建buffer</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> readcount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != readcount) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    readcount = socketChannel.read(byteBuffer);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    <span class="comment">// ex.printStackTrace();</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                byteBuffer.rewind(); <span class="comment">//倒带 position = 0 mark 作废</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NewIOClient.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.nio.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">7001</span>));</span><br><span class="line">        String filename = <span class="string">&quot;protoc-3.6.1-win32.zip&quot;</span>;</span><br><span class="line">        <span class="comment">//得到一个文件channel</span></span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(filename).getChannel();</span><br><span class="line">        <span class="comment">//准备发送</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//在 linux 下一个 transferTo 方法就可以完成传输</span></span><br><span class="line">        <span class="comment">//在 windows 下一次调用 transferTo 只能发送 8m, 就需要分段传输文件,而且要主要</span></span><br><span class="line">        <span class="comment">//传输时的位置=》课后思考...</span></span><br><span class="line">        <span class="comment">//transferTo 底层使用到零拷贝</span></span><br><span class="line">        <span class="keyword">long</span> transferCount = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送的总的字节数 = &quot;</span> + transferCount + <span class="string">&quot; 耗时: &quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        fileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="aio"   >          <a href="#aio" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aio"></a> AIO</h2>      <ol><li><code>JDK7</code> 引入了 <code>AsynchronousI/O</code>，即 <code>AIO</code>。在进行 <code>I/O</code> 编程中，常用到两种模式：<code>Reactor</code> 和 <code>Proactor</code>。<code>Java</code> 的 <code>NIO</code> 就是 <code>Reactor</code>，当有事件触发时，服务器端得到通知，进行相应的处理</li><li><code>AIO</code> 即 <code>NIO2.0</code>，叫做异步不阻塞的 <code>IO</code>。<code>AIO</code> 引入异步通道的概念，采用了 <code>Proactor</code> 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用</li><li>目前 <code>AIO</code> 还没有广泛应用，<code>Netty</code> 也是基于 <code>NIO</code>，而不是 <code>AIO</code>，因此我们就不详解 <code>AIO</code> 了，有兴趣的同学可以参考<span class="exturl"><a class="exturl__link"   href="http://www.52im.net/thread-306-1-1.html" >《Java新一代网络编程模型AIO原理及Linux系统AIO介绍》</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol>        <h3 id="bio-nio-aio-对比表"   >          <a href="#bio-nio-aio-对比表" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bio-nio-aio-对比表"></a> BIO、NIO、AIO 对比表</h3>      <div class="table-container"><table><thead><tr><th></th><th>BIO</th><th>NIO</th><th>AIO</th></tr></thead><tbody><tr><td>IO模型</td><td>同步阻塞</td><td>同步非阻塞（多路复用）</td><td>异步非阻塞</td></tr><tr><td>编程难度</td><td>简单</td><td>复杂</td><td>复杂</td></tr><tr><td>可靠性</td><td>差</td><td>好</td><td>好</td></tr><tr><td>吞吐量</td><td>低</td><td>高</td><td>高</td></tr></tbody></table></div><p><strong>举例说明</strong></p><ol><li>同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。</li><li>同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.</li><li>异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发</li></ol><p>尚硅谷替换 zhao</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dubbo】Dubbo 源码分析</title>
      <link href="2021/08/11/%E3%80%90Dubbo%E3%80%91Dubbo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/08/11/%E3%80%90Dubbo%E3%80%91Dubbo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Dubbo】Dubbo</title>
      <link href="2021/08/11/%E3%80%90Dubbo%E3%80%91Dubbo/"/>
      <url>2021/08/11/%E3%80%90Dubbo%E3%80%91Dubbo/</url>
      
        <content type="html"><![CDATA[        <h2 id="分布式简介"   >          <a href="#分布式简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分布式简介"></a> 分布式简介</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_41157588/article/details/106737191" >https://blog.csdn.net/qq_41157588/article/details/106737191</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>分布式系统是若干<strong>独立计算机</strong>的集合，这些计算机对于用户来说就像单个相关系统。老式系统(单一应用架构)就是把一个系统，统一放到一个服务器当中。如果说要更新代码的话，每一个服务器上的系统都要重新去部署十分的麻烦。</p><p><strong>而分布式系统就是将一个完整的系统拆分成多个不同的服务，然后在将每一个服务单独的放到一个服务器当中</strong>。</p>        <h3 id="应用架构及发展演变"   >          <a href="#应用架构及发展演变" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#应用架构及发展演变"></a> 应用架构及发展演变</h3>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/1077977-20170427162130881-822422851.png" alt="img" /></p><span id="more"></span>        <h3 id="orm单一应用架构"   >          <a href="#orm单一应用架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#orm单一应用架构"></a> ORM：单一应用架构</h3>      <p><strong>单一应用架构</strong>：一个项目装到一个服务器当中。也可以运行多个服务器，每一个服务器当中都装一个项目。缺点：</p><ul><li>如果要添加某一个功能的话就要把一个项目重新打包，在分别部署到每一个服务器当中去。</li><li>如果后期项目越来越大的话单台服务器跑一个项目压力会很大的。会不利于维护，开发和程序的性能。</li></ul><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200205165935907.png" alt="img" /></p>        <h3 id="mvc垂直应用架构"   >          <a href="#mvc垂直应用架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mvc垂直应用架构"></a> MVC：垂直应用架构</h3>      <p><strong>垂直应用架构</strong>：将应用切割成几个互不相干的小应用，在<strong>将每个小应用独立放到一个服务器上</strong>，如果哪一个应用的访问数量多就多加几台服务器。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200205165948633.png" alt="img" /></p>        <h3 id="rpc分布式应用架构"   >          <a href="#rpc分布式应用架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rpc分布式应用架构"></a> RPC：分布式应用架构</h3>      <p><strong>分布式应用架构(远程过程调用)</strong>：当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为<strong>独立的服务</strong>，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。</p><p><strong>RPC(Remote Procedure Call)</strong> 是指<strong>远程过程调用</strong>，是一种<strong>进程间</strong>通信方式，它是一种技术的思想，而不是规范。它允许程序调用另一个地址空间(通常是共享网络的另一台机器上)的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>Dubbo一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="http://blog.csdn.net/smartbetter/article/details/100360835" >http://blog.csdn.net/smartbetter/article/details/100360835</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612180812112.png" alt="img" /></p>        <h4 id="rpc工作原理"   >          <a href="#rpc工作原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rpc工作原理"></a> RPC工作原理</h4>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/2020061015260046.png" alt="img" /></p><ul><li>Client像调用本地服务似的调用远程服务；</li><li>Client stub（存根）接收到调用后，将方法、参数序列化</li><li>客户端通过sockets将消息发送到服务端</li><li>Server stub 收到消息后进行解码（将消息对象反序列化）</li><li>Server stub 根据解码结果调用本地的服务</li><li>本地服务执行(对于服务端来说是本地执行)并将结果返回给Server stub</li><li>Server stub将返回结果打包成消息（将结果消息对象序列化）</li><li>服务端通过sockets将消息发送到客户端</li><li>Client stub接收到结果消息，并进行解码（将结果消息发序列化）</li><li>客户端得到最终结果。</li></ul><p><strong>RPC 调用分以下两种：</strong></p><ul><li><strong>同步调用</strong>：客户方等待调用执行完成并返回结果。</li><li><strong>异步调用</strong>：客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。若客户方不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。</li></ul>        <h4 id="rpc步骤解析"   >          <a href="#rpc步骤解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rpc步骤解析"></a> RPC步骤解析</h4>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200610174636250.png" alt="img" /></p>        <h3 id="soa流动计算架构"   >          <a href="#soa流动计算架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#soa流动计算架构"></a> SOA：流动计算架构</h3>      <p><strong>流动计算架构</strong>：在分布式应用架构的基础上增加了一个<strong>调度、治理中心</strong>基于访问压力实时管理集群容量、提高集群的利用率，用于提高机器利用率的<strong>资源调度和治理中心</strong>(SOA) 是关键 <strong>(不浪费计算机资源)</strong></p>        <h2 id="dubbo介绍"   >          <a href="#dubbo介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo介绍"></a> Dubbo介绍</h2>      <blockquote><p>Dubbo官网： <span class="exturl"><a class="exturl__link"   href="https://dubbo.apache.org/zh/" >https://dubbo.apache.org/zh/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/image-20210811154552749.png" alt="image-20210811154552749" /></p><p><strong>Dubbo是一款高性能、轻量级的开源Java RPC框架</strong>。它是一个<strong>分布式服务框架</strong>，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。它提供了三大核心能力：<strong>面向接口的远程方法调用</strong>，<strong>智能容错和负载均衡</strong>，<strong>服务自动注册和发现</strong>。</p>        <h3 id="dubbo特性一览"   >          <a href="#dubbo特性一览" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo特性一览"></a> Dubbo特性一览</h3>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200610170234620.png" alt="img" /></p>        <h3 id="dubbo设计架构"   >          <a href="#dubbo设计架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo设计架构"></a> Dubbo设计架构</h3>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200610170317960.png" alt="img" /></p><p>该图来自Dubbo官网，描述了服务注册中心、服务提供方、服务消费方、服务监控中心之间的调用关系：</p><ul><li>服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者（Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li><li>框架容器（Container）：Dubbo框架容器。</li></ul><p>蓝色虚线代表Dubbo容器启动时执行的步骤，先后为</p><ul><li>0-start：启动Dubbo容器</li><li>1-register：服务提供者在注册中心内注册信息</li><li>2-subscribe：服务消费者向注册中心订阅所有服务提供者的信息</li></ul><p>红色虚线代表异步执行，当注册中心发现服务提供者发生改变时，会通知服务消费者该变化。服务提供者和服务消费者会定期向监控中心发送数据。</p><p>红色实线代表服务消费者同步执行服务提供者的方法。</p>        <h3 id="dubbo的特性"   >          <a href="#dubbo的特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo的特性"></a> Dubbo的特性</h3>      <p><strong>（1）服务注册中心</strong></p><p>相比Hessian类RPC框架，Dubbo有自己的服务中心，写好的服务可以注册到服务中心，客户端从服务中心寻找服务，然后再到相应的服务提供者机器获取服务。通过服务中心可以实现集群、负载均衡、高可用(容错) 等重要功能。</p><p>服务中心一般使用ZooKeeper实现，也有Redis和其他一些方式。以使用ZooKeeper作为服务中心为例，服务提供者启动后会在ZooKeeper的Dubbo节点下创建提供的服务节点，包含服务提供者ip、port等信息。服务提供者关闭时会从ZooKeeper中移除对应的服务。</p><p>服务使用者会从注册中心ZooKeeper中寻找服务，同一个服务可能会有多个提供者，Dubbo会帮我们找到合适的服务提供者，也就是针对服务提供者的负载均衡。</p><p><strong>（2）负载均衡</strong></p><p>当同一个服务有多个提供者在提供服务时，客户端如何正确的选择提供者实现负载均衡呢？Dubbo也给我们提供了几种方案：</p><ul><li>random：随机选提供者，并可以给提供者设置权重</li><li>roundrobin：轮询选择提供者</li><li>leastactive：最少活跃调用数，相同活跃数的随机，活跃数：指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li><li>consistenthash：一致性hash，相同参数的请求发到同一台机器上。</li></ul><p><strong>（3）简化测试，允许直连提供者</strong></p><p>在开发阶段为了方便测试，通常系统客户端能指定调用某个服务提供者，那么可以在引用服务时加一个url参数去指定服务提供者。 配置如下：</p> <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;xxxService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.alibaba.xxx.XxxService&quot;</span> <span class="attr">url</span>=<span class="string">&quot;dubbo://localhost:20890&quot;</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>（4）服务版本，服务分组（灰度发布）</strong></p><p>在Dubbo配置文件中可以通过制定版本实现连接制定提供者，也就是通过服务版本可以控制服务的不兼容升级；当同一个服务有多种实现时，可以使用服务分组进行区分。</p>        <h3 id="dubbo和springcloud对比"   >          <a href="#dubbo和springcloud对比" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo和springcloud对比"></a> Dubbo和SpringCloud对比</h3>      <p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200613161517225.png" alt="img" /></p>        <h2 id="dubbo监控配置"   >          <a href="#dubbo监控配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo监控配置"></a> Dubbo监控配置</h2>              <h3 id="配置zookeeper"   >          <a href="#配置zookeeper" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置zookeeper"></a> 配置ZooKeeper</h3>      <p>配置流程见手册</p>        <h3 id="管理控制台dubbo-admin配置"   >          <a href="#管理控制台dubbo-admin配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#管理控制台dubbo-admin配置"></a> 管理控制台dubbo-admin配置</h3>      <p><strong>1、下载dubbo-admin</strong></p><p>dubbo-admin下载地址 ：<span class="exturl"><a class="exturl__link"   href="https://github.com/apache/dubbo-admin/tree/master" >https://github.com/apache/dubbo-admin/tree/master</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/image-20210811161121956.png" alt="image-20210811161121956" /></p><p><strong>2、解压后进入目录修改指定ZooKeeper地址</strong></p><p>进入如下地址：<code>dubbo-admin-master/dubbo-admin/src/main/resources/application.properties</code><br />将ZooKeeper的监控中心的地址配置为对应端口</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注册中心的地址</span><br><span class="line">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181</span><br></pre></td></tr></table></div></figure><p>配置完毕后，在<code>dubo-zookeeper/dubbo-admin-master/dubbo-admin</code>文件夹下打包测试下。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></div></figure><p>使用 <code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code>运行打包好的jar包。启动成功后，在本地的7001端口即可访问到注册中心，账号密码默认均为&quot;root&quot;：</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200610180358177.png" alt="img" /></p><p>此时，ZooKeeper的管理控制台配置完成。</p>        <h3 id="简易监控中心dubbo-monitor-simple配置"   >          <a href="#简易监控中心dubbo-monitor-simple配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简易监控中心dubbo-monitor-simple配置"></a> 简易监控中心dubbo-monitor-simple配置</h3>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_41157588/article/details/106737191" >https://blog.csdn.net/qq_41157588/article/details/106737191</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>进入<code>dubbo-monitor-simple</code>文件，执行<code>mvn package</code>命令将当前项目打包成jar包。</p><p>将 <code>dubbo-monitor-simple-2.0.0-assembly.tar.gz</code> 压缩包解压至当前文件夹，解压后config文件查看properties的配置是否是对应的zookeeper。之后打开解压后的 <code>assembly.bin</code> 文件，<code>start.bat</code> 启动<code>dubbo-monitor-simple</code>监控中心。</p><p>配置完成后，在<code>localhost:8080</code> ，可以看到一个监控中心。</p><p>之后在服务提供者和消费者的xml中配置以下内容，再次启动服务提供和消费者启动类。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo-monitor-simple监控中心发现的配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用registry协议，去注册中心自动监控--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt;--&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置后即可在监控中心观察到服务提供者和消费者信息：</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612085805476.png" alt="img" /></p>        <h2 id="dubbo用法"   >          <a href="#dubbo用法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo用法"></a> Dubbo用法</h2>              <h3 id="服务提供者模块"   >          <a href="#服务提供者模块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务提供者模块"></a> 服务提供者模块</h3>      <p>创建服务提供者模块，导入如下依赖（非Spring Boot配置）：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册中心是 Zookeeper，引入zookeeper客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在配置文件中添加Dubbo相关配置<code>provider.xml</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、指定当前服务/应用的名字(同样的服务名字相同，不要和别的服务同名)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;user-service-provider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、指定注册中心的位置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;&gt;&lt;/dubbo:registry&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubboD:registry</span> <span class="attr">protocol</span>=<span class="string">&quot;zookeeper&quot;</span> <span class="attr">address</span>=<span class="string">&quot;127.0.0.1:2181&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、指定通信规则（通信协议? 服务端口）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4、暴露服务让其他模块调用，ref指向服务的真正实现对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.lemon.gmail.service.UserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--服务的实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lemon.gmail.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo-monitor-simple监控中心发现的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用registry协议，去注册中心自动监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置当前消费者的统一规则,当前所有的服务都不启动时检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:consumer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写一个<code>ProviderApplication</code>启动类程序，运行测试配置：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext= <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;provider.xml&quot;</span>);</span><br><span class="line">        applicationContext.start();</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>首先启动zookeeper注册中心的zkServer和zkCli服务。运行 <code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code>。</p><p>之后启动项目，我们可以看到在ZooKeeper中已经发现服务提供者：<br /><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200611161736122.png" alt="img" /></p>        <h3 id="服务消费者模块"   >          <a href="#服务消费者模块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务消费者模块"></a> 服务消费者模块</h3>      <p>创建服务消费者模块，同样引入依赖（与上文相同）。创建配置文件<code>consumer.xml</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.gmail.service.impl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定当前服务/应用的名字(同样的服务名字相同，不要和别的服务同名)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;order-service-consumer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定注册中心的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--调用远程暴露的服务，生成远程服务代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.zhao.gmail.service.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dubbo-monitor-simple监控中心发现的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用registry协议，去注册中心自动监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">&quot;registry&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置当前消费者的统一规则,当前所有的服务都不启动时检查--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:consumer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>把消费者模块中创建的<code>OrderServiceImpl</code>类中加上注解<code>@Component</code>以加入到容器中：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initOrder</span><span class="params">(String userID)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用OrderService的远程代理对象查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>编写一个<code>ConsumerApplication</code>启动类程序，运行测试配置：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;consumer.xml&quot;</span>);</span><br><span class="line">        OrderService orderService = applicationContext.getBean(OrderService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法查询出数据</span></span><br><span class="line">        orderService.initOrder(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用完成...&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>注意：消费者的运行测试需要先启动提供者。启动服务提供者、消费者。及zookeeper的和dubbo-admin，查看监控信息：</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/2020061208334559.png" alt="img" /></p>        <h2 id="dubbo和spring-boot整合"   >          <a href="#dubbo和spring-boot整合" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo和spring-boot整合"></a> Dubbo和Spring Boot整合</h2>      <p>Dubbo和Spring Boot整合的三种方式：</p><ol><li>导入<code>dubbo-starter</code>，在<code>application.properties</code>配置属性，使用 <strong>@Service</strong>暴露服务，使用 <strong>@Reference</strong> 引用服务</li><li>导入<code>dubbo-starter</code>，保留Dubbo相关的xml配置文件，使用 <strong>@ImportResource</strong> 导入Dubbo的xml配置文件</li><li>导入<code>dubbo-starter</code>，创建 <strong>@Configuration</strong> 配置类，使用 <strong>@Bean</strong> 将每一个组件手动配置到容器中，让Dubbo来扫描其他的组件</li></ol><p>下面介绍第一种方式：</p>        <h3 id="服务提供者模块-2"   >          <a href="#服务提供者模块-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务提供者模块-2"></a> 服务提供者模块</h3>      <p>导入Dubbo的场景依赖<code>dubbo-spring-boot-starter</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置 <code>application.properties</code>：</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">boot-user-service-provider</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">127.0.0.1:2181</span></span><br><span class="line"><span class="meta">dubbo.registry.protocol</span>=<span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.protocol.name</span>=<span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">20880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接监控中心</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br></pre></td></tr></table></div></figure><p>使用 <strong>@DubboService</strong> 注解将 <code>user-service-provider</code> 服务提供者模块中的UserServiceImpl暴露</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboService</span> <span class="comment">// 将当前服务暴露</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 业务</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>BootProviderApplication</code>启动类需要写上 <strong>@EnableDubbo</strong> 注解以开启基于注解的Dubbo功能：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span> <span class="comment">//开启基于注解的dubbo功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="服务消费者模块-2"   >          <a href="#服务消费者模块-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务消费者模块-2"></a> 服务消费者模块</h3>      <p>导入Dubbo的场景依赖（同上文）。</p><p>创建<code>application.properties</code>配置：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8081</span></span><br><span class="line">dubbo.application.name=boot-order-service-consumer</span><br><span class="line">dubbo.registry.address=zookeeper:<span class="comment">//127.0.0.1:2181</span></span><br><span class="line"></span><br><span class="line"># 连接监控中心 注册中心协议</span><br><span class="line">dubbo.monitor.protocol=registry</span><br></pre></td></tr></table></div></figure><p>改写配置版中的<code>OrderServiceImpl</code>，在其内的<code>UserService</code>上添加 <strong>@DubboReference</strong> 注解以引用远程提供者服务：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span> <span class="comment">//引用远程提供者服务</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userID)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询用户的收货地址</span></span><br><span class="line">        List&lt;UserAddress&gt; userAddressList = userService.getUserAddressList(userID);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前接收到的userId=&gt; &quot;</span>+userID);</span><br><span class="line">        System.out.println(<span class="string">&quot;**********&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询到的所有地址为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (UserAddress userAddress : userAddressList) &#123;</span><br><span class="line">            <span class="comment">//打印远程服务地址的信息</span></span><br><span class="line">            System.out.println(userAddress.getUserAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userAddressList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>创建<code>OrderController</code>控制器：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/initOrder&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(<span class="meta">@RequestParam(&quot;uid&quot;)</span>String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.initOrder(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>创建<code>BootConsumerApplication</code>启动类，使用**@EnableDubbo**注解开启Dubbo功能：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span> <span class="comment">//开启基于注解的dubbo功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(BootConsumerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>至此，Duboo的Spring Boot整合配置完成。</p>        <h2 id="dubbo配置"   >          <a href="#dubbo配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo配置"></a> Dubbo配置</h2>              <h3 id="配置优先级原则"   >          <a href="#配置优先级原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置优先级原则"></a> 配置优先级原则</h3>      <ul><li>JVM 启动 <code>-D 参数</code> 优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</li><li>XML次之，如果在 XML中有配置，则 <code>dubbo.properties</code> 中的相应配置项无效。</li><li>Properties 最后，相当于缺省值，只有 XML 没有配置时，<code>dubbo.properties</code> 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</li></ul><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612152343133.png" alt="img" /></p><p><strong>Dubbo推荐在Provider上尽量多配置Consumer端属性</strong>：</p><ol><li>作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</li><li><strong>在Provider配置后，Consumer不配置则会使用Provider的配置值，即Provider配置可以作为Consumer的缺省值</strong>。否则，Consumer会使用Consumer端的全局设置，这对于Provider是不可控的，并且往往是不合理的</li></ol><p>配置的覆盖规则：</p><ol><li><strong>方法级别</strong>配置别优于<strong>接口级别</strong>，即小Scope优先</li><li>Consumer端配置优于Provider配置优于全局配置</li><li>最后是Dubbo Hard Code的配置值（见配置文档）</li></ol><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612160853853.png" alt="img" /></p>        <h3 id="启动时检查"   >          <a href="#启动时检查" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#启动时检查"></a> 启动时检查</h3>      <p>Dubbo缺省会在启动时检查依赖的服务是否可用，<strong>不可用时会抛出异常</strong>，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时有些服务不关心，或者出现了循环依赖，必须有一方先启动。另外，如果 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 <code>check</code>，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，<strong>总是会返回引用</strong>，当服务恢复时，能自动连上。</p><p>以<code>order-service-consumer</code>消费者为例，在<code>consumer.xml</code>中添加配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置当前消费者的统一规则,当前所有的服务都不启动时检查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:consumer</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>添加后，<strong>即使服务提供者不启动，启动当前的消费者，也不会出现错误</strong>，否则必须先开启服务提供者，才能正常开启服务消费者。</p>        <h3 id="超时和重试次数配置"   >          <a href="#超时和重试次数配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#超时和重试次数配置"></a> 超时和重试次数配置</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全局超时配置，默认是1000ms --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">&quot;5000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定接口以及特定方法超时配置，若远程调用失败再进行3次尝试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">interface</span>=<span class="string">&quot;com.zhao.BarService&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;2000&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;sayHello&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;3000&quot;</span> <span class="attr">retries</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="本地存根"   >          <a href="#本地存根" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#本地存根"></a> 本地存根</h3>      <p>远程服务后，<strong>客户端通常只剩下接口</strong>，而<strong>实现全在服务器端</strong>，但提供方有些时候想在客户端也执行部分逻辑，比如：做 ThreadLocal 缓存，提前验证参数，调用失败后伪造容错数据等等，此时就需要在 API 中带上 Stub，<strong>客户端生成 Proxy 代理实例，会把 Proxy 通过构造函数传给 Stub</strong>，然后把 Stub 暴露给用户，Stub 可以决定要不要去调 Proxy。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/image-20210811205943858.png" alt="image-20210811205943858" /></p><p>过程：</p><ul><li>本地引用<strong>XxxService</strong>接口，该接口在本地没有实现类，只在远程Provider模块内有实现类。本地并无法直接调用该接口的实现类方法，只能远程调用。</li><li>在本地创建<strong>XxxService</strong>接口的本地存根<strong>XxxServiceStub</strong>，该类实现了<strong>XxxService</strong>接口，并在配置文件中添加了相应配置。</li><li>Dubbo将在其构造方法中自动传入<strong>XxxServiceProxy</strong>代理对象，此时本地存根<strong>XxxServiceStub</strong>即可使用该代理对象<strong>远程调用</strong>Provider模块的<strong>XxxServiceImpl</strong>里的方法。</li></ul><p>使用本地存根（stub）技术可以在本模块中获取到远程模块的某个实现类对象，从而在本地调用该远程模块实现类的对象，进行一定的操作。</p><p>添加哪个类为存根Stub：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.zhao.gmail.service.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">stub</span>=<span class="string">&quot;com.zhao.gmall.service.impl.UserServiceStub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>该对象的构造函数需要带上UserService远程接口的Proxy代理对象，由Dubbo自动传入</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceStub</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService; <span class="comment">// 本地只有该接口，没有其实现类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的是userService远程接口的Proxy代理对象，由Dubbo自动传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceStub</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// 此时即可获得远程接口的代理对象，可以在本地调用该对象的方法</span></span><br><span class="line">        <span class="keyword">this</span>.userService = userService</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.userService.getUserAddressList(userId); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 你可以容错，可以做任何AOP拦截事项</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;容错数据&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="多版本控制"   >          <a href="#多版本控制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多版本控制"></a> 多版本控制</h3>      <p>服务提供者若有多个不同版本的服务类，可以指定消费端使用不同的版本：</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/image-20210811202831736.png" alt="image-20210811202831736" /></p><p>服务消费者调用时，可自由配置版本</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612163603598.png" alt="img" /></p>        <h2 id="dubbo高可用"   >          <a href="#dubbo高可用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dubbo高可用"></a> Dubbo高可用</h2>              <h3 id="zookeeper宕机与dubbo直连"   >          <a href="#zookeeper宕机与dubbo直连" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#zookeeper宕机与dubbo直连"></a> ZooKeeper宕机与Dubbo直连</h3>      <p>当ZooKeeper注册中心宕机时，仍然可以使用Dubbo暴露的服务。原因：</p><ul><li><strong>监控中心宕掉</strong>不影响使用，只是丢失部分采样数据</li><li><strong>数据库宕掉</strong>后，注册中心仍能通过<strong>缓存</strong>提供服务列表查询，但不能注册新服务</li><li>注册中心对等<strong>集群</strong>，任意一台宕掉后，将<strong>自动切换到另一台</strong></li><li><strong>注册中心全部宕掉后，服务提供者和服务消费者仍能通过<mark>本地缓存</mark>通讯</strong>（本地缓存了远程服务的ip端口号等信息，就算没有了注册中心，也可以直接使用ip和端口号与远程服务进行通讯）</li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><p>高可用：通过设计，减少系统不能提供服务的时间。</p>        <h3 id="集群下dubbo负载均衡配置"   >          <a href="#集群下dubbo负载均衡配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集群下dubbo负载均衡配置"></a> 集群下Dubbo负载均衡配置</h3>      <p>Dubbo提供了多种集群负载均衡策略，缺省为 <code>random</code>： 随机调用。共有如下四种策略：</p><ul><li><strong>Random LoadBalance</strong>：基于权重的随机负载均衡机制</li><li><strong>RoundRobin LoadBalance</strong>： 基于权重的轮询负载均衡机制</li><li><strong>LeastActive LoadBalance</strong>： 最少活跃数负载均衡机制</li><li><strong>ConsistentHash LoadBalance</strong>： 一致性Hash负载均衡机制</li></ul><p>负载均衡配置方法：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;...&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure><p>详细介绍：</p><p><strong>Random LoadBalance 基于权重的随机负载均衡机制</strong></p><p>随机，按权重设置随机概率。 调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612180908789.png" alt="img" /></p><p><strong>RoundRobin LoadBalance 基于权重的轮询负载均衡机制</strong></p><p>轮循，按公约后的权重设置轮循比率。 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612180928170.png" alt="img" /></p><p><strong>LeastActive LoadBalance 最少活跃数负载均衡机制</strong></p><p>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。 使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612180951468.png" alt="img" /></p><p><strong>ConsistentHash LoadBalance 一致性Hash负载均衡机制</strong></p><p>一致性 Hash，<strong>相同参数的请求总是发到同一提供者</strong>。 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p><p><img src="/images/%E3%80%90Dubbo%E3%80%91Dubbo/20200612181007825.png" alt="img" /></p><p>算法参见：<span class="exturl"><a class="exturl__link"   href="http://en.wikipedia.org/wiki/Consistent_hashing" >http://en.wikipedia.org/wiki/Consistent_hashing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 。缺省只对第一个参数 Hash，如果要修改，请配置：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">&quot;hash.arguments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0,1&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></div></figure><p>缺省用 160 份虚拟节点，如果要修改，请配置：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">&quot;hash.nodes&quot;</span> <span class="attr">value</span>=<span class="string">&quot;320&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="服务降级"   >          <a href="#服务降级" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务降级"></a> 服务降级</h3>      <p>服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的<strong>当不处理或换种简单的方式处理</strong>，从而释放服务器资源以保证核心交易正常运作或高效运作。</p><p>可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。向注册中心写入动态配置覆盖规则：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();</span><br><span class="line">Registry registry = registryFactory.getRegistry(URL.valueOf(<span class="string">&quot;zookeeper://10.20.153.10:2181&quot;</span>));</span><br><span class="line">registry.register(URL.valueOf(<span class="string">&quot;override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null&quot;</span>));</span><br></pre></td></tr></table></div></figure><p>其中两种服务降级方式：</p><ul><li><code>mock=force:return+null</code>（强制返回null)）表示消费方对该服务的方法调用<strong>都直接返回null值</strong>，不发起远程调用。用来屏蔽不重要服务<strong>不可用时</strong>对调用方的影响。</li><li><code>mock=fail:return+null</code> （失败才返回null）表示消费方对该服务的方法调用在<strong>失败后再返回null值</strong>，不抛异常。用来容忍不重要服务<strong>不稳定时</strong>对调用方的影响。</li></ul>        <h3 id="集群服务容错"   >          <a href="#集群服务容错" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集群服务容错"></a> 集群服务容错</h3>      <p>在服务调用失败时，Dubbo提供了多种容错方案，缺省为<code>failover</code>：失败重试。</p><p>集群服务容错模式：</p><ul><li><strong>Failover Cluster</strong>：<strong>失败自动切换</strong>，当出现失败，<strong>重试其它服务器</strong>。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数（不含第一次）。</li><li><strong>Failfast Cluster</strong>：<strong>快速失败</strong>，只发起一次调用，<strong>失败立即报错</strong>。通常用于<strong>非幂等性</strong>的写操作，比如新增记录。</li><li><strong>Failsafe Cluster</strong>：<strong>失败安全</strong>，出现异常时，<strong>直接忽略</strong>。通常用于写入审计日志等操作。</li><li><strong>Failback Cluster</strong>：<strong>失败自动恢复</strong>，后台记录失败请求，<strong>定时重发</strong>。通常用于消息通知操作。</li><li><strong>Forking Cluster</strong>：<strong>并行</strong>调用多个服务器，<strong>只要一个成功即返回</strong>。通常用于<strong>实时性要求较高的读操作</strong>，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</li><li><strong>Broadcast Cluster</strong>：<strong>广播调用所有提供者</strong>，逐个调用，任意一台报错则报错。通常用于<strong>通知</strong>所有提供者更新缓存或日志等本地资源信息。</li></ul><p>集群服务模式配置：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="整合hystrix"   >          <a href="#整合hystrix" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#整合hystrix"></a> 整合Hystrix</h3>      <p>服务熔断错处理配置参考=&gt; <span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/xc-xinxue/p/12459861.html" >https://www.cnblogs.com/xc-xinxue/p/12459861.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p><p>配置<code>spring-cloud-starter-netflix-hystrix</code>。Spring Boot官方提供了对Hystrix的集成，直接在<code>pom.xml</code>里加入依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>然后在<code>ProviderApplication</code>类上增加 <strong>@EnableHystrix</strong> 来启用hystrix starter：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">// 开启服务容错功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">//...启动方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>配置Provider端</strong></p><p>在Dubbo的Provider上增加 <strong>@HystrixCommand</strong> 配置，这样子调用就会经过Hystrix代理。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(version = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;) &#125;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(&quot;async provider received: &quot; + name);</span></span><br><span class="line">        <span class="comment">// return &quot;annotation: hello, &quot; + name;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Exception to show hystrix enabled.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>配置Consumer端</strong></p><p>对于Consumer端，则可以增加一层method调用，并在method上配置 <strong>@HystrixCommand</strong> 。当调用出错时，会走到 <code>fallbackMethod = &quot;reliable&quot;</code> 的调用里。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference(version = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> HelloService demoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;reliable&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doSayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reliable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hystrix fallback value&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Nginx】Nginx</title>
      <link href="2021/07/26/%E3%80%90Nginx%E3%80%91Nginx/"/>
      <url>2021/07/26/%E3%80%90Nginx%E3%80%91Nginx/</url>
      
        <content type="html"><![CDATA[        <h2 id="nginx简介"   >          <a href="#nginx简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#nginx简介"></a> Nginx简介</h2>      ]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Linux 常用命令</title>
      <link href="2021/07/21/%E3%80%90Linux%E3%80%91Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/07/21/%E3%80%90Linux%E3%80%91Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[        <h2 id="linux-和-unix"   >          <a href="#linux-和-unix" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linux-和-unix"></a> Linux 和 Unix</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/24217234/answer/360949879" >https://www.zhihu.com/question/24217234/answer/360949879</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>Unix于1969年由贝尔实验室开发出来，使用至今已变更了很多个版本。目前主流的Unix系统有三种，分别是AIX、HP-UX、Solaris，这些Unix系统互不兼容。</p><p>Linux于1991年由芬兰大学生Linus开发出来，是一个类Unix系统，但是其代码不源自任何Unix版本，完全不是Unix的一个分支，而是一个<strong>开源版</strong>的模仿。</p><blockquote><p>安装Linux虚拟机教程：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_41571900/article/details/84728480;" >https://blog.csdn.net/qq_41571900/article/details/84728480;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <span class="exturl"><a class="exturl__link"   href="https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg" >https://mp.weixin.qq.com/s/onVwwEQ1DAwbvK7qS2YNxg</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="linux-目录结构"   >          <a href="#linux-目录结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linux-目录结构"></a> Linux 目录结构</h2>      <p>linux的文件系统是采用<strong>级层式的树状</strong>目录结构，在此结构中的最上层是根目录**“ / ”**，然后在此目录下再创建其他的目录。在Linux世界里，一切皆文件。</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux%E6%8C%87%E4%BB%A4/image-20210721140508417.png" alt="image-20210721140508417" /></p><ul><li><strong>/bin</strong> (/usr/bin、/usr/local/bin)：是Binary的缩写，这个目录存放着最经常使用的<strong>命令</strong></li><li>/sbin (/usr/sbin、/usr/local/sbin)：Super User Binary的缩写，这里存放的是<strong>系统管理员</strong>使用的系统管理程序</li><li><strong>/home</strong>：存放<strong>普通用户</strong>的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</li><li><strong>/root</strong>：<strong>系统管理员</strong>目录，也称作超级权限者的用户主目录</li><li>/lib：系统开机所需要最基本的<strong>动态连接共享库 .so</strong>，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</li><li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li><li><strong>/etc</strong>：所有的系统管理所需要的<strong>配置文件和子目录 my.conf</strong></li><li><strong>/usr</strong>：Unix System Resource的缩写，存放<strong>Unix系统的资源</strong>。这是一个非常重要的目录，用户的很多<strong>应用程序和文件</strong>都放在这个目录下，类似于windows下的program files目录</li><li><strong>/boot</strong>：存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</li><li>/srv：service缩写，该目录存放一些服务启动之后需要提取的数据</li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统</li><li>/tmp：这个目录是用来存放一些临时文件的</li><li>/dev：类似于windows的设备管理器，把所有的<strong>硬件</strong>用文件的形式存储</li><li><strong>/media</strong>：linux系统会自动识别一些<strong>设备</strong>，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><strong>/mnt</strong>：系统提供该目录是为了让用户<strong>临时挂载</strong>别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。比如共享文件夹 <code>D:/myshare</code></li><li>/opt：这是存放应用程序<strong>压缩包</strong>的目录。如安装ORACLE数据库的压缩包就可放到该目录下。默认为空。</li><li><strong>/usr/local</strong>：主要存放那些<strong>手动安装的软件</strong>的目录。一般是通过编译源码方式安装的程序。</li><li><strong>/var</strong>：这个目录中存放着在不断扩充着的东西，习惯将经常被修改的文件和目录放在这个目录下。包括各种日志文件。</li><li>/selinux [security-enhanced linux]：SELinux是一种安全子系统，它能控制程序只能访问特定文件。</li></ul><span id="more"></span>        <h2 id="硬链接和软链接"   >          <a href="#硬链接和软链接" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#硬链接和软链接"></a> 硬链接和软链接</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.huaweicloud.com/articles/e2aa9d7612d1446629d95ced9b16a1d5.html" >https://www.huaweicloud.com/articles/e2aa9d7612d1446629d95ced9b16a1d5.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><ul><li><strong>硬链接</strong>：新建的文件是已经存在的文件的一个别名，当原文件删除时，新建的文件仍然可以使用</li><li><strong>软链接</strong>：也称为<strong>符号链接</strong>，新建的文件以“路径”的形式来表示另一个文件，和Windows的快捷方式十分相似，新建的软链接可以指向不存在的文件</li></ul><p>硬链接和原来的文件没有什么区别，而且共享一个 inode 号（文件在文件系统上的唯一标识）；而软链接不共享 inode，也可以说是个特殊的 inode，所以和原来的 inode 有区别。若原文件删除了，则该软连接则不可以访问，而硬连接则是可以的。由于符号链接的特性，导致其可以跨越磁盘分区，但硬链接不具备这个特性。</p><p>创建硬链接：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] touch f1  <span class="comment">#创建一个测试文件f1</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] ln f1 f2  <span class="comment">#创建f1的一个硬链接文件f2</span></span><br></pre></td></tr></table></div></figure><p>创建软链接</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ln -s f1 f3  <span class="comment">#创建f1的一个符号连接文件f3</span></span><br></pre></td></tr></table></div></figure>        <h2 id="用户管理"   >          <a href="#用户管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理</h2>      <p>增加用户</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] useradd -g 用户组名 用户名</span><br></pre></td></tr></table></div></figure><p>查看用户信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] id 用户名</span><br></pre></td></tr></table></div></figure><p>增加组</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] groupadd 用户组名</span><br></pre></td></tr></table></div></figure><p>修改用户密码</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] passwd 用户名</span><br></pre></td></tr></table></div></figure><p><strong>/etc/passwd</strong>：用户（user）的配置文件，记录用户的各种信息。每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux%E6%8C%87%E4%BB%A4/image-20210722210112194.png" alt="image-20210722210112194" /></p><p><strong>/etc/group</strong>：组(group)的配置文件，记录Linux包含的组的信息。每行含义：组名:口令:组标识号:组内用户列表</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux%E6%8C%87%E4%BB%A4/image-20210722210316408.png" alt="image-20210722210316408" /></p><p><strong>/etc/shadow</strong>：口令的配置文件。每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux%E6%8C%87%E4%BB%A4/image-20210722210303001.png" alt="image-20210722210303001" /></p>        <h2 id="组管理"   >          <a href="#组管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组管理"></a> 组管理</h2>      <p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。</p><p>修改文件所有者（chown：change owner）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] chown [-R] 用户名 文件名/文件目录名</span><br></pre></td></tr></table></div></figure><p>修改文件所在组（chgrp：change group）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] chgrp [-R] 组名 文件名/文件目录名</span><br></pre></td></tr></table></div></figure><p>改变用户所在组（usermod：user modify）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] usermod –g 组名 用户名</span><br><span class="line"></span><br><span class="line">[root@localhost root] usermod –d 目录名 用户名 改变该用户登陆的初始目录。</span><br></pre></td></tr></table></div></figure><p>参数选项</p><ul><li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li></ul>        <h2 id="权限"   >          <a href="#权限" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#权限"></a> 权限</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/linux/linux-file-attr-permission.html" >https://www.runoob.com/linux/linux-file-attr-permission.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90Linux%E3%80%91Linux/image-20210724193608190.png" alt="image-20210724193608190" /></p><p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ls -l</span><br><span class="line">total 64</span><br><span class="line">dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</span><br><span class="line">dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot</span><br><span class="line">……</span><br></pre></td></tr></table></div></figure><p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）：</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux/image-20210724193922713.png" alt="image-20210724193922713" /></p><p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，第 1、4、7位表示读权限，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；第2、5、8位表示写权限，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；第3、6、9位表示可执行权限，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p><p><strong>rwx作用到文件</strong></p><ul><li>[ r ] 代表可读(read): 可以读取,查看</li><li>[ w ] 代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的<strong>前提条件</strong>是对该文件所在的<strong>目录</strong>有写权限，才能删除该文件.</li><li>[ x ] 代表可执行(execute):<strong>可以被执行</strong></li></ul><p><strong>rwx作用到目录</strong></p><ul><li>[ r ] 代表可读(read): 可以读取，ls查看目录内容</li><li>[ w ] 代表可写(write): 可以修改,<strong>目录内创建+删除+重命名目录</strong></li><li>[ x ] 代表可执行(execute):<strong>可以进入该目录</strong></li></ul><p>rwx作用到文件和目录上的区别：</p><ul><li>对[ r ]来说，二者都是读取内容；</li><li>对[ w ]来说，若文件没有该权限，则无法修改和删除该文件；若目录没有该权限，则无法在该目录内创建和删除文件，也无法重命名；</li><li>对[ x ]来说，若文件没有该权限，则<strong>无法被执行</strong>；若目录没有该权限，则<strong>无法进入该目录</strong></li></ul>        <h3 id="权限相关指令"   >          <a href="#权限相关指令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#权限相关指令"></a> 权限相关指令</h3>      <p>修改权限：</p><p>u: 所有者 g: 所有组 o: 其他人 a: 所有人(u、g、o的总和)</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] chmod [-R] u=rwx,g=rx,0=x 文件目录名  <span class="comment"># 给文件目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] chmod o+w 文件目录名 <span class="comment"># 给文件目录增加权限</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] chmod u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"><span class="comment"># 上述命令等价于：</span></span><br><span class="line">[root@localhost root] chmod 751 文件目录名</span><br></pre></td></tr></table></div></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改</p>        <h2 id="实用指令"   >          <a href="#实用指令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实用指令"></a> 实用指令</h2>              <h3 id="linux系统运行级别"   >          <a href="#linux系统运行级别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linux系统运行级别"></a> Linux系统运行级别</h3>      <ul><li>0 ：关机</li><li>1 ：单用户模式，不需要输入密码【可用于找回丢失密码】</li><li>2：多用户状态没有网络服务</li><li><strong>3：多用户状态有网络服务</strong></li><li>4：系统未使用，保留给用户</li><li><strong>5：图形界面</strong></li><li>6：系统重启</li></ul><p>常用运行级别是3和5 ，要修改默认的运行级别可改文件</p><p><img src="/images/%E3%80%90Linux%E3%80%91Linux%E6%8C%87%E4%BB%A4/image-20210722210529000.png" alt="image-20210722210529000" /></p><p>切换到指定的运行级别命令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] init [0~6]</span><br></pre></td></tr></table></div></figure><p>使用案例：找回丢失的root密码？</p><p>思路：进入到<strong>单用户模式</strong>，修改root密码。因为进入单用户模式，root不需要密码就可以登录</p>        <h3 id="常用命令"   >          <a href="#常用命令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3>      <p><strong>man</strong>：获得帮助信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] man [命令或配置文件]</span><br></pre></td></tr></table></div></figure><p><strong>help</strong>：获得帮助信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] <span class="built_in">help</span> [命令]</span><br></pre></td></tr></table></div></figure>        <h4 id="文件目录类"   >          <a href="#文件目录类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件目录类"></a> 文件目录类</h4>      <p><strong>mkdir</strong>：创建目录</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] mkdir [选项] 要创建的目录</span><br></pre></td></tr></table></div></figure><p>常用选项：<code>-p</code>  创建多级目录</p><p><strong>rmdir</strong>：删除空目录（只能删除空目录，如果目录下有内容时无法删除）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rmdir [选项] 要删除的空目录</span><br></pre></td></tr></table></div></figure><p>如果需要删除非空目录，需要使用<code>rm -rf</code></p><p><strong>rm</strong>：移除文件或目录</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rm [选项] 要删除的文件或目录</span><br></pre></td></tr></table></div></figure><p>常用选项：</p><ul><li><code>-r</code> ：递归删除整个文件夹</li><li><code>-f</code>：强制删除不提示</li></ul><p><strong>mv</strong>：移动文件与目录或重命名</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] mv oldNameFile newNameFile (功能描述：重命名)</span><br><span class="line"></span><br><span class="line">[root@localhost root] mv /temp/movefile /targetFolder (功能描述：移动文件)</span><br></pre></td></tr></table></div></figure><p><strong>touch</strong>：创建空文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] touch hello.java</span><br></pre></td></tr></table></div></figure><p><strong>cp</strong>：拷贝文件到指定目录</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] cp [选项] /home/aaa.txt /home/dest/</span><br></pre></td></tr></table></div></figure><p>常用选项：<code>-r</code>  递归复制整个文件夹</p>        <h4 id="文件阅读类"   >          <a href="#文件阅读类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件阅读类"></a> 文件阅读类</h4>      <p><strong>cat</strong>：查看文件内容（concatenate）。<strong>cat</strong> 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 | more</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] cat [选项] 要查看的文件</span><br></pre></td></tr></table></div></figure><p>常用选项：<code>-n</code>  显示行号</p><p><strong>more</strong>：是一个基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/50383258" >https://zhuanlan.zhihu.com/p/50383258</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] more 要查看的文件</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键(space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻一行；</td></tr><tr><td>/hello</td><td>查找文本中<code>hello</code>字段，按N查找下一个</td></tr><tr><td>q</td><td>代表立刻离开more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></div><p><strong>less</strong>：用来分屏查看文件内容，它的功能与<strong>more</strong>指令类似，但是比<strong>more</strong>指令更加强大，支持各种显示终端。<strong>less</strong>指令在显示文件内容时，<strong>并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</strong>。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] less 要查看的文件</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键(space)</td><td>向下翻一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>q</td><td>代表立刻离开more ，不再显示该文件内容。</td></tr><tr><td>/字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；下滚动一屏</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr></tbody></table></div><p>对比：</p><ul><li><code>more</code> – 传统且基础的分页阅读工具，仅支持向下翻页和有限次数的向上翻页。</li><li><code>less</code> – 比 <code>more</code> 功能丰富，支持向下翻页和向上翻页，也支持文本搜索。在打开大文件的时候，比 <code>vi</code> 这类文本编辑器启动得更快。</li><li><code>most</code> – 在上述两个工具功能的基础上，还加入了同时打开多个文件、同时锁定或滚动多个屏幕、分屏等等大量功能</li></ul><p><strong>head</strong>：显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] head -n 5 文件(功能描述：查看文件头5行内容，5可以是任意行数)</span><br></pre></td></tr></table></div></figure><p><strong>tail</strong>：输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] tail 文件（功能描述：查看文件后10行内容）</span><br><span class="line"></span><br><span class="line">[root@localhost root] tail -n 5 文件（功能描述：查看文件后5行内容，5可以是任意行数）</span><br><span class="line"></span><br><span class="line">[root@localhost root] tail -f 文件（功能描述：实时追踪该文档的所有更新）</span><br></pre></td></tr></table></div></figure><p>主要区别：</p><ul><li><strong>cat</strong>命令可以一次显示整个文件，如果文件比较大，使用不是很方便；</li><li><strong>more</strong>命令可以让屏幕在显示满一屏幕时暂停，按空格往前翻页，按b往后翻页。</li><li><strong>less</strong>命令也可以分页显示文件，和more命令的区别就在于：<ul><li>支持上下键卷动屏幕、查找。</li><li>不需要在一开始就读取整个文件，<strong>打开大文件时比more、vim更快</strong>。</li></ul></li><li><strong>head</strong>命令用于查看文件的前n行。</li><li><strong>tail</strong>命令用于查看文件的后n行。加上-f命令，查看在线日志非常方便，可以打印最新增加的日志。</li></ul><p><code>&gt;</code> 指令和 <code>&gt;&gt;</code> 指令</p><ul><li><code>&gt;</code>：输出重定向（覆盖写）</li><li><code>&gt;&gt;</code>：追加（不覆盖）</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ls -l &gt; 文件（功能描述：列表的内容写入文件a.txt中（覆盖写））</span><br><span class="line"></span><br><span class="line">[root@localhost root] ls -al &gt;&gt; 文件（功能描述：列表的内容追加到文件aa.txt的末尾）</span><br><span class="line"></span><br><span class="line">[root@localhost root] cat 文件1 &gt; 文件2（功能描述：将文件1的内容覆盖到文件2）</span><br><span class="line"></span><br><span class="line">[root@localhost root] <span class="built_in">echo</span> <span class="string">&quot;内容&quot;</span> &gt;&gt; 文件</span><br></pre></td></tr></table></div></figure><p><strong>history</strong>：查看已经执行过历史命令,也可以执行历史指令</p>        <h4 id="搜索查找类"   >          <a href="#搜索查找类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#搜索查找类"></a> 搜索查找类</h4>      <p><strong>find</strong>：</p><p>从根⽬录开始搜索⽂件/⽬录</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] find / -name file1</span><br></pre></td></tr></table></div></figure><p>搜索⽤户user1的⽂件/⽬录</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] find / -user user1</span><br></pre></td></tr></table></div></figure><p><strong>locate</strong>：</p><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] locate &lt;关键词&gt; </span><br></pre></td></tr></table></div></figure><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用<strong>updatedb</strong>指令创建locate数据库。</p><p><strong>grep</strong>：Global regular expression print。用于查找文件里符合条件的字符串。</p><p>全局正则表达搜索：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] grep xxx hello.txt <span class="comment"># 在⽂件hello.txt中查找关键词 xxx</span></span><br></pre></td></tr></table></div></figure><p><strong>gzip/gunzip</strong>：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] gzip 文件       <span class="comment"># 压缩文件，只能将文件压缩为*.gz文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] gunzip 文件.gz  <span class="comment"># 解压缩文件命令</span></span><br></pre></td></tr></table></div></figure><p><strong>zip/unzip</strong>：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] zip xxx.zip file <span class="comment"># 压缩⾄zip包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] zip -r xxx.zip file1 file2 dir1 <span class="comment"># 将多个⽂件+⽬录压成zip包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] unzip XXX.zip  <span class="comment"># 解压缩文件</span></span><br></pre></td></tr></table></div></figure><p><strong>tar</strong>：</p><p>tar 指令是打包指令，最后打包后的文件是.tar.gz 的文件。</p><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:center">产生.tar打包文件</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">显示详细信息</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:center">指定压缩后的文件名</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">打包同时压缩</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">解包.tar文件</td></tr></tbody></table></div><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] tar -cvf xxx.tar file1 file2 dir1 <span class="comment"># 将多个⽂件+⽬录打tar包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -tf xxx.tar <span class="comment"># 查看tar包的内容</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -xvf xxx.tar <span class="comment"># 解压tar包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -xvf xxx.tar -C /dir <span class="comment"># 将tar包解压⾄指定⽬录</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -cvfj xxx.tar.bz2 dir <span class="comment"># 创建bz2压缩包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -jxvf xxx.tar.bz2 <span class="comment"># 解压bz2压缩包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -cvfz xxx.tar.gz dir <span class="comment"># 创建gzip压缩包</span></span><br><span class="line"></span><br><span class="line">[root@localhost root] tar -zxvf xxx.tar.gz <span class="comment"># 解压gzip压缩包</span></span><br></pre></td></tr></table></div></figure>        <h4 id="网络通讯类"   >          <a href="#网络通讯类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#网络通讯类"></a> 网络通讯类</h4>      <blockquote><p>Telnet协议是<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE" >TCP/IP协议</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151" >主机</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>工作的能力。在<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E7%BB%88%E7%AB%AF/1903878" >终端</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>使用者的电脑上使用telnet程序，用它连接到<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E7%BB%88%E7%AB%AF/1903878" >终端</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>使用者可以在telnet程序中输入命令，这些命令会在<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。要开始一个telnet会话，必须输入用户名和密码来登录<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。Telnet是常用的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/934368" >远程控制</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>Web<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的方法。</p></blockquote><p><strong>telnet</strong>：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] telnet IP 端口</span><br></pre></td></tr></table></div></figure><p><strong>dhclient</strong>：为本机分配一个网络内可用的IP地址</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] dhclient</span><br></pre></td></tr></table></div></figure><p>编辑虚拟机系统网卡配置：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></div></figure><p>修改配置如下：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">PROXY_METHOD&#x3D;none</span><br><span class="line">BROWSER_ONLY&#x3D;no</span><br><span class="line">&#x2F;&#x2F; 修改为静态IP</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">DEFROUTE&#x3D;yes</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6INIT&#x3D;yes</span><br><span class="line">IPV6_AUTOCONF&#x3D;yes</span><br><span class="line">IPV6_DEFROUTE&#x3D;yes</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;no</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;stable-privacy</span><br><span class="line">NAME&#x3D;ens33</span><br><span class="line">UUID&#x3D;824ec4bd-a9ae-4410-8346-17ce7f3dd111</span><br><span class="line">DEVICE&#x3D;ens33</span><br><span class="line">&#x2F;&#x2F; 设置IP地址等信息</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">IPADDR&#x3D;192.168.31.21</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;192.168.31.1</span><br><span class="line">DNS1&#x3D;119.29.29.29</span><br></pre></td></tr></table></div></figure><p>编辑完成，重启网络设置即可</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] systemctl restart network.service</span><br></pre></td></tr></table></div></figure>        <h2 id="定时任务调度"   >          <a href="#定时任务调度" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定时任务调度"></a> 定时任务调度</h2>      <p>任务调度：是指系统在某个时间执行的特定的命令或程序。任务调度分类：</p><ul><li>系统工作：有些重要的工作必须周而复始地执行，如病毒扫描等</li><li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</li></ul><p>指令：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] crontab [选项]</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th style="text-align:center">参数选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-e</td><td style="text-align:center">编辑crontab定时任务</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">列出当前有哪些crontab任务调度</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">终止任务调度，删除当前用户所有的crontab任务</td></tr></tbody></table></div><p>重启任务调度</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] service crond restart</span><br></pre></td></tr></table></div></figure><p>示例：</p><ul><li>设置任务调度文件：<code>/etc/crontab</code></li><li>设置个人任务调度。执行 <code>crontab –e</code> 命令。</li><li>接着输入任务到调度文件如：<code>*/1 * * * * ls –l /etc/ &gt; /tmp/to.txt</code>，意思说每小时的每分钟执行 <code>ls –l /etc/ &gt; /tmp/to.txt</code> 命令</li></ul><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td></td><td></td></tr></tbody></table></div>        <h2 id="分区"   >          <a href="#分区" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#分区"></a> 分区</h2>      <p>补充：Linux兄弟连</p><p>Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>查看所有设备挂载情况：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] lsblk</span><br></pre></td></tr></table></div></figure><p>挂载：将一个分区与一个目录联系起来（<code>mount 设备名称 挂载目录</code>）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] mount /dev/sdb1 /newdisk</span><br><span class="line"></span><br><span class="line">[root@localhost root] umount/dev/sdb1 或者 umount/newdisk</span><br></pre></td></tr></table></div></figure><p><strong>用命令行挂载重启后会失效</strong>。永久挂载：通过修改<code>/etc/fstab</code>实现挂载。添加完成后执行<code>mount –a</code> 即刻生效。</p><p>查询系统整体磁盘使用情况：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] df -h</span><br></pre></td></tr></table></div></figure><p>查询指定目录的磁盘占用情况，默认为当前目录：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] du -h /目录</span><br></pre></td></tr></table></div></figure><p>参数：</p><ul><li>-s指定目录占用大小汇总</li><li>-h 带计量单位</li><li>-a 含文件</li><li>–max-depth=1 子目录深度</li><li>-c 列出明细的同时，增加汇总值</li></ul>        <h2 id="进程"   >          <a href="#进程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2>      <p>在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p><p>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才结束。</p>        <h3 id="进程历史"   >          <a href="#进程历史" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#进程历史"></a> 进程历史</h3>      <p><mark>补充兄弟连</mark></p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/zwcry/p/9602756.html" >https://www.cnblogs.com/zwcry/p/9602756.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>历史上，Linux 的启动一直采用<code>init</code>进程。CentOS 6.0中使用下面的命令用来启动服务。</p><blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/apache2 start</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ service apache2 start</span><br></pre></td></tr></table></div></figure></blockquote><p>这种方法有两个缺点：</p><ul><li>一是启动时间长。<code>init</code>进程是串行启动，只有前一个进程启动完，才会启动下一个进程。</li><li>二是启动脚本复杂。<code>init</code>进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。</li></ul>        <h3 id="systemd-概述"   >          <a href="#systemd-概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#systemd-概述"></a> Systemd 概述</h3>      <p><code>Systemd</code> 就是为了解决这些问题而诞生的。它的设计目标是为系统的启动和管理提供一套完整的解决方案。根据 Linux 惯例，字母<code>d</code>是守护进程（daemon）的缩写。 <code>Systemd</code> 这个名字的含义，就是<strong>它要守护整个系统</strong>。</p><p>使用了 <code>Systemd</code>，就不需要再用<code>init</code>了。<code>Systemd</code> 取代了<code>initd</code>，<strong>成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程</strong></p><blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --version</span><br></pre></td></tr></table></div></figure></blockquote><p>上面的命令查看 <code>Systemd</code> 的版本。</p><p><code>Systemd</code> 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。<code>Systemd</code> 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p><p><strong><code>systemctl</code>是 Systemd 的主命令，用于管理系统。</strong></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">$ sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">$ sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">$ sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">$ sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">$ sudo systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">$ sudo systemctl rescue</span><br></pre></td></tr></table></div></figure><p><code>systemctl</code>命令是Linux系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。<code>ctl</code>代表<code>Control</code></p><blockquote><p>systemctl — Control the systemd system and service manager</p></blockquote>        <h3 id="查看进程"   >          <a href="#查看进程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#查看进程"></a> 查看进程</h3>      <p><code>ps</code>（process status）命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。</p><ol><li>查看某种服务的进程（例如查看java相关服务的进程）：</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ps –aux | grep xxx</span><br><span class="line"></span><br><span class="line">[root@localhost root] ps –aux | grep java</span><br><span class="line"></span><br><span class="line">[root@localhost root] ps –aux | grep sshd</span><br></pre></td></tr></table></div></figure><p>参数说明：</p><ul><li><code>-a</code> 显示所有用户的进程(show processes for all users)</li><li><code>-u</code> 显示用户(display the process’s user/owner)</li><li><code>-x</code> 显示无控制终端的进程(also show processes not attached to a terminal)</li></ul><ol start="2"><li>以全格式显示当前所有的进程：</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ps -ef</span><br></pre></td></tr></table></div></figure><p>参数说明：</p><ul><li><code>-e</code> 显示所有进程</li><li><code>-f</code> 全格式</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] ps -ef | grep xxx</span><br></pre></td></tr></table></div></figure><ol start="3"><li>以树状结构展示进程</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] pstree</span><br></pre></td></tr></table></div></figure><ol start="4"><li>终止进程（强迫进程立即停止）：</li></ol><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] <span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></div></figure><p>详解：</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/user/1410546" >https://cloud.tencent.com/developer/user/1410546</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><code>ps -aux</code> 是以BSD方式显示</p><blockquote><p>a 显示所有用户的进程(show processes for all users) u 显示用户(display the process’s user/owner) x 显示无控制终端的进程(also show processes not attached to a terminal)</p></blockquote><p><code>ps -ef</code> 是以System V方式显示，该种方式比BSD方式显示的多</p><blockquote><p>e 显示所有用户的进程(all processes)此参数的效果和指定&quot;a&quot;参数相同 f 用ASCII字符显示树状结构，表达程序间的相互关系(ASCII art forest)</p></blockquote><p>下面看两个命令各自显示哪些内容：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux </span><br><span class="line">USER       PID %CPU %MEM   VSZ  RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.0  4828  516 ?        Ss    2014   1:28 init [3]         </span><br><span class="line">root         2  0.0  0.0     0    0 ?        S     2014   0:00 [kthreadd]</span><br><span class="line">root         3  0.0  0.0     0    0 ?        S     2014   0:43 [migration/0]</span><br><span class="line">root         4  0.0  0.0     0    0 ?        S     2014   7:34 [ksoftirqd/0]</span><br><span class="line">root         5  0.0  0.0     0    0 ?        S     2014   0:01 [migration/0]</span><br><span class="line">root         6  0.0  0.0     0    0 ?        S     2014   0:03 [watchdog/0]</span><br><span class="line">root         7  0.0  0.0     0    0 ?        S     2014   3:04 [migration/1]</span><br><span class="line">root         8  0.0  0.0     0    0 ?        S     2014   0:01 [migration/1]</span><br><span class="line">root         9  0.0  0.0     0    0 ?        S     2014   1:44 [ksoftirqd/1]</span><br><span class="line">root        10  0.0  0.0     0    0 ?        S     2014   0:01 [watchdog/1]</span><br><span class="line">root        11  0.0  0.0     0    0 ?        S     2014   2:21 [migration/2]</span><br><span class="line">root        12  0.0  0.0     0    0 ?        S     2014   0:01 [migration/2]</span><br></pre></td></tr></table></div></figure><p>其中显示了：</p><blockquote><p>1、USER 哪个用户启动了这个命令 2、PID 进程ID 3、CPU CPU占用率 4、MEM 内存使用量 5、VSZ 如果一个程序完全驻留在内存的话需要占用多少内存空间 6、RSS 当前实际占用了多少内存 7、TTY: 终端的次要装置号码 (minor device number of tty) 8、STAT 进程当前的状态(“S”:中断 sleeping,进程处在睡眠状态,表明这些进程在等待某些事件发生–可能是用户输入或者系统资源的可用性;“D”:不可中断 uninterruptible sleep;“R”:运行 runnable;“T”:停止 traced or stopped;“Z”:僵死 a defunct zombie process) 9、START 启动命令的时间点 10、TIME 进程执行起到现在总的CPU暂用时间 11、COMMAND 启动这个进程的命令</p></blockquote><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef </span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0  2014 ?        00:01:28 init [3]         </span><br><span class="line">root         2     0  0  2014 ?        00:00:00 [kthreadd]</span><br><span class="line">root         3     2  0  2014 ?        00:00:43 [migration/0]</span><br><span class="line">root         4     2  0  2014 ?        00:07:34 [ksoftirqd/0]</span><br><span class="line">root         5     2  0  2014 ?        00:00:01 [migration/0]</span><br><span class="line">root         6     2  0  2014 ?        00:00:03 [watchdog/0]</span><br><span class="line">root         7     2  0  2014 ?        00:03:04 [migration/1]</span><br><span class="line">root         8     2  0  2014 ?        00:00:01 [migration/1]</span><br><span class="line">root         9     2  0  2014 ?        00:01:44 [ksoftirqd/1]</span><br><span class="line">root        10     2  0  2014 ?        00:00:01 [watchdog/1]</span><br><span class="line">root        11     2  0  2014 ?        00:02:21 [migration/2]</span><br><span class="line">root        12     2  0  2014 ?        00:00:01 [migration/2]</span><br></pre></td></tr></table></div></figure><p>其中显示了：</p><blockquote><p>1、UID 用户号 2、PID 进程ID 3、PPID 父进程号 4、C CPU占用率 5、TTY 终端的次要装置号码 (minor device number of tty) 6、TIME 进程执行起到现在总的CPU暂用时间 7、COMMAND 启动这个进程的命令</p></blockquote><p>一般使用这两个命令的作用是查看预期的进程是否启动，或者杀死指定的进程，例如查看memcached进程是否正常启动：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep <span class="string">&#x27;memcached&#x27;</span></span><br><span class="line">work   14896  5034  0 16:30 pts/12   00:00:00 grep memcached</span><br><span class="line">work   27799     1  0  2014 ?        00:01:08 /home/work/<span class="built_in">local</span>/memcache/bin/memcached -d -m 8096 -p 11215 -c 256</span><br></pre></td></tr></table></div></figure><p>通过grep命令可以查找指定的进程名称，上面例子查找发现正常运行了，但如果我要关闭这个进程，可以通过杀死PID来完成，例如memcached的PID是27799，那么执行下面kill命令即可：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> 27799</span><br><span class="line">$ ps -ef | grep <span class="string">&#x27;memcached&#x27;</span></span><br><span class="line">work   14896  5034  0 16:30 pts/12   00:00:00 grep memcached</span><br></pre></td></tr></table></div></figure><p>再次查找进程已经消失。</p>        <h3 id="服务管理"   >          <a href="#服务管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务管理"></a> 服务管理</h3>      <p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql , sshd 防火墙等)，因此我们又称为守护进程。</p><p>CentOS 6.0：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] service 服务名 [start | stop | restart | reload | status] </span><br></pre></td></tr></table></div></figure><p>CentOS 7.0 后不再使用<code>service</code>，而是<code>systemctl</code>：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] systemctl [start | stop | restart | reload | status] 服务名</span><br></pre></td></tr></table></div></figure><p>例如修改网络设置后，重启网络设置：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] systemctl restart network.service</span><br></pre></td></tr></table></div></figure><p>查看服务名：查看 <code>/etc/init.d/服务名称</code></p><ul><li>当使用指令关闭或者启用防火墙后，将立即生效。[<code>telnet</code> 测试某个端口即可]</li><li>但这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</li><li>如果希望设置某个服务自启动或关闭永久生效，要使用<code>chkconfig</code>指令</li></ul>        <h3 id="服务的运行级别runlevel"   >          <a href="#服务的运行级别runlevel" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#服务的运行级别runlevel"></a> 服务的运行级别(runlevel)</h3>      <p>查看或者修改默认级别：<code>vi /etc/inittab</code></p><p>Linux系统有7种运行级别(runlevel)：<strong>常用的是级别3和5</strong></p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)，不支持网络</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><p><img src="/images/%E3%80%90Linux%E3%80%91Linux/image-20210806210724476.png" alt="image-20210806210724476" /></p>        <h3 id="chkconfig指令"   >          <a href="#chkconfig指令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#chkconfig指令"></a> chkconfig指令</h3>      <p>通过<code>chkconfig</code>命令可以给每个服务的各个运行级别设置自启动/关闭。<code>chkconfig</code>重新设置服务后自启动或关闭，需要重启机器reboot才能生效。</p><p>查看服务：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] chkconfig --list | grep xxx</span><br><span class="line"></span><br><span class="line">[root@localhost root] chkconfig 服务名 --list</span><br><span class="line"></span><br><span class="line">[root@localhost root] chkconfig --level 5 服务名 on/off</span><br></pre></td></tr></table></div></figure>        <h3 id="动态监控进程"   >          <a href="#动态监控进程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态监控进程"></a> 动态监控进程</h3>      <p><code>top</code>与<code>ps</code>命令很相似。它们都用来显示正在执行的进程。<code>top</code>与<code>ps</code>最大的不同之处，在于<code>top</code>在执行一段时间可以更新正在运行的的进程。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] top [选项]</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table></div><p>交互操作说明：</p><div class="table-container"><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table></div><p>应用案例：</p><p>案例1. 监视特定用户：</p><ul><li>输入top命令，按回车键，查看执行的进程。</li><li>u：然后输入“u”回车，再输入用户名，即可</li></ul><p>案例2：终止指定的进程。</p><ul><li>输入top命令，按回车键，查看执行的进程。</li><li>k：然后输入“k”回车，再输入要结束的进程ID号</li></ul>        <h3 id="监控网络状态"   >          <a href="#监控网络状态" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#监控网络状态"></a> 监控网络状态</h3>      <p>查看系统网络情况<code>netstat</code>：</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] netstat [选项]</span><br></pre></td></tr></table></div></figure><p>选项说明：</p><ul><li>-an 按一定顺序排列输出</li><li>-p 显示哪个进程在调用</li></ul>        <h2 id="rpm包管理"   >          <a href="#rpm包管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rpm包管理"></a> RPM包管理</h2>      <p>RPM：一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。Linux的分发版本都有采用（suse,redhat, centos 等等），可以算是公认的行业标准。</p><p>一个rpm包名：<code>firefox-45.0.1-1.el6.centos.x86_64.rpm</code></p><ul><li>名称:firefox</li><li>版本号：45.0.1-1</li><li>适用操作系统: el6.centos.x86_64</li><li>表示centos6.x的64位系统</li><li>如果是i686、i386表示32位系统，noarch表示通用</li></ul><p>查询安装的所有rpm软件包</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm –qa | grep xx</span><br></pre></td></tr></table></div></figure><p>查询软件包是否安装</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -q 软件包名</span><br></pre></td></tr></table></div></figure><p>查询软件包信息</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -qi 软件包名</span><br></pre></td></tr></table></div></figure><p>查询软件包中的文件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -ql 软件包名</span><br></pre></td></tr></table></div></figure><p>查询文件所属的软件包</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -qf 文件全路径名</span><br></pre></td></tr></table></div></figure><p><strong>卸载rpm包</strong></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -e 包的名称</span><br></pre></td></tr></table></div></figure><p><strong>安装rpm包</strong></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] rpm -ivh 包全路径名称</span><br></pre></td></tr></table></div></figure><p>参数说明</p><ul><li>i=install 安装</li><li>v=verbose 提示</li><li>h=hash 进度条</li></ul>        <h2 id="yum包管理"   >          <a href="#yum包管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#yum包管理"></a> YUM包管理</h2>      <p>Yum 是一个<strong>Shell前端软件包管理器</strong>。基于RPM包管理，能够从指定的服务器<strong>自动下载RPM包并且安装</strong>，可以<strong>自动处理依赖性</strong>关系，并且一次安装所有依赖的软件包。</p><p>查询yum服务器是否有需要安装的软件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] yum list | grep xx软件列表</span><br></pre></td></tr></table></div></figure><p>安装指定的yum包</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost root] yum install xxx</span><br></pre></td></tr></table></div></figure>        <h2 id="vi-和-vim"   >          <a href="#vi-和-vim" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#vi-和-vim"></a> vi 和 vim</h2>      <blockquote><p><strong>Vim</strong>是从<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Vi" >vi</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>发展出来的一个<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8" >文本编辑器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Emacs" >Emacs</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>并列成为<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F" >类Unix系统</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>用户最喜欢的编辑器。</p><p>Vim的第一个版本由<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E5%B8%83%E8%90%8A%E5%A7%86%C2%B7%E7%B1%B3%E5%8B%92" >布莱姆·米勒</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>在1991年发布。最初的简称是<strong>V</strong>i <strong>IM</strong>itation，随着功能的不断增加，正式名称改成了<strong>V</strong>i <strong>IM</strong>proved。现在是在<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" >开放源代码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>方式下发行的<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6" >自由软件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p></blockquote><p>vi和vim它们都是多模式编辑器，不同的是vim是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。</p><p>vim的这些优势主要体现在以下几个方面：</p><ol><li>多级撤消：我们知道在vi里，按u只能撤消上次命令，而在vim里可以无限制的撤消。</li><li>易用性：vi只能运行于unix中，而vim不仅可以运行于unix,windows ,mac等多操作平台。</li><li>语法加亮：vim可以用不同的颜色来加亮你的代码。</li><li>可视化操作：vim不仅可以在终端运行，也可以运行于x window、 mac os、 windows。</li><li>对vi的完全兼容：某些情况下，可以把vim当成vi来使用。</li><li>vi和vim都是Linux中的编辑器，不同的是vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding。</li></ol><p>vi有3个模式：</p><ul><li>插入模式：在此模式下可以输入字符，按ESC将回到命令模式。</li><li>命令模式：可以移动光标、删除字符等。</li><li>低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 IoC源码分析</title>
      <link href="2021/07/14/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/14/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[        <h2 id="ioc容器"   >          <a href="#ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ioc容器"></a> IoC容器</h2>      <p>IoC容器就是保存组件的地方，其内本质上是一些map对象存储组件。</p><p>在容器启动时，首先将所有定义的组件创建，并添加到这些map对象中。之后开发人员再从容器中getBean()获取组件时，将直接从该map中取出该组件，无需再创建</p><p>BeanFactory和ApplicationContext的区别：ApplicationContext是BeanFactory的子接口。</p><p>BeanFactory：Bean工厂接口，负责创建Bean实例，其内保存的单例Bean都保存在一个map中</p><p>ApplicationContext：容器接口，更多的负责容器功能的实现，其可以基于BeanFactory创建好的对象之上完成强大的容器功能，其可以从map中获取这些Bean，并且AOP，DI都在ApplicationContext接口下的类中。</p><p>BeanFactory 是 Spring最底层的接口，ApplicationContext是留给程序员使用的IOC容器；ApplicationContext是BeanFactory的子接口。</p><p>对象由BeanFactory 创建。对象间的动态装配和管理由ApplicationContext完成。</p><p>Spring中最大的模式是工厂模式，其帮助用户创建和管理组件。</p><span id="more"></span>        <h2 id="ioc容器详细创建过程"   >          <a href="#ioc容器详细创建过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ioc容器详细创建过程"></a> IoC容器详细创建过程</h2>              <h3 id="1-传入配置类创建ioc容器"   >          <a href="#1-传入配置类创建ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-传入配置类创建ioc容器"></a> 1. 传入配置类，创建IoC容器</h3>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210630203107349.png" alt="img" /></p>        <h3 id="2-refresh后续流程均在该方法内执行"   >          <a href="#2-refresh后续流程均在该方法内执行" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-refresh后续流程均在该方法内执行"></a> 2. refresh()：后续流程均在该方法内执行</h3>      <p>进入<strong>AnnotationConfigApplicationContext</strong>的构造器，调用<code>refresh()</code>方法</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714142709396.png" alt="image-20210714142709396" /></p><p>onRefresh()：调用ApplicationContext子类的重写方法，例如spring boot里的<strong>ServletWebServerApplicationContext</strong></p><p>待补充</p><p>该方法内调用 <strong>finishBeanFactoryInitialization()</strong> 方法注册<strong>所有非@Lazy修饰的单实例普通组件</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714161257818.png" alt="image-20210714161257818" /></p>        <h3 id="3-finishbeanfactoryinitialization注册普通组件"   >          <a href="#3-finishbeanfactoryinitialization注册普通组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-finishbeanfactoryinitialization注册普通组件"></a> 3. finishBeanFactoryInitialization()：注册普通组件</h3>      <p>该方法将注册<strong>所有非@Lazy修饰的单实例普通组件</strong>。进入该方法后，调用 <code>beanFactory.preInstantiateSingletons()</code>方法实例化所有非@Lazy修饰的单实例普通组件。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714161526478.png" alt="image-20210714161526478" /></p><p>此处的<code>beanFactory</code>为<strong>DefaultListableBeanFactory</strong>类对象。</p><p>进入 <code>beanFactory.preInstantiateSingletons()</code> 方法：</p><p>3.1 首先获取到所有定义的组件名字：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714161659116.png" alt="image-20210714161659116" /></p><p>3.2 按顺序创建组件：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714162218894.png" alt="image-20210714162218894" /></p><p>创建组件的内容在 <strong>getBean()</strong> 方法中：</p>        <h3 id="4-getbeanbeanname创建组件对象"   >          <a href="#4-getbeanbeanname创建组件对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-getbeanbeanname创建组件对象"></a> 4. getBean(beanName)：创建组件对象</h3>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714145712663.png" alt="image-20210714145712663" /></p><p>其调用了 <strong>doGetBean()</strong> 方法，该方法在<code>AbstractBeanFactory</code>类中。进入该方法内：</p><p>4.1 首先调用 <strong>getSingleton()</strong> 方法从已经注册的所有单实例组件缓存map中检查有没有该组件（该过程具体分析见后文）。容器第一次创建该组件时从map中找不到该组件，则执行后续代码将其创建，并添加到map中。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714150118137.png" alt="image-20210714150118137" /></p><p>4.2 创建当前组件所依赖的其他组件</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714153153739.png" alt="image-20210714153153739" /></p><p>4.3 根据组件定义信息判断其是否单例，若是则创建该组件，若不是则暂时不创建：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714153335632.png" alt="image-20210714153335632" /></p><p>进入<code>getSingleton()</code>方法后，首先从缓存中判断是否已经存在该组件，若不存在，则调用上图中Lambda表达式的匿名方法中的<strong>createBean()<strong>创建该组件，并将其</strong>添加到组件缓存map中</strong>。下面为具体流程：</p><p>4.3.1 下图红色框中的<strong>singletonObjects</strong>是<code>DefaultSingletonBeanRegistry</code>类中的属性，其保存了所有已创建的单实例对象的信息。在容器创建完毕后，后续再次调用getBean()方法从容器中获取组件时，将直接从该map对象中获取（见该小节最后分析）。</p><p><mark>singletonFactory是采购员，再取一次判断是否为空，是因为可能其他线程此时创建了该对象，是为了线程安全</mark></p><p>同时加了双重检测</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714155928184.png" alt="image-20210714155928184" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714154108704.png" alt="image-20210714154108704" /></p><p>4.3.2 接着执行下图中黄色框的<code>singletonFactory.getObject()</code>方法创建该组件。</p><p><strong>注意：该方法即是4.3中的Lambda表达式的匿名方法，这里Spring4之前的写法不是Lambda表达式，而是直接传入一个singletonFactory（即Bean单例工厂），其getObject()方法中调用了createBean()方法创建了单例Bean</strong>。</p><p>执行该方法相当于执行该匿名方法（绿色框）。其返回红色框 <strong>createBean()</strong> 方法执行的结果，即创建出的组件。因此<mark>创建组件</mark>的具体代码需要分析 <strong>createBean()</strong> 方法（在此之前都还未创建组件）。（见下文步骤5）</p><p><mark>这个getObejct就是之前笔记代码里的bean仓库获取对象，对比代码里的getSingleton</mark></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714155505160.png" alt="image-20210714155505160" /></p><p>4.3.3 创建出组件后，调用 <strong>addSingleton()</strong> 方法将其添加到组件缓存map中。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714154015017.png" alt="image-20210714154015017" /></p><p><code>addSingleton()</code>方法内，将刚才创建的组件保存到<strong>singletonObjects</strong>缓存map中：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714154526356.png" alt="image-20210714154526356" /></p><p><mark>上图中有三级缓存</mark></p><hr /><p>在容器启动时，将逐一执行上述过程将每个组件添加到<strong>singletonObjects</strong>这个缓存map中。在容器创建完毕后，开发人员调用 <strong>getBean()</strong> 方法从容器中获取组件时，将首先执行 <strong>getSingleton()</strong> 方法（见4.1步），其将尝试从<strong>singletonObjects</strong>中获取该组件（下图橙色框），若之前已经注册过该组件，则此处将直接将其返回，无需再执行4.2 - 4.3步骤的创建过程。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714163739295.png" alt="image-20210714163739295" /></p><hr /><p><strong>总结：至此，已经创建出了该组件，并将其添加到了缓存map中。其中，具体创建组件的createBean()方法分析如下：</strong></p>        <h3 id="5-createbean方法"   >          <a href="#5-createbean方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-createbean方法"></a> 5. createBean()方法：</h3>      <p>略，见AOP</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210714143755100.png" alt="image-20210714143755100" /></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring MVC】Spring MVC 源码分析</title>
      <link href="2021/07/13/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/13/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[        <h2 id="spring-mvc-执行流程"   >          <a href="#spring-mvc-执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-执行流程"></a> Spring MVC 执行流程</h2>      <ul><li>客户端点击链接发送请求： <code>http://localhost:8080/项目名/helloworld</code></li><li>请求来到tomcat服务器</li><li>SpringMVC的前端控制器收到所有客户端发来的请求</li><li>查找请求地址和哪个<code>@RequestMapping</code>标注的方法匹配</li><li>前端控制器找到了目标处理器类的目标方法，利用反射执行目标方法</li><li>方法执行完后的返回值被SpringMVC的视图解析器解析拼接，得到完整的页面地址，并跳转到相应的页面</li></ul><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/kuangstudy0214fd0a-0df0-4910-a467-5b7d61712868.png" alt="img" /></p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/20180708224853769" alt="img" /></p><span id="more"></span><p>整理一段话面试用：</p><p>Spring MVC原理：</p><p>在Tomcat中注册配置了一个<strong>DispatcherServlet</strong>，该Servlet的默认请求映射路径为 “/” ，当客户端收到符合该路径的请求时，将执行该Servlet的doService方法，其都会执行一个doDispatch() 方法，在其内进行请求映射、参数解析、返回值处理、内容协商、页面解析跳转等操作。</p>        <h2 id="dispatcherservlet"   >          <a href="#dispatcherservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dispatcherservlet"></a> DispatcherServlet</h2>      <p><strong>DispatcherServlet</strong>类继承自<strong>FrameworkServlet</strong>类，该类最终继承自<strong>HttpServlet</strong>类。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163040938.png" alt="image-20210715163040938" /></p><p><strong>FrameworkServlet</strong>类中有多个处理请求的方法（<code>doGet/doPost/doPut/doDelete</code>），他们都调用了同一个方法<code>this.processRequest(request, response)</code>。（<strong>DispatcherServlet</strong>类中并没有重写这些<code>doXxx</code>方法和<code>processRequest()</code>方法，因此调用的是<strong>FrameworkServlet</strong>类里的这些方法）</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715162521522.png" alt="image-20210715162521522" /></p><p><code>processRequest(request, response)</code>方法中最关键的一步为调用<code>this.doService(request, response)</code>方法。但该方法在<strong>FrameworkServlet</strong>类中为抽象方法，需要子类实现，因此调用的是<strong>DispatcherServlet</strong>类里的 <strong>this.doService(request, response)</strong> 方法。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715162814683.png" alt="image-20210715162814683" /></p><p><strong>FrameworkServlet</strong>类重写的 <strong>doService()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163548801.png" alt="image-20210715163548801" /></p><p>该方法调用了<strong>FrameworkServlet</strong>中的 <strong>doDispatch(request, response)</strong> 方法：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163935578.png" alt="image-20210715163935578" /></p><p>因此分析清楚 <strong>doDispatch(request, response)</strong> 方法即可理解SpringMVC的大致原理。上述关系树见下图：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715164354367.png" alt="image-20210715164354367" /></p>        <h2 id="spring-mvc-详细执行流程"   >          <a href="#spring-mvc-详细执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-详细执行流程"></a> Spring MVC 详细执行流程</h2>      <p>客户端发来请求后，经过上述分析的流程，会执行<strong>FrameworkServlet</strong>类里的 <strong>doDispatch(request, response)</strong> 方法。下面按顺序分析该方法完成的工作：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715165846578.png" alt="image-20210715165846578" /></p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210719204334058.png" alt="image-20210719204334058" /></p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210719205128323.png" alt="image-20210719205128323" /></p><ol><li><strong>this.checkMultipart()</strong> ：判断当前请求是否为文件上传请求，若是，则将其进行包装</li><li><strong>this.getHandler()</strong>：根据当前的<strong>url请求地址</strong><code>（&quot;/hello&quot;）</code>判断哪个<strong>控制器</strong>（<code>@Controller</code>）里的<strong>映射方法</strong>（<code>@RequestMapping(&quot;/hello&quot;)</code>）与之对应（在<strong>HandlerMapping</strong>中找到这个请求的映射信息），返回一个<strong>mappedHandler</strong>。</li><li><strong>this.noHandlerFound()</strong>：如果没找到对应的处理器（控制器）能处理当前请求，则404抛异常</li><li><strong>this.getHandlerAdapter()</strong>：根据当前处理器<strong>mappedHandler</strong>获取相应的<strong>适配器（反射工具）HandlerAdapter</strong>。</li><li><strong>ha.handle()</strong>：此处真正执行目标方法。使用<strong>适配器</strong>执行目标方法，并将目标方法执行完毕后的返回值<code>(&quot;sucess&quot;)</code>作为视图名保存到一个<code>ModelAndView</code>对象中。（此时执行目标方法，但还未转发页面）</li><li><strong>this.applyDefaultViewName()</strong>：如果目标方法返回值类型为void，即没有指定返回的视图名，则执行默认的视图名（转发到请求地址本身）</li><li><strong>this.processDispatchResult()</strong>：根据目标方法最终执行完成后封装的<code>ModelAndView</code>内的信息转发到相应的页面（页面信息保存在view里），并且可以从请求域中取出<code>ModelAndView</code>中保存的数据。</li></ol><p>下面详细分析上述步骤中的重要细节：</p>        <h2 id="spring-mvc-的九大组件"   >          <a href="#spring-mvc-的九大组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-的九大组件"></a> Spring MVC 的九大组件</h2>      <p><strong>DispatchServlet</strong>组件中有九个组件，SpringMVC在工作时，关键功能都是由这些组件完成的。其共同点：九大组件全部都是接口。接口就是规范。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 文件上传解析器 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 区域信息解析器（国际化） */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 主题解析器：主题效果更换 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** HandlerMapping 处理器映射器 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理器对应的适配器 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理器异常解析器：强大的异常解析功能 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 若方法返回值为void，把请求的地址转换为视图名 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 允许重定向携带数据的功能 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 视图解析器 */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br></pre></td></tr></table></div></figure><p>这些组件在容器启动时进行初始化：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720161209851.png" alt="image-20210720161209851" /></p><p>组件初始化的过程简单来说就是去容器中找这个组件，如果找不到就用<strong>默认的配置策略</strong>。有些组件在容器中是使用类型查找，有些组件是使用id查找。示例：</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720161841815.png" alt="image-20210720161841815" /></p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】Spring Boot2 源码分析</title>
      <link href="2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>本文将逐一介绍Spring Boot中的原理</p><p>常用的自动配置类<strong>xxxAutoConfiguration</strong>：</p><ul><li><strong>AopAutoConfiguration</strong>：AOP自动配置类</li><li><strong>DispatcherServletAutoConfiguration</strong>：DispatcherServlet自动配置类</li><li><strong>WebMvcAutoConfiguration</strong>：WebMVC相关自动配置类</li><li><strong>ServletWebServerFactoryAutoConfiguration</strong>：ServletWebServerFactory自动配置类</li><li><strong>MultipartAutoConfiguration</strong>：文件上传自动配置类</li><li><strong>ErrorMvcAutoConfiguration</strong>：异常处理自动配置类</li><li><strong>DataSourceAutoConfiguration</strong>：数据源自动配置类</li><li><strong>MybatisAutoConfiguration</strong>：MyBatis自动配置类（第三方）</li></ul><p>Spring里用到的设计模式</p><span id="more"></span><p>初始化时调用ServletContextListener的contextInitialization 用来创建IOC</p><p>里面createWebapplicationContext -&gt; ioc</p><p>spring web项目 启动流程 先listener 再 servlet</p>        <h2 id="自动配置原理"   >          <a href="#自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动配置原理"></a> 自动配置原理</h2>              <h3 id="依赖管理"   >          <a href="#依赖管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h3>      <p>当前新建的Spring Boot项目的父项目：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>其父项目又依赖<code>spring-boot-dependencies.pom</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>该文件中声明了开发中常用的jar包版本，因此其子项目中不需要给依赖写上版本号，会自动导入父项目里版本的jar包。该特性被称为<strong>版本仲裁</strong>。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.13<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.82<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="自定义依赖版本"   >          <a href="#自定义依赖版本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义依赖版本"></a> 自定义依赖版本</h4>      <p>若想自定义修改依赖的版本，则只需要在当前项目里指定配置版本号，其会覆盖父项目中的默认版本号。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="场景启动器"   >          <a href="#场景启动器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#场景启动器"></a> 场景启动器</h4>      <p><code>spring-boot-starter-*</code> 代表某种场景，只要引入了该starter，这个场景的所有依赖都会自动引入。第三方提供的简化开发的场景启动器命名格式：<code>*-spring-boot-starter</code>。<span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters" >官方所有支持的Starter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>所有场景启动器最底层的依赖，<strong>SpringBoot自动配置的核心依赖</strong>：<strong>spring-boot-starter</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>该starter场景将导入Spring Boot提供的127种自动配置类<strong>xxxAutoConfiguration</strong>，这些自动配置类将导入许多常用的组件用于简化开发（例如<code>DispatcherServlet</code>等），无需开发人员手动添加这些组件。</p><p><code>spring-boot-starter.pom</code>的主要内容：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- This module was also published with a richer model, Gradle metadata,  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- which should be used instead. Do not delete the following line which  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- that they should prefer consuming it instead. --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- do_not_remove: published-with-gradle-metadata --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Core starter, including auto-configuration support, logging and YAML<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="场景启动器starter工作原理"   >          <a href="#场景启动器starter工作原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#场景启动器starter工作原理"></a> 场景启动器starter工作原理</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210809210934337.png" alt="image-20210809210934337" /></p><p>场景启动器工作原理的本质：调用的<code>xxx-starter</code>项目导入的所有<code>xxx-autoconfigure</code>项目中编写了许多自动配置类<code>xxxAutoConfiguration</code>，这些自动配置类将在Spring Boot启动时被注册到容器中，从而将其内编写的组件按照条件注册到容器中，因此开发人员可以在自己的项目中调用到这些组件。</p>        <h3 id="自动配置原理-2"   >          <a href="#自动配置原理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动配置原理-2"></a> 自动配置原理</h3>      <p>SpringBoot的主程序类（标有 <strong>@SpringBootApplication</strong>注解的类）<strong>所在包及其下面的所有子包</strong>里面的组件都会被默认扫描进来，这些组件不再需要额外指定扫描路径。而若想要扫描其他路径下的组件，则可以在主程序类上添加：</p><ul><li><code>@SpringBootApplication(scanBasePackages=&quot;com.zhao.xxx&quot;)</code></li><li><code>@ComponentScan(&quot;com.zhao.xxx&quot;)</code></li></ul><p><code>@SpringBootApplication</code>是一个合成注解，其效果等同于下面三个注解的组合。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zhao.xxx&quot;)</span></span><br></pre></td></tr></table></div></figure><p>Spring Boot的各种配置都拥有默认值。这些默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code>。配置文件的值最终会绑定在某个类上，这个类会在容器中创建对象。</p><p>Spring Boot所有的<strong>自动配置功能</strong>都在 <code>spring-boot-autoconfigure</code> 包里面（第三方的starter场景也有相应的<code>xxx-autoconfigure</code>包）。</p><p><strong>@SpringBootApplication</strong>是一个合成注解，其效果等同于下面三个注解的组合：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication </span><br></pre></td></tr></table></div></figure><p>下面逐一分析上述三者的作用</p>        <h3 id="1-springbootconfiguration"   >          <a href="#1-springbootconfiguration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-springbootconfiguration"></a> 1、@SpringBootConfiguration</h3>      <p>表明被 <strong>@SpringBootApplication</strong> 修饰的类本质上也是一个 <strong>@Configuration</strong> 配置类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration</span><br></pre></td></tr></table></div></figure>        <h3 id="2-componentscan"   >          <a href="#2-componentscan" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-componentscan"></a> 2、@ComponentScan</h3>      <p>指定要扫描的组件（按照<code>@Filter</code>里设置的类型过滤一些组件）</p>        <h3 id="3-enableautoconfiguration"   >          <a href="#3-enableautoconfiguration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-enableautoconfiguration"></a> 3、@EnableAutoConfiguration</h3>      <p>重点，自动配置是通过该注解实现的。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration</span><br></pre></td></tr></table></div></figure><p><strong>3.1、@AutoConfigurationPackage：自动配置包，将MainApplication主程序类所在包下的所有组件注册到容器中</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage</span><br></pre></td></tr></table></div></figure><p>该注解通过<code>@Import</code>注解向容器中导入了一个<strong>Registrar</strong>组件，该组件实现了<code>ImportBeanDefinitionRegistrar</code>接口（<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/" >【Spring】Spring5 源码中常用接口的底层原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>），其作用是<strong>将MainApplication主程序类所在包下的所有组件都注册到容器中</strong>。这也解释了默认的扫描包路径为<code>MainApplication</code>所在包的路径。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711201544965.png" alt="image-20210711201544965" /></p><p>其中传入的参数<code>AnnotationMetadata metadata</code>是指SpringBoot主程序类<code>MainApplication</code>的注解元信息，用于获取其所在的包路径，从而将该包下的所有子包下的类都注册到容器中。</p><p><strong>3.2、@Import({AutoConfigurationImportSelector.class})：向容器中注册自动配置类</strong></p><p><strong>第一步：引导加载自动配置类</strong></p><p>该注解向容器中注册了<strong>AutoConfigurationImportSelector</strong>类型的组件，该类的重要方法  <strong>selectImports()</strong> 中利用 <strong>getAutoConfigurationEntry(annotationMetadata)</strong>  方法向容器中导入一些<strong>自动配置类</strong>组件（先获取所有的自动配置类，再根据实际情况筛选出符合条件的自动配置类注册到容器中）。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711202049677.png" alt="image-20210711202049677" /></p><p>进入<code>getAutoConfigurationEntry(annotationMetadata)</code>方法后，首先调用<code>getCandidateConfigurations()</code>方法获取所有<strong>候选</strong>的自动配置类组件（AutoConfiguration），共有127个。并在后续进行删选后<strong>按需开启</strong>自动配置项（即用不到的自动配置类无需开启）。</p><p>获取这些<code>AutoConfiguration</code>的具体过程：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711202306425.png" alt="image-20210711202306425" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711203848177.png" alt="image-20210711203848177" /></p><p>在<code>getCandidateConfigurations()</code>方法内通过<code>SpringFactoriesLoader</code>工厂加载器加载一些组件。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711202745443.png" alt="image-20210711202745443" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711203253301.png" alt="image-20210711203253301" /></p><p>在该方法内使用类加载器读取<code>&quot;META-INF/spring.factories&quot;</code>位置处的资源文件。有些包下有这个文件，比如最关键的<code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包（导入的其他第三方包中也可以会含有<code>&quot;META-INF/spring.factories&quot;</code>文件，例如MyBatis的<code>mybatis-spring-boot-autoconfigure-2.1.4.jar</code>包也会有该文件，Spring Boot启动时也会加载该包下的<code>xxxAutoConfiguration</code>类）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711203525691.png" alt="image-20210711203525691" /></p><p>该文件内配置了Spring Boot启动时就要向容器中加载的所有自动配置类（<strong>xxxAutoConfiguration</strong>）（共127个，正好对应上文中的127个自动配置类组件）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711203725837.png" alt="image-20210711203725837" /></p><p>上文中注册到容器中的127个自动配置类组件<code>configurations</code>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711203855246.png" alt="image-20210711203855246" /></p><p>但这127个自动配置类并不会都注册到容器中，而会按需开启。</p><p><strong>第二步：按需开启自动配置项</strong></p><p>虽然上述127个自动配置类在启动的时候会默认全部加载，但每个<code>xxxAutoConfiguration</code>会按照条件装配规则（<strong>@Conditional</strong>）<strong>按需配置</strong>。</p><p>以<code>BatchAutoConfiguration</code>类为例，该类因<code>@ConditionalOnClass(&#123;JobLauncher.class, DataSource.class&#125;)</code>的存在，若想被注册到容器中，需要满足当前项目中有<code>JobLauncher</code>类的存在，但若开发人员没有导入该类相关的maven依赖，则无法找到该类，因此该自动配置类将不会被注册到容器中。因此上述127个自动配置类会按照实际容器中配置组件的情况按需注册到容器中，不需要的配置类将不会被注册。</p><p>同时这些自动配置类里的配置属性通过 <strong>@EnableConfigurationProperties</strong> 注解从<strong>xxxProperties</strong>组件中获取（<code>xxxProperties</code>组件和相应的配置文件绑定在了一起）</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711211618512.png" alt="image-20210711211618512" /></p><p>以AOP自动配置器<strong>AopAutoConfiguration</strong>为例：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210804150325041.png" alt="image-20210804150325041" /></p><hr /><p>举例：上文描述了如何向容器中注册常用的自动配置类，下面以web开发必须的自动配置类<strong>DispatcherServletAutoConfiguration</strong>为例：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711213124840.png" alt="image-20210711213124840" /></p><p>该自动配置类满足<code>@Conditional</code>的条件，因此会在程序加载时被注册到容器中。同时该自动配置类中会向容器中注册<strong>DispatcherServlet</strong>组件，这正是Spring MVC开发时需要的转发器组件。</p><p>也就是说Spring Boot在启动时，会将传统SSM中开发人员配置在xml中的必备组件自动地注册到容器中，无需开发人员再手动注册。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210711213412654.png" alt="image-20210711213412654" /></p><hr /><p><strong>第三步：修改默认配置</strong></p><p>以自动配置类<strong>DispatcherServletAutoConfiguration</strong>中的<strong>MultipartResolver</strong>组件为例，该组件为Spring MVC中的文件上传组件，其会被<code>DispatcherServletAutoConfiguration</code>注册到容器中。</p><p>其依赖于<strong>MultipartResolver</strong>组件（该组件默认存在于容器中，但开发人员可以再手动注册一个），同时判断该组件的名称是否为指定的<code>MULTIPART_RESOLVER_BEAN_NAME = multipartResolver</code>。</p><p>若不是，可能的情况为开发人员自己手动注册了一个，但名称不符合规范。此时容器通过调用<code>multipartResolver()</code>方法注册了该组件，同时注册的组件名就是方法名<strong>multipartResolver</strong>，因此起到<strong>组件名规范化</strong>的效果。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">// 容器中默认有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">    <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br></pre></td></tr></table></div></figure><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>      <ul><li>Spring Boot首先加载所有的自动配置类 <strong>xxxxxAutoConfiguration</strong>（127个）</li><li>每个自动配置类按照条件判断进行生效，默认都会绑定配置文件指定的值。（从<strong>xxxxProperties</strong>组件里面读取，<strong>xxxProperties</strong>组件和配置文件进行了绑定）</li><li>生效的配置类就会向容器中注册响应的组件</li></ul><p>定制化配置：</p><ul><li>开发人员手动使用<code>@Bean</code>替换容器中默认注册的组件；</li><li>在配置文件中修改相应配置属性以修改默认组件的属性值</li></ul><p><strong>xxxxxAutoConfiguration <strong>—&gt; 注册组件 —&gt; 组件属性通过</strong>xxxxProperties</strong>从配置文件<strong>application.properties</strong>中取值</p><p>常用的自动配置类<strong>xxxAutoConfiguration</strong>：</p><ul><li><strong>AopAutoConfiguration</strong>：AOP自动配置类</li><li><strong>DispatcherServletAutoConfiguration</strong>：<code>DispatcherServlet</code>自动配置类</li><li><strong>WebMvcAutoConfiguration</strong>：<code>WebMVC</code>相关自动配置类</li><li><strong>ServletWebServerFactoryAutoConfiguration</strong>：<code>ServletWebServerFactory</code>自动配置类</li><li><strong>MultipartAutoConfiguration</strong>：文件上传自动配置类</li><li><strong>ErrorMvcAutoConfiguration</strong>：异常处理自动配置类</li><li><strong>DataSourceAutoConfiguration</strong>：数据源自动配置类</li><li><strong>MybatisAutoConfiguration</strong>：MyBatis自动配置类（第三方）</li></ul>        <h2 id="静态资源原理"   >          <a href="#静态资源原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态资源原理"></a> 静态资源原理</h2>      <p>SpringBoot在启动时会默认加载许多<strong>xxxAutoConfiguration</strong>自动配置类，其中包括SpringMVC功能的自动配置类：<strong>WebMvcAutoConfiguration</strong>。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723132157765.png" alt="image-20210723132157765" /></p><p>该配置类向容器中添加了许多组件，例如<strong>WebMvcAutoConfigurationAdapter</strong>。</p>        <h3 id="webmvcautoconfigurationadapter"   >          <a href="#webmvcautoconfigurationadapter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#webmvcautoconfigurationadapter"></a> WebMvcAutoConfigurationAdapter</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723132356529.png" alt="image-20210723132356529" /></p><p>该类用于解析配置文件中与<strong>mvc</strong>和<strong>resources</strong>相关的配置信息。其中<strong>WebMvcProperties</strong>配置类与<strong>spring.mvc</strong>属性绑定，<strong>ResourceProperties</strong>配置类与<strong>spring.resources</strong>属性绑定。</p><p>同时<strong>WebMvcAutoConfigurationAdapter只有一个有参构造器</strong>，该构造器中的所有参数值都将从容器中获取，因此将获取到配置文件中与<strong>mvc</strong>和<strong>resources</strong>相关的配置信息：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723161237562.png" alt="image-20210723161237562" /></p><p>其参数有以下几种，都是从容器中获取：</p><ul><li><strong>ResourceProperties</strong>：获取和<code>spring.resources</code>绑定的所有的值的对象</li><li><strong>WebMvcProperties</strong>：获取和<code>spring.mvc</code>绑定的所有的值的对象</li><li><strong>ListableBeanFactory</strong>：获取Spring的<code>beanFactory</code></li><li><strong>HttpMessageConverters</strong>：找到所有的<code>HttpMessageConverters</code></li><li><strong>ResourceHandlerRegistrationCustomizer</strong>：找到资源处理器的自定义器。</li><li><strong>DispatcherServletPath</strong></li><li><strong>ServletRegistrationBean</strong>：给应用注册Servlet、Filter等组件</li></ul>        <h3 id="资源路径映射原理"   >          <a href="#资源路径映射原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#资源路径映射原理"></a> 资源路径映射原理</h3>      <p><strong>WebMvcAutoConfigurationAdapter</strong>配置类里的<strong>addResourceHandlers</strong>方法完成<strong>静态资源路径映射</strong>的功能：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723164630095.png" alt="image-20210723164630095" /></p><p><strong>红色框</strong>：通过配置<code>add-mappings</code>属性可以禁止所有静态资源规则（红色框）。</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></div></figure><p><strong>黄色框</strong>：设置<code>webjars</code>的路径映射规则，即从<code>&quot;/webjars/**&quot;</code> 映射成 <code>&quot;classpath:/META-INF/resources/webjars/&quot;</code>，浏览器收到的满足规则的请求都会映射到指定的路径下。</p><p><strong>橙色框</strong>：设置静态资源的路径映射规则，即从<strong>staticPathPattern</strong> 映射成 <strong>.getStaticLocations()</strong> 的值，浏览器收到的满足规则的请求都会映射到指定的路径下。</p><p>其中<strong>staticPathPattern</strong>值为配置文件中指定的静态资源路径访问前缀（默认为<code>/**</code>）：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/myPath/**</span></span><br></pre></td></tr></table></div></figure><p><strong>this.resourceProperties.getStaticLocations()</strong> 的值为配置文件中指定的静态资源路径（默认为<code>/static</code> or<code>/public</code> or<code>/resources</code> or <code>/META-INF/resources</code>）：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> [<span class="string">classpath:/static/</span>]</span><br></pre></td></tr></table></div></figure>        <h3 id="欢迎页的处理规则"   >          <a href="#欢迎页的处理规则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#欢迎页的处理规则"></a> 欢迎页的处理规则</h3>      <p>Spring MVC中的<strong>handlerMapping</strong>：处理器映射器，其内保存了每一个处理器能处理哪些方法的映射信息。</p><p><strong>WelcomePageHandlerMapping</strong>是SpringBoot中自动注册到容器中的一个处理器映射器。在浏览器传来的url为<code>&quot;/&quot;</code>，且其他已存在的<code>HandlerMapping</code>无法处理该请求时，其会将该请求转发到欢迎页面。下图中展示了Spring Boot在启动时容器中存在的五个<code>HandlerMapping</code>，可以看到<code>WelcomePageHandlerMapping</code>排在最后，即其只会在其他四个处理器映射器都无法处理请求时工作。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720095314175.png" alt="image-20210720095314175" /></p><p>其在转发到欢迎页面前会先判断<code>mvcProperties</code>中的<code>staticPathPattern</code>属性值是否为<code>/**</code>，若是，则转发到欢迎页<code>index.html</code></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723171723749.png" alt="image-20210723171723749" /></p><p>默认情况下<code>static-path-pattern = /**</code>，但若开发人员在配置文件中配置了自定义的<code>static-path-pattern</code>，则<code>WelcomePageHandlerMapping</code>无法工作，欢迎页面和小图标将失效。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723171856063.png" alt="image-20210723171856063" /></p>        <h2 id="rest映射实现原理"   >          <a href="#rest映射实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rest映射实现原理"></a> Rest映射实现原理</h2>      <p>实现Rest风格支持的核心Filter：<strong>HiddenHttpMethodFilter</strong>。其本质是一个过滤器，因此会在所有请求响应前进行拦截过滤，将<code>DELETE</code>请求和<code>PUT</code>请求进行包装后放行到后续过滤器。</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></div></figure><p>开启<strong>HiddenHttpMethodFilter</strong>后，若想发送<code>DELETE</code>或<code>PUT</code>请求，则需要创建一个表单，在表单项中携带一个<code>_method</code>参数，这个参数的值可以设置为<code>DELETE</code>或<code>PUT</code>。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>容器在启动时，自动配置类<strong>WebMvcAutoConfiguration</strong>会向容器中注册一个继承了<strong>HiddenHttpMethodFilter</strong>的过滤器组件<strong>OrderedHiddenHttpMethodFilter</strong>，其本质上是一个过滤器，因此会在所有请求响应前进行拦截过滤，将<code>DELETE</code>请求和<code>PUT</code>请求进行包装后放行到后续过滤器。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210723192029596.png" alt="image-20210723192029596" /></p>        <h3 id="hiddenhttpmethodfilter源码分析"   >          <a href="#hiddenhttpmethodfilter源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hiddenhttpmethodfilter源码分析"></a> HiddenHttpMethodFilter源码分析</h3>      <p><code>HiddenHttpMethodFilter</code>类里的拦截方法具体如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首先获取传入参数 methodParam = _method 里的值，也就是DELETE</span></span><br><span class="line">    String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断当前表单是否是POST提交</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">        <span class="comment">// DELETE变成大写</span></span><br><span class="line">        String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建包装后的Request类型对象wrapper，该对象的getMethod()方法被重写了，调用时将返回DELETE</span></span><br><span class="line">        HttpServletRequest wrapper = <span class="keyword">new</span> HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将包装后的Request传递给了拦截器链，后续调用getMethod()获取到的都是DELETE</span></span><br><span class="line">        filterChain.doFilter(wrapper, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>wrapper对象被重写的<code>getMethod()</code>方法将直接返回<code>_method</code>里的值<code>DELETE</code>。并且包装后的wrapper对象被传递到了拦截器链中，从而后续的拦截器在调用此wrapper对象的<code>getMethod()</code>时将获取到<code>DELETE</code>，因此实现了Rest风格的映射。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715100050957.png" alt="image-20210715100050957" /></p>        <h2 id="内嵌servlet容器工作原理"   >          <a href="#内嵌servlet容器工作原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内嵌servlet容器工作原理"></a> 内嵌Servlet容器工作原理</h2>      <p>内嵌服务器工作原理：手动调用要启动的服务器的 <strong>start()</strong> 方法开启服务。</p><p>在Spring Boot启动时，发现当前项目是Web应用（因为引入了Web场景包和Tomcat场景包），则将创建一个Web版的IoC容器：<strong>ServletWebServerApplicationContext</strong>。在该容器启动时，通过<strong>TomcatServletWebServerFactory</strong>创建出一个Tomcat服务器<strong>tomcatWebServer</strong>并调用其 <strong>start()</strong> 方法启动了Tomcat服务。</p><p><strong>ServletWebServerApplicationContext</strong>实现了<strong>ApplicationContext</strong>接口，本质上也是一个IoC容器。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807111225531.png" alt="image-20210807111225531" /></p><p><strong>ServletWebServerApplicationContext</strong>将在启动时搜索<strong>ServletWebServerFactory</strong>（ServletWeb服务器工厂，用于生产ServletWeb服务器）</p><p>Spring Boot底层默认有很多的<strong>ServletWebServerFactory</strong>：</p><ul><li><code>TomcatServletWebServerFactory</code></li><li><code>JettyServletWebServerFactory</code></li><li><code>UndertowServletWebServerFactory</code></li></ul><p>这些工厂由<strong>ServletWebServerFactoryAutoConfiguration</strong>导入的<strong>ServletWebServerFactoryConfiguration</strong>（ServletWeb服务器工厂配置类）自动注册到容器中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807112649353.png" alt="image-20210807112649353" /></p><p>因此，在<strong>ServletWebServerApplicationContext</strong>启动时：</p><ul><li>注册<strong>ServletWebServerFactoryAutoConfiguration</strong>自动配置类；</li><li>该自动配置类将导入<strong>ServletWebServerFactoryConfiguration</strong>工厂配置类；</li><li>该工厂配置类根据动态判断系统中到底导入了哪个Web服务器的包（默认导入Tomcat的包），注册相应的<strong>WebServlet服务器</strong>：<ul><li><code>TomcatServletWebServerFactory</code></li><li><code>JettyServletWebServerFactory</code></li><li><code>UndertowServletWebServerFactory</code></li></ul></li><li>使用默认导入的<strong>TomcatServletWebServerFactory</strong>创建出Tomcat服务器并启动。</li></ul><p><strong>ServletWebServerApplicationContext</strong>在启动时，将调用其重写的 <strong>onRefresh()</strong> 方法，用于创建Web服务器<strong>webServer</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807142357270.png" alt="image-20210807142357270" /></p><p>创建<strong>webServer</strong>的流程：</p><ul><li>获取当前场景支持的Web服务器工厂，默认为<strong>TomcatServletWebServerFactory</strong></li><li>使用该工厂创建Tomcat的Web服务器对象<strong>webServer</strong>，并在该对象构造器中调用 <strong>start()</strong> 方法开启Tomcat服务</li></ul><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807143433400.png" alt="image-20210807143433400" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807144851940.png" alt="image-20210807144851940" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807145011358.png" alt="image-20210807145011358" /></p><p>内嵌服务器工作原理：手动调用要启动的服务器的 <strong>start()</strong> 方法开启服务。</p>        <h3 id="切换servlet容器"   >          <a href="#切换servlet容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#切换servlet容器"></a> 切换Servlet容器</h3>      <p>要想切换服务器，则导入相应的starter场景即可：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="定制servlet容器"   >          <a href="#定制servlet容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定制servlet容器"></a> 定制Servlet容器</h3>      <ul><li>修改配置文件中的 <code>server.xxx</code> 属性（最方便）</li><li>自定义<strong>ConfigurableServletWebServerFactory</strong>代替<strong>TomcatServletWebServerFactory</strong>，并将其注册到容器中</li><li>实现  <code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code> ，把配置文件的值和<strong>ServletWebServerFactory</strong>进行绑定（<strong>xxxCustomizer</strong>：定制化器，可以改变xxx的默认规则）：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcatWebServerFactoryCustomizer</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory server)</span> </span>&#123;</span><br><span class="line">        server.addConnectorCustomizers((connector) -&gt; connector.setAsyncTimeout(Duration.ofSeconds(<span class="number">20</span>).toMillis()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="定制化原理"   >          <a href="#定制化原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定制化原理"></a> 定制化原理</h2>              <h3 id="spring-boot定制化的四种方式"   >          <a href="#spring-boot定制化的四种方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-boot定制化的四种方式"></a> Spring Boot定制化的四种方式</h3>      <ol><li>修改配置文件中的属性值以定制化；</li><li>编写自定义的配置类 <strong>xxxConfiguration</strong>，通过使用 <strong>@Bean</strong> 注解向容器中添加自定义的组件（例如视图解析器等）；</li><li>编写 <strong>xxxCustomizer</strong>，重写其方法以实现定制化；</li><li><strong>常用：编写一个实现了WebMvcConfigurer某些接口的配置类，并添加@Configuration注解</strong>。在该配置类中添加各种功能（例如添加拦截器，消息转换器，内容协商策略等）。注意这时不能标注 <strong>@EnableWebMvc</strong> 注解（若开启，则变成全面接管Spring MVC，就需要把所有Spring MVC配置好的规则全部自定义实现）</li></ol><p>方式4使用示例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)   <span class="comment">// 写 /** 时所有请求都会被拦截，包括静态资源</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的Converter，用于根据url中传入的字符串解析POJO内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Person <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Person person = <span class="keyword">new</span> Person();</span><br><span class="line">                <span class="comment">// 定制化的解析方法...</span></span><br><span class="line">                <span class="keyword">return</span> person;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的消息转换器，用于转换自定义的媒体格式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> MyMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定三种媒体类型映射关系</span></span><br><span class="line">        Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;myFormat&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/x-zhao&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于请求参数的内容协商策略：支持解析哪些参数对应哪些媒体类型</span></span><br><span class="line">        ParameterContentNegotiationStrategy parameterStrategy =</span><br><span class="line">            <span class="keyword">new</span> ParameterContentNegotiationStrategy(mediaTypes);</span><br><span class="line">        <span class="comment">// parameterStrategy.setParameterName(&quot;format&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于请求头的内容协商策略</span></span><br><span class="line">        HeaderContentNegotiationStrategy headerStrategy = <span class="keyword">new</span> HeaderContentNegotiationStrategy();</span><br><span class="line"></span><br><span class="line">        configurer.strategies(Arrays.asList(parameterStrategy, headerStrategy));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="定制化原理-2"   >          <a href="#定制化原理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定制化原理-2"></a> 定制化原理</h3>      <p><strong>@EnableWebMvc</strong> 注解会向容器中导入一个<strong>DelegatingWebMvcConfiguration</strong>，其作用是：</p><ol><li>向容器中添加一些<strong>最基础</strong>的组件，例如映射器等</li><li>添加系统中所有的<strong>WebMvcConfigurer</strong>（包括自定义的），令这些定制的功能都生效</li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807155031104.png" alt="image-20210807155031104" /></p><p><strong>DelegatingWebMvcConfiguration</strong>继承自<strong>WebMvcConfigurationSupport</strong>，用于添加所有的<strong>WebMvcConfigurer</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807160226619.png" alt="image-20210807160226619" /></p><p><strong>DelegatingWebMvcConfiguration</strong>只能向容器中添加比较基础的组件（只保证最基础的应用，静态资源映射解析等功能均无法实现）。</p><p><mark>即开启了 <strong>@EnableWebMvc</strong> 注解，将向容器中添加<strong>DelegatingWebMvcConfiguration</strong>，其只能实现<strong>最基础</strong>的应用（以及开发人员自己添加的应用），无法实现Spring Boot中默认配置的许多高级功能（例如静态资源映射解析等）</mark></p><p>而这些更高级的功能，都由<strong>WebMvcAutoConfiguration</strong>完成注册：</p><p><strong>WebMvcAutoConfiguration</strong>是Spring Boot中默认的Spring MVC自动配置类：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210807155131164.png" alt="image-20210807155131164" /></p><p>其向容器中注册了许多Spring MVC相关的<strong>高级功能组件</strong>：例如Rest风格过滤器，消息转换器等。其若想生效，需要满足 <strong>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</strong> ，即容器中不能存在<strong>WebMvcConfigurationSupport</strong>类型的组件。</p><p>而<strong>DelegatingWebMvcConfiguration</strong>类正是继承自<strong>WebMvcConfigurationSupport</strong>。因此若使用了 <strong>@EnableWebMvc</strong> 注解，则其 <strong>@Import</strong> 导入的<strong>DelegatingWebMvcConfiguration</strong>将使得功能更加完善的<strong>WebMvcAutoConfiguration</strong>失效，从而导致许多高级功能（如静态资源映射解析）无法生效。</p><p><mark>因此使用了 <strong>@EnableWebMvc</strong> 注解就无法再开启<strong>WebMvcAutoConfiguration</strong>中的功能，就需要开发人员<strong>全面接管</strong>Spring MVC。</mark></p><p>总结：若想定制化功能，则编写一个实现了<strong>WebMvcConfigurer</strong>某些接口的配置类，并添加 <strong>@Configuration</strong> 注解。注意这时不能标注 <strong>@EnableWebMvc</strong> 注解。</p>        <h2 id="spring-boot-启动原理"   >          <a href="#spring-boot-启动原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-boot-启动原理"></a> Spring Boot 启动原理</h2>      <p>Spring Boot程序从主程序配置类的main方法开始执行：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818155426532.png" alt="image-20210818155426532" /></p><p>调用<code>SpringApplication</code>类的静态方法<code>run()</code>，将Spring Boot主程序配置类传入：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818155701782.png" alt="image-20210818155701782" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818155917510.png" alt="image-20210818155917510" /></p><p>Spring Boot整个启动过程分为两个阶段：</p><ul><li>创建<strong>SpringApplication</strong></li><li>运行<strong>SpringApplication.run()</strong></li></ul>        <h3 id="创建-springapplication"   >          <a href="#创建-springapplication" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建-springapplication"></a> 创建 SpringApplication</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818160118910.png" alt="image-20210818160118910" /></p><p>调用有参构造器初始化<code>SpringApplication</code>，从<code>spring.factories</code>文件中读取：</p><ul><li><strong>bootstrappers</strong>：初始化启动引导器</li><li><strong>ApplicationContextInitializer</strong>：应用容器初始化器</li><li><strong>ApplicationListener</strong>：应用容器监听器</li></ul><p>这些组件会在后续的<code>run()</code>方法中使用，用于向IoC容器中配置相应的环境</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818161738903.png" alt="image-20210818161738903" /></p><p>上述<code>getSpringFactoriesInstances()</code>方法用于从<code>spring.factories</code>中读取配置属性。<code>spring.factories</code>：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer&#x3D;\</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener&#x3D;\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessorApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>        <h3 id="运行springapplicationrun"   >          <a href="#运行springapplicationrun" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#运行springapplicationrun"></a> 运行SpringApplication.run()</h3>      <p>在<strong>SpringApplication</strong>创建完毕后，将调用其<code>run()</code>方法以启动<strong>SpringApplication</strong>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch(); <span class="comment">// 创建计时器</span></span><br><span class="line">        stopWatch.start(); <span class="comment">// 开始计时，记录应用的启动时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建引导上下文bootstrapContext（Context环境）</span></span><br><span class="line">        <span class="comment">// 获取到所有bootstrappers逐个执行intitialize()来完成对引导启动器上下文环境的设置</span></span><br><span class="line">        <span class="comment">// bootstrappers在SpringApplication创建时从spring.factories里读取到</span></span><br><span class="line">        DefaultBootstrapContext bootstrapContext = createBootstrapContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.到run()方法最终执行完毕会返回一个ConfigurableApplicationContext，其就是Spring IoC容器</span></span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.让当前应用进入headless模式（Headless模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标）</span></span><br><span class="line">        configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取所有RunListener（运行监听器），为了方便所有Listener进行事件感知</span></span><br><span class="line">        SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.遍历SpringApplicationRunListener调用starting()方法；</span></span><br><span class="line">        <span class="comment">// 相当于通知所有感兴趣系统正在启动过程的人，项目正在starting。</span></span><br><span class="line">        listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6.保存命令行参数 ApplicationArguments</span></span><br><span class="line">            ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.准备配置环境</span></span><br><span class="line">            ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">            configureIgnoreBeanInfo(environment);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*打印标志</span></span><br><span class="line"><span class="comment">              .   ____          _            __ _ _</span></span><br><span class="line"><span class="comment">             /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="comment">            ( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span></span><br><span class="line"><span class="comment">             \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span><br><span class="line"><span class="comment">              &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="comment">             =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="comment">             :: Spring Boot ::                (v2.4.2)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            Banner printedBanner = printBanner(environment);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建IoC容器：createApplicationContext（）</span></span><br><span class="line">            <span class="comment">// 根据项目类型webApplicationType（NONE,SERVLET,REACTIVE）创建容器，</span></span><br><span class="line">            <span class="comment">// 当前会创建 AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">            context = createApplicationContext();</span><br><span class="line">            context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 8.准备ApplicationContext IoC容器的基本信息</span></span><br><span class="line">            prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 9.刷新IOC容器,创建容器中的所有组件，这部分属于Spring IoC启动原理内容</span></span><br><span class="line">            refreshContext(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 该方法没内容，大概为将来填入</span></span><br><span class="line">            afterRefresh(context, applicationArguments);</span><br><span class="line">            stopWatch.stop(); <span class="comment">// 停止计时</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123; <span class="comment">// this.logStartupInfo默认是true</span></span><br><span class="line">                <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 10.通知所有的监听器started()</span></span><br><span class="line">            listeners.started(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 11.调用所有runners</span></span><br><span class="line">            callRunners(context, applicationArguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// 处理运行失败错误，调用Listener的failed()</span></span><br><span class="line">            handleRunFailure(context, ex, listeners);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 12. 通知所有的监听器running()</span></span><br><span class="line">            listeners.running(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// 13. 处理运行失败错误，调用Listener的failed()</span></span><br><span class="line">            handleRunFailure(context, ex, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建引导上下文bootstrapContext（Context环境）并逐一调用初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultBootstrapContext <span class="title">createBootstrapContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultBootstrapContext bootstrapContext = <span class="keyword">new</span> DefaultBootstrapContext();</span><br><span class="line">        <span class="keyword">this</span>.bootstrappers.forEach((initializer) -&gt; initializer.intitialize(bootstrapContext));</span><br><span class="line">        <span class="keyword">return</span> bootstrapContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.让当前应用进入headless模式（Headless模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this.headless默认为true</span></span><br><span class="line">        System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,</span><br><span class="line">                           System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = <span class="string">&quot;java.awt.headless&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.获取所有RunListener（运行监听器），为了方便所有Listener进行事件感知</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">        <span class="comment">//getSpringFactoriesInstances 去 spring.factories 找 SpringApplicationRunListener</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">                                                 getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args),</span><br><span class="line">                                                 <span class="keyword">this</span>.applicationStartup);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.准备配置环境</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                       DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create and configure the environment</span></span><br><span class="line">        <span class="comment">//返回或者创建基础环境信息对象，如：StandardServletEnvironment, StandardReactiveWebEnvironment</span></span><br><span class="line">        ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">        <span class="comment">//配置环境信息对象,读取所有的配置源的配置属性值。</span></span><br><span class="line">        configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">        <span class="comment">//绑定环境信息</span></span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="comment">// 7.1 通知所有的监听器当前环境准备完成</span></span><br><span class="line">        listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">        DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">        configureAdditionalProfiles(environment);</span><br><span class="line">        bindToSpringApplication(environment);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">            environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">                                                                                                   deduceEnvironmentClass());</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigurationPropertySources.attach(environment);</span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.准备ApplicationContext IoC容器的基本信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">                                ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                                ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存环境信息</span></span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line">        <span class="comment">// IOC容器的后置处理流程</span></span><br><span class="line">        postProcessApplicationContext(context);</span><br><span class="line">        <span class="comment">// 应用初始化器</span></span><br><span class="line">        applyInitializers(context);</span><br><span class="line">        <span class="comment">// 8.1 遍历所有的 listener 调用 contextPrepared。</span></span><br><span class="line">        <span class="comment">// EventPublishRunListenr通知所有的监听器contextPrepared</span></span><br><span class="line">        listeners.contextPrepared(context);</span><br><span class="line">        bootstrapContext.close(context);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">            logStartupProfileInfo(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">        <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">            ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">            .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">            context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Load the sources</span></span><br><span class="line">        Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">        Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">        load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 8.2 监听器加载上下文</span></span><br><span class="line">        listeners.contextLoaded(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 11.调用所有runners</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取容器中的ApplicationRunner</span></span><br><span class="line">        runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">        <span class="comment">// 获取容器中的CommandLineRunner</span></span><br><span class="line">        runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">        <span class="comment">// 合并所有runner并且按照@Order进行排序</span></span><br><span class="line">        AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">        <span class="comment">// 遍历所有的runner，调用run方法</span></span><br><span class="line">        <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">                callRunner((ApplicationRunner) runner, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">                callRunner((CommandLineRunner) runner, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 13.处理运行失败错误，调用Listener的failed()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRunFailure</span><span class="params">(ConfigurableApplicationContext context, Throwable exception,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  SpringApplicationRunListeners listeners)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handleExitCode(context, exception);</span><br><span class="line">                <span class="keyword">if</span> (listeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//14.</span></span><br><span class="line">                    listeners.failed(context, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                reportFailure(getExceptionReporters(context), exception);</span><br><span class="line">                <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    context.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Unable to close ApplicationContext&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        ReflectionUtils.rethrowRuntimeException(exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>SpringApplication(primarySources).run(args)</code> 最后返回的IoC容器<code>context</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span>, <span class="title">Lifecycle</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    String CONFIG_LOCATION_DELIMITERS = <span class="string">&quot;,; \t\n&quot;</span>;</span><br><span class="line">    String CONVERSION_SERVICE_BEAN_NAME = <span class="string">&quot;conversionService&quot;</span>;</span><br><span class="line">    String LOAD_TIME_WEAVER_BEAN_NAME = <span class="string">&quot;loadTimeWeaver&quot;</span>;</span><br><span class="line">    String ENVIRONMENT_BEAN_NAME = <span class="string">&quot;environment&quot;</span>;</span><br><span class="line">    String SYSTEM_PROPERTIES_BEAN_NAME = <span class="string">&quot;systemProperties&quot;</span>;</span><br><span class="line">    String SYSTEM_ENVIRONMENT_BEAN_NAME = <span class="string">&quot;systemEnvironment&quot;</span>;</span><br><span class="line">    String APPLICATION_STARTUP_BEAN_NAME = <span class="string">&quot;applicationStartup&quot;</span>;</span><br><span class="line">    String SHUTDOWN_HOOK_THREAD_NAME = <span class="string">&quot;SpringContextShutdownHook&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(ConfigurableEnvironment var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableEnvironment <span class="title">getEnvironment</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setApplicationStartup</span><span class="params">(ApplicationStartup var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ApplicationStartup <span class="title">getApplicationStartup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBeanFactoryPostProcessor</span><span class="params">(BeanFactoryPostProcessor var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setClassLoader</span><span class="params">(ClassLoader var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addProtocolResolver</span><span class="params">(ProtocolResolver var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerShutdownHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>上文源码中的<strong>SpringApplicationRunListeners</strong>运行监听器需要配置在<code>spring.factories</code>文件里，例如<strong>EventPublishingRunListener</strong>事件发布运行监听器：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener&#x3D;\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></div></figure><p><strong>SpringApplicationRunListeners</strong>运行监听器：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Log log;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationStartup applicationStartup;</span><br><span class="line"></span><br><span class="line">    SpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners,</span><br><span class="line">                                  ApplicationStartup applicationStartup) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log = log;</span><br><span class="line">        <span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class="line">        <span class="keyword">this</span>.applicationStartup = applicationStartup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.遍历 SpringApplicationRunListener 调用starting()方法；</span></span><br><span class="line">    <span class="comment">// 相当于通知所有感兴趣系统正在启动过程的人，项目正在starting。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.starting&quot;</span>, (listener) -&gt; listener.starting(bootstrapContext),</span><br><span class="line">                        (step) -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mainApplicationClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                step.tag(<span class="string">&quot;mainApplicationClass&quot;</span>, mainApplicationClass.getName());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.environment-prepared&quot;</span>,</span><br><span class="line">                        (listener) -&gt; listener.environmentPrepared(bootstrapContext, environment));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.context-prepared&quot;</span>, (listener) -&gt; listener.contextPrepared(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.2</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.context-loaded&quot;</span>, (listener) -&gt; listener.contextLoaded(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.started&quot;</span>, (listener) -&gt; listener.started(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 12.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.running&quot;</span>, (listener) -&gt; listener.running(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 14.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        doWithListeners(<span class="string">&quot;spring.boot.application.failed&quot;</span>,</span><br><span class="line">                        (listener) -&gt; callFailedListener(listener, context, exception), (step) -&gt; &#123;</span><br><span class="line">                            step.tag(<span class="string">&quot;exception&quot;</span>, exception.getClass().toString());</span><br><span class="line">                            step.tag(<span class="string">&quot;message&quot;</span>, exception.getMessage());</span><br><span class="line">                        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWithListeners</span><span class="params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Consumer&lt;StartupStep&gt; stepAction)</span> </span>&#123;</span><br><span class="line">        StartupStep step = <span class="keyword">this</span>.applicationStartup.start(stepName);</span><br><span class="line">        <span class="keyword">this</span>.listeners.forEach(listenerAction);</span><br><span class="line">        <span class="keyword">if</span> (stepAction != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stepAction.accept(step);</span><br><span class="line">        &#125;</span><br><span class="line">        step.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="自定义事件监听组件"   >          <a href="#自定义事件监听组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义事件监听组件"></a> 自定义事件监听组件</h3>      <p><code>MyApplicationContextInitializer.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationContextInitializer ....initialize.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>MyApplicationListener.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationListener.....onApplicationEvent...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>MyApplicationRunner.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//放入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationRunner...run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>MyCommandLineRunner.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用启动做一个一次性事情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//放入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyCommandLineRunner....run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>MySpringApplicationRunListener.java</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpringApplication application;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....starting....&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....environmentPrepared....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....contextPrepared....&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....contextLoaded....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....started....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener....failed....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>注册<code>MyApplicationContextInitializer</code>，<code>MyApplicationListener</code>，<code>MySpringApplicationRunListener</code>到当前项目的<code>resources / META-INF / spring.factories</code>中：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer&#x3D;\</span><br><span class="line">  com.lun.boot.listener.MyApplicationContextInitializer</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationListener&#x3D;\</span><br><span class="line">  com.lun.boot.listener.MyApplicationListener</span><br><span class="line"></span><br><span class="line">org.springframework.boot.SpringApplicationRunListener&#x3D;\</span><br><span class="line">  com.lun.boot.listener.MySpringApplicationRunListener</span><br></pre></td></tr></table></div></figure>        <h2 id="spring-mvc-执行流程"   >          <a href="#spring-mvc-执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-执行流程"></a> Spring MVC 执行流程</h2>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715165846578.png" alt="image-20210715165846578" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210719204334058.png" alt="image-20210719204334058" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731205850800.png" alt="image-20210731205850800" /></p><p><mark>超链接</mark></p><p><mark>重新截图带上拦截器里面的所有整合</mark></p><p>截图时带上异常处理的内容</p><p>下面将详细分析Spring MVC的执行流程，分别分析<strong>请求映射原理</strong>、<strong>参数解析原理</strong>、<strong>内容协商原理</strong>、<strong>视图解析原理</strong>等。并在其中穿插Spring MVC执行过程中的<mark>n</mark>大主线：</p><ul><li>主线1. 获取请求处理器：this.getHandler()</li><li>主线2. 获取目标处理器的适配器：this.getHandlerAdapter()</li><li>主线3. 使用适配器执行目标方法：ha.handle()</li><li>主线4. 使用ModelAndView进行视图解析：processDispatchResult()</li></ul>        <h2 id="dispatcherservlet"   >          <a href="#dispatcherservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dispatcherservlet"></a> DispatcherServlet</h2>      <p><strong>DispatcherServlet</strong>类继承自<strong>FrameworkServlet</strong>类，该类最终继承自<strong>HttpServlet</strong>类。<mark><strong>其本质上也是一个Servlet，也需要注册到Tomcat中才能响应到客户端传来的请求。</strong></mark></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163040938.png" alt="image-20210715163040938" /></p><p><strong>FrameworkServlet</strong>类中有多个处理请求的方法（<code>doGet/doPost/doPut/doDelete</code>），他们都调用了同一个方法<code>this.processRequest(request, response)</code>。（<strong>DispatcherServlet</strong>类中并没有重写这些<code>doXxx</code>方法和<code>processRequest()</code>方法，因此调用的是<strong>FrameworkServlet</strong>类里的这些方法）</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715162521522.png" alt="image-20210715162521522" /></p><p><code>processRequest(request, response)</code>方法中最关键的一步为调用<code>this.doService(request, response)</code>方法。但该方法在<strong>FrameworkServlet</strong>类中为抽象方法，需要子类实现，因此调用的是<strong>DispatcherServlet</strong>类里的 <strong>this.doService(request, response)</strong> 方法。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715162814683.png" alt="image-20210715162814683" /></p><p><strong>FrameworkServlet</strong>类重写的 <strong>doService()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163548801.png" alt="image-20210715163548801" /></p><p>该方法调用了<strong>FrameworkServlet</strong>中的 <strong>doDispatch(request, response)</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715163935578.png" alt="image-20210715163935578" /></p><p>因此分析清楚 <strong>doDispatch(request, response)</strong> 方法即可理解Spring MVC的原理。上述关系树见下图：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715164354367.png" alt="image-20210715164354367" /></p>        <h3 id="在tomcat中注册dispatcherservlet"   >          <a href="#在tomcat中注册dispatcherservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#在tomcat中注册dispatcherservlet"></a> 在Tomcat中注册DispatcherServlet</h3>      <p>Spring Boot中有一个自动配置类：<strong>DispatcherServletAutoConfiguration</strong>。其用于进行<strong>DispatcherServlet</strong>的自动注册和配置。</p><p><strong>DispatcherServlet</strong>将在Spring Boot启动时添加到容器中，该组件绑定了<strong>WebMvcProperties</strong>配置类，其对应的配置文件前缀为 <strong>“spring.mvc”</strong> ，修改该前缀下的属性即可自定义功能。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210803202035420.png" alt="image-20210803202035420" /></p><p>但仅仅将<strong>DispatcherServlet</strong>注册到容器中还不够，<strong>此时该组件尚未与Tomcat服务器产生联系，Tomcat服务器并不能使用该Servlet进行请求映射</strong>（即此时客户端发来的请求 <strong>“/”</strong> 并不能被<strong>DispatcherServlet</strong>获取到，而会有Tomcat中存在的其他Servlet获取进行请求映射）。因此需要将<strong>DispatcherServlet</strong>注册到Tomcat中才能响应到客户端传来的请求。</p><p>使用<strong>DispatcherServletRegistrationBean</strong>将<strong>DispatcherServlet</strong>注册到Tomcat中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210803203720388.png" alt="image-20210803203720388" /></p><p><strong>DispatcherServletRegistrationBean</strong>用于向Tomcat服务器中注册配置<strong>DispatcherServlet</strong>，并为其指定映射路径<strong>webMvcProperties.getServlet().getPath()</strong>，该值默认为 <strong>“/”</strong> ，开发人员也可以自定义该路径：</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.servlet.path</span>=<span class="string">&quot;/my/&quot;</span></span><br></pre></td></tr></table></div></figure><p><strong>DispatcherServletRegistrationBean</strong>继承自 <strong><code>ServletRegistrationBean&lt;DispatcherServlet&gt;</code></strong> ，其是一种<strong>Servlet注册组件</strong>，用于向Tomcat服务器中注册配置Web原生<strong>Servlet</strong>组件，此时的泛型为<strong>DispatcherServlet</strong>类型，因此会向Tomcat服务器中注册配置<strong>DispatcherServlet</strong>。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210803204836013.png" alt="image-20210803204836013" /></p><p><mark><strong>总结</strong></mark>：使用<strong>DispatcherServletRegistrationBean</strong>向Tomcat中注册了<strong>DispatcherServlet</strong>后，Tomcat即可将符合 <strong>“/”</strong> 的请求映射到<strong>DispatcherServlet</strong>。之后客户端发来符合要求的请求时，即可执行<strong>DispatcherServlet</strong>的 <strong>doDispatch()</strong> 方法，从而进行后续的请求映射、参数解析、数据响应和视图解析等步骤（见下文分析）。</p><hr /><p>补充：Tomcat路径的优先精确匹配原则</p><p>在Tomcat中若配置了多个Servlet，则将优先匹配更精确的路径，例如<strong>DispatcherServlet</strong>的匹配路径为<code>&quot;/&quot;</code>，自定义的其他Servlet的匹配路径为<code>&quot;/my/&quot;</code>，则Tomcat将优先匹配到更精确的Servlet，而不会匹配到<strong>DispatcherServlet</strong>。此时该请求将不再被容器中配置的拦截器所拦截，也不能使用<strong>DispatcherServlet</strong>的页面转发等功能，只能使用原生的Servlet方法。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210803212019087.png" alt="image-20210803212019087" /></p><hr />        <h2 id="文件上传原理"   >          <a href="#文件上传原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件上传原理"></a> 文件上传原理</h2>      <p>标准文件上传解析器<strong>StandardServletMultipartResolver</strong>由<strong>MultipartAutoConfiguration</strong>注册到容器中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801203151706.png" alt="image-20210801203151706" /></p><p>其绑定了<strong>MultipartProperties</strong>属性：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801203234072.png" alt="image-20210801203234072" /></p>        <h3 id="包装原始请求thischeckmultipartrequest"   >          <a href="#包装原始请求thischeckmultipartrequest" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#包装原始请求thischeckmultipartrequest"></a> 包装原始请求：this.checkMultipart(request)</h3>      <p><mark>此处开始分析 <strong>doDispatch()</strong> 方法</mark>：</p><p>进入 <strong>doDispatch()</strong> 方法后，首先进行<strong>文件上传请求包装</strong>： <strong>this.checkMultipart(request)</strong></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715165846578.png" alt="image-20210715165846578" /></p><p>进入<strong>this.checkMultipart(request)</strong> 方法后，将调用唯一的一个参数解析器<strong>StandardServletMultipartResolver</strong>判断当前请求是否是文件上传请求：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801204553429.png" alt="image-20210801204553429" /></p><p>参数解析器<strong>StandardServletMultipartResolver</strong>判断的方式 **isMultipart() **为：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801204739367.png" alt="image-20210801204739367" /></p><p>如果当前请求是文件上传请求，则将当前请求封装成一个<strong>StandardMultipartHttpServletRequest</strong>类型的请求：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801205746126.png" alt="image-20210801205746126" /></p><p>后续分析使用的请求就是这个已经被封装后的<strong>StandardMultipartHttpServletRequest</strong>请求。</p>        <h3 id="解析文件内容"   >          <a href="#解析文件内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解析文件内容"></a> 解析文件内容</h3>      <p>获得包装后的请求后，该请求中包含的文件内容将在 <strong>ha.handle()</strong> 方法中进行解析：</p><p>在所有的参数解析器中有一个请求文件参数解析器<strong>RequestPartMethodArgumentResolver</strong>，Spring MVC将使用该解析器将请求中的文件内容封装成一个<strong>MultipartFile</strong>对象。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801210620885.png" alt="image-20210801210620885" /></p><p>解析得到的文件类型<strong>MultipartFile</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801214140507.png" alt="image-20210801214140507" /></p><p>关于文件上传参数解析器的具体细节见<a href="#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8">文件上传参数解析器</a></p>        <h2 id="请求映射原理"   >          <a href="#请求映射原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#请求映射原理"></a> 请求映射原理</h2>      <p>经过文件上传的封装后，即开始进行请求映射：</p>        <h3 id="主线1-获取请求处理器thisgethandler"   >          <a href="#主线1-获取请求处理器thisgethandler" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主线1-获取请求处理器thisgethandler"></a> 主线1. 获取请求处理器：this.getHandler()</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715165846578.png" alt="image-20210715165846578" /></p><p><strong>this.getHandler()</strong>：根据当前的<strong>url请求地址</strong><code>（&quot;/hello&quot;）</code>判断哪个<strong>控制器</strong>（<code>@Controller</code>）里的<strong>目标方法</strong>（<code>@RequestMapping(&quot;/hello&quot;)</code>）与之对应：</p><p><strong>url：&quot;/hello&quot; ——&gt; HelloController#handle01() 方法</strong></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720135457338.png" alt="image-20210720135457338" /></p><p><strong>this.getHandler()</strong> 方法返回的<strong>mappedHandler</strong>对象的类型为<strong>HandlerExecutionChain</strong>，即<strong>目标方法处理器的执行链</strong>，其内保存了与当前请求地址<code>&quot;/hello&quot;</code>匹配的目标方法<strong>HelloController#handle01()</strong> （这个请求信息在容器启动时就添加到了<strong>RequestMappingHandlerMapping</strong>中，因此可以在后续匹配到）:</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720094927124.png" alt="image-20210720094927124" /></p><p><strong>this.getHandler() 方法内部细节</strong>：</p><hr /><p><strong>this.getHandler()</strong> 方法传入了<code>HttpServletRequest</code>类型的请求对象，其内包含了响应的url等信息：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720101645865.png" alt="image-20210720101645865" /></p><p><mark><strong>this.handlerMappings</strong>：<strong>处理器映射器</strong></mark>，其内保存了每一个处理器能处理映射的方法信息。（以下为Spring Boot中存在的映射器，纯Spring MVC工程中只有两个<code>handlerMapping</code>，分别为基于xml方式的<strong>BeanNameUrlHandlerMapping</strong>和基于注解方式的<strong>RequestMappingHandlerMapping</strong>）</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720095314175-1627472434897.png" alt="image-20210720095314175" /></p><p><mark><strong>RequestMappingHandlerMapping</strong>里保存了所有 <strong>@RequestMapping</strong> 与 <strong>handler</strong> 的映射规则</mark>，为<strong>基于注解方式</strong>的处理器映射器，其内包含了所有开发人员自定义的<code>@RequestMapping</code>方法，<strong>mappingRegistry</strong>属性保存了所有的映射信息：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720101836077.png" alt="image-20210720101836077" /></p><p>IoC容器在启动创建<code>@Controller</code>对象时扫描每个控制器的方法能响应什么请求，并保存在<strong>RequestMappingHandlerMapping</strong>对象的<strong>mappingRegistry</strong>属性中（该属性中保存了所有开发人员自定义的基于注解的控制器信息）。下一次请求过来，判断<code>handlerMapping</code>中有无存在匹配的映射关系。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720101645865.png" alt="image-20210720101645865" /></p><p>在<strong>getHandler()</strong> 方法中，依次遍历所有的<strong>handlerMapping</strong>对象，其会解析当前传入的<code>request</code>对象，判断哪个<strong>handlerMapping</strong>对象符合当前的url请求信息，将符合信息的返回一个<strong>HandlerExecutionChain</strong>对象。下图为匹配到的<code>handler</code>，该<code>handler</code>内保存了该url请求对应的目标 <strong>HelloController#handle01()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720105316770.png" alt="image-20210720105316770" /></p><hr /><p><strong>this.getHandler() 总结</strong></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720101645865.png" alt="image-20210720101645865" /></p><p>在<strong>this.getHandler()</strong> 方法内遍历每个<strong>HandlerMapping</strong>，判断哪个<strong>HandlerMapping</strong>能处理当前的请求地址（开发人员自定义的方法将由<strong>RequestMappingHandlerMapping</strong>处理），并返回一个<strong>HandlerExecutionChain</strong>对象。</p><p>其中IoC容器在启动时就会向<strong>HandlerMapping</strong>内保存每个<code>@RequestMapping(&quot;xxx&quot;)</code>信息，以在后续收到浏览器的url请求时能够匹配到对应的<strong>RequestMappingHandlerMapping</strong>处理器信息。</p>        <h3 id="主线2-获取目标处理器的适配器thisgethandleradapter"   >          <a href="#主线2-获取目标处理器的适配器thisgethandleradapter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主线2-获取目标处理器的适配器thisgethandleradapter"></a> 主线2. 获取目标处理器的适配器：this.getHandlerAdapter()</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210719204334058.png" alt="image-20210719204334058" /></p><p>将上一步得到的<strong>请求映射处理器mappedHandler</strong>传入到 <strong>this.getHandlerAdapter()</strong> 方法中，返回该处理器所对应的<strong>适配器adapter</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720141752006.png" alt="image-20210720141752006" /></p><p>共有四种类型的适配器：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720141620095.png" alt="image-20210720141620095" /></p><p>其中<strong>RequestMappingHandlerAdapter</strong>是基于<strong>注解</strong>方式的适配器，对应于<strong>RequestMappingHandlerMapping</strong>。后续步骤将使用该适配器执行目标方法（基于反射机制）。</p><p>至此，分析了<strong>请求映射</strong>原理，即根据请求url的不同映射得到相应的请求处理器与适配器，接着使用该适配器 <strong>ha.handle()</strong> 执行目标方法（基于反射机制）。</p>        <h3 id="拦截器"   >          <a href="#拦截器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#拦截器"></a> 拦截器</h3>      <p><mark>补充拦截器原理</mark></p>        <h3 id="主线3-使用适配器执行目标方法hahandle"   >          <a href="#主线3-使用适配器执行目标方法hahandle" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主线3-使用适配器执行目标方法hahandle"></a> 主线3. 使用适配器执行目标方法：ha.handle()</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210719204334058.png" alt="image-20210719204334058" /></p><p>在主线2中得到<strong>处理器适配器HandlerAdapter</strong>后，调用其 <strong>ha.handler()</strong> 方法执行目标方法。</p><p><strong>ha.handler()</strong> 方法最终返回的<strong>ModelAndView</strong>对象<code>mv</code>，其中既包括了要转发的目标页面视图名，又包括了目标方法保存在<code>Model/Map</code>中的数据：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210728215546942.png" alt="image-20210728215546942" /></p><p>进入 <strong>ha.handler()</strong> 方法后，将通过调用 <strong>this.invokeHandlerMethod()</strong> 执行目标方法，得到的<code>mav</code>即为 <strong>ha.handler()</strong> 方法返回的<strong>ModelAndView</strong>对象<code>mv</code>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210720144223605.png" alt="image-20210720144223605" /></p><p><strong>this.invokeHandlerMethod()</strong> 方法内部细节：</p><hr /><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724153751013.png" alt="image-20210724153751013" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725215637180.png" alt="image-20210725215637180" /></p><p><mark>上述方法运行完后invocableMethod内的信息</mark>：截图带上getModelAndVIew</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724161349706.png" alt="image-20210724161349706" /></p><p><mark>全部分析完后修改，重新截图带上文件上传</mark>流程图</p><p>大致流程如下：</p><p><strong>准备工作</strong>：</p><ul><li>首先将传入的目标方法处理器<strong>handlerMethod</strong>（其内保存了<strong>HelloController#handle01()</strong> 的信息）封装成一个可执行的处理器方法<strong>invocableMethod</strong>，后续使用该对象执行目标方法；</li><li>为<strong>invocableMethod</strong>设置<strong>参数解析器argumentResolvers</strong>，用于解析目标方法传来的所有参数值；为<strong>invocableMethod</strong>设置<strong>返回值处理器returnValueHandlers</strong>，用于定义方法的返回值支持的类型；为<strong>invocableMethod</strong>设置其他信息；</li></ul><p><strong>准备工作完成后</strong>，即可调用该对象的 <strong>invokeAndHandle()</strong> 方法，利用反射机制真正执行目标方法：</p><ul><li>目标方法执行前，先<mark>使用<strong>参数解析器argumentResolver</strong>解析目标方法传入的所有参数</mark>，得到<code>Object[] args</code>，其内保存了所有解析后的参数对象信息，例如解析完毕后已赋值的POJO以及内容尚且为空的<code>Model/Map</code>对象。【详细分析见<a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86"><strong>参数解析原理</strong></a>章节】<ul><li><code>Model/Map</code>均为接口，程序运行时实际上是通过多态性质创建的是唯一的一个<strong>BindingAwareModelMap</strong>类型的对象；</li><li>该对象此时内容为空，因为还未给其赋值，将在目标方法执行时为其赋值。</li></ul></li><li>得到参数后，基于<strong>反射机制</strong>执行目标方法 <strong>HelloController#handle01()</strong> 。【详细分析见<a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86"><strong>参数解析原理</strong></a>章节】<ul><li>目标方法使用参数解析器解析出的<code>args[]</code>执行业务逻辑代码；</li><li>经过目标方法的执行，<strong>BindingAwareModelMap</strong>中保存的内容将被保存到<strong>ModelAndViewContainer</strong>类型的对象<code>mavContainer</code>中，同时目标方法参数中的POJO（从请求参数中确定值）也会被保存到<code>mavContainer</code>中；</li><li><code>mavContainer</code>中保存的<code>Model/Map</code>数据将在 <strong>getModelAndView()</strong> 方法执行后保存到<strong>ModelAndView</strong>类型对象<code>mv</code>中，并作为返回值返回给上一侧 <strong>ha.handle()</strong> ；</li><li>在主线4里使用该<strong>ModelAndView</strong>类型对象进行<strong>视图解析</strong>等操作。其内容最终都会<strong>被保存到request域中</strong>。【详细分析见<a href="#%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86"><strong>视图解析原理</strong></a>章节】</li></ul></li><li>目标方法执行完毕后，<mark>使用<strong>返回值处理器returnValueHandlers</strong>处理目标方法的返回值</mark>，此时根据返回值类型的不同分为多种情况【详细分析见<a href="#%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86"><strong>数据响应与内容协商原理</strong></a>章节】：<ul><li>若目标方法使用 <strong>@ResoponseBody</strong> 注解，即要返回JSON等格式的数据，则进行<strong>内容协商</strong>，使用<strong>转换器Converters</strong>将POJO数据内容转换为指定格式（如JSON、XML等）</li><li>若返回值为要跳转的页面视图名，则将返回值<code>&quot;/sucess&quot;</code>作为视图名<strong>viewName</strong>保存到<strong>ModelAndView</strong>对象<code>mv</code>中，主线4将使用该对象进行页面转发</li></ul></li><li>处理完返回值后，将执行 <strong>getModelAndView()</strong> 方法将<code>mavContainer</code>对象转换成<strong>ModelAndView</strong>对象<code>mv</code>，返回给 <strong>ha.handle()</strong> 方法，用于后续的视图解析。</li></ul><hr /><p>下文将详细分析上述流程。</p>        <h2 id="参数解析原理"   >          <a href="#参数解析原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#参数解析原理"></a> 参数解析原理</h2>      <p>在<strong>this.invokeHandlerMethod()</strong> 方法内，首先将传入的目标方法处理器<strong>handlerMethod</strong>（其内保存了<strong>HelloController#handle01()</strong> 的信息）封装成一个可执行的处理器方法<strong>invocableMethod</strong>，后续使用该对象执行目标方法；</p><p>接着为<strong>invocableMethod</strong>设置<strong>参数解析器argumentResolvers</strong>，用于解析目标方法传来的所有参数值（橙色框）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724153751013.png" alt="image-20210724153751013" /></p><p>为<strong>invocableMethod</strong>设置完参数解析器和返回值处理器后，将调用其 <strong>invokeAndHandle()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725215637180.png" alt="image-20210725215637180" /></p><p>该方法将先后完成<strong>解析目标方法参数</strong>、<strong>基于反射机制执行目标方法</strong>、<strong>处理目标方法返回值</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725171847138.png" alt="image-20210725171847138" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724161138834.png" alt="image-20210724161138834" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724161223870.png" alt="image-20210724161223870" /></p><p><strong>invocableMethod.invokeAndHandle()</strong> 方法内逻辑：</p><ul><li><strong>invokeForRequest()</strong>：解析参数并执行目标方法<ol><li><strong>Object[] args = getMethodArgumentValues()</strong> ：解析获取目标方法的所有参数值(例如<a href="#POJO%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8">解析POJO内容</a>，<a href="#%E5%8E%9F%E7%94%9FServlet-API%E8%A7%A3%E6%9E%90%E5%99%A8">解析原生Servlet API</a>，<a href="#Model/Map%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8">解析Model/Map</a>)</li><li><strong>doInvoke(args)</strong> ：利用反射机制执行目标方法（该方法返回<code>mavContainer</code>对象，其中保存<code>Model/Map</code>中的内容、目标方法参数中的POJO内容（从请求参数中确定值）以及要跳转的视图名<code>viewName</code>）</li></ol></li><li><strong>returnValueHandlers.handleReturnValue()</strong>：处理目标方法返回值，分两种情况【详细分析见<a href="#%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86"><strong>数据响应与内容协商原理</strong></a>章节】：<ol><li>若目标方法使用 <strong>@ResoponseBody</strong> 注解，即要返回JSON等格式的数据，则进行<strong>内容协商</strong>，使用<strong>转换器Converters</strong>将POJO数据内容转换为指定格式（如JSON、XML等）</li><li>若返回值为要跳转的页面视图名，则将返回值<code>&quot;/sucess&quot;</code>作为视图名<strong>viewName</strong>保存到<strong>ModelAndView</strong>对象<code>mv</code>中，<mark>主线4</mark>将使用该对象进行页面转发</li></ol></li></ul><p>本章节将分析 <strong>invokeForRequest()</strong> 方法内的细节：</p>        <h3 id="解析参数getmethodargumentvalues"   >          <a href="#解析参数getmethodargumentvalues" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解析参数getmethodargumentvalues"></a> 解析参数：getMethodArgumentValues()</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724161138834.png" alt="image-20210724161138834" /></p><p><strong>getMethodArgumentValues()</strong> 方法（上图黄色框）用于进行目标方法的参数解析，将参数解析完毕后，返回的<code>args[]</code>中存储了所有参数信息（<code>Model/Map</code>里的内容还都为空，因为此时还未执行目标方法），之后调用 <strong>doInvoke(args)</strong> 执行目标方法，将<code>Model/Map</code>中的内容保存到<code>mavContainer</code>对象中。 <strong>getMethodArgumentValues()</strong> 方法内的逻辑如下：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724163554136.png" alt="image-20210724163554136" /></p><p>首先获取所有参数<strong>parameters</strong>，然后逐一遍历每一个参数，寻找能解析该参数的<a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8%EF%BC%9AargumentResolvers">参数解析器</a>。其中最关键的两处 <strong>this.resolvers.supportsParameter()</strong> 和 <strong>this.resolvers.resolveArgument()</strong> (黄色框和绿色框)：</p><ul><li><strong>this.resolvers.supportsParameter()</strong> ：遍历每个参数解析器，判断参数解析器是否支持当前参数</li><li><strong>this.resolvers.resolveArgument()</strong> ：若支持当前参数，则使用该解析器解析参数，返回解析得到的参数<code>args[i]</code></li></ul><p><strong>this.resolvers.supportsParameter()</strong> ：遍历每个参数解析器，判断参数解析器是否支持当前参数，若找不到符合的参数解析器，则抛出异常：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801212435861.png" alt="image-20210801212435861" /></p><p>其中，传入的<code>parameter</code>为目标方法中的每一个参数：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725163947016.png" alt="image-20210725163947016" /></p><p><strong>this.resolvers.resolveArgument()</strong> ：在该方法内首先调用 <strong>getArgumentResolver()</strong> 方法获取到匹配的参数解析器（遍历每一个参数解析器，寻找到符合的），再调用匹配到的参数解析器的 <strong>resolveArgument()</strong> 方法解析当前参数：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801212341993.png" alt="image-20210801212341993" /></p><p><strong>getArgumentResolver()</strong> 方法内遍历每一个参数解析器，寻找到匹配的参数解析器：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724163420298-1627527227460.png" alt="image-20210724163420298" /></p><p>若支持当前参数，则使用该解析器解析参数，返回解析得到的参数<code>args[i]</code>。示例：获取要解析的参数名，并使用servlet原生API解析该值：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724165301621.png" alt="image-20210724165301621" /></p><p>遍历所有参数并解析后，得到<code>Object[] args</code>，接着调用 <strong>doInvoke(args)</strong> 执行目标方法，该方法返回<code>mavContainer</code>对象，其中保存<code>Model/Map</code>中的内容以及要跳转的视图名<code>viewName</code>，供后续返回值处理使用。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724161138834.png" alt="image-20210724161138834" /></p><p>至此目标方法执行完毕，得到了<code>mavContainer</code>对象用于后续的返回值处理操作【详细分析见<a href="#%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86"><strong>数据响应与内容协商原理</strong></a>章节】</p>        <h3 id="参数解析器argumentresolvers"   >          <a href="#参数解析器argumentresolvers" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#参数解析器argumentresolvers"></a> 参数解析器：argumentResolvers</h3>      <p><strong>argumentResolvers</strong>内存储了所有Spring MVC支持的参数解析器，每个参数注解都对应了一个参数解析器，如 <strong>@RequestParam</strong> 注解对应<strong>RequestParamMethodArgumentResolver</strong>解析器：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724152930296.png" alt="image-20210724152930296" /></p><p>这些参数解析器都实现了<strong>HandlerMethodArgumentResolver</strong>接口，将首先调用<strong>supportsParameter()</strong> 方法判断是否能够解析传入的参数类型，若可以则执行<strong>参数解析方法resolveArgument()</strong> 解析参数：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724153442677.png" alt="image-20210724153442677" /></p>        <h3 id="常用参数解析器"   >          <a href="#常用参数解析器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用参数解析器"></a> 常用参数解析器</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725153449237.png" alt="image-20210725153449237" /></p>        <h4 id="原生servlet-api解析器"   >          <a href="#原生servlet-api解析器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原生servlet-api解析器"></a> 原生Servlet-API解析器</h4>      <p><strong>ServletRequestMethodArgumentResolver</strong>用于解析原生的Servlet API，例如<strong>ServletRequest、HttpSession</strong>等：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725153121790.png" alt="image-20210725153121790" /></p>        <h4 id="文件上传参数解析器"   >          <a href="#文件上传参数解析器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件上传参数解析器"></a> 文件上传参数解析器</h4>      <p>文件上传参数解析器为<strong>RequestPartMethodArgumentResolver</strong>，该解析器重写的 <strong>supportParameter()</strong> 方法（其会判断当前参数是否标有 <strong>@RequestPart</strong> 注解）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801212958379.png" alt="image-20210801212958379" /></p><p>该解析器重写的 <strong>resolveArgument()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801213316328.png" alt="image-20210801213316328" /></p><p>返回的 <strong>Object mpArg</strong> 即为解析得到的<strong>MultipartFile</strong>类型的对象或数组：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210801214140507.png" alt="image-20210801214140507" /></p><p>解析参数时，将标注有 <strong>@RequestPart</strong> 注解的参数都存放到了一个 <strong>MultiValueMap&lt;String, MultipartFile&gt;</strong> 中，之后获取值的时候直接从该map中 <strong>get(name)</strong> 即可。</p>        <h4 id="modelmap参数解析器"   >          <a href="#modelmap参数解析器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#modelmap参数解析器"></a> Model/Map参数解析器</h4>      <p><code>Model</code>和<code>Map</code>的参数解析器在解析完毕后都会返回<strong>同一个BindingAwareModelMap</strong>对象，但此对象中还没有保存内容（<code>size=0</code>），因为此时目标方法还未执行，还没有向<code>Model/Map</code>中存放内容。在目标方法执行时才为其赋值，并保存到<strong>ModelAndViewContainer</strong>对象<code>mavContainer</code>中，其内容最终都会<strong>被保存到request域中</strong>。示例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMapParam</span><span class="params">(Map&lt;String, Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;map&quot;</span>, <span class="string">&quot;this is map&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;this is model&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;request&quot;</span>, <span class="string">&quot;this is request&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;cookie&quot;</span>, <span class="string">&quot;cookie&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Object mapValue = request.getAttribute(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">    Object modelValue = request.getAttribute(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">    Object requestValue = request.getAttribute(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;map&quot;</span>, mapValue);</span><br><span class="line">    map.put(<span class="string">&quot;model&quot;</span>, modelValue);</span><br><span class="line">    map.put(<span class="string">&quot;request&quot;</span>, requestValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><hr /><p>补充：使用<code>Map</code>，<code>Model</code>和<code>ModelMap</code>本质上是使用了Spring的<strong>BindingAwareModelMap</strong>在工作，相当于在<code>BindingAwareModelMap</code>中保存的数据<strong>都会放到请求域中</strong>。Spring MVC在运行时拥有唯一的一个<code>BindingAwareModelMap</code>对象，各个方法中获取到的<code>Map/ModelMap</code>都会被转换成同一个该对象，从而可以做到多个方法中的数据共享。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210715151056836.png" alt="image-20210715151056836" /></p><ol><li>Map解析器：<strong>MapMethodProcessor</strong></li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724163554136-1627531852946.png" alt="image-20210724163554136" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725165354073.png" alt="image-20210725165354073" /></p><p>该解析器会从<strong>ModelAndViewContatiner</strong>对象中获取到<strong>BindingAwareModelMap</strong>对象。注意此时解析方法返回的<strong>BindingAwareModelMap</strong>对象中还没有保存内容（<code>size=0</code>），因为此时目标方法还未执行，还没有向<code>map</code>中存放属性值，将在后续赋值并将内容存放到<code>request</code>域中。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725165951720.png" alt="image-20210725165951720" /></p><p><strong>ModelAndViewContatiner</strong>对象中的<strong>BindingAwareModelMap</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725165001942.png" alt="image-20210725165001942" /></p><ol start="2"><li>Model解析器：<strong>ModelMethodProcessor</strong></li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725164443575.png" alt="image-20210725164443575" /></p><p>该解析器逻辑与<code>Map</code>解析器相同，会返回同一个<strong>BindingAwareModelMap</strong>对象。</p><p>经过<code>Map</code>和<code>Model</code>解析器后，返回的两个<strong>BindingAwareModelMap</strong>对象是<strong>同一个对象</strong>，说明Spring MVC在运行时拥有<strong>唯一</strong>的一个<code>BindingAwareModelMap</code>对象，各个方法中获取到的<code>Model/Map/ModelMap</code>内容都会转换成同一个<code>BindingAwareModelMap</code>对象中，其内容最终都会被保存到<code>request</code>域中。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725165951720.png" alt="image-20210725165951720" /></p>        <h4 id="pojo参数解析器"   >          <a href="#pojo参数解析器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pojo参数解析器"></a> POJO参数解析器</h4>      <p>自定义类型参数使用<strong>ServletModelAttributeMethodProcessor</strong>参数解析器解析。其会先判断传入的参数是否是简单类型，自定义类型不是简单类型，因此黄色框整体返回true，该解析器将进行解析：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725210434816.png" alt="image-20210725210434816" /></p><p>简单类型如下：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725210610893.png" alt="image-20210725210610893" /></p><p>在解析时首先创建一个空的POJO组件（其内属性值都为Null），之后再将<code>request</code>域中的数据和POJO封装成一个<strong>WebDataBinder数据绑定器</strong>。该绑定器内有许多<strong>转换器Converters</strong>（见下文），用于将HTTP协议中的数据进行转换解析（例如将<code>String</code>转换成<code>Integer</code>）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725211316411.png" alt="image-20210725211316411" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725221333706.png" alt="image-20210725221333706" /></p><ul><li><strong>binderFactory.createBinder()</strong> 方法将<code>request</code>域中的值保存到POJO中，并封装返回了一个<strong>WebDataBinder</strong>类型变量，即<strong>web数据绑定器</strong>。该绑定器内不仅有POJO的所有属性，也有许多<strong>conversionService</strong>转换服务器（其内有许多<strong>converters</strong>转换器），<mark>用于将HTTP请求传来的数据进行解析转换（例如将String转换成Integer）</mark>。</li><li><strong>bindRequestParameters(binder, webRequest)</strong> 方法将解析转换后的值绑定到POJO的属性中。</li></ul><p><mark>即<strong>WebDataBinder</strong>利用它里面的<strong>converters</strong>将请求数据转换成指定的数据类型，并绑定到POJO属性中，从而完成了POJO的创建</mark></p><p><code>binder</code>中的内容：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725220853504.png" alt="image-20210725220853504" /></p><p>在绑定每一个属性值时，遍历所有的<code>Converter</code>转换当前属性，并将其绑定到POJO的属性上。解析完毕后返回该参数对象加入到<code>args[]</code>中，开发人员可以自定义<code>Converter</code>接口的实现类，实现自定义的参数解析功能：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725223637931.png" alt="image-20210725223637931" /></p><hr /><p>补充：自定义<code>Converter</code>解析请求中的参数：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726140103808.png" alt="image-20210726140103808" /></p><hr />        <h2 id="数据响应与内容协商原理"   >          <a href="#数据响应与内容协商原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据响应与内容协商原理"></a> 数据响应与内容协商原理</h2>      <p>上一章<a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86"><strong>参数解析原理</strong></a>分析了<strong>参数解析</strong>和<strong>目标方法执行</strong>的细节（下图中黄色框），本章将分析后续的数据响应与内容协商原理（处理目标方法返回值，下图中橙色框）：<strong>returnValueHandlers.handleReturnValue()</strong></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725171847138.png" alt="image-20210725171847138" /></p><p>在上一章节分析的目标方法执行完毕后，获得了<strong>ModelAndViewContainer</strong>类型的对象<code>mavContainer</code>，其内保存了要跳转的视图页面<code>viewName</code>和<code>Model/Map</code>中的内容。将该参数和返回值、<code>webRequest</code>参数传入到 <strong>returnValueHandlers.handleReturnValue()</strong> 方法中，下面详细分析该方法内的细节：</p>        <h3 id="处理返回值handlereturnvalue"   >          <a href="#处理返回值handlereturnvalue" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#处理返回值handlereturnvalue"></a> 处理返回值：handleReturnValue()</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726142110761.png" alt="image-20210726142110761" /></p><p>进入该方法后，首先调用<strong>selectHandler()</strong> 方法：遍历所有的<strong>返回值处理器returnValueHandlers</strong>判断哪个处理器能处理目标方法的返回值（使用 <strong>supportsReturnType()</strong> 方法）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726143359134.png" alt="image-20210726143359134" /></p><hr />        <h4 id="返回值处理器returnvaluehandlers"   >          <a href="#返回值处理器returnvaluehandlers" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#返回值处理器returnvaluehandlers"></a> 返回值处理器：returnValueHandlers</h4>      <p><strong>returnValueHandlers</strong>的作用为处理目标方法的返回值，不同的处理器用于处理不同类型的目标方法返回值</p><p>Spring MVC支持的返回值类型：</p><ul><li>ModelAndView</li><li>Model</li><li>View</li><li>ResponseEntity</li><li>ResponseBodyEmitter</li><li>StreamingResponseBody</li><li>HttpEntity</li><li>HttpHeaders</li><li>Callable</li><li>DeferredResult</li><li>ListenableFuture</li><li>CompletionStage</li><li>WebAsyncTask</li><li>标注了**@ModelAttribute**注解且为对象类型的</li><li>标注了**@ResponseBody<strong>注解，对应</strong>RequestResponseBodyMethodProcessor**</li></ul><p>每种类型都对应着一个返回值处理器<strong>returnValueHandler</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210724154755603.png" alt="image-20210724154755603" /></p><hr /><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726142110761.png" alt="image-20210726142110761" /></p><p>如果找到支持的返回值处理器，则执行其 <strong>handler.handleReturnValue()</strong> 方法。其中，<strong>handleReturnValue()</strong> 方法会根据返回值处理器<strong>handler</strong>类型的不同而执行不                                                                                                                                                                                                              同的重写方法：</p><ul><li>如果目标方法返回<code>String</code>类型对象，代表要跳转到某个页面</li><li>如果目标方法标注了 <strong>@ResponseBody</strong> 注解，则代表默认要返回JSON类型数据（也可以自定义其他类型</li></ul><p>下面逐一分析两种情况的细节。</p>        <h3 id="1-目标方法返回string类型对象"   >          <a href="#1-目标方法返回string类型对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-目标方法返回string类型对象"></a> 1. 目标方法返回String类型对象</h3>      <p>如果目标方法返回<code>String</code>类型对象，代表要跳转到某个页面。此时的返回值处理器类型为：<strong>ViewNameMethodReturnValueHandler</strong>。</p><p>此时返回值类型是字符串序列，则<code>handleReturnValue()</code>方法将要跳转的视图名<code>viewName</code>保存到了<strong>ModelAndViewContainer</strong>对象<code>mavContainer</code>中，此时其内既保存了<code>Model/Map</code>中的数据，又保存了要跳转的视图名<code>viewName</code>，之后会将该对象转换成一个<strong>ModelAndView</strong>对象，并利用其进行页面转发（见<mark>视图解析原理</mark>）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725193659805.png" alt="" /></p>        <h3 id="2-目标方法标注了responsebody注解"   >          <a href="#2-目标方法标注了responsebody注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-目标方法标注了responsebody注解"></a> 2. 目标方法标注了@ResponseBody注解</h3>      <p>如果目标方法标注了 <strong>@ResponseBody</strong> 注解，则代表默认要返回JSON类型数据（也可以自定义其他媒体类型）。此时返回值处理器为：<strong>RequestResponseBodyMethodProcessor</strong>。</p><p>该处理器将遍历所有的 <mark><strong>消息转换器MessageConverters</strong></mark>，使用匹配的消息转换器将数据转换成 <mark><strong>客户端指定的媒体类型格式</strong></mark> （如JSON/XML）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726160912631.png" alt="image-20210726160912631" /></p><p><strong>writeWithMessageConverters()</strong> ：使用消息转换器<strong>MessageConverters</strong>将返回值对象写成指定的媒体类型数据，此处以JSON举例（也可以自定义媒体类型）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726162256930.png" alt="image-20210726162256930" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210729210852492.png" alt="image-20210729210852492" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727164955683.png" alt="image-20210727164955683" /></p><p>此情况大致执行流程：</p><ul><li>获取目标方法返回值对象</li><li>判断当前请求头（或者请求参数format属性值）是否已经有确定的<strong>媒体类型MediaType</strong></li><li><mark>获取客户端（包括浏览器，Postman）支持的媒体类型<strong>acceptableTypes</strong></mark>：获取客户端发来请求中请求头<code>Request Headers</code>里的<strong>Accept</strong>字段）：默认使用<strong>基于请求头</strong>的<strong>内容协商策略</strong>，从<code>Request Headers</code>中获取Accept里的内容，也可以自定义添加其他内容协商策略。具体细节见<a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86">内容协商原理</a>和<a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E7%AD%96%E7%95%A5">内容协商策略</a></li><li>根据返回值对象类型得到服务器端可生产的媒体类型<strong>produciableTypes</strong>：遍历所有的<strong>消息转换器HttpMessageConverter</strong>，<mark>判断当前的返回值对象类型能转换成什么类型的媒体类型<strong>produciableTypes</strong></mark></li><li><strong>双重循环</strong>，判断哪两个<strong>acceptableTypes</strong>和<strong>produciableTypes</strong>能最佳匹配，<mark>即寻找<strong>服务器端能提供的媒体类型</strong>和<strong>客户端能接收的媒体类型</strong>之间的最佳匹配</mark>，匹配到的<code>MediaType</code>即为返回值需要转换成的媒体类型【此过程即为<strong>内容协商</strong>，具体细节见<a href="#%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86">内容协商原理</a>】</li><li>再次遍历所有的<strong>消息转换器HttpMessageConverter</strong>，判断哪个转换器能将当前的返回值类型转换成上文中<strong>匹配到的最佳媒体类型MediaType</strong>（如JSON/XML），在找到符合的转换器后，将其转换成指定的媒体类型。具体细节见<a href="#%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86">消息转换原理</a></li></ul>        <h3 id="内容协商原理"   >          <a href="#内容协商原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内容协商原理"></a> 内容协商原理</h3>      <p>内容协商：将<strong>客户端能接收的媒体数据类型</strong>和<strong>服务器能转换的媒体数据类型</strong>协商到二者能最佳匹配统一。从而<strong>根据客户端接收能力的不同</strong>，返回不同<strong>媒体类型MediaType</strong>的数据（例如JSON，XML，自定义类型等）。借助此原理，可以实现将不同客户端平台发来的数据转换成不同的媒体类型数据（例如PC端转换成JSON，手机端转换成XML，或转换成自定义类型等）。大致流程：</p><ul><li>判断当前响应头<code>Request Headers</code>（或者url请求参数<code>format</code>属性值）中是否已经有确定的<strong>媒体类型MediaType</strong>（如JSON/XML）</li><li>获取客户端（浏览器，Postman）支持的媒体类型<strong>acceptableTypes</strong>（获取客户端发来请求中<code>Request Headers</code>里的<strong>Accept</strong>字段）：默认使用<strong>基于请求头</strong>的<strong>内容协商策略</strong>，从<code>Request Headers</code>中获取<code>Accept</code>里的内容，也可以自定义添加其他内容协商策略。</li><li>遍历循环所有当前<strong>消息转换器HttpMessageConverters</strong>，看哪个支持转换当前返回值对象类型（<code>Person</code>），返回服务器端可以支持将返回值类型转换成的媒体类型<strong>producibleTypes</strong></li></ul><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727100112607.png" alt="image-20210727100112607" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727164303895.png" alt="image-20210727164303895" /></p><p>浏览器支持的媒体类型（在浏览器请求头信息里。默认XML类型权重更大）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727100940697.png" alt="image-20210727100940697" /></p><p>这些媒体类型携带在浏览器的请求头信息里。<strong>请求头Request Headers</strong>告诉服务器，客户端具有接收什么类型数据的能力（<code>Accept</code>），其中XML媒体类型权重更大：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727094454018.png" alt="image-20210727094454018" /></p><blockquote><p>在使用Postman改变请求头中的<code>Accpet</code>字段后(Http协议中规定的字段)，服务器可以得知客户端可以接收的数据类型，就能根据客户端能够接收的媒体类型返回不同的数据格式。</p></blockquote><p>服务端针对当前类型<code>Person</code>能处理的媒体类型（默认只处理JSON媒体类型，开发人员也可以添加XML类型和自定义类型，具体分析见后文）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727101036395.png" alt="image-20210727101036395" /></p><p>之后进行内容协商：遍历<strong>acceptableTypes</strong>和<strong>producibleTypes</strong>，看哪两个能最佳匹配：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727101559706.png" alt="image-20210727101559706" /></p><p>在匹配到合适的转换器<code>Converter</code>后，就继续向下执行：</p>        <h3 id="消息转换原理"   >          <a href="#消息转换原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#消息转换原理"></a> 消息转换原理</h3>      <p>经过内容协商后，选出了客户端能接收的媒体类型<strong>selectedMediaType</strong>，之后根据该媒体类型和返回值对象类型遍历所有<strong>消息转换器HttpMessageConverter</strong>，判断哪个转换器<strong>能写canWrite()</strong> 当前对象，并使用其将返回值对象转换成指定的媒体类型<strong>selectedMediaType</strong>（例如JSON/XML）。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727164955683.png" alt="image-20210727164955683" /></p><p>注意：<strong>HttpMessageConverter</strong>先后使用了两次，第一次遍历所有的Converters，找到能处理客户端响应的最佳匹配媒体类型（此过程为内容协商），此时即知道了客户端能接收哪种媒体类型；第二次遍历所有的<code>Converters</code>，根据已经得知的媒体类型，判断哪个<code>Converter</code>能将目标方法返回值对象（Person）转换成该媒体类型，从而进行转换。</p><p>其中不同的<code>Converter</code>有不同的 <strong>write()</strong> 方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">    <span class="comment">// 数据的写出协议，不通过的Converter不同</span></span><br><span class="line">    String data = person.getName() + <span class="string">&quot;;&quot;</span> + person.getAge() + <span class="string">&quot;;&quot;</span> + person.getBirth();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据写出到浏览器中</span></span><br><span class="line">    OutputStream body = outputMessage.getBody();</span><br><span class="line">    body.write(data.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="消息转换器httpmessageconverter"   >          <a href="#消息转换器httpmessageconverter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#消息转换器httpmessageconverter"></a> 消息转换器：HttpMessageConverter</h3>      <p><strong>消息转换器HttpMessageConverter</strong>：判断是否支持转换某类型的对象，并将其转成<strong>媒体类型MediaType</strong>类型的数据，例如将<code>Person</code>对象转换成JSON格式；或者将JSON格式转换成<code>Person</code>对象。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726190152432.png" alt="image-20210726190152432" /></p><p>容器中默认存在10个消息转换器，每个消息转换器都有自己支持的<strong>媒体类型MediaType</strong>，用来转换不同类型的返回值对象（此时容器中没有）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726190609377.png" alt="image-20210726190609377" /></p><ul><li>0 - 支持<code>Byte</code>类型</li><li>1 - 支持<code>String</code>类型</li><li>3 - 支持<code>Resource</code>类型</li><li>…</li><li>7 - 直接返回true，说明它可以处理任何类型的对象（用于将任意对象转换成JSON格式）</li></ul><p><strong>MappingJackson2HttpMessageConverter</strong>消息转换器放在最后使用，其 <strong>canWrite()</strong> 方法直接返回true，代表其<strong>可以处理任何类型</strong>的对象。该转换器可以将任意的引用类型对象转换成JSON类型（利用底层<code>jackson</code>的<strong>objectMapper</strong>转换）。其中<code>hb</code>属性中保存了转换后的JSON内容。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210726191949357.png" alt="image-20210726191949357" /></p>        <h4 id="自定义httpmessageconverter"   >          <a href="#自定义httpmessageconverter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义httpmessageconverter"></a> 自定义HttpMessageConverter</h4>      <p>所有的<strong>HttpMessageConverter</strong>合起来可以支持各种媒体类型的操作（读和写），开发人员可以自定义消息处理器：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageConverter</span> <span class="keyword">implements</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器需要统计所有MessageConverter都能写哪些类型；自定义的消息转换器支持解析 &quot;x-zhao&quot; 类型的内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/x-zhao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">read</span><span class="params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Person person, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义协议数据的写出</span></span><br><span class="line">        String data = person.getName() + <span class="string">&quot;;&quot;</span> + person.getAge() + <span class="string">&quot;;&quot;</span> + person.getBirth();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写出</span></span><br><span class="line">        OutputStream body = outputMessage.getBody();</span><br><span class="line">        body.write(data.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="comment">// 在容器中添加自定义的消息转换器，用于转换自定义的媒体格式</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">                converters.add(<span class="keyword">new</span> MyMessageConverter());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="xml转换器mappingjackson2xmlhttpmessageconverter"   >          <a href="#xml转换器mappingjackson2xmlhttpmessageconverter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#xml转换器mappingjackson2xmlhttpmessageconverter"></a> XML转换器：MappingJackson2XmlHttpMessageConverter</h3>      <p>服务器端默认只能将客户端传来的数据转换成JSON媒体类型，若开发人员希望能够转换成其他类型的媒体数据（如XML或自定义类型数据），则可以向容器中添加相应的消息转换器。例如向容器中添加XML消息转换器：<strong>MappingJackson2XmlHttpMessageConverter</strong>，只需在<code>pom.xml</code>中添加依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>此时XML消息转换器就会自动注入到容器中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727145909685.png" alt="image-20210727145909685" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727150016279.png" alt="image-20210727150016279" /></p><p>在导入了XML消息转换器后，再次使用浏览器发送请求访问服务器端，此时服务器端可支持转换的媒体类型<strong>producibleTypes</strong>增加了XML类型和自定义类型（浏览器端可接收的媒体类型仍然不变）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210730101533304.png" alt="image-20210730101533304" /></p><p>这是因为此时容器中有了XML消息转换器，即下图中的9和10（11为自定义的消息转换器）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210730103255329.png" alt="image-20210730103255329" /></p><p>浏览器支持的媒体类型<strong>acceptableTypes</strong>（在浏览器请求头信息里。默认xml类型权重更大）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727100940697.png" alt="image-20210727100940697" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210730104019859.png" alt="image-20210730104019859" /></p><p>此时经过双重循环匹配<strong>acceptableTypes</strong>和<strong>producibleTypes</strong>后，得到的<strong>mediaTypesToUse</strong>集合的内容为：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210730103149685.png" alt="image-20210730103149685" /></p><p>此时已经将优先级权重体现了出来，橙色框内的XML类型优先级高于黄色框内的JSON类型，因此在后续寻找最佳匹配时，<strong>会匹配到XML类型的消息转换器</strong>。</p><p>接着第二次遍历消息转换器，遍历到XML消息转换器后，将目标方法返回值转换成XML类型。</p><p><strong>总结</strong>：如果在<code>pom.xml</code>中添加了XML转换器的依赖，则会将目标方法返回值解析成XML类型，因为浏览器发来的请求头信息中XML的权重更大；如果没有导入该依赖，则还是默认使用JSON转换器将返回值转换成JSON格式。</p>        <h3 id="内容协商策略"   >          <a href="#内容协商策略" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内容协商策略"></a> 内容协商策略</h3>      <p>Spring MVC支持多种内容协商策略，例如：</p><ul><li>基于<strong>请求头Request Headers</strong>方式的内容协商策略</li><li>基于<strong>请求参数</strong>方式的内容协商策略</li></ul><p>上文中分析的内容协商策略均为基于<strong>请求头Request Headers</strong>方式的内容协商策略，此种策略下<strong>acceptableTypes</strong>是从客户端发来请求的<strong>请求头Request Headers</strong>信息获取到的。开发人员也可以选择基于<strong>请求参数</strong>方式的内容协商策略，这种策略下，<strong>acceptableTypes</strong>将从<strong>请求参数</strong>中的<strong>format</strong>属性中获取到。</p><p>开启基于请求参数的内容协商策略：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>开启该注解后，即会在容器中创建<strong>基于请求参数</strong>方式的请求协商策略<strong>ParameterContentNegotiationStrategy</strong>，该策略会解析请求参数中的<strong>format</strong>属性值，判断是JSON还是XML，并据此进行内容协商。</p><blockquote><p>此时在浏览器中发送请求：<span class="exturl"><a class="exturl__link"   href="http://localhost:8080/test/person?format=json" >http://localhost:8080/test/person?format=json</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 或 <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/test/person?format=xml" >http://localhost:8080/test/person?format=xml</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>getAcceptableMediaTypes()</strong> 方法内将使用内容协商管理器<strong>contentNegotiationManager</strong>解析媒体类型：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727141446187.png" alt="image-20210727141446187" /></p><p>若开启了<strong>基于请求参数</strong>方式的内容协商策略，则该管理器中将存在<strong>ParameterContentNegotiationStrategy</strong>策略，用于解析请求参数中的<code>format</code>属性值，该策略优先于默认的请求头协商策略<strong>HeaderContentNegotiationStrategy</strong>，即不再使用默认的解析请求头的方式。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727142409445.png" alt="image-20210727142409445" /></p><ul><li>0 - <strong>ParameterContentNegotiationStrategy</strong>：基于<strong>请求头Request Headers</strong>方式的内容协商策略</li><li>1 - <strong>HeaderContentNegotiationStrategy</strong>：基于<strong>请求参数</strong>方式的内容协商策略</li></ul><p><strong>注意，此策略只支持JSON和XML</strong>，如果想自定义新的格式，需要：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 指定三种媒体类型映射关系</span></span><br><span class="line">                Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                mediaTypes.put(<span class="string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">                mediaTypes.put(<span class="string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);</span><br><span class="line">                mediaTypes.put(<span class="string">&quot;myFormat&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/x-zhao&quot;</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 基于请求参数的内容协商策略：支持解析哪些参数对应哪些媒体类型</span></span><br><span class="line">                ParameterContentNegotiationStrategy parameterStrategy =</span><br><span class="line">                    <span class="keyword">new</span> ParameterContentNegotiationStrategy(mediaTypes);</span><br><span class="line">                <span class="comment">// 可以自定义请求参数的属性名</span></span><br><span class="line">                <span class="comment">// parameterStrategy.setParameterName(&quot;format&quot;);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 基于请求头的内容协商策略</span></span><br><span class="line">                HeaderContentNegotiationStrategy headerStrategy = <span class="keyword">new</span> HeaderContentNegotiationStrategy();</span><br><span class="line"></span><br><span class="line">                configurer.strategies(Arrays.asList(parameterStrategy, headerStrategy));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="视图解析原理"   >          <a href="#视图解析原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#视图解析原理"></a> 视图解析原理</h2>              <h3 id="获取modelandview对象getmodelandview"   >          <a href="#获取modelandview对象getmodelandview" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#获取modelandview对象getmodelandview"></a> 获取ModelAndView对象：getModelAndView()</h3>      <p><mark><strong>注意</strong>：此时的方法栈仍然处于<strong>主线3：ha.handle()</strong> 方法中</mark>。<strong>getModelAndView() <strong>方法为其内的最后一个方法，将返回</strong>ModelAndView</strong>对象<code>mv</code>用于后续的视图解析。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210727193857347.png" alt="image-20210727193857347" /></p><p><strong>getModelAndView()</strong> 方法内：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731203910807.png" alt="image-20210731203910807" /></p><p>之后该<strong>ModelAndView</strong>对象<code>mv</code>将作为 <strong>ha.handle()</strong> 方法的返回值，用于后续的视图解析。</p><p><mark>至此， <strong>主线3：ha.handle()</strong> 方法执行完毕。</mark></p>        <h3 id="主线4-转发页面thisprocessdispatchresult"   >          <a href="#主线4-转发页面thisprocessdispatchresult" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#主线4-转发页面thisprocessdispatchresult"></a> 主线4. 转发页面：this.processDispatchResult()</h3>      <p><strong>this.processDispatchResult()</strong>：根据目标方法最终执行完成后封装的<code>ModelAndView</code>对象内的信息转发到相应的页面（页面信息保存在<code>viewName</code>里），并且可以从请求域中取出<code>ModelAndView</code>中保存的数据。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731205850800.png" alt="image-20210731205850800" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725201730427.png" alt="image-20210725201730427" /></p><p>该方法内调用 <strong>render()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731210317048.png" alt="image-20210731210317048" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731212421271.png" alt="image-20210731212421271" /></p><p>该方法调用 <strong>resolveViewName()</strong> 方法解析出该视图名对应的<strong>View</strong>类型对象，其定义了页面的渲染逻辑。之后将调用 <strong>view.render()</strong> 方法渲染页面。</p><p><strong>resolveViewName()</strong> 方法内遍历了所有的视图解析器，依次判断哪个能解析当前返回值，并使用匹配的解析器解析出<strong>View</strong>类型对象：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731210848419.png" alt="image-20210731210848419" /></p><p>共有5种视图解析器，其中<strong>ContentNegotiatingViewResovler内容协商视图解析器</strong>中包含了其他四种解析器：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731211417134.png" alt="image-20210731211417134" /></p><p><strong>ContentNegotiatingViewResovler内容协商视图解析器</strong>解析视图名的方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731211605005.png" alt="image-20210731211605005" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731212028693.png" alt="image-20210731212028693" /></p><p>可以看出该方法内本质上还是依次遍历了其他四种视图解析器，判断哪个能解析当前视图名。</p><p>在遍历得到匹配的视图解析器后，将解析出对应的<strong>View</strong>类型对象，不同类型的返回值对应了不同的<strong>View</strong>类型对象：</p><ul><li><strong>&quot;redirect:xxx&quot;</strong> 对应 <strong>RedirectView</strong></li><li><strong>&quot;forward:xxx&quot;</strong> 对应 <strong>InternalResourceView</strong></li><li><strong>&quot;/xxx&quot;</strong>  对应 <strong>ThymeleafView</strong></li></ul><p>最后调用 <strong>view.render()</strong> 方法渲染页面。不同的View类型对应了不同的渲染方法。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210731212427561.png" alt="image-20210731212427561" /></p><p><strong>RedirectView</strong>类型渲染逻辑：</p><ul><li>获取要重定向的url地址，调用 <strong>response.sendRedirect(encodedURL)</strong> 方法进行重定向。</li></ul><p><strong>InternalResourceView</strong>类型渲染逻辑：</p><ul><li><strong>request.getRequestDispatcher(path).forward(request, response)</strong></li></ul><hr /><p>补充：经过许多层调用后，在 <strong>exposeModelAsRequestAttributes()</strong> 方法内将前面<strong>ModelAndView</strong>里存放的值放到请求域中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210725202336384.png" alt="image-20210725202336384" /></p><hr /><p>至此，主线4分析完毕，完成了视图的解析与跳转。</p>        <h2 id="异常处理原理"   >          <a href="#异常处理原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常处理原理"></a> 异常处理原理</h2>      <p>异常处理自动配置类<strong>ErrorMvcAutoConfiguration</strong>。其会在Spring Boot启动时被加载，该配置类会向容器中注册一些异常处理相关的组件：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802215420259.png" alt="image-20210802215420259" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802164252572.png" alt="image-20210802164252572" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802190349481.png" alt="image-20210802190349481" /></p><p>该配置类向容器中注册的异常处理相关组件：</p><ul><li><strong>DefaultErrorAttributes</strong>：在request域中保存异常信息，定义错误页面里能包含哪些内容。实现了<strong>ErrorAttributes</strong>接口和<strong>HandlerExceptionResolver</strong>接口（也是一种处理器异常解析器，用于将错误信息保存到request域中，安达市多撒）。其内保存了错误的状态信息。【该类用于自定义错误页面包含哪些信息】</li><li><strong>BasicErrorController</strong>：处理异常错误消息的控制器，标注了 <strong>@Controller</strong> 注解。【该类用于进行异常错误消息的请求映射】<ul><li>其用于处理默认的异常请求 <code>@RequestMapping(/error)</code>。</li><li>若是发浏览器端发来的<code>&quot;text/html&quot;</code>类型请求后，则返回一个 <code>new ModelAndView(&quot;error&quot;, model)</code></li><li>否则返回JSON类型的错误信息<code>ResponseEntity(body, status)</code></li></ul></li><li><strong>StaticView<code>(id=&quot;error&quot;)</code></strong>：错误页面视图，实现了<strong>View</strong>接口。其 <strong>render()</strong> 方法定义了页面渲染的逻辑（渲染出<strong>白页</strong>错误信息页面）【该类用于渲染出<strong>白页</strong>错误信息页面】</li><li><strong>BeanNameViewResolver</strong>：组件名称视图解析器，是视图解析器的一种。按照目标方法返回的视图名作为组件的id去容器中查找View对象。其用于按照组件名<code>&quot;error&quot;</code>去容器中查找到上述错误页面视图<strong>StaticView</strong>组件。【该类用于按照组件名称查找View对象】</li><li><strong>DefaultErrorViewResolver</strong>：错误视图解析器，是视图解析器的一种。如果浏览器发送的url请求出现错误，则会以HTTP的状态码<code>status.series()</code>作为视图页地址<code>viewName</code>，返回一个<strong>ModelAndView</strong>对象。去找<code>error/</code>目录下对应的<code>404.html</code> 或 <code>5xx.html</code> 资源。【该类用于自定义指定错误视图的跳转规则】</li></ul><p>白页是谁解析的</p><p>下面介绍这些组件的细节：</p>        <h3 id="defaulterrorattributes"   >          <a href="#defaulterrorattributes" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#defaulterrorattributes"></a> DefaultErrorAttributes</h3>      <p><strong>DefaultErrorAttributes</strong>：在request域中保存异常信息，定义错误页面里能包含哪些内容。实现了<strong>ErrorAttributes</strong>接口和<strong>HandlerExceptionResolver</strong>接口。</p><p>其内保存了错误的状态信息，并会在解析异常时调用 <strong>resolveException()</strong> 方法，<mark>将异常信息存储在request域中</mark>，并返回一个<code>null</code>的<strong>ModelAndView</strong>（此处分析见【异常处理执行流程】）。</p><p><mark><strong>该类最关键的作用</strong></mark>：在每个异常请求进来时首先使用该类进行解析，将异常信息保存在request域中，从而告诉服务器当前请求有异常，需要再次派发一个 <strong><code>&quot;/error&quot;</code></strong> 请求给<strong>DispatchServlet</strong>，该请求中保存了所有的异常信息，因此响应这个 <strong><code>&quot;/error&quot;</code></strong> 请求时就可以获取到了完整的异常信息，交给<strong>DefaultErrorViewResolver</strong>解析该异常请求。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802205927018.png" alt="image-20210802205927018" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802191937364.png" alt="image-20210802191937364" /></p>        <h3 id="basicerrorcontroller"   >          <a href="#basicerrorcontroller" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#basicerrorcontroller"></a> BasicErrorController</h3>      <p><strong>BasicErrorController</strong>：处理异常消息的控制器，标注了 <strong>@Controller</strong> 注解。</p><p>当服务器端收到错误的url请求时==，将触==发<code>&quot;/error&quot;</code>，此时Spring MVC会将此请求映射到控制器<strong>BasicErrorController</strong>的 <strong>errorHtml()</strong> 方法或 <strong>error()</strong> 方法。</p><p><strong>情况一</strong>：若此请求的媒体类型为<code>&quot;text/html&quot;</code>，则将执行 <strong>errorHtml()</strong> 方法，该方法将返回一个 <code>viewName=&quot;error&quot;</code> 的<strong>ModelAndView</strong>。之后在视图解析步骤中将使用<strong>BeanNameViewResolver</strong>（组件名称视图解析器）去容器中查找<code>viewName</code>为<code>&quot;error&quot;</code>的<strong>View</strong>，并调用其<strong>render()</strong> 渲染出<strong>白页</strong>错误信息页面。（此种情况就解释了为什么在浏览器端访问了错误的url后会显示“白页”） DefaultViewErrorResolver还是 beanname</p><p><strong>情况二</strong>：若请求来自于非浏览器的其他机器，则将返回JSON类型的错误信息。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802213620722.png" alt="image-20210802213620722" /></p>        <h3 id="staticview"   >          <a href="#staticview" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#staticview"></a> StaticView</h3>      <p><strong>StaticView</strong>实现了<strong>View</strong>接口，也是一种视图。其 <strong>render()</strong> 方法将渲染出<strong>白页</strong>错误信息页面：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802192305382.png" alt="image-20210802192305382" /></p>        <h3 id="beannameviewresolver"   >          <a href="#beannameviewresolver" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beannameviewresolver"></a> BeanNameViewResolver</h3>      <p><strong>BeanNameViewResolver</strong>：组件名称视图解析器，是视图解析器的一种。其会按照目标方法返回的视图名作为组件的id去容器中查找View对象。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802185022754.png" alt="image-20210802185022754" /></p><p><strong>BasicErrorController.errorHtml()</strong> 方法返回了<code>viewName=&quot;error&quot;</code>的视图<strong>StaticView</strong>。该解析器会按照组件名<code>&quot;error&quot;</code>去容器中查找到该<code>StaticView</code>组件，找到该组件后调用其 <strong>render()</strong> 方法渲染出<strong>白页</strong>错误信息页面</p>        <h3 id="defaulterrorviewresolver"   >          <a href="#defaulterrorviewresolver" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#defaulterrorviewresolver"></a> DefaultErrorViewResolver</h3>      <p><strong>DefaultErrorViewResolver</strong>：错误视图解析器，是视图解析器的一种。如果浏览器发送的url请求出现错误，则会以HTTP的状态码<code>status.series()</code>作为视图页地址<code>viewName</code>，返回一个<strong>ModelAndView</strong>对象。去找<code>error/</code>目录下对应的<code>404.html</code> 或 <code>5xx.html</code> 资源。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802191120478.png" alt="image-20210802191120478" /></p>        <h3 id="异常处理执行流程"   >          <a href="#异常处理执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常处理执行流程"></a> 异常处理执行流程</h3>      <p>在 <strong>doDispatch(request, response)</strong> 方法中，目标方法的执行过程中出现的任何异常，都会被<strong>dispatchException</strong>捕获到：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802201853375.png" alt="image-20210802201853375" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802212022373.png" alt="image-20210802212022373" /></p><p>之后进入视图解析 <strong>processDispatchResult()</strong> ：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802202538535.png" alt="image-20210802202538535" /></p><p>关键分析 <strong>processHandlerException()</strong> 方法，该方法内处理了异常消息，并返回了一个<strong>ModelAndView</strong>对象。该方法内遍历了容器中存在的所有<strong>处理器异常解析器HandlerExceptionResolver</strong>，判断哪一个能处理当前异常：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802204759380.png" alt="image-20210802204759380" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802211043922.png" alt="image-20210802211043922" /></p><p>循环过程中，直到某个解析器解析异常后返回的<strong>exMv</strong>不为<code>null</code>，才跳出循环，默认没有任何解析器能够解析出exMv，异常将被抛出回 <strong>processDispatchResult()</strong> 所在的方法栈。该异常被catch后，将倒序执行<strong>mappedHandler</strong>中所有已执行过的拦截器的 <strong>afterCompletion()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802212022373.png" alt="image-20210802212022373" /></p><p>此时，当前带有异常的请求的执行流程分析完毕，此时并没有进行页面跳转等操作。接着，Spring MVC的底层将发送一个url为<code>&quot;/error&quot;</code>的请求，该请求将由<strong>BasicErrorController</strong>处理（见上文分析）</p><hr /><p>容器中默认存在的处理器异常解析器有：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802205006071.png" alt="image-20210802205006071" /></p><p>其中0 - <strong>DefaultErrorAttributes</strong> 即为之前分析过的<strong>默认错误解析器</strong>：</p><p><strong>DefaultErrorAttributes</strong>：定义错误页面里能包含哪些内容。实现了<strong>ErrorAttributes</strong>接口和<strong>HandlerExceptionResolver</strong>接口。</p><p>其内保存了错误的状态信息，并会在解析异常时调用 <strong>resolveException()</strong> 方法，<mark>将异常信息存储在request域中</mark>，并返回一个<code>null</code>的<strong>ModelAndView</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210802205927018.png" alt="image-20210802205927018" /></p><hr />]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 事务源码分析</title>
      <link href="2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[        <h2 id="spring声明式事务原理"   >          <a href="#spring声明式事务原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring声明式事务原理"></a> Spring声明式事务原理</h2>      <p><strong>@EnableTransactionManagement</strong> 注解向容器中添加<strong>AutoProxyRegistrar</strong>和<strong>ProxyTransactionManagementConfiguration</strong>组件，二者作用分别为：</p><ul><li><strong>AutoProxyRegistrar</strong>：类似于AOP中的<strong>AspectJAutoProxyRegistrar</strong>，用于向容器中注册<strong>InfrastructureAdvisorAutoProxyCreator</strong>组件（类似于AOP里的自动代理器，一种后置处理器）来为普通组件进行代理包装，创建<strong>代理对象</strong></li><li><strong>ProxyTransactionManagementConfiguration</strong>：用于注册<strong>事务增强器</strong>，该增强器内设置有事务拦截器，将在代理对象执行目标方法时进行拦截，并调用其<code>invoke()</code>方法，<strong>由事务管理器控制事务的提交与回滚</strong>。</li></ul><p>Spring事务原理与AOP原理十分相似，都包含有<strong>后置处理器</strong>和<strong>拦截器</strong>思想，在组件创建后包装出代理对象、在代理对象执行目标方法时进行拦截，使用<strong>事务管理器</strong>控制事务的提交与回滚。</p><span id="more"></span>        <h2 id="enabletransactionmanagement"   >          <a href="#enabletransactionmanagement" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#enabletransactionmanagement"></a> @EnableTransactionManagement</h2>      <p>要开启事务管理，配置类中需要<strong>添加@EnableTransactionManagement。<strong>其通过 <strong>@Import</strong> 注解向容器中导入</strong>TransactionManagementConfigurationSelector</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705162841045.png" alt="image-20210705162841045" /></p><p><strong>TransactionManagementConfigurationSelector</strong>会根据<code>adviceMode</code>的值（见上图黄色框），选择导入什么类型的组件。默认导入：</p><ul><li><strong>AutoProxyRegistrar</strong>：类似于AOP中的<strong>AspectJAutoProxyRegistrar</strong>，用于向容器中注册<strong>InfrastructureAdvisorAutoProxyCreator</strong>组件（类似于AOP里的自动代理器，一种后置处理器）来为普通组件进行代理包装，创建代理对象</li><li><strong>ProxyTransactionManagementConfiguration</strong>：用于注册<strong>事务增强器</strong>，该增强器内设置有事务拦截器，将在代理对象执行目标方法时进行拦截，并调用其<code>invoke()</code>方法，<strong>由事务管理器控制事务的提交与回滚</strong>。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705162739312.png" alt="image-20210705162739312" /></p><p>下面分别介绍<strong>AutoProxyRegistrar</strong>和<strong>ProxyTransactionManagementConfiguration</strong>的作用。</p>        <h2 id="autoproxyregistrar"   >          <a href="#autoproxyregistrar" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autoproxyregistrar"></a> AutoProxyRegistrar</h2>      <p><strong>AutoProxyRegistrar</strong>的作用类似于AOP中使用到的<strong>AspectJAutoProxyRegistrar</strong>。二者都能向容器中注册一个<strong>自动代理创建器</strong>的定义（见黄色框）</p><ul><li><strong>AutoProxyRegistrar</strong>：注册<strong>InfrastructureAdvisorAutoProxyCreator</strong>（基础的自动代理器）</li><li><strong>AspectJAutoProxyRegistrar</strong>：注册<strong>AnnotationAwareAspectJAutoProxyCreator</strong>（注解装配模式的自动代理器）</li></ul><p>二者注册的自动代理创建器都实现了<strong>SmartInstantiationAwareBeanPostProcessor</strong>接口和<strong>BeanFactoryAware</strong>接口，因此都是一种<strong>特殊的后置处理器</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705165313341.png" alt="image-20210705165313341" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705165700051.png" alt="image-20210705165700051" /></p>        <h3 id="infrastructureadvisorautoproxycreator"   >          <a href="#infrastructureadvisorautoproxycreator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#infrastructureadvisorautoproxycreator"></a> InfrastructureAdvisorAutoProxyCreator</h3>      <p>它实现了<strong>SmartInstantiationAwareBeanPostProcessor</strong>接口和<strong>BeanFactoryAware</strong>接口，是一种<strong>特殊的后置处理器</strong>。它的作用和<strong>AnnotationAwareAspectJAutoProxyCreator</strong>相似，都会在普通组件创建前后进行拦截，调用后置处理器的<code>postProcessAfterInitialization()</code>方法，将普通组件进行包装（wrap），为其创建一个代理对象（其内含有相应的增强器）。该代理对象在执行目标方法时，会被事务拦截器所拦截，并由事务管理器控制事务的提交与回滚。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705175257029.png" alt="image-20210705175257029" /></p>        <h2 id="proxytransactionmanagementconfiguration"   >          <a href="#proxytransactionmanagementconfiguration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#proxytransactionmanagementconfiguration"></a> ProxyTransactionManagementConfiguration</h2>      <p><strong>ProxyTransactionManagementConfiguration</strong>被<code>@Configuration</code>修饰，是一个配置类。它会给容器中注册一个<strong>事务增强器 BeanFactoryTransactionAttributeSourceAdvisor</strong>。该增强器需要设置两个对象：</p><ul><li><strong>事务注解属性解析器 TransactionAttributeSource</strong>：用以解析事务注解里设置的属性值。</li><li><strong>事务拦截器 TransactionInterceptor</strong>：是一种<code>MethodInterceptor</code>。其内保存了事务属性信息，事务管理器。在代理对象执行目标方法时被其拦截，并调用<code>invoke()</code>方法，<strong>由事务管理器控制事务的提交与回滚</strong>。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705180105446.png" alt="image-20210705180105446" /></p><p>事务拦截器和事务注解属性解析器：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705192545675.png" alt="image-20210705192545675" /></p>        <h3 id="transactionattributesource"   >          <a href="#transactionattributesource" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#transactionattributesource"></a> TransactionAttributeSource</h3>      <p><strong>事务注解属性解析器：TransactionAttributeSource</strong>，该组件同样在当前配置类中注册，其作用是解析 <strong>@Transactional()</strong> 注解里设置的属性值：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705180534636.png" alt="image-20210705180534636" /></p>        <h3 id="transactioninterceptor"   >          <a href="#transactioninterceptor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#transactioninterceptor"></a> TransactionInterceptor</h3>      <p><strong>事务拦截器：TransactionInterceptor</strong>，是一种<code>MethodInterceptor</code>方法拦截器，其会在代理对象执行目标方法时进行拦截（工作时机类似于AOP中的各种增强器拦截器），并执行其<code>invoke()</code>方法（拦截器功能的执行都是通过<code>invoke()</code>方法）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705192758666.png" alt="image-20210705192758666" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705195121588.png" alt="image-20210705195121588" /></p><p>进入该方法内：</p><ol><li>使用<code>TransactionAttributeSource</code>组件获取<code>@Transactional()</code>注解里设置的相关属性</li><li>获取事务管理器<code>PlatformTransactionManager</code>组件（若事先没有手动添加任何事务管理器，则会从容器中获取在配置类中注册的<code>PlatformTransactionManager</code>）</li></ol><p>获取<code>PlatformTransactionManager</code>组件的方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705193959819.png" alt="image-20210705193959819" /></p><ol start="3"><li>在代理对象执行目标方法时，使用<code>try catch</code>包裹业务代码，若出现异常可捕获并进行回滚（并将该异常再次抛出），若没有异常则提交事务：</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818102456796.png" alt="image-20210818102456796" /></p><p>其中<code>createTransactionIfNecessary()</code>方法将创建一个事务的状态信息<code>txInfo</code>（上图第一行），<strong>其内保存了事务的信息和事务管理器</strong>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210816221209341.png" alt="image-20210816221209341" /></p><p>返回的<strong>TransactionInfo</strong>对象中保存了当前事务的状态信息（包含事务注解里的信息，例如传播特性；事务管理器等），后文将使用该对象获取到事务管理器执行事务的提交和回滚：</p><p>若发生异常，<strong>则使用事务管理器进行回滚</strong>，该事务管理器从上文中的<strong>TransactionInfo</strong>中获取（黄色框中回滚时从<strong>txInfo</strong>中获取到了事务的状态）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705195609111.png" alt="image-20210705195609111" /></p><p>若没有发生异常，<strong>则使用事务管理器提交事务</strong>（黄色框中提交时从<strong>txInfo</strong>中获取到了事务的状态）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210705195711824.png" alt="image-20210705195711824" /></p>        <h2 id="事务和线程的关系"   >          <a href="#事务和线程的关系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事务和线程的关系"></a> 事务和线程的关系</h2>      <p><strong>当一个新的事务创建时，就会被绑定到当前线程上</strong>。</p><p><strong>TransactionAspectSupport</strong>类中的<code>ThreadLocal&lt;TransactionInfo&gt;</code>在当前线程保存了一个事务的信息<strong>TransactionInfo</strong>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818103221467.png" alt="image-20210818103221467" /></p><p>该线程会伴随着这个事务整个生命周期，直到事务提交、回滚或挂起（<strong>临时解绑</strong>）时该线程才会取消与该事务的绑定。</p><p>同时一个线程只能绑定一个事务，若当前线程原本正绑定的事务还未执行完毕就被新的事务所挂起，则该线程与该事务进行临时解绑，并绑定到新创建的事务上；直到新建的事务提交或回滚后，该线程才会结束与该新建事务的绑定，再次重新绑定之前的事务。</p><p>上述过程实现的原理为使用<strong>链表结构</strong>：创建一张<code>TransactionInfo</code>链表，将新创建的事务<code>TransactionInfo</code>链接到旧的事务<code>TransactionInfo</code>的尾部，待新事务执行完毕后再指回旧的事务<code>TransactionInfo</code>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818104726262.png" alt="image-20210818104726262" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818105411421.png" alt="image-20210818105411421" /></p><p>当新创建的事务结束时恢复旧的事务状态：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210818105517020.png" alt="image-20210818105517020" /></p><p><strong>什么是事务挂起，如何实现挂起</strong></p><p>对事务的配置在Spring内部会被封装成<strong>TransactionInfo</strong>，线程绑定了事务，自然也绑定了事务相关的<strong>TransactionInfo</strong>。<strong>挂起事务时，把TransactionInfo取出临时存储，等待执行完成后，把之前临时存储的TransactionInfo重新绑定到该线程上</strong>。</p><p><strong>关于事务挂起的举例：（某事务挂起之后，任何操作都不在该事务的控制之下）</strong></p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/xiaoshuo566/article/details/83929465" >https://blog.csdn.net/xiaoshuo566/article/details/83929465</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>例如： 方法A支持事务，方法B不支持事务，即<code>PROPAGATION_NOT_SUPPORTED</code>。方法A调用方法B：</p><ul><li>在方法A开始运行时，系统为它建立Transaction，方法A中对于数据库的处理操作，会在该Transaction的控制之下。</li><li>这时，方法A调用方法B，方法A打开的Transaction将挂起，方法B中任何数据库操作，都不在该Transaction的管理之下。</li><li>当方法B返回，方法A继续运行，之前的Transaction恢复，后面的数据库操作继续在该Transaction的控制之下提交或回滚。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】Spring Boot2</title>
      <link href="2021/06/30/%E3%80%90SpringBoot%E3%80%91SpringBoot2/"/>
      <url>2021/06/30/%E3%80%90SpringBoot%E3%80%91SpringBoot2/</url>
      
        <content type="html"><![CDATA[        <h2 id="spring-boot-简介"   >          <a href="#spring-boot-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-boot-简介"></a> Spring Boot 简介</h2>      <blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run” —— 能快速创建出生产级别的Spring应用</p></blockquote><p><span class="exturl"><a class="exturl__link"   href="https://spring.io/projects/spring-boot" >Spring Boot 官方</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/current/reference/html/" >Spring Boot 官方手册</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="spring-boot-优点"   >          <a href="#spring-boot-优点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-boot-优点"></a> Spring Boot 优点</h3>      <ul><li>Create stand-alone Spring applications：创建独立Spring应用</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)：内嵌web服务器</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration：自动starter依赖，简化构建配置</li><li>Automatically configure Spring and 3rd party libraries whenever possible：自动配置Spring以及第三方功能</li><li>Provide production-ready features such as metrics, health checks, and externalized configuration：提供生产级别的监控、健康检查及外部化配置</li><li>Absolutely no code generation and no requirement for XML configuration：无代码生成、无需编写XML</li><li>Spring Boot是整合Spring技术栈的一站式框架</li><li>Spring Boot是简化Spring技术栈的快速开发脚手架</li></ul><span id="more"></span>        <h2 id="hello-spring-boot"   >          <a href="#hello-spring-boot" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hello-spring-boot"></a> Hello Spring Boot</h2>              <h3 id="系统要求"   >          <a href="#系统要求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#系统要求"></a> 系统要求</h3>      <ul><li>Java 8 &amp; 兼容Java14</li><li>Maven 3.3+</li></ul>        <h3 id="配置-maven-依赖"   >          <a href="#配置-maven-依赖" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置-maven-依赖"></a> 配置 Maven 依赖</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><code>spring-boot-maven-plugin</code>插件以Maven的方式为Spring Boot应用提供支持，能够将Spring Boot应用打包为可执行的jar或war文件，进行相应部署后即可启动Spring Boot应用。</p>        <h3 id="创建主程序"   >          <a href="#创建主程序" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建主程序"></a> 创建主程序</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.boot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>：这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="编写业务代码"   >          <a href="#编写业务代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#编写业务代码"></a> 编写业务代码</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.boot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot 2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中<code>@RestController</code>的作用等于<code>@Controller + @ResponseBody</code></p>        <h3 id="spring-配置文件"   >          <a href="#spring-配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-配置文件"></a> Spring 配置文件</h3>      <p>在<code>resources</code>目录下创建<code>application.properties</code>文件，在其内修改Spring Boot的配置属性</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210707200401205.png" alt="image-20210707200401205" /></p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目前置访问路径</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>: <span class="string">/projectName</span></span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server" >Springboot官方配置项文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="部署"   >          <a href="#部署" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#部署"></a> 部署</h3>      <p>在maven的pom文件中添加插件</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>​对当前工程进行打包：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210707200542552.png" alt="image-20210707200542552" /></p><p>得到<code>springboot-helloworld-1.0-SNAPSHOT.jar</code>后，直接在命令行运行：<code>java -jar springboot-helloworld-1.0-SNAPSHOT.jar</code>即可启动整个工程。</p>        <h2 id="常用注解"   >          <a href="#常用注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用注解"></a> 常用注解</h2>              <h3 id="configuration"   >          <a href="#configuration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#configuration"></a> @Configuration</h3>      <p>在Spring 5版本之后，该注解添加了属性：<code>proxyBeanMethods</code>，该属性可用于两种模式：</p><ul><li>Full模式（<code>proxyBeanMethods = true</code>）：<code>@Bean</code>方法返回的组件是单实例的（默认）</li><li>Lite模式（<code>proxyBeanMethods = false</code>）：<code>@Bean</code>方法返回的组件每次都是<strong>新创建</strong>的。</li></ul><p><code>proxyBeanMethods</code>作用（经测试，在使用Spring基础框架创建配置类时该属性无效，均不返回代理对象）：</p><ul><li><code>proxyBeanMethods</code>值为true时，<code>@Configuration</code>配置类中注册的所有组件都会被创建其<strong>代理对象并保存在容器中</strong>。在配置类中写的所有组件注册方法在被外界调用时都会去容器中找是否已经存在该对象的<strong>代理对象</strong>，若存在则直接获取，若不存在则再创建<strong>代理对象</strong>，即单例模式。</li><li><code>proxyBeanMethods</code>值为false时，在容器中不会再保存代理对象，在外界调用该方法时都会产生新的对象（非代理对象）。</li></ul><p>最佳实践：</p><ul><li>配置类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li><li>配置类组件之间<strong>有依赖关系</strong>，方法会在被调用得到之前单实例组件，用Full模式（默认）</li></ul><p>配置类<code>MyConfig.java</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(Pet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;pet&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">Pet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;gaolaoer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>测试：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zhao.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line">        Pet pet01 = run.getBean(<span class="string">&quot;pet&quot;</span>, Pet.class);</span><br><span class="line">        Pet pet02 = run.getBean(<span class="string">&quot;pet&quot;</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(pet01 == pet02));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、com.zhao.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//proxyBeanMethods = true时组件是单实例</span></span><br><span class="line">        <span class="comment">//proxyBeanMethods = false时组件是多实例</span></span><br><span class="line">        User user = bean.user();</span><br><span class="line">        User user1 = bean.user();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//proxyBeanMethods = true时user2.pet等于pet</span></span><br><span class="line">        <span class="comment">//proxyBeanMethods = false时user2.pet不等于pet</span></span><br><span class="line">        User user2 = run.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        Pet pet = run.getBean(<span class="string">&quot;pet&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user2.getPet() == pet));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="conditional"   >          <a href="#conditional" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#conditional"></a> @Conditional</h3>      <p><strong>条件装配：满足Conditional指定的条件，则进行组件注入</strong></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/20210205005453173.png" alt="img" /></p>        <h3 id="importresource"   >          <a href="#importresource" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#importresource"></a> @ImportResource</h3>      <p>使用<code>@ImportResource</code>可以导入其他Spring的xml文件，导入后该xml文件中的组件会被添加到当前配置类中，使用方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="configurationproperties"   >          <a href="#configurationproperties" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#configurationproperties"></a> @ConfigurationProperties</h3>      <p>使用<code>@ConfigurationProperties</code>进行配置绑定，将配置文件中的属性值赋给某个组件。</p><ol><li>创建<code>application.properties</code>文件，在其中添加属性值：</li></ol><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mycar.brand</span>=<span class="string">BYD</span></span><br><span class="line"><span class="meta">mycar.price</span>=<span class="string">100000</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>给某个类添加<code>@Component</code>注解，将其注册到容器中（只有在容器中的组件，才会拥有Spring Boot提供的强大功能）。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    String brand;</span><br><span class="line">    String price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>之后该组件中的属性将在配置文件中寻找同名的key，将其对应的value赋给属性值。</p><p><strong><code>@ConfigurationProperties</code>注解在Spring Boot底层大量使用，使用其修饰的组件将从Spring Boot核心配置文件<code>application.properties</code>中读取并绑定相关配置参数。</strong></p>        <h3 id="enableconfigurationproperties"   >          <a href="#enableconfigurationproperties" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#enableconfigurationproperties"></a> @EnableConfigurationProperties</h3>      <p>Spring Boot另一种配置绑定方式：<code>@EnableConfigurationProperties</code> + <code>@ConfigurationProperties</code></p><p><code>@EnableConfigurationProperties</code>的功能：</p><ol><li>开启配置绑定功能（让其能够绑定到配置文件）</li><li>把组件自动注册到容器中（使其可以不写<code>@Component</code>注解也能注册到容器中）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="其他注解"   >          <a href="#其他注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他注解"></a> 其他注解</h3>      <p><code>@Bean</code>、<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Import</code>，它们是Spring的基本标签，在Spring Boot中并未改变它们原来的功能。</p>        <h2 id="自动配置原理"   >          <a href="#自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动配置原理"></a> 自动配置原理</h2>              <h3 id="依赖管理"   >          <a href="#依赖管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h3>      <p>当前新建的Spring Boot项目的父项目：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>其父项目又依赖<code>spring-boot-dependencies.pom</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>该文件中声明了开发中常用的jar包版本，因此其子项目中不需要给依赖写上版本号，会自动导入父项目里版本的jar包。该特性被称为<strong>版本仲裁</strong>。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.13<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.82<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="自定义依赖版本"   >          <a href="#自定义依赖版本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义依赖版本"></a> 自定义依赖版本</h4>      <p>若想自定义修改依赖的版本，则只需要在当前项目里指定配置版本号，其会覆盖父项目中的默认版本号。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="场景启动器"   >          <a href="#场景启动器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#场景启动器"></a> 场景启动器</h4>      <p><code>spring-boot-starter-*</code> 代表某种场景，只要引入了该starter，这个场景的所有依赖都会自动引入。第三方提供的简化开发的场景启动器命名格式：<code>*-spring-boot-starter</code>。<span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters" >官方所有支持的Starter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>所有场景启动器最底层的依赖，<strong>SpringBoot自动配置的核心依赖</strong>：<strong>spring-boot-starter</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>该starter场景将导入Spring Boot提供的127种自动配置类<strong>xxxAutoConfiguration</strong>，这些自动配置类将导入许多常用的组件用于简化开发（例如<code>DispatcherServlet</code>等），无需开发人员手动添加这些组件。</p><p><code>spring-boot-starter.pom</code>的主要内容：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- This module was also published with a richer model, Gradle metadata,  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- which should be used instead. Do not delete the following line which  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- that they should prefer consuming it instead. --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- do_not_remove: published-with-gradle-metadata --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Core starter, including auto-configuration support, logging and YAML<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="场景启动器starter工作原理"   >          <a href="#场景启动器starter工作原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#场景启动器starter工作原理"></a> 场景启动器starter工作原理</h3>      <p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210809210934337.png" alt="image-20210809210934337" /></p><p>场景启动器工作原理的本质：调用的<code>xxx-starter</code>项目导入的所有<code>xxx-autoconfigure</code>项目中编写了许多自动配置类<code>xxxAutoConfiguration</code>，这些自动配置类将在Spring Boot启动时被注册到容器中，从而将其内编写的组件按照条件注册到容器中，因此开发人员可以在自己的项目中调用到这些组件。</p>        <h3 id="自动配置特性"   >          <a href="#自动配置特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动配置特性"></a> 自动配置特性</h3>      <p>Spring Boot的主程序类（标有 <strong>@SpringBootApplication</strong>注解的类）<strong>所在包及其下面的所有子包</strong>里面的组件都会被默认扫描进来，这些组件不再需要额外指定扫描路径。而若想要扫描其他路径下的组件，则可以在主程序类上添加：</p><ul><li><code>@SpringBootApplication(scanBasePackages=&quot;com.zhao.xxx&quot;)</code></li><li><code>@ComponentScan(&quot;com.zhao.xxx&quot;)</code></li></ul><p><code>@SpringBootApplication</code>是一个合成注解，其效果等同于下面三个注解的组合。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.zhao.xxx&quot;)</span></span><br></pre></td></tr></table></div></figure><p>Spring Boot的各种配置都拥有默认值。这些默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code>。配置文件的值最终会绑定在某个类上，这个类会在容器中创建对象。</p><p>Spring Boot所有的<strong>自动配置功能</strong>都在 <code>spring-boot-autoconfigure</code> 包里面。</p>        <h3 id="源码分析自动配置原理"   >          <a href="#源码分析自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码分析自动配置原理"></a> 【源码分析】自动配置原理</h3>      <p><strong>@SpringBootApplication</strong>是一个合成注解，其效果等同于下面三个注解的组合：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication </span><br></pre></td></tr></table></div></figure><p>下面逐一分析上述三者的作用</p>        <h4 id="1-springbootconfiguration"   >          <a href="#1-springbootconfiguration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-springbootconfiguration"></a> 1、@SpringBootConfiguration</h4>      <p>表明被 <strong>@SpringBootApplication</strong> 修饰的类本质上也是一个 <strong>@Configuration</strong> 配置类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration</span><br></pre></td></tr></table></div></figure>        <h4 id="2-componentscan"   >          <a href="#2-componentscan" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-componentscan"></a> 2、@ComponentScan</h4>      <p>指定要扫描的组件（按照<code>@Filter</code>里设置的类型过滤一些组件）</p>        <h4 id="3-enableautoconfiguration"   >          <a href="#3-enableautoconfiguration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-enableautoconfiguration"></a> 3、@EnableAutoConfiguration</h4>      <p>重点，自动配置是通过该注解实现的。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration</span><br></pre></td></tr></table></div></figure><p><strong>3.1、@AutoConfigurationPackage：自动配置包，将MainApplication主程序类所在包下的所有组件注册到容器中</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage</span><br></pre></td></tr></table></div></figure><p>该注解通过<code>@Import</code>注解向容器中导入了一个<strong>Registrar</strong>组件，该组件实现了<code>ImportBeanDefinitionRegistrar</code>接口（<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/" >【Spring】Spring5 源码中常用接口的底层原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>），其作用是<strong>将MainApplication主程序类所在包下的所有组件都注册到容器中</strong>。这也解释了默认的扫描包路径为<code>MainApplication</code>所在包的路径。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711201544965.png" alt="image-20210711201544965" /></p><p>其中传入的参数<code>AnnotationMetadata metadata</code>是指Spring Boot主程序类<code>MainApplication</code>的注解元信息，用于获取其所在的包路径，从而将该包下的所有子包下的类都注册到容器中。</p><p><strong>3.2、@Import({AutoConfigurationImportSelector.class})：向容器中注册自动配置类</strong></p><p><strong>第一步：引导加载自动配置类</strong></p><p>该注解向容器中注册了<strong>AutoConfigurationImportSelector</strong>类型的组件，该类的重要方法  <strong>selectImports()</strong> 中利用<strong>getAutoConfigurationEntry(annotationMetadata)</strong> 方法向容器中导入一些<strong>自动配置类</strong>组件（先获取所有的自动配置类，再根据实际情况筛选出符合条件的自动配置类注册到容器中）。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711202049677.png" alt="image-20210711202049677" /></p><p>进入<code>getAutoConfigurationEntry(annotationMetadata)</code>方法后，首先调用<code>getCandidateConfigurations()</code>方法获取所有<strong>候选</strong>的自动配置类组件（AutoConfiguration），共有127个。并在后续进行删选后<strong>按需开启</strong>自动配置项（即用不到的自动配置类无需开启）。</p><p>获取这些<code>AutoConfiguration</code>的具体过程：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711202306425.png" alt="image-20210711202306425" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711203848177.png" alt="image-20210711203848177" /></p><p>在<code>getCandidateConfigurations()</code>方法内通过<code>SpringFactoriesLoader</code>工厂加载器加载一些组件。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711202745443.png" alt="image-20210711202745443" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711203253301.png" alt="image-20210711203253301" /></p><p>在该方法内使用类加载器读取<code>&quot;META-INF/spring.factories&quot;</code>位置处的资源文件。有些包下有这个文件，比如最关键的<code>spring-boot-autoconfigure-2.3.4.RELEASE.jar</code>包（导入的其他第三方包中也可以会含有<code>&quot;META-INF/spring.factories&quot;</code>文件，例如MyBatis的<code>mybatis-spring-boot-autoconfigure-2.1.4.jar</code>包也会有该文件，Spring Boot启动时也会加载该包下的<code>xxxAutoConfiguration</code>类）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711203525691.png" alt="image-20210711203525691" /></p><p>该文件内配置了Spring Boot启动时就要向容器中加载的所有自动配置类（<code>AutoConfiguration</code>）（共127个，正好对应上文中的127个自动配置类组件）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711203725837.png" alt="image-20210711203725837" /></p><p>上文中注册到容器中的127个自动配置类组件Configurations：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711203855246.png" alt="image-20210711203855246" /></p><p>但这127个自动配置类并不会都注册到容器中，而会按需开启。</p><p><strong>第二步：按需开启自动配置项</strong></p><p>虽然上述127个自动配置类在启动的时候会默认全部加载，但每个<code>xxxxAutoConfiguration</code>会按照条件装配规则（<strong>@Conditional</strong>）<strong>按需配置</strong>。</p><p>以<code>BatchAutoConfiguration</code>类为例，该类因<code>@ConditionalOnClass(&#123;JobLauncher.class, DataSource.class&#125;)</code>的存在，若想被注册到容器中，需要满足当前项目中有<code>JobLauncher</code>类的存在，但若开发人员没有导入该类相关的maven依赖，则无法找到该类，因此该自动配置类将不会被注册到容器中。因此上述127个自动配置类会按照实际容器中配置组件的情况按需注册到容器中，不需要的配置类将不会被注册。</p><p>同时这些自动配置类里的配置属性通过 <strong>@EnableConfigurationProperties</strong> 注解从<strong>xxxProperties</strong>组件中获取（<code>xxxProperties</code>组件和相应的配置文件绑定在了一起）</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711211618512.png" alt="image-20210711211618512" /></p><hr /><p>举例：上文描述了如何向容器中注册常用的自动配置类，下面以web开发必须的自动配置类<strong>DispatcherServletAutoConfiguration</strong>为例：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711213124840.png" alt="image-20210711213124840" /></p><p>该自动配置类满足<code>@Conditional</code>的条件，因此会在程序加载时被注册到容器中。同时该自动配置类中会向容器中注册<strong>DispatcherServlet</strong>组件，这正是Spring MVC开发时需要的转发器组件。</p><p>也就是说Spring Boot在启动时，会将传统SSM中开发人员配置在xml中的必备组件自动地注册到容器中，无需开发人员再手动注册。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210711213412654.png" alt="image-20210711213412654" /></p><p>以AOP自动配置器<strong>AopAutoConfiguration</strong>为例：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210804150325041.png" alt="image-20210804150325041" /></p><hr /><hr /><p><strong>第三步：修改默认配置</strong></p><p>以自动配置类<strong>DispatcherServletAutoConfiguration</strong>中的<strong>MultipartResolver</strong>组件为例，该组件为Spring MVC中的文件上传组件，其会被<code>DispatcherServletAutoConfiguration</code>注册到容器中。</p><p>其依赖于<strong>MultipartResolver</strong>组件（该组件默认存在于容器中，但开发人员可以再手动注册一个），同时判断该组件的名称是否为指定的<code>MULTIPART_RESOLVER_BEAN_NAME = multipartResolver</code>。</p><p>若不是，可能的情况为开发人员自己手动注册了一个，但名称不符合规范。此时容器通过调用<code>multipartResolver()</code>方法注册了该组件，同时注册的组件名就是方法名<strong>multipartResolver</strong>，因此起到<strong>组件名规范化</strong>的效果。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">// 容器中默认有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//Spring MVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">    <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br></pre></td></tr></table></div></figure><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>      <ul><li>Spring Boot首先加载所有的自动配置类 <strong>xxxxxAutoConfiguration</strong>（127个）</li><li>每个自动配置类按照条件判断进行生效，默认都会绑定配置文件指定的值。（从<strong>xxxxProperties</strong>组件里面读取，<strong>xxxProperties</strong>组件和配置文件进行了绑定）</li><li>生效的配置类就会向容器中注册响应的组件</li></ul><p>定制化配置：</p><ul><li>开发人员手动使用<code>@Bean</code>替换容器中默认注册的组件；</li><li>在配置文件中修改相应配置属性以修改默认组件的属性值</li></ul><p><strong>xxxxxAutoConfiguration <strong>—&gt; 注册组件 —&gt; 组件属性通过</strong>xxxxProperties</strong>从配置文件<strong>application.properties</strong>中取值</p><p>常用的自动配置类<strong>xxxAutoConfiguration</strong>：</p><ul><li><strong>AopAutoConfiguration</strong>：AOP自动配置类</li><li><strong>DispatcherServletAutoConfiguration</strong>：DispatcherServlet自动配置类</li><li><strong>WebMvcAutoConfiguration</strong>：WebMVC相关自动配置类</li><li><strong>ServletWebServerFactoryAutoConfiguration</strong>：ServletWebServerFactory自动配置类</li><li><strong>MultipartAutoConfiguration</strong>：文件上传自动配置类</li><li><strong>ErrorMvcAutoConfiguration</strong>：异常处理自动配置类</li><li><strong>DataSourceAutoConfiguration</strong>：数据源自动配置类</li><li><strong>MybatisAutoConfiguration</strong>：MyBatis自动配置类（第三方）</li></ul>        <h2 id="开发小技巧"   >          <a href="#开发小技巧" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#开发小技巧"></a> 开发小技巧</h2>              <h3 id="lombok-简化开发"   >          <a href="#lombok-简化开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lombok-简化开发"></a> Lombok 简化开发</h3>      <p>Lombok用标签方式代替构造器、<code>getter/setter()</code>、<code>toString()</code>等代码。Spring Boot已经管理Lombok。引入依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>IDEA中<code>File-&gt;Settings-&gt;Plugins</code>，搜索安装Lombok插件。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>简化日志开发</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="dev-tools-热部署"   >          <a href="#dev-tools-热部署" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#dev-tools-热部署"></a> dev-tools “热部署”</h3>      <p>添加依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在IDEA中，项目或者页面修改以后使用：<code>Ctrl+F9</code>更新。本质上是重新启动项目，并非真正的热部署。</p>        <h3 id="spring-initailizr"   >          <a href="#spring-initailizr" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-initailizr"></a> Spring Initailizr</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://start.spring.io/" >Spring Initailizr</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是创建Spring Boot工程向导。在IDEA中，菜单栏<code>New -&gt; Project -&gt; Spring Initailizr</code>快速构建Spring Boot项目。</p>        <h2 id="配置文件-yaml"   >          <a href="#配置文件-yaml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置文件-yaml"></a> 配置文件 YAML</h2>      <p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：“Yet Another Markup Language”（仍是一种标记语言）。<strong>其非常适合用来做以数据为中心的配置文件</strong>。</p>        <h3 id="基本语法"   >          <a href="#基本语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h3>      <ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>'#'表示注释</li><li>字符串无需加引号，如果要加，单引号’’、双引号&quot;&quot;表示字符串内容会被 转义、不转义</li></ul>        <h3 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3>      <ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></div></figure><ul><li>对象：键值对的集合。map、hash、set、object</li></ul><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"><span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></div></figure><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></div></figure>        <h3 id="示例"   >          <a href="#示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> String[] interests;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>用yaml表示以上对象</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></div></figure>        <h3 id="配置文件-自定义类绑定的配置提示"   >          <a href="#配置文件-自定义类绑定的配置提示" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置文件-自定义类绑定的配置提示"></a> 配置文件-自定义类绑定的配置提示</h3>      <p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="web-开发"   >          <a href="#web-开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web-开发"></a> Web 开发</h2>              <h3 id="spring-mvc-自动配置概览"   >          <a href="#spring-mvc-自动配置概览" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-自动配置概览"></a> Spring MVC 自动配置概览</h3>      <p>Spring Boot为Spring MVC开发提供了大量的自动配置，无需开发人员再手动定义。默认配置如下：</p><ul><li>内容协商视图解析器<code>ContentNegotiatingViewResolver</code>和组件名视图解析器<code>BeanNameViewResolver</code></li><li>静态资源（包括<code>webjars</code>）</li><li>自动注册 <code>Converter，GenericConverter，Formatter</code></li><li>支持消息转换器<code>HttpMessageConverters</code></li><li>自动注册 <code>MessageCodesResolver</code>（国际化用）</li><li>静态 <code>index.html</code> 页支持</li><li>自定义 <code>Favicon</code></li><li>自动使用 <code>ConfigurableWebBindingInitializer</code>（<code>DataBinder</code>负责将请求数据绑定到<code>JavaBean</code>上）</li></ul><p>若开发人员想要实现自定义的配置，则可以有三种方式：</p><ul><li>使用 <strong>@Configuration + WebMvcConfigurer</strong> 自定义规则，同时不能标注 <strong>@EnableWebMvc</strong> 注解（若开启，则变成全面接管Spring MVC，就需要把所有Spring MVC配置好的规则全部自定义实现）</li><li>声明 <strong>WebMvcRegistrations</strong> 改变默认底层组件</li><li>使用 <strong>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration</strong> ==<strong>全面接管</strong>==Spring MVC【详细源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>】</li></ul><p>若想在容器中添加Spring MVC相关的<strong>自定义组件</strong>以覆盖默认组件，则可以在**@Configuration<strong>中添加一个</strong>WebMvcConfigurer<strong>组件，在其内</strong>重写相关方法**即可覆盖容器中默认的方法。示例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)   <span class="comment">// 写 /** 时所有请求都会被拦截，包括静态资源</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的Converter，用于根据url中传入的字符串解析POJO内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Person <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Person person = <span class="keyword">new</span> Person();</span><br><span class="line">                <span class="comment">// 定制化的解析方法...</span></span><br><span class="line">                <span class="keyword">return</span> person;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义的消息转换器，用于转换自定义的媒体格式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> MyMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定三种媒体类型映射关系</span></span><br><span class="line">        Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);</span><br><span class="line">        mediaTypes.put(<span class="string">&quot;myFormat&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/x-zhao&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于请求参数的内容协商策略：支持解析哪些参数对应哪些媒体类型</span></span><br><span class="line">        ParameterContentNegotiationStrategy parameterStrategy =</span><br><span class="line">            <span class="keyword">new</span> ParameterContentNegotiationStrategy(mediaTypes);</span><br><span class="line">        <span class="comment">// parameterStrategy.setParameterName(&quot;format&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于请求头的内容协商策略</span></span><br><span class="line">        HeaderContentNegotiationStrategy headerStrategy = <span class="keyword">new</span> HeaderContentNegotiationStrategy();</span><br><span class="line"></span><br><span class="line">        configurer.strategies(Arrays.asList(parameterStrategy, headerStrategy));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="静态资源目录"   >          <a href="#静态资源目录" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态资源目录"></a> 静态资源目录</h3>      <p>只要静态资源放在类路径下的：<code>/static</code> (or<code>/public</code> or<code>/resources</code> or <code>/META-INF/resources</code>）目录，就可以通过 “<strong>当前项目根路径<code>/</code> + 静态资源名</strong>” 的方式访问到。原理： 静态映射 <code>/**</code>。</p><p>收到请求后，先去找<code>Controller</code>看能不能处理；不能处理的所有请求又都交给<strong>静态资源处理器</strong>；静态资源也找不到则响应404页面。</p><p>默认的静态资源路径可以通过修改&quot;<code>static-locations</code>&quot;属性值来定制化：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> [<span class="string">classpath:/myStaticPath/</span>]</span><br></pre></td></tr></table></div></figure><p>此时，浏览器在访问&quot;<code>static-locations</code>“目录下的静态资源文件时，解析得到的请求路径不包含”<code>static-locations</code>&quot;。例如：访问&quot;<code>/static/css/style.css</code>“时，解析到的请求路径是”<strong>/css/style.css</strong>&quot;。</p><p>详细源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="静态资源访问前缀"   >          <a href="#静态资源访问前缀" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态资源访问前缀"></a> 静态资源访问前缀</h3>      <p><strong>当前项目名称 + <code>static-path-pattern</code> + 静态资源名</strong> = 去<code>static-locations</code>属性配置的静态资源文件夹下找&quot;静态资源名&quot;文件</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></div></figure><p>注意：配置了前缀后，就不能使用欢迎页功能了。</p>        <h3 id="禁用静态资源规则"   >          <a href="#禁用静态资源规则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#禁用静态资源规则"></a> 禁用静态资源规则</h3>      <p>通过配置<code>add-mappings</code>属性可以禁止所有静态资源规则。</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></div></figure>        <h3 id="webjar"   >          <a href="#webjar" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#webjar"></a> webjar</h3>      <p>可用jar方式添加css，js等资源文件，<span class="exturl"><a class="exturl__link"   href="https://www.webjars.org/%E3%80%82" >https://www.webjars.org/。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>例如，添加jquery：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a> 后面地址要按照依赖里面的包路径。</p>        <h3 id="欢迎页支持"   >          <a href="#欢迎页支持" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#欢迎页支持"></a> 欢迎页支持</h3>      <p>在静态资源路径下创建 <code>index.html</code> 文件，其会被设置为欢迎页。可以自定义配置<strong>静态资源路径</strong>以在任意位置存放该文件，但注意不可以配置静态资源的<strong>访问前缀</strong>，否则导致 <code>index.html</code> 不能被默认访问。<code>controller</code>能处理 <code>/index</code> 。</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/myPath/</span>] <span class="comment"># 可以自定义设置文件位置</span></span><br></pre></td></tr></table></div></figure>        <h3 id="自定义-favicon"   >          <a href="#自定义-favicon" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义-favicon"></a> 自定义 Favicon</h3>      <p>指网页标签上的小图标。favicon.ico 放在静态资源目录下即可。但注意配置静态资源的<strong>访问前缀</strong>将导致Favicon功能失效</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></table></div></figure>        <h3 id="rest-请求映射实现"   >          <a href="#rest-请求映射实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#rest-请求映射实现"></a> Rest 请求映射实现</h3>      <p>实现Rest风格支持的核心Filter：<strong>HiddenHttpMethodFilter</strong>。其本质是一个过滤器，因此会在所有请求响应前进行拦截过滤，将<code>DELETE</code>请求和<code>PUT</code>请求进行包装后放行到后续过滤器。</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></div></figure><p>开启<strong>HiddenHttpMethodFilter</strong>后，若想发送<code>DELETE</code>或<code>PUT</code>请求，则需要创建一个表单，在表单项中携带一个<code>_method</code>参数，这个参数的值可以设置为<code>DELETE</code>或<code>PUT</code>。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>HiddenHttpMethodFilter</strong>的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="常用请求参数注解使用"   >          <a href="#常用请求参数注解使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用请求参数注解使用"></a> 常用请求参数注解使用</h3>      <ul><li><strong>@PathVariable</strong>：路径变量</li><li><strong>@RequestHeader</strong>：获取请求头</li><li><strong>@RequestParam</strong>：获取请求参数（指问号后的参数，<code>url?a=1&amp;b=2</code>）</li><li><strong>@CookieValue</strong>：获取Cookie值</li><li><strong>@RequestAttribute</strong>：获取request域属性</li><li><strong>@RequestBody</strong>：获取请求体[POST]</li><li><strong>@MatrixVariable</strong>：矩阵变量</li></ul><p>示例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//map.put(&quot;id&quot;,id);</span></span><br><span class="line">        <span class="comment">//map.put(&quot;name&quot;,name);</span></span><br><span class="line">        <span class="comment">//map.put(&quot;pv&quot;,pv);</span></span><br><span class="line">        <span class="comment">//map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line">        <span class="comment">//map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goToPage</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;成功了...&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;  <span class="comment">//转发到 /success 请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/params&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world666&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello666&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;c1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestAttribute(value = &quot;msg&quot;)：获取request域中的&quot;msg&quot;属性</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(value = &quot;msg&quot;, required = false)</span> String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestAttribute(value = &quot;code&quot;, required = false)</span>Integer code,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                       RedirectAttributes ra)</span></span>&#123;</span><br><span class="line">        <span class="comment">// RedirectAttributes ra用于重定向时添加参数</span></span><br><span class="line">        Object msg1 = request.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Object hello = request.getAttribute(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        Object world = request.getAttribute(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        Object message = request.getAttribute(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class="line">        map.put(<span class="string">&quot;annotation_msg&quot;</span>,msg);</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>,hello);</span><br><span class="line">        map.put(<span class="string">&quot;world&quot;</span>,world);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>@MatrixVariable</strong>与<strong>UrlPathHelper</strong></p><p><strong>@MatrixVariable</strong>请求路径格式：<code>/cars/sell;low=34;brand=byd,audi,yd</code>。示例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// url: /cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// url: /boss/1;age=20/2;age=10</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Spring Boot <strong>默认是禁用了</strong>矩阵变量的功能。若想手动开启，需要自定义一个<strong>WebMvcConfigurer</strong>配置器的实现类，在其中将<strong>UrlPathHelper</strong>的属性<strong>removeSemicolonContent</strong>设置为<code>false</code>，让其支持矩阵变量的。具体做法：</p><ol><li>方法一：实现<strong>WebMvcConfigurer</strong>接口，令其代替**@EnableWebMvc**注解，实现定制的配置：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>方法二：在容器中注入一个<code>WebMvcConfigurer</code>组件：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">                <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>原理分析：</p><p><strong>WebMvcAutoConfigurationAdapter</strong>类实现了<strong>WebMvcConfigurer</strong>接口，其中有<strong>configurePathMatch()<strong>方法，该方法将创建一个</strong>UrlPathHelper</strong>类对象用于解析url。</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210723205155974.png" alt="image-20210723205155974" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210723205449763.png" alt="image-20210723205449763" /></p><p>默认创建的<strong>UrlPathHelper</strong>类对象会将分号 ；后的所有路径移除，因此默认配置下无法开启矩阵变量功能，需要重写<strong>WebMvcConfigurer</strong>接口的<strong>configurePathMatch()<strong>方法，自定义一个</strong>UrlPathHelper</strong>对象，并将<strong>removeSemicolonContent</strong>属性设置为<code>false</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="拦截器"   >          <a href="#拦截器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#拦截器"></a> 拦截器</h3>      <p>所有拦截器都实现了<strong>HandlerInterceptor</strong>接口，要想自定义拦截器，需要以下步骤：</p><ol><li>编写一个拦截器实现<strong>HandlerInterceptor</strong>接口</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// 需要配置拦截器要拦截哪些请求，并把这些配置放到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法执行前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;拦截的请求路径是&quot;</span> + request.getRequestURI());</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loginUser!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法执行后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发的时机:</span></span><br><span class="line">    <span class="comment">//   1. 目标方法执行前，遍历所有拦截器，执行其preHandle()方法，若某个拦截器该方法返回false，则倒序执行所有在该拦截器之前执行的（即在之前判断过的，拦截器返回true的）拦截器的afterCompletion()方法</span></span><br><span class="line">    <span class="comment">//   2. 页面渲染完成之前的所有步骤有任何地方出现异常，就会倒序触发所有已执行过的拦截器的afterCompletion()方法</span></span><br><span class="line">    <span class="comment">//   3. 页面成功渲染之后，倒序触发所有已执行过的拦截器的afterCompletion()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>将拦截器注册到容器中（实现<strong>WebMvcConfigurer</strong>接口的 <strong>addInterceptors()</strong> 方法）</li><li>指定拦截规则（如果设置路径为&quot;<code>/**</code>&quot;，则静态资源也会被拦截）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)   <span class="comment">// 写 /** 时所有请求都会被拦截，包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="拦截器源码分析"   >          <a href="#拦截器源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#拦截器源码分析"></a> 拦截器源码分析</h3>      <p>拦截器方法的执行在<strong>DispatcherServlet</strong>的 <strong>doDispatch(request, response)</strong> 方法栈中，大致流程为：</p><ul><li>根据当前url请求，获取到目标方法对应的处理器执行链<strong>HandlerExecutionChain</strong>，其内包含了<strong>目标方法处理器handler</strong>以及容器中所有的<strong>拦截器interceptorList</strong></li><li>在目标方法执行前，调用 <strong>mappedHandler.applyPreHandle()</strong> 方法<strong>顺序</strong>遍历容器中的所有拦截器，依次执行其 <strong>preHandle()</strong> 方法：<ul><li>如果当前遍历到的拦截器的 <strong>preHandle()</strong> 方法返回true，则执行下一个拦截器的 <strong>preHandle()</strong> 方法</li><li>如果当前拦截器返回false，则<strong>倒序</strong>执行所有已执行过了的拦截器的 <strong>afterCompletion()</strong> 方法</li><li>如果任意一个拦截器返回了false，则 <strong>doDispatch(request, response)</strong> 方法直接return，不再向下执行目标方法等代码</li><li>如果所有拦截器都返回true，则继续向下执行目标方法等代码</li></ul></li><li>调用 <strong>ha.handle()</strong> 方法执行完目标方法后调用 <strong>mappedHandler.applyPostHandle()</strong> 方法<strong>倒序</strong>执行所有已执行过了的拦截器的 <strong>postHandle()</strong> 方法</li><li>页面成功渲染后（ <strong>processDispatchResult()</strong> 方法内），<strong>倒序</strong>执行所有已执行过了的拦截器的 <strong>afterCompletion()</strong> 方法</li><li>之前步骤中有任何地方发生异常都会<strong>倒序</strong>执行所有已执行过了的拦截器的 <strong>afterCompletion()</strong> 方法</li></ul><p>上述流程截图：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801162832090.png" alt="image-20210801162832090" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801170259405.png" alt="image-20210801170259405" /></p><p><mark>之后补充reiggerAfter 和 processDispatchResult()的注释</mark></p><p>放到Spring Boot源码</p><p>拦截器链的执行顺序：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210803182159679.png" alt="image-20210803182159679" /></p>        <h3 id="上述方法内细节"   >          <a href="#上述方法内细节" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#上述方法内细节"></a> 上述方法内细节</h3>      <p>返回的<strong>mappedHandler</strong>即处理器执行链<strong>HandlerExecutionChain</strong>，其内包含了<strong>目标方法处理器handler</strong>以及容器中所有的<strong>拦截器interceptorList</strong>，其内包含了自定义的拦截器：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801161247788.png" alt="image-20210801161247788" /></p><p><strong>mappedHandler.applyPreHandle()</strong> 方法内顺序遍历容器中的所有拦截器，依次执行其 <strong>preHandle()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801163545481.png" alt="image-20210801163545481" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801163656217.png" alt="image-20210801163656217" /></p><p><strong>mappedHandler.applyPostHandle()</strong> 方法内倒序执行所有已执行过了的拦截器的 <strong>postHandle()</strong> 方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801170843544.png" alt="image-20210801170843544" /></p><p><strong>afterCompletion()</strong> 方法的触发时机:</p><ol><li>目标方法执行前，遍历所有拦截器，执行其preHandle()方法，若某个拦截器该方法返回false，则倒序执行所有在该拦截器之前执行的（即在之前判断过的，拦截器返回true的）拦截器的 <strong>afterCompletion()</strong> 方法</li><li>页面渲染完成之前的所有步骤有任何地方出现异常，就会倒序触发所有已执行过的拦截器的 <strong>afterCompletion()</strong> 方法</li><li>页面成功渲染之后，倒序触发所有已执行过的拦截器的 <strong>afterCompletion()</strong> 方法</li></ol>        <h3 id="文件上传"   >          <a href="#文件上传" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h3>      <p>在Spring Boot中实现文件上传功能的步骤：</p><ol><li>在html文件中配置表单信息</li></ol><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile2&quot;</span>&gt;</span>生活照<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">id</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>添加相应的处理方法：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;, userName=&#123;&#125;, headerImg=&#123;&#125;, photos=&#123;&#125;&quot;</span>,</span><br><span class="line">            email, userName, headerImg.getSize(), photos.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!headerImg.isEmpty()) &#123;</span><br><span class="line">        String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">        headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:/cache/&quot;</span> + originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">           String originalFilename = photo.getOriginalFilename();</span><br><span class="line">           photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:/cache/&quot;</span> + originalFilename));</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>在配置文件中修改上传文件大小等属性：</li></ol><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></div></figure><p>上述代码中解析得到的文件类型<strong>MultipartFile</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210801214140507.png" alt="image-20210801214140507" /></p>        <h3 id="异常处理"   >          <a href="#异常处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h3>      <p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射。</p><ul><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。</li><li>对于浏览器客户端，响应一个“whitelabel”错误视图，以HTML格式呈现相同的数据</li></ul><p>放在静态资源目录下的<strong>error/<strong>目录下的</strong>4xx.html</strong>，<strong>5xx.html</strong>页面会被Spring Boot自动解析，作为错误页面展示在浏览器中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210802153307853.png" alt="image-20210802153307853" /></p>        <h3 id="web-原生组件注入"   >          <a href="#web-原生组件注入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web-原生组件注入"></a> Web 原生组件注入</h3>              <h4 id="方式一使用-servlet-api-注入"   >          <a href="#方式一使用-servlet-api-注入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一使用-servlet-api-注入"></a> 方式一：使用 Servlet API 注入</h4>      <p><strong>@ServletComponentScan(basePackages=“com.zhao.admin”)</strong> ：指定原生Servlet组件的存放路径。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;com.zhao.admin&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootWebAdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol><li>注入<strong>Servlet</strong>：注入的这些请求直接响应，没有被拦截器所拦截（原理分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;This is MyServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>注入<strong>Filter</strong>：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;, &quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 过滤器初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 过滤器工作</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 过滤器销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>注入<strong>Listener</strong>：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 监听到项目初始化完成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 监听到项目销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式二使用-registrationbean"   >          <a href="#方式二使用-registrationbean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二使用-registrationbean"></a> 方式二：使用 RegistrationBean</h4>      <p>在容器中注册的<strong>xxxRegistrationBean</strong>组件都会被配置到Tomcat服务器中，这些组件中配置的<strong>Servlet/Filter/Listener</strong>等Web原生组件都能映射客户端发来的请求。【源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>】</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span> <span class="comment">// 保证MyServlet组件单实例的，避免myFilter()方法里重复调用myServlet()，产生冗余对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line">        <span class="comment">// return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = <span class="keyword">new</span> MySwervletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="内嵌-servlet-容器"   >          <a href="#内嵌-servlet-容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内嵌-servlet-容器"></a> 内嵌 Servlet 容器</h3>      <blockquote><p>内嵌Servlet容器的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>内嵌服务器工作原理：手动调用要启动的服务器的 <strong>start()</strong> 方法开启服务。</p>        <h4 id="切换-servlet-容器"   >          <a href="#切换-servlet-容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#切换-servlet-容器"></a> 切换 Servlet 容器</h4>      <p>要想切换服务器，则导入相应的starter场景即可：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="定制-servlet-容器"   >          <a href="#定制-servlet-容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定制-servlet-容器"></a> 定制 Servlet 容器</h4>      <ul><li>修改配置文件中的 <code>server.xxx</code> 属性（最方便）</li><li>自定义<strong>ConfigurableServletWebServerFactory</strong>代替<strong>TomcatServletWebServerFactory</strong>，并将其注册到容器中</li><li>实现  <code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code> ，把配置文件的值和<strong>ServletWebServerFactory</strong>进行绑定（<strong>xxxxxCustomizer</strong>：定制化器，可以改变xxxx的默认规则）：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcatWebServerFactoryCustomizer</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">TomcatServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory server)</span> </span>&#123;</span><br><span class="line">        server.addConnectorCustomizers((connector) -&gt; connector.setAsyncTimeout(Duration.ofSeconds(<span class="number">20</span>).toMillis()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="数据访问"   >          <a href="#数据访问" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据访问"></a> 数据访问</h2>              <h3 id="导入-jdbc-场景"   >          <a href="#导入-jdbc-场景" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#导入-jdbc-场景"></a> 导入 JDBC 场景</h3>      <p>在Maven中导入JDBC场景<code>spring-boot-starter-data-jdbc</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>导入该场景后，将出现数据源Hikari、JDBC和事务等依赖：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210804152401123.png" alt="image-20210804152401123" /></p><p>导入数据库MySQL驱动的依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>Spring Boot提供的MySQL驱动的默认版本：<code>&lt;mysql.version&gt;8.0.22&lt;/mysql.version&gt;</code></p><p>若想要修改版本，可以：</p><ol><li>直接依赖引入具体版本（maven的就近依赖原则）</li><li>重新声明版本（maven的属性的就近优先原则）</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="数据源自动配置原理"   >          <a href="#数据源自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据源自动配置原理"></a> 数据源自动配置原理</h3>      <p><strong>DataSourceAutoConfiguration</strong>： 数据源的自动配置类</p><ul><li>修改<strong>数据源</strong>相关的配置前缀：<code>&quot;spring.datasource&quot;</code></li><li><strong>数据库连接池</strong>的配置，是容器中<strong>没有自定义的DataSource时</strong>才自动配置的</li><li>底层自动配置的数据源是：<strong>HikariDataSource</strong></li></ul><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210804153524354.png" alt="image-20210804153524354" /></p><p>修改<strong>数据源</strong>的配置项：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zhaoyuyun</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></div></figure><p>其他数据库相关的自动配置类：</p><ul><li><strong>DataSourceTransactionManagerAutoConfiguration</strong>： 事务管理器的自动配置</li><li><strong>JdbcTemplateAutoConfiguration</strong>： JdbcTemplate的自动配置，可以来对数据库进行crud。容器中有<strong>JdbcTemplate</strong>这个组件，可以修改配置前缀  <code>&quot;spring.jdbc&quot;</code> 来修改JdbcTemplate的配置。</li><li><strong>JndiDataSourceAutoConfiguration</strong>： jndi的自动配置</li><li><strong>XADataSourceAutoConfiguration</strong>： 分布式事务相关的</li></ul>        <h3 id="druid-数据源"   >          <a href="#druid-数据源" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#druid-数据源"></a> Druid 数据源</h3>      <p>Druid官方github地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/alibaba/druid" >https://github.com/alibaba/druid</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="基于手动方式引入-druid-数据源不常用"   >          <a href="#基于手动方式引入-druid-数据源不常用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基于手动方式引入-druid-数据源不常用"></a> 基于手动方式引入 Druid 数据源（不常用）</h4>      <p>若在容器中配置了自定义的数据源，则不再开启<strong>HikariDataSource</strong>数据源。</p><p>引入Druid数据源的依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>向容器中注册Druid数据源，并开启监控、防火墙等功能：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册Druid数据源</span></span><br><span class="line">    <span class="comment">// 将配置文件中以spring.datasource为前缀的属性设置到数据源中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">// 开启统计监控信息功能与防火墙功能，也可以写在配置文件中</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat, wall&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Druid的监控页功能</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean =</span><br><span class="line">                <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WebStatFilter：用于采集web-jdbc关联监控的数据</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js, *.gif, *.jpg, *.css, *.ico, /druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>配置文件中设置数据源属性：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/myDB?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zhaoyuyun</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">12</span></span><br></pre></td></tr></table></div></figure>        <h4 id="statviewservlet"   >          <a href="#statviewservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#statviewservlet"></a> StatViewServlet</h4>      <p><strong>StatViewServlet</strong>的用途包括：</p><ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="statfilter"   >          <a href="#statfilter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#statfilter"></a> StatFilter</h4>      <p>用于统计监控信息；如SQL监控、URI监控。需要给数据源中配置属性。可以允许多个filter，多个用，分割。例如：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;filters&quot; value&#x3D;&quot;stat,slf4j&quot; &#x2F;&gt;</span><br></pre></td></tr></table></div></figure><p>Druid系统中所有filter：</p><div class="table-container"><table><thead><tr><th>别名</th><th>Filter类名</th></tr></thead><tbody><tr><td>default</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>stat</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>mergeStat</td><td>com.alibaba.druid.filter.stat.MergeStatFilter</td></tr><tr><td>encoding</td><td>com.alibaba.druid.filter.encoding.EncodingConvertFilter</td></tr><tr><td>log4j</td><td>com.alibaba.druid.filter.logging.Log4jFilter</td></tr><tr><td>log4j2</td><td>com.alibaba.druid.filter.logging.Log4j2Filter</td></tr><tr><td>slf4j</td><td>com.alibaba.druid.filter.logging.Slf4jLogFilter</td></tr><tr><td>commonlogging</td><td>com.alibaba.druid.filter.logging.CommonsLogFilter</td></tr></tbody></table></div>        <h4 id="基于官方starter方式引入druid数据源常用"   >          <a href="#基于官方starter方式引入druid数据源常用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基于官方starter方式引入druid数据源常用"></a> 基于官方Starter方式引入Druid数据源（常用）</h4>      <p>引入Druid官方提供的starter场景依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>其向容器中添加了一个Druid数据源自动配置类<strong>DruidDataSourceAutoConfigure</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210804202513107.png" alt="image-20210804202513107" /></p><ul><li>该配置器在Spring Boot自带的数据源自动配置器<strong>DataSourceAutoConfiguration</strong>之前配置，因此不再注册Spring Boot默认的数据源<strong>HikariDataSource</strong>。</li><li>该配置器绑定了<strong>DataSourceProperties</strong>和<strong>DruidStatProperties</strong>资源配置类，分别对应资源路径<code>&quot;spring.datasource&quot;</code>和<code>&quot;spring.datasource.druid&quot;</code></li><li>该配置器导入了其他相关的配置类，用于开启配置页、防火墙、Web监控等功能</li></ul><p>导入的其他相关配置类如下：</p><ul><li><strong>DruidSpringAopConfiguration.class</strong>（<code>spring.datasource.druid.aop-patterns</code>）：监控Spring Bean</li><li><strong>DruidStatViewServletConfiguration.class</strong>（<code>spring.datasource.druid.stat-view-servlet</code>）：配置监控页：</li><li><strong>DruidWebStatFilterConfiguration.class</strong>（<code>spring.datasource.druid.web-stat-filter</code>）：Web监控配置</li><li><strong>DruidFilterConfiguration.class</strong>：配置Druid的所有Filters：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_STAT_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_CONFIG_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_ENCODING_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_SLF4J_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_LOG4J2_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_COMMONS_LOG_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILTER_WALL_PREFIX = <span class="string">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br></pre></td></tr></table></div></figure><p>配置示例：</p><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.zhao.admin.*</span>  <span class="comment"># 监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>     <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span>   <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span>    <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></div></figure><p>SpringBoot配置示例：<span class="exturl"><a class="exturl__link"   href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" >https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>配置项列表：<span class="exturl"><a class="exturl__link"   href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" >https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="导入-mybatis-场景"   >          <a href="#导入-mybatis-场景" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#导入-mybatis-场景"></a> 导入 MyBatis 场景</h3>      <p>MyBatis官方链接：<span class="exturl"><a class="exturl__link"   href="https://github.com/mybatis" >https://github.com/mybatis</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>导入MyBatis的starter场景依赖：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>其导入了如下包：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805142616006.png" alt="image-20210805142616006" /></p><p>其中，MyBatis的自动配置器<strong>MybatisAutoConfiguration</strong>会在Spring Boot启动时注册到容器中：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805143359047.png" alt="image-20210805143359047" /></p><p>该类绑定了<strong>MybatisProperties</strong>，对应Spring Boot的配置文件中以<code>&quot;mybatis&quot;</code>为前缀的属性：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805144216362.png" alt="image-20210805144216362" /></p><ol><li><strong>MybatisAutoConfiguration</strong>向容器中注册了<strong>sqlSessionFactory</strong>，其使用容器中存在的数据源，并且从配置资源类<strong>MybatisProperties</strong>中获取MyBatis的配置属性值：</li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805143832167.png" alt="image-20210805143832167" /></p><ol start="2"><li><strong>MybatisAutoConfiguration</strong>向容器中注册了<strong>SqlSessionTemplate</strong>，其可以执行批量的<strong>SqlSession</strong>：</li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805144629709.png" alt="image-20210805144629709" /></p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805144721508.png" alt="image-20210805144721508" /></p><ol start="3"><li><strong>MybatisAutoConfiguration</strong>向容器中注册了<strong>AutoConfiguredMapperScannerRegistrar</strong>，其用于扫描容器中带有 <strong>@Mapper</strong> 注解的组件：</li></ol><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805151107546.png" alt="image-20210805151107546" /></p>        <h3 id="使用-mybatis"   >          <a href="#使用-mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用-mybatis"></a> 使用 MyBatis</h3>      <p>开启MyBatis流程：</p><ul><li>导入MyBatis官方starter场景： <code>mybatis-spring-boot-starter</code></li><li>编写<code>xxxMapper</code>接口，并在其上使用 <strong>@Mapper</strong> 注解（也可以使用 <strong>@MapperScan()</strong>  简化）</li><li>编写sql映射文件<code>xxxMapper.xml</code>（放置在<code>classpath:mapper/*.xml</code>下）并绑定<code>xxxMapper</code>接口</li><li>在<code>application.yaml</code>中指定mapper配置文件的位置<code>mapper-locations</code>，以及指定全局配置文件的信息</li></ul><p>具体步骤如下：</p><ol><li>导入MyBatis的starter场景： <code>mybatis-spring-boot-starter</code></li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>编写<code>UserMapper</code>接口，并在其上使用 <strong>@Mapper</strong> 注解（也可以使用 <strong>@MapperScan(“com.zhao.mapper”)</strong>  简化）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用注解代替xml里的sql语句</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">selectUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>编写sql映射文件<code>userMapper.xml</code>（放置在<code>classpath:mapper/*.xml</code>下）</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.admin.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.admin.bean.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>在<code>application.yaml</code>中配置MyBatis：</li></ol><figure class="highlight yaml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 可以不写mybatis-config.xml，所有全局配置文件的配置都放在configuration配置项中即可</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  </span><br></pre></td></tr></table></div></figure><p>项目结构：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805212017625.png" alt="image-20210805212017625" /></p>        <h3 id="mybatis-plus"   >          <a href="#mybatis-plus" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis-plus"></a> MyBatis Plus</h3>      <p>导入MyBatis-Plus的starter场景：<code>mybatis-plus-boot-starter</code></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>其会向容器中导入<strong>MybatisPlusAutoConfiguration</strong>：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805194210051.png" alt="image-20210805194210051" /></p><p>其对应的配置前缀为<code>&quot;mybatis-plus&quot;</code>，其会默认扫描<code>&quot;classpath*:/mapper/**/*.xml&quot;</code>，即类路径下mapper目录下的所有<code>.xml</code>文件都会被作为MyBatis的xml进行扫描（开发人员将sql映射文件放置在该目录下即可）：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805193856503.png" alt="image-20210805193856503" /></p><p>使用时，自定义的Mapper接口继承 <code>BaseMapper&lt;User&gt;</code> 接口即可自动实现简单功能的CRUD:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>BaseMapper&lt;User&gt;</code> 接口中默认实现了简单CRUD的方法：</p><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210805213009214.png" alt="image-20210805213009214" /></p><p>使用MyBatis Plus提供的<code>IService</code>，<code>ServiceImpl</code>，减轻Service层开发工作。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhao.hellomybatisplus.model.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Service 的CRUD也不用写了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//此处故意为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.model.User;</span><br><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.lun.hellomybatisplus.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//此处故意为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="redis-环境"   >          <a href="#redis-环境" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#redis-环境"></a> Redis 环境</h3>      <p>待补充</p>        <h2 id="单元测试"   >          <a href="#单元测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#单元测试"></a> 单元测试</h2>              <h3 id="junit5-的变化"   >          <a href="#junit5-的变化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#junit5-的变化"></a> JUnit5 的变化</h3>      <p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong>。作为最新版本的JUnit框架，JUnit5与之前版本的JUnit框架有很大的不同。由三个不同子项目的几个不同模块组成：</p><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><ul><li><strong>JUnit Platform</strong>: JUnit Platform是在JVM上启动测试框架的基础，不仅支持JUnit自制的测试引擎，其他测试引擎也都可以接入。</li><li><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在JUnit Platform上运行。</li><li><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x和JUnit3.x的测试引擎。</li></ul><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/image-20210813193410660.png" alt="image-20210813193410660" /></p><p>注意：<strong>Spring Boot 2.4 以上版本移除了默认对Vintage的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</strong></p><p>JUnit 5’s Vintage Engine Removed from <code>spring-boot-starter-test</code>，如果需要继续兼容junit4需要自行引入vintage：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90SpringBoot%E3%80%91SpringBoot2/1606797616337-e73010e9-9cac-496d-a177-64b677af5a3d.png" alt="img" /></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>现在版本使用 <code>@SpringBootTest</code> ：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>以前版本使用 <code>@SpringBootTest + @RunWith(SpringTest.class)</code></p><p>Spring Boot整合JUnit以后：</p><ul><li>编写测试方法：<code>@Test</code>标注（注意需要使用JUnit5版本的注解）</li><li>JUnit类具有Spring的功能，<code>@Autowired</code>、比如 <code>@Transactional</code> 标注测试方法，测试完成后自动回滚</li></ul>        <h3 id="junit5常用注解"   >          <a href="#junit5常用注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#junit5常用注解"></a> JUnit5常用注解</h3>      <p>JUnit5的注解与JUnit4的注解有所变化：<span class="exturl"><a class="exturl__link"   href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" >https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><strong>@Test</strong> 表示方法是测试方法。但是与JUnit4的<code>@Test</code>不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest</strong> 表示方法是参数化测试，下方会有详细介绍</li><li><strong>@RepeatedTest</strong> 表示方法可重复执行，下方会有详细介绍</li><li><strong>@DisplayName</strong> 为测试类或者测试方法设置展示名称</li><li><strong>@BeforeEach</strong> 表示在每个单元测试之前执行</li><li><strong>@AfterEach</strong> 表示在每个单元测试之后执行</li><li><strong>@BeforeAll</strong> 表示在所有单元测试之前执行</li><li><strong>@AfterAll</strong> 表示在所有单元测试之后执行</li><li><strong>@Tag</strong> 表示单元测试类别，类似于JUnit4中的 <strong>@Categories</strong></li><li><strong>@Disabled</strong> 表示测试类或测试方法不执行，类似于JUnit4中的 <strong>@Ignore</strong></li><li><strong>@Timeout</strong> 表示测试方法运行如果超过了指定时间将会返回错误</li><li><strong>@ExtendWith</strong> 为测试类或测试方法提供扩展类引用</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; <span class="comment">//注意这里使用的是JUnit5里jupiter的Test注解！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;第一次测试&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="断言assertions"   >          <a href="#断言assertions" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#断言assertions"></a> 断言（Assertions）</h3>      <p>断言（Assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。</p><p>断言用于<strong>检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告</strong></p>        <h4 id="简单断言"   >          <a href="#简单断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简单断言"></a> 简单断言</h4>      <p>用来对单个值进行简单的验证。如：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table></div><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;simple assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">2</span>, <span class="string">&quot;simple math&quot;</span>);</span><br><span class="line">    assertNotEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    assertNotSame(<span class="keyword">new</span> Object(), <span class="keyword">new</span> Object());</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    assertSame(obj, obj);</span><br><span class="line"></span><br><span class="line">    assertFalse(<span class="number">1</span> &gt; <span class="number">2</span>);</span><br><span class="line">    assertTrue(<span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    assertNull(<span class="keyword">null</span>);</span><br><span class="line">    assertNotNull(<span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="数组断言"   >          <a href="#数组断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组断言"></a> 数组断言</h4>      <p>通过 <strong>assertArrayEquals()</strong> 方法来判断两个对象或原始类型的数组是否相等</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="组合断言"   >          <a href="#组合断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组合断言"></a> 组合断言</h4>      <p><code>assertAll()</code> 方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assert all&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">              () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">              () -&gt; assertTrue(<span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">             );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="异常断言"   >          <a href="#异常断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常断言"></a> 异常断言</h4>      <p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule**注解的<code>ExpectedException</code>变量，还是比较麻烦的。而JUnit5提供了一种新的断言方式 <strong>Assertions.assertThrows()</strong> ，配合函数式编程就可以进行使用。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArithmeticException exception = Assertions.assertThrows(</span><br><span class="line">        <span class="comment">//扔出断言异常</span></span><br><span class="line">        ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="超时断言"   >          <a href="#超时断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#超时断言"></a> 超时断言</h4>      <p>JUnit5还提供了 <strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="快速失败"   >          <a href="#快速失败" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#快速失败"></a> 快速失败</h4>      <p>通过 <strong>fail()</strong> 方法直接使得测试失败</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;fail&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail(<span class="string">&quot;This should fail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="前置条件assumptions"   >          <a href="#前置条件assumptions" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#前置条件assumptions"></a> 前置条件（Assumptions）</h3>      <p>JUnit 5 中的前置条件（<strong>Assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssumptionsTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String environment = <span class="string">&quot;DEV&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;simple&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAssume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>));</span><br><span class="line">        assumeFalse(() -&gt; Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;PROD&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assumeThenDo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumingThat(</span><br><span class="line">            Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>),</span><br><span class="line">            () -&gt; System.out.println(<span class="string">&quot;In DEV&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>assumeTrue()</strong> 和 <strong>assumFalse() <strong>确保给定的条件为 true 或 false，不满足条件会使得测试</strong>执行终止（不会失败）</strong>。</p><p><strong>assumingThat()</strong> 的参数是表示条件的布尔值和对应的 <code>Executable</code> 接口的实现对象。只有条件满足时，<code>Executable</code> 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>        <h3 id="嵌套测试"   >          <a href="#嵌套测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#嵌套测试"></a> 嵌套测试</h3>      <p>JUnit 5 可以通过 Java 中的内部类和 <strong>@Nested</strong> 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用 <strong>@BeforeEach</strong> 和 <strong>@AfterEach</strong> 注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="参数化测试"   >          <a href="#参数化测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#参数化测试"></a> 参数化测试</h3>      <p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用 <strong>@ValueSource</strong> 等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</li><li><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</li><li><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</li><li><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li></ul><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。他的强大之处的地方在于他可以支持外部的各类入参。如:CSV，YML，JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterizedTest1</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span>    <span class="comment">//指定方法名</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    Assertions.assertNotNull(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="迁移指南"   >          <a href="#迁移指南" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#迁移指南"></a> 迁移指南</h3>      <p>在进行迁移的时候需要注意如下变化：</p><ul><li>注解在 <code>org.junit.jupiter.api</code> 包中，断言在 <code>org.junit.jupiter.api.Assertions</code> 类中，前置条件在 <code>org.junit.jupiter.api.Assumptions</code> 类中。</li><li>把 <strong>@Before</strong> 和 <strong>@After</strong> 替换成 <strong>@BeforeEach</strong> 和 <strong>@AfterEach</strong>。</li><li>把 <strong>@BeforeClass</strong> 和 <strong>@AfterClass</strong> 替换成 <strong>@BeforeAll</strong> 和 <strong>@AfterAll</strong>。</li><li>把 <strong>@Ignore</strong> 替换成 <strong>@Disabled</strong>。</li><li>把 <strong>@Category</strong> 替换成 <strong>@Tag</strong>。</li><li>把 <strong>@RunWith</strong>、<strong>@Rule</strong> 和 <strong>@ClassRule</strong> 替换成 <strong>@ExtendWith</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Memo】常见问题汇总</title>
      <link href="2021/06/28/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/06/28/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[        <h2 id="idea设置"   >          <a href="#idea设置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#idea设置"></a> IDEA设置</h2>              <h3 id="项目字符编码设置"   >          <a href="#项目字符编码设置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#项目字符编码设置"></a> 项目字符编码设置</h3>      <p>新建项目后，首先设置项目的字符编码为UTF-8：</p><p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20210809212949065.png" alt="image-20210809212949065" /></p>        <h3 id="开启支持注解"   >          <a href="#开启支持注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#开启支持注解"></a> 开启支持注解</h3>      <p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20210809213138786.png" alt="image-20210809213138786" /></p>        <h3 id="设置java版本"   >          <a href="#设置java版本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#设置java版本"></a> 设置Java版本</h3>      <p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20210809213305683.png" alt="image-20210809213305683" /></p>        <h3 id="将项目的构建和运行操作交给maven"   >          <a href="#将项目的构建和运行操作交给maven" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#将项目的构建和运行操作交给maven"></a> 将项目的构建和运行操作交给Maven</h3>      <p>在不勾选的情况下对项目的构建和运行是 intelliJ idea 去做的，就可能导致构建和运行时无法找到maven仓库中的相关jar包，勾选后在对项目进行构建和运行等操作直接交给了maven。</p><p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20210810155531212.png" alt="image-20210810155531212" /></p>        <h2 id="配置文件"   >          <a href="#配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/CoderBruis/article/details/80721841" >https://blog.csdn.net/CoderBruis/article/details/80721841</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>IDEA 的<code>properties</code>文件中默认是不会将中文转为ASCII码的。只需要在<code>File-&gt;Settings-&gt;File Encodings</code>里面设置编码的自动转变即可，如图操作：</p><p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/20180617233755855" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> Memo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 AOP源码分析</title>
      <link href="2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[        <h2 id="aop原理"   >          <a href="#aop原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop原理"></a> AOP原理</h2>      <p>本质原理：为每个需要被增强的组件（带有切入点的组件）创建一个代理对象，在需要执行切入点方法时，调用代理对象的相应方法，并在其中按顺序切入通知方法。</p><p>AOP使用 <strong>@EnableAspectJAutoProxy</strong>注解通过<code>@Import</code>的方式向容器中添加一个<strong>AnnotationAwareAspectJAutoProxyCreator</strong>组件，该组件本质上是一个<strong>后置处理器</strong>，它会随着其他后置处理器一起注册到容器中（在普通bean注册之前）。在普通bean<strong>实例化前</strong>（此时还未实例化，普通的后置处理器在组件调用构造器之后执行），调用该组件的<code>applyBeanPostProcessorsBeforeInstantiation()</code>方法把带有Aspect相关的切面类添加到增强器集合中，在bean实例化后（此时才会执行普通的后置处理器内的方法），再调用<code>applyBeanPostProcessorsAfterInstantiation()</code>方法为带有切入点的组件（待增强的组件）创建一个<strong>代理对象</strong>（其内含有相应的增强器）。之后在执行该组件<strong>代理对象</strong>的切入点方法时，则使用<strong>CglibAopProxy.intercept()<strong>拦截该方法的执行，并在其中获取满足当前方法的所有</strong>拦截器链</strong>（由增强器包装而成），使用拦截器链的链式机制按顺序执行通知方法与业务代码。</p><p>AOP中两个非常重要的组件：<strong>后置处理器</strong>和<strong>拦截器（增强器）</strong>：</p><ul><li><strong>后置处理器</strong>：拦截组件的创建，为其创建<strong>代理对象</strong></li><li><strong>拦截器（增强器）</strong>：在代理对象执行目标方法时进行拦截，<strong>切入相应的通知方法</strong></li></ul>        <h2 id="aop简易执行流程"   >          <a href="#aop简易执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop简易执行流程"></a> AOP简易执行流程</h2>      <p>注册阶段：</p><ul><li>配置类开启 <mark><strong>@EnableAspectJAutoProxy</strong></mark> 注解。</li><li><code>@EnableAspectJAutoProxy</code>注解会注册 <mark><strong>AnnotationAwareAspectJAutoProxyCreator</strong></mark> 组件（通过<code>@Import(AspectJAutoProxyRegistrar.class)</code>的方式）。 <strong>AnnotationAwareAspectJAutoProxyCreator</strong>本质上是一个后置处理器（实现了相应接口）</li><li>容器刷新（ <strong>refresh()</strong> 方法栈中）：<ul><li><mark><strong>registerBeanPostProcessors()</strong></mark>：创建并注册所有的后置处理器，此时创建了<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，在创建时会执行<strong>invokeAwareMethods()<strong>方法，回调地执行其实现的<code>setBeanFactory()</code>方法以获取容器中的</strong>BeanFactory</strong>并创建<strong>BeanFactoryAspectJAdvisorsBuilderAdapter</strong>对象。</li><li><mark><strong>finishBeanFactoryInitialization()</strong></mark>：创建并注册其他<strong>普通单实例组件</strong>（非后置处理器）。<code>AnnotationAwareAspectJAutoProxyCreator</code>会<strong>拦截每个组件的创建</strong>。Before（在组件<strong>调用构造器实例化前</strong>调用：若拦截到的组件是切面类，则加入到增强器（advisor）集合中（之后被包装为拦截器）；After（在组件实例化完毕后调用，此时其他普通后置处理器已经完成了相应操作）：若拦截到的组件<strong>需要被增强</strong>（满足切入点表达式的条件），则为该组件创建一个<strong>代理对象</strong>（其内含有相应的增强器），之后执行业务组件的被增强的方法时就会执行该代理对象的相应方法。</li></ul></li></ul><p>执行阶段：</p><ul><li><strong>代理对象</strong>准备执行<strong>目标方法</strong>（带有切入点的目标方法）时， <mark><strong>CglibAopProxy.intercept()</strong></mark> 会进行拦截，加入增强的通知方法：<ul><li>先遍历找到<strong>有效（符合目标方法）<strong>的</strong>拦截器链chain</strong>（之前的增强器包装成拦截器）</li><li>利用<strong>拦截器的链式机制</strong>依次进入每一个拦截器进行执行（每个拦截器都会执行相应的通知方法）</li><li>通过不断回调<code>CglibMethodInvocation.proceed()</code>方法<strong>链式地</strong>调用下一个拦截器</li><li>执行效果：前置通知 -&gt; 目标方法 -&gt; 正常返回通知或异常返回通知   -&gt; 后置通知</li></ul></li><li><strong>代理对象</strong>执行<strong>普通方法</strong>（不带有切入点的目标方法）时， <mark><strong>CglibAopProxy.intercept()</strong></mark> 进行拦截后，因找不到该方法匹配的增强器（因为普通方法没有被切入增强），则直接执行代理对象的普通方法。</li><li>没有被增强的普通对象不被拦截。</li></ul><span id="more"></span>        <h2 id="enableaspectjautoproxy"   >          <a href="#enableaspectjautoproxy" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#enableaspectjautoproxy"></a> @EnableAspectJAutoProxy</h2>      <p>要开启AOP自动代理，配置类中需要<strong>添加@EnableAspectJAutoProxy。整个AOP就是从@EnableAspectJAutoProxy注解开始执行的。</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigAOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将业务逻辑类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogsAspects <span class="title">logsAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogsAspects();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@EnableAspectJAutoProxy</code>注解：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630165506770.png" alt="image-20210630165506770" /></p>        <h2 id="importaspectjautoproxyregistrarclass"   >          <a href="#importaspectjautoproxyregistrarclass" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#importaspectjautoproxyregistrarclass"></a> @Import(AspectJAutoProxyRegistrar.class)</h2>      <p><code>@Import(AspectJAutoProxyRegistrar.class)</code>表明<code>@EnableAspectJAutoProxy</code>注解会向容器中注册<strong>AspectJAutoProxyRegistrar</strong>类。</p><p><code>AspectJAutoProxyRegistrar</code>类实现了<code>ImportBeanDefinitionRegistrar</code>接口的<code>registerBeanDefinitions()</code>方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630190714343.png" alt="image-20210630190714343" /></p><p>该方法使用<code>BeanDefinitionRegistry</code>类的对象<code>registry</code>给容器中<strong>注册</strong>了一个id名称为<code>internalAutoProxyCreator</code>的<code>AnnotationAwareAspectJAutoProxyCreator</code>组件（注解装配模式的AspectJ自动代理创建器）。注册定义部分的代码：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630192408003.png" alt="image-20210630192408003" /></p><p><strong>总结</strong>：<code>@EnableAspectJAutoProxy</code>注解会向容器中注册了一个<code>AspectJAutoProxyRegistrar</code>组件，该组件会向容器中注册一个<strong>AnnotationAwareAspectJAutoProxyCreator</strong>组件，即创建了一个自动代理创建器。<strong>AOP的思想都是通过该组件实现</strong>。</p>        <h2 id="annotationawareaspectjautoproxycreator"   >          <a href="#annotationawareaspectjautoproxycreator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#annotationawareaspectjautoproxycreator"></a> AnnotationAwareAspectJAutoProxyCreator</h2>      <p><code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了两个接口：</p><ul><li><strong>SmartInstantiationAwareBeanPostProcessor</strong>接口：一种特殊的后置处理器，在每个普通组件<strong>创建前后</strong>（不同于普通后置处理器是在组件创建完成、<strong>初始化前后</strong>）拦截并将该组件的<strong>代理对象注册到容器中</strong>，后续执行该组件的切入点方法时将调用代理对象的相应方法以切入通知方法。它实现的接口方法为postProcessBefore<strong>Instantiation</strong>()，有区别于其他BeanPostProcessor里的postProcessBefore<strong>Initialization</strong>()</li><li><strong>BeanFactoryAware</strong>接口：在<code>AnnotationAwareAspectJAutoProxyCreator</code>组件被注册到容器中时（每个组件在创建时首先会执行<code>invokeAwareMethods()</code>方法，此时会回调<code>BeanFactoryAware</code>的接口方法），获取到容器中的组件创建工厂<code>BeanFactory</code>，并创建<code>BeanFactoryAspectJAdvisorsBuilderAdapter</code>（组件工厂通知构建器的适配器）对象<strong>用于后续为组件创建代理对象</strong>。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630193143177.png" alt="image-20210630193143177" /></p><p>因此需要关心其实现的两个接口方法各有什么功能。</p>        <h3 id="beanfactoryaware接口的作用"   >          <a href="#beanfactoryaware接口的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanfactoryaware接口的作用"></a> BeanFactoryAware接口的作用</h3>      <p><strong>作用：获取组件创建工厂BeanFactory</strong></p><p><code>AnnotationAwareAspectJAutoProxyCreator</code>的父类<code>AspectJAwareAdvisorAutoProxyCreator</code>（上图红色框所示）重写了<code>BeanFactoryAware</code>接口的<strong>setBeanFactory()方法</strong>（<code>AnnotationAwareAspectJAutoProxyCreator</code>类本身并没有重写该方法），该方法内调用了<strong>initBeanFactory()方法</strong>（被<code>AnnotationAwareAspectJAutoProxyCreator</code>类重写）。</p><p>在<code>AnnotationAwareAspectJAutoProxyCreator</code>组件被注册到容器中时，容器会执行<strong>invokeAwareMethods()方法</strong>，这是<code>Aware</code>接口的回调方法。因为<code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>Aware</code>接口的<code>setBeanFactory</code>()方法，因此此时会执行其重写的<code>setBeanFactory()</code>方法<strong>获取bean创建工厂BeanFactory</strong>，并创建<code>BeanFactoryAspectJAdvisorsBuilderAdapter</code>（组件工厂通知构建器的适配器）对象<strong>用于后续为组件创建代理对象</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704161324229.png" alt="image-20210704161324229" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630220411754.png" alt="image-20210630220411754" /></p>        <h3 id="smartinstantiationawarebeanpostprocessor接口的作用"   >          <a href="#smartinstantiationawarebeanpostprocessor接口的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#smartinstantiationawarebeanpostprocessor接口的作用"></a> SmartInstantiationAwareBeanPostProcessor接口的作用</h3>      <p><strong>作用：在每个普通组件创建前后进行拦截，并将满足切入点表达式的组件包装后的代理对象注册到容器中</strong></p><p><code>SmartInstantiationAwareBeanPostProcessor</code>接口的postProcessBefore<strong>Instantiation</strong>()方法不同于其他<code>BeanPostProcessor</code>里的postProcessBefore<strong>Initialization</strong>()。</p><p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口，会使得其在所有的普通单实例bean<strong>创建前后</strong>能够进行拦截，调用<code>postProcessBeforeInstantiation()</code>方法注册每个增强器（切面类），调用<code>postProcessorsAfterInitialization()</code>方法将满足切入点表达式的组件包装后的代理对象注册到容器中。<strong>postProcessAfterInitialization()方法中调用wrapIfNecessary()为满足切入点表达式条件的组件包装出代理对象</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703131501253.png" alt="image-20210703131501253" /></p>        <h2 id="aop详细执行流程"   >          <a href="#aop详细执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop详细执行流程"></a> AOP详细执行流程</h2>              <h3 id="1-传入配置类创建ioc容器"   >          <a href="#1-传入配置类创建ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-传入配置类创建ioc容器"></a> 1. 传入配置类，创建IoC容器</h3>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203107349.png" alt="image-20210630203107349" /></p>        <h3 id="2-refresh后续流程均在该方法内执行"   >          <a href="#2-refresh后续流程均在该方法内执行" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-refresh后续流程均在该方法内执行"></a> 2. refresh()：后续流程均在该方法内执行</h3>      <p><mark>补充IOC容器过程：注册配置类</mark>，调用refresh()方法刷新容器</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203127243.png" alt="image-20210630203127243" /></p>        <h3 id="3-registerbeanpostprocessors创建并注册所有后置处理器"   >          <a href="#3-registerbeanpostprocessors创建并注册所有后置处理器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-registerbeanpostprocessors创建并注册所有后置处理器"></a> 3. registerBeanPostProcessors()：创建并注册所有后置处理器</h3>      <p>在<strong>refresh()方法内</strong>执行<code>registerBeanPostProcessors()</code><strong>创建</strong>并<strong>注册</strong>所有<strong>已定义</strong>的后置处理器，以在后续拦截普通bean的初始化。（步骤3和4中分析均为该方法内的执行逻辑）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203203476.png" alt="image-20210630203203476" /></p>        <h4 id="31-创建后置处理器实例化对象只创建还未注册"   >          <a href="#31-创建后置处理器实例化对象只创建还未注册" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#31-创建后置处理器实例化对象只创建还未注册"></a> 3.1 创建后置处理器实例化对象（只创建，还未注册）</h4>      <p>3.1.1 在<code>registerBeanPostProcessors</code>()方法内：先获取IoC容器中所有已经定义了的需要实例化的<code>BeanPostProcessor</code>组件（此时还没创建对象实例）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203357418.png" alt="image-20210630203357418" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630202829082.png" alt="image-20210630202829082" /></p><p>此时的<strong>org.springframework.aop.config.internalAutoProxyCreator</strong>正是之前在<code>@Import(AspectJAutoProxyRegistrar.class)</code>)中使用<code>BeanDefinitionRegistry</code>类给容器中添加<strong>定义</strong>的id名称为<code>internalAutoProxyCreator</code>的组件。（即之前<code>BeanDefinitionRegistry</code>内<strong>定义了</strong>该后置处理器实现类，<strong>但还未创建实例化对象</strong>，步骤3.5处才创建了该组件）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630192408003.png" alt="image-20210630192408003" /></p><p>3.1.2 给容器添加其他<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204433781.png" alt="image-20210630204433781" /></p><p>3.1.3 遍历3.1.1中取出的所有<code>BeanPostProcessor</code>，并根据其是否实现了<code>Ordered</code>接口进行分类</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630213254910.png" alt="image-20210630213254910" /></p><p>3.1.4 优先创建实现了<code>PriorityOrdered</code>接口的<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204659073.png" alt="image-20210630204659073" /></p><p>3.1.5 再创建实现了<code>Ordered</code>接口的<code>BeanPostProcessor</code>（以下分析均为3.5断点方法<code>getBean()</code>中<strong>创建</strong><code>AnnotationAwareAspectJAutoProxyCreator</code>对象的过程）</p><p><strong>AnnotationAwareAspectJAutoProxyCreator类实现了Ordered接口，因此在这一步被创建（创建后再进行注册）</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204914536.png" alt="image-20210630204914536" /></p><p>以下分析如何<strong>创建</strong>id为<code>internalAutoProxyCreator</code>的<strong>AnnotationAwareAspectJAutoProxyCreator</strong>对象【本质为<code>BeanPostProcessor</code>对象 】？（注意，此步骤仅创建该对象，还未向容器中注册）</p><ol><li>创建bean实例</li><li>调用<code>populateBean(beanName, mbd, instanceWrapper)</code> 为bean属性赋值</li><li>调用<code>initializeBean(beanName, exposedObject, mbd)</code>为bean初始化</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210629163559536.png" alt="image-20210629163559536" /></p><p><code>initializeBean()</code>方法内部依次执行：</p><ul><li><code>invokeAwareMethods()</code>方法（绿色框）：处理Aware接口的回调方法</li><li><code>applyBeanPostProcessorsBeforeInitialization()</code>方法（红色框）：调用后置处理器</li><li><code>invokeInitMethods()</code>方法完成<strong>初始化</strong>（黄色框）：执行自定义的初始化方法</li><li><code>applyBeanPostProcessorsAfterInitialization()</code>方法（红色框）：调用后置处理器</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630214340913.png" alt="image-20210630214340913" /></p><p>调用<code>invokeAwareMethods(beanName, bean)</code>作用：执行<code>Aware</code>接口的回调方法。因为<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了<strong>BeanFactoryAware</strong>接口，因此在这里，执行了该组件的<code>setBeanFactory()</code>方法，用于获取bean创建工厂<code>BeanFactory</code>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630213635404.png" alt="image-20210630213635404" /></p><ol start="4"><li>此时即调用了<code>AnnotationAwareAspectJAutoProxyCreator</code>类父类的<code>setBeanFactory()</code>方法（下图红色框），获取了bean创建工厂<code>BeanFactory</code>。</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630220411754.png" alt="image-20210630220411754" /></p><ol start="5"><li>接着执行<code>this.initBeanFactory((ConfigurableListableBeanFactory)beanFactory);</code>（上图黄色框）创建了<code>ReflectiveAspectJAdvisorFactory</code>（反射的AspectJ增强器工厂）对象和并将其包装成<code>BeanFactoryAspectJAdvisorsBuilderAdapter</code>（组件工厂通知构建器的适配器）对象<strong>用于后续为组件创建代理对象</strong>。</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704164952614.png" alt="image-20210704164952614" /></p><p>3.1.6 最后再创建和注册没实现优先级接口的<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204929418.png" alt="image-20210630204929418" /></p><p><strong>总结</strong>：经过上述<strong>创建初始化等操作</strong>，此时3.5中getBean()方法执行完毕，获得了每个<code>BeanPostProcessor</code>（包括<code>AnnotationAwareAspectJAutoProxyCreator</code>）的实例化对象。</p><p>3.1步骤仅为 <mark><strong>创建后置处理器的过程，此时的后置处理器还未注册到容器中</strong></mark>。</p>        <h4 id="32-创建后的后置处理器注册到beanfactory中"   >          <a href="#32-创建后的后置处理器注册到beanfactory中" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#32-创建后的后置处理器注册到beanfactory中"></a> 3.2 创建后的后置处理器注册到BeanFactory中</h4>      <p>在创建出<code>AnnotationAwareAspectJAutoProxyCreator</code>的实例化对象后执行<code>registerBeanPostProcessors()</code>方法将<code>AnnotationAwareAspectJAutoProxyCreator</code>组件<strong>注册</strong>到<code>BeanFactory</code>中：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204914536.png" alt="image-20210630204914536" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630221118378.png" alt="image-20210630221118378" /></p><p><mark>3.1和3.2步骤即为<strong>创建和注册AnnotationAwareAspectJAutoProxyCreator组件的过程</strong>。</mark></p>        <h3 id="4-finishbeanfactoryinitialization注册普通组件"   >          <a href="#4-finishbeanfactoryinitialization注册普通组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-finishbeanfactoryinitialization注册普通组件"></a> 4. finishBeanFactoryInitialization()：注册普通组件</h3>      <p>步骤3中已经注册了所有的<code>BeanPostProcessor</code>（黄色框），之后执行<code>finishBeanFactoryInitialization()</code>方法（红色框）注册<strong>所有非@Lazy修饰的单实例普通组件</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701153743299.png" alt="image-20210701153743299" /></p><p>4.1 进入<code>finishBeanFactoryInitialization()</code>方法后，首先遍历获取容器中所有的<code>beanNames</code>，并依次执行以下方法创建bean对象。方法栈调用：</p><ul><li><code>-&gt; finishBeanFactoryInitialization(beanFactory)</code></li><li><code>-&gt; beanFactory.preInstantiateSingletons()</code></li><li><code>-&gt; getBean(beanName)</code></li><li><code>-&gt; doGetBean()</code></li><li><code>-&gt; getSingleton()</code></li><li><code>-&gt; createBean()</code></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163050223.png" alt="image-20210701163050223" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163108692.png" alt="image-20210701163108692" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701161459941.png" alt="image-20210701161459941" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701161016809.png" alt="image-20210701161016809" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163847923.png" alt="image-20210701163847923" /></p><p>补充：在调用<code>getSingleton()</code>创建单实例bean之前，首先从缓存中查找当前bean是否存在，如果存在，说明这个bean之前已被创建过，可以直接使用，不再需要创建；否则再执行<code>getSingleton()</code>方法创建。只要创建好的bean都会被缓存起来。从缓存中查找bean是否存在：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701162202790.png" alt="image-20210701162202790" /></p><p>经过上述方法栈，在执行<code>getBean(beanName)</code>方法后创建bean的流程：</p><p>4.2 执行<code>getSingleton(beanName)</code>方法，从缓存中查找当前bean是否存在，如果存在，说明这个bean之前已被创建过，可以直接使用，不再需要创建；否则再执行<code>getSingleton()</code>方法创建。</p><p>4.3 进入<code>createBean()</code> 方法体：首先执行<code>resolveBeforeInstantiation()</code>方法（红色框，指在实例化前<strong>解析</strong>对象） ，该方法试图在此返回一个<strong>包装后的代理对象</strong>：</p><ul><li>如果能返回代理对象（返回的<code>bean != null</code>)就使用（并且不再向下执行创建普通对象）</li><li>如果不能返回代理对象（返回的<code>bean == null</code>)就向下继续执行<code>doCreateBean()</code>方法（黄色框）创建普通对象</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701180818426.png" alt="image-20210701180818426" /></p><p><code>resolveBeforeInstantiation()</code>方法体内，在实例化前先后执行<strong>前处理</strong>和<strong>后处理</strong>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701181816332.png" alt="image-20210701181816332" /></p>        <h3 id="5-applybeanpostprocessorsbeforeinstantiation-前处理将切面类添加到增强器通知方法集合中其他作用"   >          <a href="#5-applybeanpostprocessorsbeforeinstantiation-前处理将切面类添加到增强器通知方法集合中其他作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-applybeanpostprocessorsbeforeinstantiation-前处理将切面类添加到增强器通知方法集合中其他作用"></a> 5. applyBeanPostProcessorsBeforeInstantiation() 前处理：将<mark>切面类</mark>添加到增强器（通知方法）集合中<mark>其他作用？</mark></h3>      <p>进入<code>applyBeanPostProcessorsBeforeInstantiation()</code>方法，该方法调用<code>getBeanPostProcessorCache()</code>方法判断当前容器中是否存在实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口的组件。恰好<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了该接口，因此会调用该类的<code>postProcessBeforeInstantiation()</code>方法。（若不存在，则将不再执行后续代码，直接返回null，从而转去创建普通组件）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701182427290.png" alt="image-20210701182427290" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701182344197.png" alt="image-20210701182344197" /></p><p><strong>重点</strong>：</p><ul><li><strong>BeanPostProcessor</strong>在普通bean对象<strong>创建完成之后，执行初始化方法前后</strong>调用</li><li><strong>InstantiationAwareBeanPostProcessor</strong>在普通bean实例<strong>创建之前先进行拦截调用</strong>，尝试使用后置处理器将bean包装成代理对象</li></ul><p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>InstantiationAwareBeanPostProcessor</code>接口，它会在任何bean实例创建之前（此时还没创建对象，也就还没执行普通<code>BeanPostProcessor</code>的处理器）先尝试执行<code>postProcessBeforeInstantiation()</code>返回对象的。</p><p>5.1若<code>resolveBeforeInstantiation()</code>方法无法返回代理对象（意味着容器中没有<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，即不需要开启AOP，也自然不需要返回代理对象），则程序继续向下执行<code>doCreateBean()</code>方法。此时才真正地去创建一个普通单实例bean实例，<strong>该过程和3.5中流程一样</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701171303958.png" alt="image-20210701171303958" /></p><p>5.2 若存在<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，则将执行<code>postProcessBeforeInstantiation()</code>方法，该方法用于将所有切面类（带有通知方法的类）添加到增强器（通知方法）集合中。</p><p>每个组件都会进入该方法，但我们只关心和AOP相关的组件：自定义的<code>MathCalculator</code>（业务逻辑类）和<code>LogAspect</code>（切面类）。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703101045896.png" alt="image-20210703101045896" /></p><p>接上文：<mark>这一段作用？</mark></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704191747391.png" alt="image-20210704191747391" /></p><p>5.3 黄色框：判断当前<code>advisedBeans.cotains(cacheKey)</code>（保存了所有带有通知方法的bean，又被称为<strong>增强器</strong>）中是否已经包含了当前bean，若包含，则直接返回。</p><p>5.4 若不包含，则判断<code>this.isInfrastructureClass(beanClass</code>)，即判断当前bean：</p><ul><li>是否是<strong>基础类型</strong>的<code>Advice</code>、<code>Pointcut</code>、<code>Advisor</code>或<code>AopInfrastructureBean</code>接口的实现类。</li><li>是否是<strong>切面类型（@Aspect注解修饰的类）</strong></li></ul><p>若符合，说明当前bean是切面类，则执行<code>advisedBeans.put()</code>方法将其添加到<code>advisedBeans</code>中（包含所有增强器），并向上层返回null。</p><p>5.5 判断<code>this.shouldSkip(beanClass, beanName)</code>：判断是否需要跳过该bean的处理。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703104658589.png" alt="image-20210703104658589" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703104753304.png" alt="image-20210703104753304" /></p><p>获取候选的增强器Advisors（切面里的通知方法），以<code>ArrayList</code>方式存储【List&lt;Advisor&gt; candidateAdvisors】。每一个封装的通知方法增强器是<code>InstantiationModelAwarePointcutAdvisor</code>类型，判断每一个增强器是否是<code>AspectJPointcutAdvisor</code>类型：若是，返回true；否则继续循环判断其他增强器，若都不是，返回false。</p><p>5.6 自定义的<code>MathCalculator</code>类经过5.4和5.5的判断均返回<code>false</code>，而<code>LogAspect</code>切面类因为被<code>@Aspect</code>注解修饰，所以会返回<code>true</code>，因此被添加到<code>advisedBeans</code>中</p><p><strong>总结</strong>：<code>AnnotationAwareAspectJAutoProxyCreator</code>类的<code>postProcessBeforeInstantiation()</code>方法在组件实例化前调用，目的是<strong>将每个自定义的切面类添加到增强器集合中</strong>。<mark>其他目的？</mark></p><p><mark>Before里不是特别确定</mark></p>        <h3 id="6-经过前处理postprocessbeforeinstantiation后new一个mathcalculator对象"   >          <a href="#6-经过前处理postprocessbeforeinstantiation后new一个mathcalculator对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-经过前处理postprocessbeforeinstantiation后new一个mathcalculator对象"></a> 6. 经过前处理postProcessBeforeInstantiation()后，new一个<mark>MathCalculator对象</mark></h3>              <h3 id="7-postprocesafterinstantiation-后处理向容器中注册满足切入点表达式条件的代理对象"   >          <a href="#7-postprocesafterinstantiation-后处理向容器中注册满足切入点表达式条件的代理对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-postprocesafterinstantiation-后处理向容器中注册满足切入点表达式条件的代理对象"></a> 7. postProcesAfterInstantiation() 后处理：向容器中注册满足切入点表达式条件的代理对象</h3>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703131501253.png" alt="image-20210703131501253" /></p><p>7.1 调用<code>this.wrapIfNecessary(bean, beanName, cacheKey)</code>方法：如果需要的话进行<strong>包装</strong>。进入该方法后，调用<code>this.getAdvicesAndAdvisorsForBean()</code>以获取<strong>能切入到当前bean的增强器（通知方法）</strong>。将这些增强器存储为<code>Object[] specificInterceptors</code>拦截器数组。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704200120914.png" alt="image-20210704200120914" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703132909220.png" alt="image-20210703132909220" /></p><p>该方法将遍历所有<strong>候选</strong>的增强器（通知方法），再找到能在当前bean使用的增强器（eligible，有资格的增强器），<strong>即找到哪些通知方法是需要切入到当前bean方法的。<strong>最后给有资格的增强器</strong>排序</strong>（排序是为了后续做切入时按照Before，After，AfterReturning等顺序执行）。</p><p>7.2 <code>this.getAdvicesAndAdvisorsForBean()</code>方法执行完成后获得了<code>Object[] specificInterceptors</code>，里面存有能切入到当前bean的所有增强器（通知方法）。如果当前<code>specificInterceptors</code>不为null，则说明当前bean有被增强，那么将当前bean保存到<code>this.advisedBeans</code>当中。</p><p>7.3 如果当前bean需要被增强，则执行<code>this.createProxy()</code>为其创建代理对象：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703153159704.png" alt="image-20210703153159704" /></p><p>接上段：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703154315455.png" alt="image-20210703154315455" /></p><p>该方法内执行流程：</p><ul><li>创建代理工厂<code>ProxyFactory</code></li><li>获取所有增强器（增强方法）并保存到<code>ProxyFactory</code>中</li><li>使用代理工厂创建代理对象<code>proxyFactory.getProxy(classLoader)</code>，其中代理对象有两种，其由Spring自动决定：<ul><li><code>JdkDynamicAopProxy(config)</code>：jdk动态代理</li><li><code>ObjenesisCglibAopProxy(config)</code>：cglib动态代理</li></ul></li></ul><p>在<code>proxyFactory.getProxy(classLoader)</code>方法内执行了以下方法返回动态代理对象：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703153617812.png" alt="image-20210703153617812" /></p><p><strong>总结</strong>：至此<code>postProcesAfterInstantiation()</code>方法中的<code>this.wrapIfNecessary()</code>方法执行完毕，其为容器中返回当前组件使用cglib增强了的代理对象（若实现了JDK接口，则返回JDK动态代理对象）。之后从容器中获取到的就是<strong>这个组件的代理对象</strong>，执行目标方法的时候，该代理对象就会额外执行通知方法的流程（除原本的业务代码外）。</p><p>该代理对象保存了许多详细信息（比如增强器、目标对象等），之后执行代理对象的方法时就会把通知方法一起执行：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703163430269.png" alt="image-20210703163430269" /></p>        <h3 id="8-cglibaopproxyintercept拦截代理对象目标方法的执行"   >          <a href="#8-cglibaopproxyintercept拦截代理对象目标方法的执行" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-cglibaopproxyintercept拦截代理对象目标方法的执行"></a> 8. CglibAopProxy.intercept()：拦截代理对象目标方法的执行</h3>      <p>代理对象被注册到容器中后，当执行该bean<strong>被增强的方法</strong>时，AOP代理会执行CglibAopProxy.intercept()方法拦截目标方法的执行：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703163932927.png" alt="image-20210703163932927" /></p><p>8.1 <strong>获取拦截器链</strong>：该方法中执行<code>ProxyFactory</code>对象的<code>getInterceptorsAndDynamicInterceptionAdvice()</code>方法获取将要执行的<strong>目标方法</strong>的<strong>拦截器链</strong>（拦截器集合，拦截器是由增强器包装后得到的，用于拦截每个目标方法的执行）。具体获得拦截器链的代码——进入该方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703164925461.png" alt="image-20210703164925461" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703191531684.png" alt="image-20210703191531684" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703193456012.png" alt="image-20210703193456012" /></p><p>接上段：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703191904882.png" alt="image-20210703191904882" /></p><ul><li>从配置类中获取所有的增强器（一个默认的增强器和其余自定义的增强器）</li><li>创建List&lt;Object&gt; interceptorList 保存拦截器，长度为所有增强器的数量，包含一个默认的<code>ExposeInvocationInterceptor</code>拦截器</li><li>遍历所有的增强器，将其转为拦截器：<code>interceptors = registry.getInterceptors(advisor)</code></li></ul><p>将增强器转为List&lt;MethodInterceptor&gt;的方式：</p><ul><li>如果传入的增强器advisor是<code>MethodInterceptor</code>，直接加入到集合中</li><li>如果不是，则使用适配器<code>AdvisorAdapter</code>将增强器转为<code>MethodInterceptor</code></li><li>转换完成，返回每个增强器对应的拦截器<code>MethodInterceptor</code></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703192130240.png" alt="image-20210703192130240" /></p><p><code>AdvisorAdapter</code>将增强器转为<code>MethodInterceptor</code>举例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703192455597.png" alt="image-20210703192455597" /></p><p><strong>总结</strong>：经过上述方法栈后，将每个增强器（通知方法）包装成了一个拦截器，返回了一个<strong>拦截器链</strong>（拦截器集合）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703193611280.png" alt="image-20210703193611280" /></p><p>8.2 得到拦截器链后，判断：</p><ul><li>如果没有拦截器链（说明<strong>当前目标方法</strong>没有被增强），直接执行目标方法</li><li>如果有拦截器链（说明目标方法有被增强），把需要执行的目标对象、目标方法、拦截器链等所有信息传入一个<strong>CglibMethodInvocation</strong>对象，并调用其<strong>proceed()方法</strong>，从而执行带有<strong>通知方法</strong>的业务代码。</li></ul><p>接上文获取拦截器链<code>chain</code>的代码：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703164633170.png" alt="image-20210703164633170" /></p>        <h3 id="9-cglibmethodinvocationproceed方法解析"   >          <a href="#9-cglibmethodinvocationproceed方法解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-cglibmethodinvocationproceed方法解析"></a> 9. CglibMethodInvocation().proceed()方法解析：</h3>      <p>进入<code>CglibMethodInvocation().proceed()</code>方法后：</p><ul><li>获取第一个拦截器；</li><li>该拦截器执行<code>invoke</code>方法（将当前<code>CglibMethodInvocation</code>对象传入），该方法会再次地调用<code>CglibMethodInvocation.proceed()</code>方法；</li><li><code>currentInterceptorIndex</code>记录当前拦截器的索引：从-1开始递增，每次执行<code>procced()</code>，索引自增一次，即再获取下一个拦截器；</li><li>获取第二个拦截器后再次执行<code>invoke</code>方法，再次获取第三个拦截器；</li><li>重复上述操作，直至获取到最后一个拦截器，执行完其通知方法（此时是第一次调用通知方法，其他拦截器的通知方法还未调用）；</li><li>执行完通知方法的拦截器将弹出方法栈，执行后续通知方法；</li></ul><p>使用这种<strong>拦截器链</strong>的机制，按顺序调用其余的通知方法和目标方法。</p><p>下面按照执行顺序分析流程，假设当前bean对象共有四个自定义的拦截器（<code>@Before</code>、<code>@After</code>、<code>@AfterReturnig</code>、<code>@AfterThrowing</code>）和一个默认的拦截器（<code>ExposeInvocationInterceptor</code>）：</p><p>9.1 首次调用<code>procced()</code>方法，当前索引<code>this.currentInterceptorIndex</code>为-1，自加1后为0。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703224011722.png" alt="image-20210703224011722" /></p><p><code>this.interceptorsAndDynamicMethodMatchers</code>中按顺序存储了所有拦截器（一个默认和四个自定义）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704115329357.png" alt="image-20210704115329357" /></p><p>首先取出第一个拦截器，调用其<code>invoke</code>方法，将<strong>CglibMethodInvocation</strong>对象作为参数传入：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703234254881.png" alt="image-20210703234254881" /></p><p>调用第一个默认的拦截器：<code>ExposeInvocationInterceptor</code>的<code>invoke</code>方法，在红色框中调用了<code>CglibMethodInvocation.proceed()</code>方法，从而获取了下一个拦截器@<strong>Before</strong>（此时<code>finally</code>代码块中的代码，还未执行，需要等到其余的方法栈全部执行完毕后最后执行）。</p><p>9.2 <mark>@Before</mark>：10.1中调用<code>procced()</code>获取到第二个拦截器<strong>MethodBeforeAdviceInterceptor</strong>：该拦截器首先执行<code>advice.before()</code>，即自定义的<strong>Before</strong>通知方法，再调用<code>CglibMethodInvocation.proceed()</code>方法获取下一个拦截器@<strong>After</strong>。注意此时Before通知已经执行。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704102922612.png" alt="image-20210704102922612" /></p><p>9.3 <mark>@After</mark>：获取到的下一个拦截器是<strong>AspectJAfterAdvice</strong>，该拦截器内将<code>procced()</code>方法包装在<code>try</code>代码块内。<code>finally</code>内的代码块为<strong>After后置通知方法</strong>，此时暂不调用，等待<code>try</code>内的<code>mi.procced()</code>方法栈执行完再调用。（因为<code>@After</code>的执行顺序在<code>@AfterReturning</code>和<code>@AfterThrowing</code>之后，所以需要等到他们执行完后再调用）执行<code>mi.procced()</code>方法获取下一个拦截器@<strong>AfterReturing</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114113510.png" alt="image-20210704114113510" /></p><p>9.4 <mark>@AfterReturning</mark>：进入<code>mi.procced()</code>方法内获取了下一个拦截器<strong>AfterReturningAdviceInterceptor</strong>。该拦截器的<code>invoke</code>方法内再次调用<code>mi.procced()</code>方法获取下一个拦截器<strong>AfterThrowing</strong>。注意此处的代码并没有被<code>try catch</code>包裹，意味着后续方法栈出现异常此处无法继续向下正常执行<code>advice.afterReturning()</code>通知。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114640043.png" alt="image-20210704114640043" /></p><p>9.5 <mark>@AfterThrowing</mark>：进入<code>mi.procced()</code>方法内获取了下一个拦截器<strong>AspectJAfterThrowing</strong>。此时再执行<code>procced()</code>方法时，因为该组件对应的拦截器<strong>已经全部遍历完</strong>，因此<code>this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1</code>判断成立，此时将执行目标对象的<strong>业务代码</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704120009098.png" alt="image-20210704120009098" /></p><p>同时<code>procced()</code>方法包裹在try代码块中，若业务代码中出现异常，则将被后面的<code>catch</code>捕获，并执行<code>invokeAdviceMethod()</code>将<code>@AfterThrowing</code>通知方法执行，<strong>同时抛出了一个异常ex，返回给上一层的@AfterReturing</strong>。上一层的<code>@AfterReturing</code>中并没有添加<code>try catch</code>代码块，因此若业务代码出现了异常，则将该异常抛给<code>@AfterReturing</code>后其无法继续执行后续的<strong>AfterReturing</strong>代码，反而将该异常继续向上抛给<code>@After</code>（<code>@After</code>内有<code>try</code>，可以捕获）。<strong>也就说明@AfterReturing的通知不能在出现异常时执行，@AfterThrowing的通知不能在不出现异常时执行（因为异常通知方法在catch中，只有业务代码出现异常才能执行）</strong></p><p>此时已经遍历完了所有的目标对象，执行目标对象的业务代码：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704120832349.png" alt="image-20210704120832349" /></p><p>执行完业务代码后，当前已经执行了<code>@Before</code>前置通知方法、目标对象业务代码，其余的通知方法还未执行。后续的执行顺序：</p><ul><li>如果业务代码内没有出现异常，则<code>catch</code>内的<code>@AfterThrowing</code>的通知不会执行，方法栈向上一层返回，返回到<code>@AfterReturing</code>，执行其<code>@AfterReturing</code>通知方法，执行后再返回到<code>@After</code>层执行<code>@After</code>通知方法。（此时都没有异常）</li><li>如果业务代码内出现异常，则执行<code>catch</code>内的<code>@AfterThrowing</code>的通知，同时抛出异常<code>ex</code>，返回给上一层的<code>@AfterReturing</code>，而该层并没有<code>try catch</code>，因此不会执行<code>@AfterReturing</code>的通知，将此异常继续向上层抛出到<code>@After</code>层</li></ul><p>9.6 之后回到==@After层==，此处有<code>try</code>保证异常不会继续向上抛出，同时不论是否有异常抛出，都会执行<code>invokeAdviceMethod()</code>方法执行<code>@After</code>后置通知。因此<strong>说明@After通知不论是够有异常，都会在最后执行</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114113510.png" alt="image-20210704114113510" /></p><p><code>@After</code>通知方法执行完后继续弹栈，此时所有的通知方法都执行完毕，顺序依次为：</p><ul><li>前置通知（<code>@Before</code>）</li><li>业务代码</li><li>返回通知（<code>@AfterReturning</code>）/ 若有异常，此时执行异常通知（<code>@AfterThrowing</code>）</li><li>后置通知（<code>@After</code>）</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">容器创建完成....</span><br><span class="line"></span><br><span class="line">切入点div运行@Before .... 参数列表：&#123;[1, 1]&#125;</span><br><span class="line">div方法执行...</span><br><span class="line">切入点正常返回@AfterReturning....运行结果：&#123;1&#125;</span><br><span class="line">切入点结束@After....</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure><p>补充：Spring4源码中拦截器调用的顺序与Spring5不同，是相反的顺序，但执行效果仍然相同：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704122728211.png" alt="image-20210704122728211" /></p><p>总体思想是链式地执行每个拦截器的<code>invoke()</code>方法，在合适的位置执行通知方法，并回调<code>CglibMethodInvocation.procced()</code>方法实现链式执行，直到所有的拦截器均执行完毕。</p>        <h2 id="aop原理总结"   >          <a href="#aop原理总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop原理总结"></a> AOP原理总结</h2>              <h3 id="注册阶段"   >          <a href="#注册阶段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注册阶段"></a> 注册阶段</h3>      <p>1、配置类开启 <mark>@<strong>EnableAspectJAutoProxy</strong></mark> 注解。</p><p>2、<code>@EnableAspectJAutoProxy</code>注解会注册 <mark><strong>AnnotationAwareAspectJAutoProxyCreator</strong></mark> 组件（通过<code>@Import(AspectJAutoProxyRegistrar.class)</code>的方式）。 <strong>AnnotationAwareAspectJAutoProxyCreator</strong>本质上是一个后置处理器（实现了相应接口）</p><p>3、容器刷新（ <strong>refresh()</strong> 方法栈中）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203127243.png" alt="image-20210630203127243" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704212659373.png" alt="image-20210704212659373" /></p><p>3.1、 <mark><strong>registerBeanPostProcessors()</strong></mark>：创建并注册所有的后置处理器，此时创建了<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，在创建时会执行<strong>invokeAwareMethods()<strong>方法，回调地执行其实现的<code>setBeanFactory()</code>方法以获取容器中的</strong>BeanFactory</strong>并创建<strong>BeanFactoryAspectJAdvisorsBuilderAdapter</strong>对象。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704212412161.png" alt="image-20210704212412161" /></p><p>3.2、 <mark><strong>finishBeanFactoryInitialization()</strong></mark>：创建并注册其他<strong>普通单实例组件</strong>（非后置处理器）。</p><p><code>AnnotationAwareAspectJAutoProxyCreator</code>会<strong>拦截每个组件的创建</strong>，并判断该组件是否需要被代理：</p><ul><li>若需要被代理（符合切入点表达式），则执行下图红色框创建AOP代理对象，直接返回该代理对象，不再创建普通组件对象</li><li>若不需要被代理，则执行下图黄色框创建普通组件对象</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704212905374.png" alt="image-20210704212905374" /></p><p><code>resolveBeforeInstantiation()</code>方法体内，在<strong>实例化普通组件前</strong>先后执行<strong>前处理</strong>和<strong>后处理</strong>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701181816332.png" alt="image-20210701181816332" /></p><p><strong>Before</strong>：若拦截到的组件是切面类，则加入到增强器（advisor）集合中（之后被包装为拦截器）；</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703101045896.png" alt="image-20210703101045896" /></p><p><strong>After</strong>：若拦截到的组件<strong>需要被增强</strong>（满足切入点表达式的条件），则为该组件创建一个<strong>代理对象</strong>（cglib），之后执行业务组件的被增强的方法时就会执行该代理对象的相应方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703131501253.png" alt="image-20210703131501253" /></p><p>3.3、若当前组件没有含有切入点表达式（说明不需要被AOP代理），则创建普通组件（下图黄色框）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20210701180818426.png" alt="image-20210701180818426" /></p>        <h3 id="执行阶段"   >          <a href="#执行阶段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#执行阶段"></a> 执行阶段</h3>      <p><strong>代理对象</strong>准备执行<strong>目标方法</strong>（带有切入点的目标方法）时， <mark><strong>CglibAopProxy.intercept()</strong></mark> 会进行拦截，加入增强的通知方法：</p><p>1、 先遍历找到<strong>有效（符合目标方法）<strong>的</strong>拦截器链chain</strong>（之前的增强器包装成拦截器）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703163932927.png" alt="image-20210703163932927" /></p><p>判断拦截器链是否为null，若为null，说明当前方法没有被增强，则直接执行目标方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703164633170.png" alt="image-20210703164633170" /></p><p>2、若有被增强，则利用<strong>拦截器的链式机制</strong>依次进入每一个拦截器进行执行（每个拦截器都会执行相应的通知方法）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703224011722.png" alt="image-20210703224011722" /></p><p>3、通过不断回调<code>CglibMethodInvocation.proceed()</code>方法<strong>链式地</strong>调用下一个拦截器</p><p>4、执行效果：前置通知 -&gt; 目标方法 -&gt; 正常返回通知或异常返回通知   -&gt; 后置通知</p><p><strong>代理对象</strong>执行<strong>普通方法</strong>（不带有切入点的目标方法）时， <mark><strong>CglibAopProxy.intercept()</strong></mark> 进行拦截后，因找不到该方法匹配的增强器（因为普通方法没有被切入增强），拦截器链为null，则直接执行代理对象的普通方法。</p><p>没有被增强的普通对象不被拦截。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 源码中常用接口的底层原理</title>
      <link href="2021/06/28/%E3%80%90Spring%E3%80%91Spring5-%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>2021/06/28/%E3%80%90Spring%E3%80%91Spring5-%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍Spring源码中较为常用的几个接口的底层实现原理：</p><ul><li>ImportBeanDefinitionRegistrar</li><li>BeanPostProcessor</li><li>BeanFactoryPostProcessor</li><li>BeanDefinitionRegistryPostProcessor</li><li>Aware</li></ul>        <h2 id="importbeandefinitionregistrar"   >          <a href="#importbeandefinitionregistrar" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#importbeandefinitionregistrar"></a> ImportBeanDefinitionRegistrar</h2>      <p><code>ImportBeanDefinitionRegistrar</code>接口的实现类用在<code>@Import</code>注解中，<strong>用于向IoC容器中自定义注册组件</strong>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@Import</code> 注解中可以传入<code>ImportBeanDefinitionRegistrar</code>接口的实现类。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210628212948066.png" alt="image-20210628212948066" /></p><span id="more"></span><p><mark>xxx</mark>通过调用<code>ImportBeanDefinitionRegistrar</code>接口实现类的<code>registerBeanDefinitions()</code> 方法，可以自定义地给容器中添加组件。方法参数：</p><ul><li><code>importingClassMetadata</code>：当前标注Import注解的类（即SpringConfig类）的所有注解信息</li><li><code>registry</code>：所有bean对象都通过此对象注册，可以使用该对象给容器中注册一个bean</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210628213321835.png" alt="image-20210628213321835" /></p><p>使用方法：把所有要添加到容器中的bean调用<code>registry.registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</code>方法手动注册到容器中。该方法需要传入<code>beanName</code>和一个实现了<strong>beanDefinition</strong>接口的类的对象（通常使用其实现类<strong>RootBeanDefinition</strong>）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210628215427638.png" alt="image-20210628215427638" /></p><p>使用实例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210628220119176.png" alt="image-20210628220119176" /></p>        <h2 id="beanpostprocessor"   >          <a href="#beanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor"></a> BeanPostProcessor</h2>      <p><strong>BeanPostProcessor</strong>：bean后置处理器。其用于在bean的<strong>初始化前后</strong>进行一些处理工作（此时已经调用了构造函数并使用了set方法为bean赋值）：</p><ul><li><code>postProcessBeforeInitialization()</code>：在初始化方法之前工作</li><li><code>postProcessAfterInitialization()</code>：在初始化方法之后工作</li></ul><p>自定义后置处理器实现<code>BeanPostProcessor</code>的方法，并将其注册到容器中。之后所有的bean对象在初始化方法前后都会进入该类的方法中执行相应处理。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// bean：当前被处理的bean对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeforeInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessAfterInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="beanpostprocessor执行流程源码分析"   >          <a href="#beanpostprocessor执行流程源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor执行流程源码分析"></a> BeanPostProcessor执行流程源码分析</h3>      <ol><li>容器调用bean的<strong>构造方法</strong>创建对象</li><li><code>populateBean()</code>：容器调用bean的set方法为bean对象的属性赋值（红色框）</li><li><code>initializeBean()</code>：容器为bean做初始化操作（黄色框）</li></ol><p>方法栈位置：<code>AbstractAutowireCapableBeanFactory.java</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210629163559536.png" alt="image-20210629163559536" /></p><p>======&gt; 进入黄色框的<code>initializeBean()</code>方法：</p><ul><li>执行<code>invokeAwareMethods()</code>方法（绿色框）</li><li>执行<code>applyBeanPostProcessorsBeforeInitialization()</code>方法（红色框）</li><li>执行<code>invokeInitMethods()</code>方法完成初始化（黄色框）</li><li>执行<code>applyBeanPostProcessorsAfterInitialization()</code>方法（红色框）</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210630214340913.png" alt="image-20210630214340913" /></p><p>======&gt; 进入红色框的<code>applyBeanPostProcessorsBeforeInitialization()</code>方法：</p><p>遍历得到容器中所有的<code>BeanPostProcessor</code>，并一执行<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization()</code>方法，将bean对象逐一经过每个<code>BeanPostProcessor</code>处理器。一旦返回null，跳出for循环后续不再执行。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210629164433894.png" alt="image-20210629164433894" /></p>        <h2 id="beanfactorypostprocessor"   >          <a href="#beanfactorypostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanfactorypostprocessor"></a> BeanFactoryPostProcessor</h2>      <p><strong>BeanFactoryPostProcessor</strong>：bean工厂后置处理器。调用时机：在<strong>BeanFactory标准初始化之后</strong>调用，此时所有组件的<strong>定义已经加载</strong>，但是组件的<strong>实例还没有被初始化创建</strong>。其作用：<strong>用来定制和修改BeanFactory的内容</strong>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 可以对beanFactory进行一些修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeanFactory ... bean的数量：&quot;</span> + beanFactory.getBeanDefinitionCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="beanfactorypostprocessor执行流程源码分析"   >          <a href="#beanfactorypostprocessor执行流程源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanfactorypostprocessor执行流程源码分析"></a> BeanFactoryPostProcessor执行流程源码分析</h3>      <ol><li>在<code>refresh()</code>方法中调用<code>invokeBeanFactoryPostProcessors()</code>：</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210705205828372.png" alt="image-20210705205828372" /></p><ol start="2"><li>在其内的方法栈中先按照类型获取到<code>postProcessorNames</code></li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709100017919.png" alt="image-20210709100017919" /></p><ol start="3"><li>将获取到的：<code>postProcessorNames</code>按照优先级排序</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709100256718.png" alt="image-20210709100256718" /></p><ol start="4"><li>按照优先级次序依次执行</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709095828532.png" alt="image-20210709095828532" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709100124077.png" alt="image-20210709100124077" /></p><p>上述过程在<strong>初始化创建其他组件之前</strong>执行，在<strong>BeanDefinitionRegistryPostProcessor</strong>之后执行。</p>        <h2 id="beandefinitionregistrypostprocessor"   >          <a href="#beandefinitionregistrypostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beandefinitionregistrypostprocessor"></a> BeanDefinitionRegistryPostProcessor</h2>      <p><strong>BeanDefinitionRegistryPostProcessor</strong>继承自<strong>BeanFactoryPostProcessor</strong>。其在所有bean定义信息<strong>将要被加载，且bean实例还未创建</strong>时执行，因此其在<code>BeanFactoryPostProcessor</code>的方法之前执行。作用：<strong>利用传入的BeanDefinitionRegistry给容器中再添加一些组件</strong>。</p><p>每个<code>BeanDefinitionRegistryPostProcessor</code>接口的实现类都需要实现<code>postProcessBeanDefinitionRegistry()</code>方法和<code>postProcessBeanFactory()</code>方法，执行顺序：先前者再后者。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanDefinitionRegistryProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 首先执行</span></span><br><span class="line">        <span class="comment">// registry: bean定义信息的保存中心</span></span><br><span class="line">        <span class="comment">// BeanFactory就是按照BeanDefinitionRegistry中保存的每一个bean定义信息创建bean实例</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeanDefinitionRegistry ... bean的数量：&quot;</span> + registry.getBeanDefinitionCount());</span><br><span class="line"></span><br><span class="line">        RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(Color.class);</span><br><span class="line">        <span class="comment">// 二者效果相同↑</span></span><br><span class="line">        <span class="comment">//AbstractBeanDefinition rootBeanDefinition = BeanDefinitionBuilder.rootBeanDefinition(Color.class).getBeanDefinition();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将bean的定义信息保存到BeanDefinitionRegistry中，在后续被BeanFactory获取到定义信息并创建对象</span></span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;newBean&quot;</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 其次执行</span></span><br><span class="line">        <span class="comment">// 可以对beanFactory进行一些修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeanFactory ... bean的数量：&quot;</span> + beanFactory.getBeanDefinitionCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="beandefinitionregistrypostprocessor执行流程源码分析"   >          <a href="#beandefinitionregistrypostprocessor执行流程源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beandefinitionregistrypostprocessor执行流程源码分析"></a> BeanDefinitionRegistryPostProcessor执行流程源码分析</h3>      <ol><li>在<code>refresh()</code>方法中调用<code>invokeBeanFactoryPostProcessors()</code>：</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210705205828372.png" alt="image-20210705205828372" /></p><ol start="2"><li>在其内的方法栈中先按照类型获取到<code>postProcessorNames</code></li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709110018151.png" alt="image-20210709110018151" /></p><ol start="3"><li>之后同样按照优先级依次执行<code>invokeBeanDefinitionRegistryPostProcessors()</code>（红色框）</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709110448115.png" alt="image-20210709110448115" /></p><p><code>invokeBeanDefinitionRegistryPostProcessors()</code>:</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709110356211.png" alt="image-20210709110356211" /></p><ol start="4"><li>执行完<code>invokeBeanDefinitionRegistryPostProcessors()</code>后再执行<code>invokeBeanFactoryPostProcessors()</code>（黄色框）</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709110448115.png" alt="image-20210709110448115" /></p><p><code>invokeBeanFactoryPostProcessors()</code>:</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image-20210709110615151.png" alt="image-20210709110615151" /></p><p><strong>注意：上述过程均在BeanFactoryPostProcessor组件的方法执行前执行</strong>。</p>        <h3 id="其与beanfactorypostprocessor执行时机对比"   >          <a href="#其与beanfactorypostprocessor执行时机对比" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其与beanfactorypostprocessor执行时机对比"></a> 其与BeanFactoryPostProcessor执行时机对比</h3>      <p>首先从容器中获取到所有的<code>BeanDefinitionRegistryPostProcessor</code>组件，依次触发其<code>postProcessBeanDefinitionRegistry()</code>方法，再触发<code>postProcessBeanFactory()</code>。</p><p>之后再从容器中找到 <code>BeanFactoryPostProcessor</code>，并执行其<code>postProcessBeanFactory()</code>。</p><p>即执行顺序：</p><ul><li><code>BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry()</code></li><li><code>BeanDefinitionRegistryPostProcessor.postProcessBeanFactory()</code></li><li><code>BeanFactoryPostProcessor.postProcessBeanFactory()</code></li></ul>        <h2 id="aware"   >          <a href="#aware" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aware"></a> Aware</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A marker superinterface indicating that a bean is eligible to be notified by the</span></span><br><span class="line"><span class="comment"> * Spring container of a particular framework object through a callback-style method.</span></span><br><span class="line"><span class="comment"> * The actual method signature is determined by individual subinterfaces but should</span></span><br><span class="line"><span class="comment"> * typically consist of just one void-returning method that accepts a single argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Aware接口有若干继承的接口，命名格式为xxxAware：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630101718020.png" alt="image-20210630101718020" /></p><p>开发人员自定义的组件若想使用<strong>Spring底层的一些组件</strong>（如ApplicationContext、BeanFactory等），只需要实现相应的<strong>xxxAware</strong>（如ApplicationContextAware、BeanFactoryAware）接口，这些接口均继承自Aware接口，其特有的方法会以<strong>callback-style</strong>的方式被容器中对应的<strong>xxxAwareProcessor</strong>组件调用。</p><p>每个Aware接口实现类都对应了一个xxxAwareProcessor类（如ApplicationContextAware对应ApplicationContextAwareProcessor），该Processor类负责在容器中创建组件后（初始化之前）以<strong>回调的风格</strong>调用xxxAware实现类的特定方法（每个xxxAware实现类都有其特有的方法，功能都不同）。容器在逐一注册bean时，若发现某个bean实现了某个Aware接口，就会在容器中注册相应的xxxAwareProcessor类组件，让其负责回调该bean中实现的xxxAware接口的方法。</p><p>例如：<strong>ApplicationContextAware</strong>接口对应了一个<strong>ApplicationContextAwareProcessor</strong>类：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630102625001.png" alt="image-20210630102625001" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630103554590.png" alt="image-20210630103554590" /></p><p>若开发人员自定义的某个bean（如下图中BookDao类）实现了<code>ApplicationContextAware</code>接口的<code>setApplicationContext(ApplicationContext applicationContext)</code>方法，则在容器加载<code>BookDao</code>类时，会根据其实现的<code>ApplicationContextAware</code>接口动态注册一个<code>ApplicationContextAwareProcessor</code>类。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630103106864.png" alt="image-20210630103106864" /></p><p>IoC容器在执行到方法栈<code>AbstractAutowireCapableBeanFactory.java</code>时，会遍历得到容器中所有的<code>BeanPostProcessor</code>，并一执行<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization()</code>方法，将bean对象逐一经过每个<code>BeanPostProcessor</code>处理器，此时会调用：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210629164433894-1625020601639.png" alt="image-20210629164433894" /></p><p><code>ApplicationContextAwareProcessor</code>类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210629192447682.png" alt="image-20210629192447682" /></p><p>每个bean在进入该方法后都会判断是否符合黄色框中接口的实现类，若符合（代表实现了xxxAware接口），则会执行<code>invokeAwareInterfaces()</code>方法，根据其实现的接口类型调用相应的方法设置相应的容器组件（红色框）。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630103302320.png" alt="image-20210630103302320" /> 注意：在创建bean之前调用的invokeAwareMethods()方法（绿色框）内只会调用三个特殊的Aware接口实现类的方法，其他的Aware接口并不会在此执行，只能通过创建相应xxxAwareProcessor的方式回调执行相应方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630214340913.png" alt="image-20210630214340913" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/image-20210630213635404.png" alt="image-20210630213635404" /></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 注解驱动开发</title>
      <link href="2021/06/25/%E3%80%90Spring%E3%80%91Spring5-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>2021/06/25/%E3%80%90Spring%E3%80%91Spring5-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629094903500.png" alt="image-20210629094903500" /></p><p>本文将详细介绍Spring5注解驱动开发的细节。其中Spring AOP的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h2 id="ioc容器"   >          <a href="#ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ioc容器"></a> IoC容器</h2>      <p>导入maven依赖</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>IoC容器部分案例汇总：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span> <span class="comment">// 导入外部资源文件</span></span><br><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span> <span class="comment">// 满足当前条件，这个类中配置的所有bean注册才能生效</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">// prototype：多实例的，singleton：单实例的</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(initMethod = <span class="string">&quot;init&quot;</span>, destroyMethod = <span class="string">&quot;destroy&quot;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 外部无论对配置类中的该组件注册方法调用多少次，获得的都是之前注册在容器中的单实例对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>使用<code>AnnotationConfigApplicationContext</code>类获取IoC容器中的组件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载配置类 SpringConfig</span></span><br><span class="line">    ApplicationContext context</span><br><span class="line">        = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    </span><br><span class="line">    String[] beanDefinitionNames = context.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : beanDefinitionNames) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    User user = context.getBean(User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    Object studentFactoryBean = context.getBean(<span class="string">&quot;studentFactoryBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bean的类型： &quot;</span> + studentFactoryBean.getClass()); <span class="comment">//返回的是Student类对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="configuration"   >          <a href="#configuration" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#configuration"></a> @Configuration</h3>      <p>在一个类上添加@Configuration注解，则该类就将作为Spring的配置类，可在其中注册组件。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(initMethod = <span class="string">&quot;init&quot;</span>, destroyMethod = <span class="string">&quot;destroy&quot;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="组件注册"   >          <a href="#组件注册" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件注册"></a> 组件注册</h2>      <p>在Spring IoC容器中注册组件有三种方法</p><ul><li><code>@Bean</code>：编写相应方法返回组件（可用于导入的第三方包中的组件）</li><li><code>@ComponentScan</code>：包扫描+组件标注注解</li><li><code>@Import</code>：调用无参构造快速导入组件（可用于导入的第三方包中的组件）</li></ul>        <h3 id="bean在springconfig类里编写相应方法返回组件"   >          <a href="#bean在springconfig类里编写相应方法返回组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean在springconfig类里编写相应方法返回组件"></a> @Bean：在SpringConfig类里编写相应方法返回组件</h3>      <p>方法返回值类型为组件类型，方法名为默认组件id，也可以在<code>@Bean()</code>中自定义组件id</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="componentscan在springconfig类上添加包扫描"   >          <a href="#componentscan在springconfig类上添加包扫描" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#componentscan在springconfig类上添加包扫描"></a> @ComponentScan：在SpringConfig类上添加包扫描</h3>      <p>指定<strong>排除</strong>哪些组件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></div></figure><p>指定<strong>包含</strong>哪些组件（注意：需要设置<code>useDefaultFilters = false</code>）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value=&quot;com.zhao&quot;, includeFilters=&#123;</span></span><br><span class="line"><span class="meta">        @Filter(type= FilterType.ANNOTATION,classes=&#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;, useDefaultFilters = false)</span></span><br></pre></td></tr></table></div></figure><p>若想指定多个<code>@ComponentScan</code>，可以使用<code>@ComponentScans</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></div></figure>        <h3 id="filter组件注册过滤器"   >          <a href="#filter组件注册过滤器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filter组件注册过滤器"></a> @Filter：组件注册过滤器</h3>      <p><code>@Filter</code>可以指定的类型：</p><ul><li><code>FilterType.ANNOTATION</code>：过滤指定的注解</li><li><code>FilterType.ASSIGNABLE_TYPE</code>：过滤指定的类</li><li><code>FilterType.CUSTOM</code>：自定义过滤器类，指定包下的所有类都会经过该过滤器类，并判断是否需要被过滤</li></ul><p><code>FilterType.CUSTOM</code>需要传入一个自定义过滤器类<code>MyTypeFilter</code>，其需要实现<code>TypeFilter</code>接口的方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义Filter，每个自定义组件的信息都会被该方法获取，再判断是否过滤掉该组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader：读取到的当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory：可以获取到其他任何类信息的工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前类的注解信息</span></span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">// 获取当前扫描的类信息</span></span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">// 获取当前类资源信息（类路径等）</span></span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&gt; &quot;</span> + className);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;er&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="import快速导入组件"   >          <a href="#import快速导入组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#import快速导入组件"></a> @Import：快速导入组件</h3>      <ol><li><code>@Import(xxx.class</code>)：注册xxx类，id默认是全类名</li><li><code>@Import(ImportSelector)</code>：实现<code>ImportSelector</code>接口，在其方法中返回需要注册的组件全类名<strong>数组</strong></li><li><code>@Import(ImportBeanDefinitionRegistrar)</code>：实现<code>ImportBeanDefinitionRegistrar</code>接口，在其方法中调用<code>BeanDefinitionRegistry</code>类对象的<code>registerBeanDefinition()</code>方法手动注册组件（<strong>详细源码见【Spring】Spring5源码</strong>）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>ImportSelector</code>接口实现类：<code>MyImportSelector</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法返回的全类名将被注册到容器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata：当前标注Import注解的类（即SpringConfig类）的所有注解信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值就是要导入到容器中的组件全类名，不能返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">// 返回要导入到容器中的组件全类名，方法不能返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.zhao.bean.Student&quot;</span>, <span class="string">&quot;com.zhao.bean.User&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>ImportBeanDefinitionRegistrar</code>接口实现类<code>MyImportBeanDefinitionRegistrar</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现registerBeanDefinitions接口以手动注册bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment">     *                把所有要添加到容器中的bean调用registry.registerBeanDefinition()手动注册类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> definition = registry.containsBeanDefinition(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">            <span class="comment">// 指定Bean定义信息（bean类型，作用域等）</span></span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(Student.class);</span><br><span class="line">            <span class="comment">// 注册一个bean，指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;student&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="scope设置组件作用域"   >          <a href="#scope设置组件作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#scope设置组件作用域"></a> @Scope：设置组件作用域</h3>      <p><code>@Scope</code>常用的两种作用域：</p><ul><li><strong>singleton</strong>：单实例（默认值）。IoC容器<strong>启动时就会</strong>调用方法创建对象到IoC容器中，之后获取就直接从容器中拿（map.get()）。关闭工厂 时，所有的对象都会销毁。</li><li><strong>prototype</strong>：多实例。IoC容器启动时<strong>不会</strong>调用方法创建对象到IoC容器中，每次获取的时候才会调用方法创建对象。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> </span><br><span class="line"><span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="lazy懒加载"   >          <a href="#lazy懒加载" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lazy懒加载"></a> @Lazy：懒加载</h3>      <p>单实例bean默认在容器启动时就创建对象，而使用了@Lazy后，在容器启动时并不会创建对象，而会等到第一次获取bean时才创建对象并初始化。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="conditional按照一定条件进行判断满足条件的给容器中注册bean"   >          <a href="#conditional按照一定条件进行判断满足条件的给容器中注册bean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#conditional按照一定条件进行判断满足条件的给容器中注册bean"></a> @Conditional：按照一定条件进行判断，满足条件的给容器中注册bean</h3>      <p><strong>在方法上添加@Conditional</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>需要实现Condition接口的matches(ConditionContext context, AnnotatedTypeMetadata metadata)方法。当前组件只有满足该条件才会被注册</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件判断是否注册组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context：判断条件能否使用的上下文（环境）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadata：标记了<span class="doctag">@Condition</span>注解的注释信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true: 注册  false：不注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到ioc使用的工厂</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        <span class="comment">// 获取类加载器</span></span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        <span class="comment">// 获取当前环境信息</span></span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        <span class="comment">// 获取到bean定义的注册类，所有bean的定义都在这里注册</span></span><br><span class="line">        BeanDefinitionRegistry registry = context.getRegistry();</span><br><span class="line"></span><br><span class="line">        String property = environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> property.contains(<span class="string">&quot;Windows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>在配置类上添加@Conditional</strong></p><p>满足条件，这个类中配置的所有bean注册才能生效</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="使用factorybean注册组件"   >          <a href="#使用factorybean注册组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用factorybean注册组件"></a> 使用FactoryBean注册组件</h3>      <p>在<code>Spring</code>和其他框架整合时，大量使用<code>FactoryBean</code>注册组件。</p><ol><li>创建<code>FactoryBean</code>接口的实现类<code>StudentFactoryBean</code>：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个Student对象，该对象会添加到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在配置类中声明该工厂类对象</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>获取<code>FactoryBean</code>调用<code>getObject()</code>创建的对象（并非<code>FactoryBean</code>组件，而是其内生产的组件）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext  context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">Object studentFactoryBean = context.getBean(<span class="string">&quot;studentFactoryBean&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;bean的类型： &quot;</span> + studentFactoryBean.getClass()); <span class="comment">//返回的是Student类对象</span></span><br></pre></td></tr></table></div></figure><p>若想获取<code>FactoryBean</code>组件，需要：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object studentFactoryBean = context.getBean(<span class="string">&quot;&amp;studentFactoryBean&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="组件注册小结"   >          <a href="#组件注册小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件注册小结"></a> 组件注册小结</h3>      <p>组件注册相关注解使用汇总案例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629153052661.png" alt="image-20210629153052661" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span> <span class="comment">// 导入外部资源文件</span></span><br><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span> <span class="comment">// 满足当前条件，这个类中配置的所有bean注册才能生效</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">// prototype：多实例的，singleton：单实例的</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中在<code>@Import</code>、<code>@Filter</code>、<code>@Conditional</code>注解中指定的类对象均实现了特定的接口，并会在容器加载时调用这些接口实现类的指定方法，从而使得不同的注解实现不同的效果（注册bean、过滤、判断条件等）。</p>        <h2 id="生命周期"   >          <a href="#生命周期" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h2>      <p>生命周期 ：从对象创建到对象销毁的过程。bean 的生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p><ol><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>把 bean 实例传递给<strong>后置处理器</strong>的方法 <code>postProcessBeforeInitialization</code></li><li>调用 bean 的<strong>初始化</strong>的方法（需要在配置初始化方法<code>init-method</code>）</li><li>把 bean 实例传递给<strong>后置处理器</strong>的方法 <code>postProcessAfterInitialization</code></li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的<strong>销毁</strong>方法（需要配置销毁的方法<code>destroy-method</code>）</li></ol><p>整个生命周期中，3和5由自定义的<strong>后置处理器BeanPostProcessor</strong>实现；4和7由自定义<strong>初始化和销毁方法</strong>实现；其余阶段默认由Spring容器完成。</p><p>大致流程：</p><ul><li>constructor构造器执行</li><li>set方法执行</li><li>BeanPostProcessor.postProcessBeforeInitialization方法执行</li><li>init-method执行</li><li>BeanPostProcessor.postProcessAfterInitialization方法执行</li><li>destroy-method执行</li></ul><p>补充：在开启AOP功能后，容器中会注册一个特殊的后置处理器：<strong>AnnotationAwareAspectJAutoProxyCreator</strong>，该处理器会在每个bean<strong>实例化的前后</strong>进行拦截，将带有切入点的bean包装成代理对象加入到容器中，该过程在上述描述的<strong>1-6步骤前后</strong>执行。</p>        <h3 id="自定义初始化和销毁方法"   >          <a href="#自定义初始化和销毁方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义初始化和销毁方法"></a> 自定义初始化和销毁方法</h3>      <p>bean的生命周期由容器管理，可以自定义<strong>初始化</strong>和<strong>销毁</strong>方法：</p><ul><li>方式一：通过<code>@Bean</code>注解指定<code>initMethod</code>和<code>destroyMethod</code></li><li>方式二：通过让bean实现<code>InitializingBean</code>定义初始化逻辑和<code>DisposableBean</code>定义销毁逻辑</li><li>方式三：使用JSR250中<code>@PostConstruct</code>和<code>@PreDestroy</code>注解</li></ul><p>初始化方法在bean对象<strong>创建好并赋值后被调用</strong>，销毁方法在对象被销毁前被调用。</p><p>销毁时：</p><ul><li>单实例：容器关闭时销毁</li><li>多实例：容器不会管理这个bean，容器不会调用销毁方法，需要手动调用</li></ul>        <h4 id="方式一bean注解指定initmethod和destroymethod"   >          <a href="#方式一bean注解指定initmethod和destroymethod" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一bean注解指定initmethod和destroymethod"></a> 方式一：@Bean注解指定initMethod和destroyMethod</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfLifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User destory ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式二bean实现initializingbean和disposablebean接口"   >          <a href="#方式二bean实现initializingbean和disposablebean接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二bean实现initializingbean和disposablebean接口"></a> 方式二：bean实现InitializingBean和DisposableBean接口</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat destory ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat afterPropertiesSet ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.zhao.bean&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfLifeCycle</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式三使用jsr250中postconstruct和predestroy注解"   >          <a href="#方式三使用jsr250中postconstruct和predestroy注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三使用jsr250中postconstruct和predestroy注解"></a> 方式三：使用JSR250中@PostConstruct和@PreDestroy注解</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@PostConstruct</code>和<code>@PreDestroy</code>的注解信息会被<code>InitDestroyAnnotationBeanPostProcessor</code>获取到，并据此执行相应的初始化和销毁方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194708129.png" alt="image-20210629194708129" /></p>        <h3 id="后置处理器-beanpostprocessor"   >          <a href="#后置处理器-beanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#后置处理器-beanpostprocessor"></a> 后置处理器 BeanPostProcessor</h3>      <p><code>BeanPostProcessor</code>接口用于在bean的<strong>初始化前后</strong>进行一些处理工作：</p><ul><li><code>postProcessBeforeInitialization()</code>：在初始化方法之前工作</li><li><code>postProcessAfterInitialization()</code>：在初始化方法之后工作</li></ul><p>自定义后置处理器实现<code>BeanPostProcessor</code>的方法，并将其注册到容器中。之后所有的bean对象在初始化方法前后都会进入该类的方法中执行相应处理。即使一些bean没有自定义初始化方法，也不会影响后置处理器方法的执行。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// bean：当前被处理的bean对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeforeInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessAfterInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="beanpostprocessor-执行流程源码分析"   >          <a href="#beanpostprocessor-执行流程源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor-执行流程源码分析"></a> BeanPostProcessor 执行流程源码分析</h3>      <ol><li>容器调用bean的构造方法创建对象</li><li><code>populateBean()</code>：容器调用bean的set方法为bean对象的属性赋值（红色框）</li><li><code>initializeBean()</code>：容器为bean做初始化操作（黄色框）</li></ol><p>方法栈位置：<code>AbstractAutowireCapableBeanFactory.java</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629163559536.png" alt="image-20210629163559536" /></p><p>======&gt; 进入黄色框的<code>initializeBean()</code>方法：</p><ul><li>执行<code>invokeAwareMethods()</code>方法（绿色框）</li><li>执行<code>applyBeanPostProcessorsBeforeInitialization()</code>方法（红色框）</li><li>执行<code>invokeInitMethods()</code>方法完成初始化（黄色框）</li><li>执行<code>applyBeanPostProcessorsAfterInitialization()</code>方法（红色框）</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210630214340913.png" alt="image-20210630214340913" /></p><p>======&gt; 进入红色框的<code>applyBeanPostProcessorsBeforeInitialization()</code>方法：</p><p>遍历得到容器中所有的<code>BeanPostProcessor</code>，并一执行<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization()</code>方法，将bean对象逐一经过每个<code>BeanPostProcessor</code>处理器。一旦返回null，跳出for循环后续不再执行。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629164433894.png" alt="image-20210629164433894" /></p>        <h3 id="spring底层对beanpostprocessor的应用"   >          <a href="#spring底层对beanpostprocessor的应用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring底层对beanpostprocessor的应用"></a> Spring底层对BeanPostProcessor的应用</h3>      <p>使用<code>BeanPostProcessor</code>接口的实现类，可以实现：bean赋值、注入其他组件、<code>@Autowired</code>属性注入、生命周期注解功能等。</p><p><code>BeanPostProcessor</code>接口的实现类</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629190629663.png" alt="image-20210629190629663" /></p>        <h4 id="applicationcontextawareprocessor"   >          <a href="#applicationcontextawareprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#applicationcontextawareprocessor"></a> ApplicationContextAwareProcessor</h4>      <p><code>ApplicationContextAwareProcessor</code>是<code>BeanPostProcessor</code>的一个实现类。其原理同上述自定义的<code>MyBeanPostProcessor</code>类一样，都会在如下for循环中被获取到，并执行其实现的<code>postProcessBeforeInitialization()</code>方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629164433894.png" alt="image-20210629164433894" /></p><p><code>ApplicationContextAwareProcessor</code>类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629192447682.png" alt="image-20210629192447682" /></p><p>每个bean在进入该方法后都会判断是否符合黄色框中接口的实现类，若符合，则会执行<code>invokeAwareInterfaces()</code>方法，根据其实现的接口类型调用相应的方法设置相应的容器上下文属性。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629192653559.png" alt="image-20210629192653559" /></p>        <h4 id="autowiredannotationbeanpostprocessor"   >          <a href="#autowiredannotationbeanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autowiredannotationbeanpostprocessor"></a> AutowiredAnnotationBeanPostProcessor</h4>      <p>实现@Autowired自动注入功能。在对象创建完后，获取被<code>@Autowired</code>注解修饰的属性，从而实现属性注入。</p>        <h4 id="beanvalidationpostprocessor"   >          <a href="#beanvalidationpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanvalidationpostprocessor"></a> BeanValidationPostProcessor</h4>      <p><code>BeanValidationPostProcessor</code>常用在JavaWeb中用于<strong>数据校验</strong>。</p><p>其类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194216136.png" alt="image-20210629194216136" /></p><p>在其<code>doValidate()</code>方法中提供了数据校验的功能。因此可以在bean初始化前后完成校验工作。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194247408.png" alt="image-20210629194247408" /></p>        <h4 id="initdestroyannotationbeanpostprocessor"   >          <a href="#initdestroyannotationbeanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#initdestroyannotationbeanpostprocessor"></a> InitDestroyAnnotationBeanPostProcessor</h4>      <p><code>InitDestroyAnnotationBeanPostProcessor</code>用于获取bean对象的<code>@PostConstruct</code>和<code>@PreDestroy</code>注解信息，并据此执行相应的初始化和销毁方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194708129.png" alt="image-20210629194708129" /></p>        <h3 id="beanpostprocessor总结"   >          <a href="#beanpostprocessor总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor总结"></a> BeanPostProcessor总结</h3>      <p>每个bean对象在被注册到容器的过程中，会在执行<code>invokeInitMethods()</code>方法初始化bean之前，执行用户自定义注册的<code>BeanPostProcessor</code>实现类和容器默认注册的<code>BeanPostProcessor</code>实现类的<code>postProcessBeforeInitialization()</code>方法。不同实现类的<code>postProcessBeforeInitialization()</code>方法功能不同，可以自定义地为其设置不同的功能，包括输出日志、添加上下文容器、添加环境属性、添加资源解析器等。</p><p>若想让某些bean获得上述功能，只需要该类实现<code>BeanPostProcessor</code>接口的<code>postProcessBeforeInitialization()</code>方法即可。</p><p>使用<code>BeanPostProcessor</code>接口的实现类，可以实现：bean赋值、注入其他组件、<code>@Autowired</code>属性注入、生命周期注解功能等。</p>        <h2 id="组件属性赋值"   >          <a href="#组件属性赋值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件属性赋值"></a> 组件属性赋值</h2>              <h3 id="value"   >          <a href="#value" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#value"></a> @Value</h3>      <p>​@Value注解可以赋值的类型：</p><ul><li>基本数据类型值</li><li>SpEL：#{}，可以在其中进行数值运算</li><li>${}取出配置文件中的值（在运行环境变量里的值），读取配置文件时需要在配置类上添加注解<code>@PropertySource</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.phone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="组件自动装配"   >          <a href="#组件自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件自动装配"></a> 组件自动装配</h2>      <p>Spring利用依赖注入DI，完成对IoC容器中各个组件的依赖关系赋值。</p><p><strong>Spring提供的自动装配注解</strong>：</p><ul><li><code>@Autowired</code>：根据属性<strong>类型</strong>进行自动装配</li><li><code>@Qualifier</code>：根据属性<strong>名称</strong>进行自动装配</li><li><code>@Primary</code>：根据设置为<strong>默认首选</strong>的bean进行自动装配</li></ul><p>Java规范提供的注解：</p><ul><li><code>@Resource</code>：可以根据类型注入，也可以根据名称注入，但不支持<code>@Primary</code>和<code>@Autowired(required=false)</code></li><li><code>@Inject</code>：功能和<code>@Autowired</code>一样，没有<code>required=false</code>功能</li></ul>        <h3 id="autowired按照属性类型自动装配"   >          <a href="#autowired按照属性类型自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autowired按照属性类型自动装配"></a> @Autowired：按照属性类型自动装配</h3>      <p>如果找到多个相同类型的组件，再将<strong>属性的名称</strong>作为组件的id去容器中查找，若找不到指定名称的组件，则程序报错，此时可以添加<code>required=false</code>属性使得当前组件即使找不到程序也不会报错。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要添加set方法</span></span><br><span class="line">    <span class="meta">@Autowired(required=false)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@Autowired</code>也可以修饰方法、有参构造器、方法参数上。</p><p>有参构造器说明：若组件只有一个有参构造器，这个有参构造器的<code>@Autowired</code>可以省略，参数位置的组件仍然能从容器中获取。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰有参构造</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userDao = userDao;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userDao = userDao;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在配置类中使用<code>@Autowired</code>修饰方法参数（可以省略）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 或直接省略@Autowired</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="qualifier按照属性名称自动装配"   >          <a href="#qualifier按照属性名称自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#qualifier按照属性名称自动装配"></a> @Qualifier：按照属性名称自动装配</h3>      <p><code>@Qualifier</code>：根据对象<strong>名称</strong>进行装配，可以和<code>@Autowired</code> 一起使用（目的在于区别同一接口下有多个实现类）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要添加 set 方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userDao1&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="primary根据设置为默认首选的bean进行自动装配"   >          <a href="#primary根据设置为默认首选的bean进行自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#primary根据设置为默认首选的bean进行自动装配"></a> @Primary：根据设置为默认首选的bean进行自动装配</h3>      <p>被<code>@Primary</code>注解修饰的bean会在自动装配时被设置为首选项。但也可以继续使用<code>@Qualifier</code>指定需要装配的bean。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary()</span></span><br><span class="line">    <span class="meta">@Bean(&quot;userDao1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Qualifier(value = &quot;userDao1&quot;) 不设置时默认注入@Primary()修饰的userDao1</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="profile根据环境动态注册组件"   >          <a href="#profile根据环境动态注册组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#profile根据环境动态注册组件"></a> @Profile：根据环境动态注册组件</h3>      <p><code>@Profile</code>可以指定组件在哪个运行环境下才能被注册到容器中，若不指定则任何环境都能注册这个组件。可用于在开发环境、测试环境和生产环境中动态地注册组件。</p><p>加了环境标识的组件，只有当这个环境被激活时才能注册到容器中。默认环境是<code>default</code>。没有添加<code>@Profile</code>的组件在任何环境下都会被注册。</p><p><code>@Profile</code>既可以修饰方法，又可以修饰配置类。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile(&quot;default&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Profile(&quot;develop&quot;)</span></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>激活环境的方式：</p><ul><li>在IDEA中设置<code>VM arguments：-Dspring.profiles.active=test</code></li><li>在代码中手动激活环境</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">context.getEnvironment().setActiveProfiles(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;dev&quot;</span>);</span><br><span class="line">context.register(SpringConfigOfPropertyValue.class);</span><br><span class="line">context.refresh();</span><br></pre></td></tr></table></div></figure>        <h2 id="aop"   >          <a href="#aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop"></a> AOP</h2>              <h3 id="aop-基本概念"   >          <a href="#aop-基本概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基本概念"></a> AOP 基本概念</h3>      <p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>Spring AOP的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/kuangstudyfffec70f-ce10-4ca2-a71b-dbc535b0e07c.png" alt="img" /></p><ul><li><p>面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率；</p></li><li><p>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能。</p></li><li><p>使用登录例子说明 AOP：</p></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/20200702135106266.png" alt="img" /></p>        <h3 id="aop-底层原理"   >          <a href="#aop-底层原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-底层原理"></a> <strong>AOP 底层原理</strong></h3>      <p>Spring AOP的底层原理分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>AOP 底层使用<strong>动态代理</strong> ，动态代理有两种情况：</p><p>第一种 有接口情况，使用<strong>JDK 动态代理</strong> ；创建<strong>接口实现类代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/20200702135134128.png" alt="在这里插入图片描述" /></p><p>第二种 没有接口情况，使用<strong>CGLIB 动态代理</strong>创建<strong>子类的代理对象</strong>，增强类的方法（该方法不需要实现接口，由CGLIB创建代理对象）<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/2020070213514980.png" alt="在这里插入图片描述" /></p>        <h3 id="aop-术语"   >          <a href="#aop-术语" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-术语"></a> AOP 术语</h3>      <ul><li>连接点（JointPoint）：类里面哪些方法可以被增强，这些方法称为连接点，每一个方法的每一个位置（开始位置，返回位置，异常位置等）都是一个连接点。</li><li><strong>切入点（PointCut）</strong>：切面通知执行的“地点”的定义，实际被真正增强的方法称为切入点。</li><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li><strong>切面（Aspect）</strong>：横切关注点被模块化的特殊对象。即，它是一个类。</li><li><strong>通知（Advice）</strong>：切面必须要完成的工作。即，它是类中的一个方法。包含前置通知，后置通知，环绕通知 ，异常通知和最终通知。</li><li>目标（Target）：被通知的对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210713170252235.png" alt="image-20210713170252235" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/kuangstudy7a512991-1651-44b4-afca-d09e12cbbe6f.png" alt="img" /></p>        <h3 id="aop-操作"   >          <a href="#aop-操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-操作"></a> AOP 操作</h3>      <p>采用<strong>动态代理</strong>的设计模式，在程序运行期间动态地将某段代码切入到指定方法（切入点）指定位置进行运行的编程方式。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>定义一个业务逻辑类（<code>MathCalculator</code>）。试图在业务逻辑运行的时候将日志进行打印（方法之前，方法运行结束，方法出现异常等）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>定义一个日志切面类（<code>LogAspects</code>），在切面类里需要动态感知<code>MathCalculator.div()</code>方法运行到什么阶段并执行相应通知方法。通知方法：</p><ul><li>前置通知（<code>@Before</code>）：在切入点（<code>PointCut</code>）运行之前运行</li><li>后置通知（<code>@After</code>）：在切入点运行结束之后运行（无论方法是否正常结束）</li><li>返回通知（<code>@AfterReturning</code>）：在切入点正常返回之后运行（异常不执行）</li><li>异常通知（<code>@AfterThrowing</code>）：在切入点出现异常之后运行</li><li>环绕通知（<code>@Around</code>）：动态代理的方式<strong>手动</strong>推进切入点运行（<code>joinPoint.procced()</code>），是最底层的通知，其可以实现上述四个通知效果</li></ul><p><strong>通知方法的执行顺序</strong>：（Spring 5的顺序与Spring 4有所不同）</p><ul><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法之前的代码</li><li>前置通知（<code>@Before</code>）</li><li>业务代码</li><li>返回通知（<code>@AfterReturning</code>）/ 若有异常，此时执行异常通知（<code>@AfterThrowing</code>）</li><li>后置通知（<code>@After</code>）</li><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法以及其之后的代码</li></ul><p>多个切面的情况下，先执行前置通知的后执行返回通知和后置通知，后执行前置通知的先执行返回通知和后置通知。类似方法栈先进后出。执行顺序由切面类的字母顺序排序，也可以通过<code>@Order(1)</code>设置优先级</p>        <h3 id="aop-使用案例"   >          <a href="#aop-使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-使用案例"></a> AOP 使用案例</h3>      <p>配置类需要<strong>添加@EnableAspectJAutoProxy以开启注解版的AOP自动代理。整个AOP就是从@EnableAspectJAutoProxy注解开始执行的。</strong>（Spring中有很多的<code>@EnableXXX</code>注解，其作用是代替xml文件中的一些配置开启某些功能）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigAOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将业务逻辑类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogsAspects <span class="title">logsAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogsAspects();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>切面类<code>LogsAspects</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogsAspects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽取公共的切入点表达式</span></span><br><span class="line">    <span class="comment">// 1. 本类可以引用</span></span><br><span class="line">    <span class="comment">// 2. 其他的切面类也可以引用（需要全类名）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(int com.zhao.aop.MathCalculator.div(int, int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs(); <span class="comment">// 方法参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知@Before.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知@After....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">// result: 方法返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知@AfterReturning.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知@AfterThrowing.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签名: &quot;</span> + proceedingJoinPoint.getSignature());</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕前置通知】.... &quot;</span>);</span><br><span class="line">            <span class="comment">//执行目标方法proceed</span></span><br><span class="line">            Object result = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕返回通知】.... &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕异常通知】.... &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕后置通知】.... &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOfAop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfigAOP.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器创建完成....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须从容器中获得bean才能启动AOP</span></span><br><span class="line">        MathCalculator bean = context.getBean(MathCalculator.class);</span><br><span class="line">        bean.div(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>控制台打印：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">签名: int com.zhao.aop.MathCalculator.div(int,int)</span><br><span class="line">【环绕前置通知】.... </span><br><span class="line">前置通知@Before.... </span><br><span class="line">div方法执行...</span><br><span class="line">返回通知@AfterReturning.... </span><br><span class="line">后置通知@After....</span><br><span class="line">【环绕返回通知】.... </span><br><span class="line">【环绕后置通知】...</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure>        <h2 id="声明式事务"   >          <a href="#声明式事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务"></a> 声明式事务</h2>              <h3 id="使用案例"   >          <a href="#使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用案例"></a> 使用案例</h3>      <ol><li>导入相关依赖：数据源、数据库驱动、SpringJDBC模块</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li><p>配置数据源、<strong>JdbcTemplate</strong>操作数据库(Spring提供的简化数据库操作的工具)</p></li><li><p>添加 <strong>@EnableTransactionManagement</strong> 注解开启<strong>基于注解的事务管理功能</strong></p></li><li><p>配置<strong>事务管理器</strong>来控制事务（事务管理器操作数据源，进行事务管理）</p></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向容器中注册数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向容器中注册事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>在类或方法上添加 <strong>@Transactional()</strong> 注解表明该方法需要添加事务</li></ol><ul><li>添加到类上，这个类里面所有的方法都添加事务</li><li>添加到方法上，只有这个方法添加事务</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(propagation = Propagation.REQUIRED)</span></span>&#123;</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="事务细节参数"   >          <a href="#事务细节参数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事务细节参数"></a> 事务细节参数</h3>      <ul><li><code>read-only</code>：设置事务为只读事务，不需要增删改操作。可以提高查询速度。</li><li><code>timeout</code>：超时，事务超出指定执行时长后自动终止并回滚。</li><li><code>isolation</code>：设置隔离级别</li></ul><p>运行时异常（非检查异常）发生时默认回滚，编译时异常（检查异常）默认不回滚</p><ul><li><code>rollBackFor</code>：可以让原来默认不回滚的异常回滚</li><li><code>noRollBackFor</code>：可以让原来默认回滚的异常不回滚</li></ul>        <h3 id="声明式事务传播特性"   >          <a href="#声明式事务传播特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务传播特性"></a> 声明式事务传播特性</h3>      <p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。Spring支持7种事务传播行为：</p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。（如果设置为required，则事务的其他属性继承于大事务）</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li><strong>propagation_required_new</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 <code>PROPAGATION_REQUIRED</code>，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p>        <h3 id="声明式事务原理"   >          <a href="#声明式事务原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务原理"></a> 声明式事务原理</h3>      <p><strong>@EnableTransactionManagement</strong> 注解向容器中添加<strong>AutoProxyRegistrar</strong>和<strong>ProxyTransactionManagementConfiguration</strong>组件，二者作用分别为：</p><ul><li><strong>AutoProxyRegistrar</strong>：类似于AOP中的<strong>AspectJAutoProxyRegistrar</strong>，用于向容器中注册<strong>InfrastructureAdvisorAutoProxyCreator</strong>组件（类似于AOP里的自动代理器，一种后置处理器）来为普通组件进行代理包装，创建<strong>代理对象</strong></li><li><strong>ProxyTransactionManagementConfiguration</strong>：用于注册<strong>事务增强器</strong>，该增强器内设置有事务拦截器，将在代理对象执行目标方法时进行拦截，并调用其<code>invoke()</code>方法，<strong>由事务管理器控制事务的提交与回滚</strong>。</li></ul><p>Spring事务原理与AOP原理十分相似，都包含有<strong>后置处理器</strong>和<strong>拦截器</strong>思想，在组件创建后包装出代理对象、在代理对象执行目标方法时进行拦截，使用事务管理器控制事务的提交与回滚。</p><p>详细的源码分析见文章<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 事务源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring MVC】SSM整合案例</title>
      <link href="2021/06/03/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/"/>
      <url>2021/06/03/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/kuangstudyfda8e4e5-ada1-4a2e-b5f5-ef679f7a85e8.png" alt="img" /></p>        <h2 id="maven-依赖"   >          <a href="#maven-依赖" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven-依赖"></a> Maven 依赖</h2>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--AspectJ 实现Spring AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--json--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--spring整合mybatis包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--谷歌图片验证码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--junit与spring整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--文件上传下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定maven编译环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>为避免资源导出问题可以添加以下代码（使得普通目录下的资源文件也能导出）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis-配置"   >          <a href="#mybatis-配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis-配置"></a> MyBatis 配置</h2>              <h3 id="mybatis-configxml"   >          <a href="#mybatis-configxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis-configxml"></a> mybatis-config.xml</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">                <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log4j&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰命名模式，将数据库字段与实体类进行转换--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhao.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">若在Spring中配置SqlSessionFactory时指定了</span></span><br><span class="line"><span class="comment">&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;</span></span><br><span class="line"><span class="comment">则此处就不需要指定每一个xml路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="log4jproperties"   >          <a href="#log4jproperties" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#log4jproperties"></a> log4j.properties</h3>      <figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ERROR, stdout</span></span><br><span class="line"><span class="comment"># MyBatis logging configuration...</span></span><br><span class="line"><span class="meta">log4j.logger.priv.zwh.mall.dao</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></div></figure>        <h3 id="databaseproperties"   >          <a href="#databaseproperties" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#databaseproperties"></a> database.properties</h3>      <figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 如果是MySQL8.0+,需要添加 &amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></div></figure>        <h2 id="spring-整合-mybatis"   >          <a href="#spring-整合-mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-整合-mybatis"></a> Spring 整合 MyBatis</h2>              <h3 id="applicationcontextxml"   >          <a href="#applicationcontextxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#applicationcontextxml"></a> applicationContext.xml</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--指定扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--关联数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置c3p0数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pooledDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入四个数据库原属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置连接池属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--================== 配置和MyBatis的整合=============== --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置Mybatis工厂，同时指定数据源，并与Mybatis完美整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pooledDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mybatis全局配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mybatis，mapper文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中, mapper代理开发使用Spring自动扫描Mybatis接口并装配（@Mapper） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描所有dao接口的实现，加入到ioc容器中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.zhao.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个可以执行批量的sqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ===============事务控制的配置 ================--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制住数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pooledDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.crud.service..*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoint&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务增强，事务如何切入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 所有方法都是事务方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以get开始的所有方法  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="spring-mvc-相关配置"   >          <a href="#spring-mvc-相关配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-相关配置"></a> Spring MVC 相关配置</h2>              <h3 id="springmvc-servletxml"   >          <a href="#springmvc-servletxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springmvc-servletxml"></a> springmvc-servlet.xml</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器，方便页面返回--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 两个标准配置  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源，否则静态资源无法找到对应的映射，会报错。将SpringMVC无法处理的请求交给Tomcat默认的Servlet处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动，</span></span><br><span class="line"><span class="comment">1. 映射动态请求</span></span><br><span class="line"><span class="comment">        在Spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">2. 支持SpringMVC更高级的一些功能，如JSR303校验，快捷的AJAX</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/img/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/img/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    defaultEncoding=&quot;UTF-8&quot; 是请求的编码格式，默认为iso-8859-1</span></span><br><span class="line"><span class="comment">    maxUploadSize=&quot;5400000&quot; 是允许上传文件的最大值，单位为字节</span></span><br><span class="line"><span class="comment">    uploadTempDir=&quot;fileUpload/temp&quot; 为上传文件的临时路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:defaultEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">p:maxUploadSize</span>=<span class="string">&quot;5400000&quot;</span> <span class="attr">p:uploadTempDir</span>=<span class="string">&quot;/img/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/root/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.interceptor.AdminInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="webxml"   >          <a href="#webxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#webxml"></a> web.xml</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载applicationContext.xml配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            classpath:applicationContext.xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.context.ContextLoaderListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--若在web.xml同级目录下存在dispatcherServlet-servlet.xml文件则不需在这里显式指定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 解决响应的乱码问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="测试"   >          <a href="#测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookMapper bookMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Books&gt; books = bookMapper.queryAllBook();</span><br><span class="line">        System.out.println(books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入controller控制器！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;helloController&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
          <category> MyBatis </category>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】AJAX</title>
      <link href="2021/06/03/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91AJAX/"/>
      <url>2021/06/03/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91AJAX/</url>
      
        <content type="html"><![CDATA[        <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>      <p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<strong>AJAX 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><p>传统的网页(即不用AJAX技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。而使用AJAX技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。使用AJAX，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>        <h2 id="jqueryajax"   >          <a href="#jqueryajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jqueryajax"></a> jQuery.ajax</h2>      <ul><li>AJAX的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery AJAX本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">       部分参数：</span><br><span class="line">              url：请求地址</span><br><span class="line">             type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">          headers：请求头</span><br><span class="line">             data：要发送的数据</span><br><span class="line">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">            <span class="keyword">async</span>：是否异步</span><br><span class="line">          timeout：设置请求超时时间（毫秒）</span><br><span class="line">       beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">         complete：完成之后执行的回调函数(全局)</span><br><span class="line">          success：成功之后执行的回调函数(全局)</span><br><span class="line">            error：失败之后执行的回调函数(全局)</span><br><span class="line">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</span><br><span class="line">         dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">            <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">           <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">         <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">          <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></div></figure><p>ajax常用参数：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://www.hzhuti.com&quot;</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data: &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;value&quot;</span> &#125;,    <span class="comment">//参数值</span></span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//请求方式</span></span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="使用案例"   >          <a href="#使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用案例"></a> 使用案例</h2>      <p>配置文件</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写一个AjaxController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan3&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>前端页面</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#content&quot;</span>).html(html);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring MVC】Spring MVC</title>
      <link href="2021/06/03/%E3%80%90SpringMVC%E3%80%91SpringMVC/"/>
      <url>2021/06/03/%E3%80%90SpringMVC%E3%80%91SpringMVC/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyfda8e4e5-ada1-4a2e-b5f5-ef679f7a85e8.png" alt="img" /></p>        <h2 id="回顾mvc"   >          <a href="#回顾mvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#回顾mvc"></a> 回顾MVC</h2>              <h3 id="什么是mvc"   >          <a href="#什么是mvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#什么是mvc"></a> 什么是MVC</h3>      <ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li><li>是将业务逻辑、数据、显示分离的方法来组织代码</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong></li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong></li></ul><p><strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy5989b959-a64d-4469-952f-d23699b0bad7.png" alt="img" /></p><span id="more"></span>        <h3 id="mvc框架要做哪些事"   >          <a href="#mvc框架要做哪些事" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mvc框架要做哪些事"></a> MVC框架要做哪些事</h3>      <ul><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求—调用相关的业务处理—封装响应数据</li><li>将响应的数据进行渲染 .jsp / html 等表示层数据</li></ul><p><strong>说明：</strong></p><p>常见的服务器端MVC框架有：Struts、Spring MVC、<span class="exturl"><a class="exturl__link"   href="http://ASP.NET" >ASP.NET</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p>        <h2 id="spring-mvc-简介"   >          <a href="#spring-mvc-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-简介"></a> Spring MVC 简介</h2>              <h3 id="概述"   >          <a href="#概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3>      <p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyfda8e4e5-ada1-4a2e-b5f5-ef679f7a85e8.png" alt="img" /></p><p><strong>SpringMVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</strong></p><p>查看官方文档：<span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" >https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>SpringMVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol>        <h3 id="中心控制器"   >          <a href="#中心控制器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#中心控制器"></a> 中心控制器</h3>      <p>Spring的web框架围绕<strong>DispatcherServlet</strong>[ 调度Servlet ] 设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的Controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样， <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyc49f3d6f-e0c6-4228-9bd7-6a40400c3bd4.png" alt="img" /></p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy00854e07-7eac-476c-a9dd-dcebb7ac0b89.png" alt="img" /></p>        <h3 id="spring-mvc-执行原理"   >          <a href="#spring-mvc-执行原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-mvc-执行原理"></a> Spring MVC 执行原理</h3>      <p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy0214fd0a-0df0-4910-a467-5b7d61712868.png" alt="img" /></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>假设请求的url为 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/SpringMVC/hello" >http://localhost:8080/SpringMVC/hello</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <strong>该url可拆分成三部分：</strong></p><ul><li><a href="http://localhost:8080%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%9F%E5%90%8D/">http://localhost:8080服务器域名</a></li><li>SpringMVC部署在服务器上的web站点（项目名）</li><li>hello表示控制器</li></ul><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p><ul><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ul>        <h2 id="hello-spring-mvc"   >          <a href="#hello-spring-mvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hello-spring-mvc"></a> Hello Spring MVC</h2>              <h3 id="配置webxml"   >          <a href="#配置webxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置webxml"></a> 配置web.xml</h3>      <p>注册DispatcherServlet</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果不指定，默认去找/WEB-INF/xxx-servlet.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1，在web服务器启动时优先启动，启动顺序，数字越小，启动越早--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- / 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 解决响应的乱码问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>注意点</strong>：</p><ul><li><code>/</code> 不会匹配 .jsp</li><li><code>/*</code> 匹配所有的请求，包括 .jsp</li></ul><p><code>*.jsp</code> 由Tomcat负责处理，不需要SpringMVC拦截处理。因此常用 <code>/</code></p>        <h3 id="原因分析"   >          <a href="#原因分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原因分析"></a> 原因分析</h3>      <p>所有JavaWeb项目里的web.xml都继承自Tomcat的父web.xml，其内配置了一个默认的<strong>DefaultServlet</strong>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>DefaultServlet</strong>是Tomcat用于处理静态资源（除了jsp和servlet之外都是静态资源）的处理器，当<strong>DefaultServlet</strong>判断得知url中访问的是静态资源文件时，就会直接去服务器目录下找该资源是否存在。其配置了<code>url-pattern：/</code></p><p>而SpringMVC中我们同样配置了<code>url-pattern：/</code>，因此会覆盖Tomcat中的DefaultServlet，使得静态资源不能被Tomcat里的DefaultServlet所处理，只能被我们配置的DispatcherServlet拦截处理。静态资源被DispatcherServlet拦截时会判断哪个方法的<code>@RequestMapping</code>是这个静态资源，显然并不能找到，因此无法正常显示。</p><p><code>*.jsp</code> 处理问题：Tomcat里的web.xml中配置了对jsp文件的处理，该处理器将处理jsp文件：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>若我们在SpringMVC配置中只添加<code>url-pattern：/</code>而没有添加<code>url-pattern：*.jsp</code>，则将只覆盖父web.xml里的<code>url-pattern：/</code>（处理静态资源），并没有覆盖<code>url-pattern：*.jsp</code>。因此这种情况下，遇到jsp文件，则由Tomcat里的默认处理器处理；遇到普通请求，由DispatcherServlet处理；遇到静态资源，因覆盖了Tomcat，则无法处理。</p><p>若配置<code>url-pattern：/*</code>，则所有请求资源都将被拦截处理。</p><p>因此，若想在使用Spring MVC的<strong>DispatcherServlet</strong>的同时仍能处理静态资源，则需要添加：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><p>其能将Spring MVC无法处理的请求交给Tomcat默认的Servlet处理，让Spring MVC不处理静态资源。</p>        <h3 id="添加-spring-mvc-配置文件"   >          <a href="#添加-spring-mvc-配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#添加-spring-mvc-配置文件"></a> 添加 Spring MVC 配置文件</h3>      <ul><li>让IoC的注解生效</li><li>静态资源过滤 ：HTML，JS ，CSS ，图片，视频 ……</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><p>在resource目录下添加SpringMVC的配置文件，名称：<strong>springmvc-servlet.xml</strong> : [servletname]-servlet.xml。配置的形式与Spring容器配置基本类似，为了支持基于注解的IoC，设置了自动扫描包的功能，具体配置信息如下：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IoC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源，否则静态资源无法找到对应的映射，会报错。将SpringMVC无法处理的请求交给Tomcat默认的Servlet处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动，</span></span><br><span class="line"><span class="comment">1. 映射动态请求</span></span><br><span class="line"><span class="comment">        在Spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">2. 支持SpringMVC更高级的一些功能，如JSR303校验，快捷的AJAX</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p><code>&lt;mvc:default-servlet-handler /&gt;</code>将在SpringMVC上下文中定义一个<code>DefaultServletHttpRequestHandle</code>：</p><ul><li>它会对进入DispatcherSevlet的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的Servlet处理（将SpringMVC无法处理的请求交给Tomcat默认的Servlet处理）</li><li>会<strong>过滤静态资源文件</strong>：如果不是静态资源的请求，才由DispatcherServlet继续处理。</li></ul>        <h3 id="创建-controller"   >          <a href="#创建-controller" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建-controller"></a> 创建 Controller</h3>      <p>编写一个Java控制类： com.zhao.controller.HelloController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li><code>@Controller</code>是为了让Spring IoC容器初始化时自动扫描到；</li><li><code>@RequestMapping</code>是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是<code>/HelloController/hello</code>；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称<code>hello</code>，加上配置文件中的前后缀变成<code>WEB-INF/jsp/hello.jsp</code></li></ul>        <h3 id="创建视图层"   >          <a href="#创建视图层" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建视图层"></a> 创建视图层</h3>      <p>在WEB-INF/ jsp目录中创建hello.jsp，视图可以直接取出并展示从Controller带回的信息；可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;SpringMVC&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>      <p>实现步骤：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>创建对应的控制类Controller</li><li>最后完善前端视图和Controller之间的对应</li><li>测试运行调试.</li></ol><p>使用SpringMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>        <h2 id="常用注解"   >          <a href="#常用注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用注解"></a> 常用注解</h2>              <h3 id="汇总"   >          <a href="#汇总" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#汇总"></a> 汇总</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应的请求必须为POST，且要带上名为username的参数，不带就报错</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, method = &#123;RequestMethod.POST&#125;, params = &#123;&quot;username&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestParam(value = &quot;username&quot;, required = false, defaultValue = &quot;zhangsan&quot;)</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false, defaultValue = &quot; &quot;)</span> String userAgent, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@CookieValue(&quot;JSESSIONID&quot;, required = false, defaultValue = &quot; &quot;)</span> String jid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="requestmapping"   >          <a href="#requestmapping" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#requestmapping"></a> @RequestMapping</h3>      <p><code>@RequestMapping</code>用于请求映射，执行匹配的方法</p><p><strong>method</strong>参数：限定请求方式</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求才能访问到</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>params</strong>参数：解析发送请求里的参数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送的请求中必须带上名为username的参数，不带就报错</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;, params = &#123;&quot;username&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>Ant风格路径匹配</strong></p><p>模糊和精确多个匹配情况下，精确匹配优先</p><ul><li>？：匹配一个字符，0个和多个都不行</li><li>*：匹配任意多个字符，优先级低于?  也可以匹配一层路径。</li><li>**：匹配任意层路径，优先级低于*</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/antTest0?&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/antTest0*&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/a*/antTest0*&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/a/*antTest0*&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/**/antTest0&quot;)</span></span><br></pre></td></tr></table></div></figure>        <h3 id="requestparam"   >          <a href="#requestparam" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#requestparam"></a> @RequestParam</h3>      <p><code>@RequestParam</code>用于获取请求参数。<code>@RequestParam(&quot;user&quot;) String username</code>效果等价于 <code>username = request.getParameter(&quot;user&quot;)</code></p><p>该注解可设置的参数：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;, required=false, defaultValue=&quot;zhangsan&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="requestheader"   >          <a href="#requestheader" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#requestheader"></a> @RequestHeader</h3>      <p><code>@RequestHeader</code>用于获取请求头中的值。<code>@RequestHeader(&quot;User-Agent&quot;) String userAgent</code>效果等价于 <code>userAgent = request.getHeader(&quot;User-Agent&quot;)</code>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, <span class="meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false, defaultValue = &quot; &quot;)</span> String userAgent)</span></span>&#123;</span><br><span class="line">    System.out.println(userAgent);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="cookievalue"   >          <a href="#cookievalue" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cookievalue"></a> @CookieValue</h3>      <p><code>@CookieValue</code>可用于获取Cookie值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;, required = false, defaultValue = &quot; &quot;)</span> String jid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="pathvariable"   >          <a href="#pathvariable" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pathvariable"></a> @PathVariable</h3>      <p><code>@PathVariable</code>用于解析RESTful风格中的参数：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable(&quot;p1&quot;)</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable(&quot;p2&quot;)</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">    <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">    <span class="comment">//返回视图位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="restful"   >          <a href="#restful" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#restful"></a> RESTful</h2>              <h3 id="概念"   >          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3>      <p>REST：Representational State Transfer，直译过来表现层状态转换，是目前最流行的一种互联网软件架构。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>资源</strong>（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识别符。</p><p><strong>表现层</strong>（Representation）：把资源具体呈现出来的形式，叫做它的表现层（Representation）。比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</p><p><strong>状态转化</strong>（State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。具体说，就是 HTTP 协议里面，四个表示操作方式的动词：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>。它们分别对应四种基本操作：</p><ul><li><code>GET</code>用来获取资源</li><li><code>POST</code>用来新建资源</li><li><code>PUT</code>用来更新资源</li><li><code>DELETE</code>用来删除资源</li></ul><p>满足REST设计风格的程序或接口我们称之为RESTful(从单词字面来看就是一个形容词)。所以RESTful API 就是满足REST架构风格的接口。它不是标准也不是协议，只是一种风格，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>        <h3 id="功能"   >          <a href="#功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#功能"></a> 功能</h3>      <p><strong>传统方式操作资源</strong>：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><ul><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/queryItem.action?id=1" >http://127.0.0.1/item/queryItem.action?id=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 查询，GET</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/saveItem.action" >http://127.0.0.1/item/saveItem.action</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 新增，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/updateItem.action" >http://127.0.0.1/item/updateItem.action</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 更新，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/deleteItem.action?id=1" >http://127.0.0.1/item/deleteItem.action?id=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 删除，GET或POST</li></ul><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><ul><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/1" >http://127.0.0.1/item/1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 查询，GET</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item" >http://127.0.0.1/item</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 新增，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item" >http://127.0.0.1/item</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 更新，PUT</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/1" >http://127.0.0.1/item/1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 删除，DELETE</li></ul>        <h3 id="使用"   >          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>      <p>在SpringMVC中可以使用 <code>@PathVariable</code> 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable(&quot;p1&quot;)</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable(&quot;p2&quot;)</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>使用method属性指定请求类型</strong></p><p><code>@RequestMapping</code> 注解能够处理 HTTP 请求的方法，约束请求的类型，可以收窄请求范围。指定请求谓词的类型如<code>GET</code>, <code>POST</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, <code>TRACE</code>等</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求才能访问到</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个： 组合注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></div></figure><p><code>@GetMapping</code> 是一个组合注解，它所扮演的是 <code>@RequestMapping(method = RequestMethod.GET)</code>的一个快捷方式。</p><p><strong>HiddenHttpMethodFilter</strong>：浏览器 form 表单只支持 <code>GET</code> 与 <code>POST</code>请求，而<code>DELETE</code>、<code>PUT</code>等 method 并不支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法，使得支持 <code>GET</code>、<code>POST</code>、<code>PUT</code>与<code>DELETE</code>请求。使用时需要在web.xml中添加<code>HiddenHttpMethodFilter</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用REST风格的URI，将页面的POST请求转换为指定的DELETE或PUT请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>添加<strong>HiddenHttpMethodFilter</strong>后，若想发送<code>DELETE</code>或<code>PUT</code>请求，则需要创建一个表单，在表单项中携带一个<code>_method</code>参数，这个参数的值可以设置为<code>DELETE</code>或<code>PUT</code>。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;commit/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除1号&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>注意</strong>：在Tomcat 8.0以上版本，使用REST风格转发到jsp页面时，因为默认的jsp文件不支持<code>DELETE</code>和<code>PUT</code>这种请求，因此有异常，无法正常显示。此时需要在jsp文件头添加：<code>isErrorPage=&quot;true&quot;</code></p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isErrorPage=<span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></div></figure><p><strong>HiddenHttpMethodFilter源码分析</strong></p><p><code>HiddenHttpMethodFilter</code>类里的拦截方法具体如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首先获取传入参数 methodParam = _method 里的值，也就是DELETE</span></span><br><span class="line">    String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断当前表单是否是POST提交</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">        <span class="comment">// DELETE变成大写</span></span><br><span class="line">        String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建包装后的Request类型对象wrapper，该对象的getMethod()方法被重写了，调用时将返回DELETE</span></span><br><span class="line">        HttpServletRequest wrapper = <span class="keyword">new</span> HiddenHttpMethodFilter.HttpMethodRequestWrapper(request, method);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将包装后的Request传递给了拦截器链，后续调用getMethod()获取到的都是DELETE</span></span><br><span class="line">        filterChain.doFilter(wrapper, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>wrapper对象被重写的<code>getMethod()</code>方法将直接返回<code>_method</code>里的值<code>DELETE</code>。并且包装后的wrapper对象被传递到了拦截器链中，从而后续的拦截器在调用此wrapper对象的<code>getMethod()</code>时将获取到<code>DELETE</code>。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/image-20210715100050957.png" alt="image-20210715100050957" /></p>        <h2 id="结果跳转方式"   >          <a href="#结果跳转方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#结果跳转方式"></a> 结果跳转方式</h2>              <h3 id="modelandview"   >          <a href="#modelandview" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#modelandview"></a> ModelAndView</h3>      <p>设置ModelAndView对象，根据view的名称和视图解析器跳到指定的页面。</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>对应的Controller类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="servletapi"   >          <a href="#servletapi" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletapi"></a> ServletAPI</h3>      <p>通过设置ServletAPI，不需要视图解析器。</p><ul><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="springmvc"   >          <a href="#springmvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springmvc"></a> SpringMVC</h3>      <p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向不需要视图解析器，本质就是重新请求到一个新地方，所以注意路径问题.</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="数据处理"   >          <a href="#数据处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据处理"></a> 数据处理</h2>              <h3 id="处理提交数据"   >          <a href="#处理提交数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#处理提交数据"></a> 处理提交数据</h3>      <p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/hello?name=zhangsan" >http://localhost:8080/hello?name=zhangsan</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/hello?username=zhangsan" >http://localhost:8080/hello?username=zhangsan</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用<code>@RequestParam(&quot;username&quot;)</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// : username提交的域的名称</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致，参数使用对象即可(SpringMVC自动封装)</p><p>实体类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="comment">//get/set</span></span><br><span class="line">    <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/mvc04/user?name=zhangsan&amp;id=1&amp;age=15" >http://localhost:8080/mvc04/user?name=zhangsan&amp;id=1&amp;age=15</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>处理方法 :</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>后台输出 : User { id=1, name=’zhangsan’, age=15 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p>        <h3 id="数据显示到前端"   >          <a href="#数据显示到前端" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据显示到前端"></a> 数据显示到前端</h3>      <p><strong>第一种 : 通过ModelAndView</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>第二种 : 通过ModelMap</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>第三种 : 通过Model</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>对比</strong></p><ul><li><code>Model</code>是一个接口，只有寥寥几个方法只适合用于储存数据，简化了新手对于<code>Model</code>对象的操作和理解；</li><li><code>ModelMap</code>继承了 <code>LinkedMap</code>，除了实现了自身的一些方法，同样的继承 <code>LinkedMap</code>的方法和特性；</li><li><code>ModelAndView</code>可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</li></ul><p>可以在方法处传入<code>Map</code>、<code>Model</code>或<code>ModelMap</code>，在这些参数中保存的数据都会放到<strong>请求域（requestScope）<strong>中。使用<code>Map</code>，<code>Model</code>和<code>ModelMap</code>本质上是使用了Spring的</strong>BindingAwareModelMap</strong>在工作，相当于在<code>BindingAwareModelMap</code>中保存的数据都会放到请求域中。SpringMVC在运行时拥有唯一的一个<code>BindingAwareModelMap</code>对象，各个方法中获取到的<code>Map/ModelMap</code>都会被转换成同一个该对象，从而可以做到多个方法中的数据共享。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/image-20210715151056836.png" alt="image-20210715151056836" /></p>        <h3 id="modelattribute"   >          <a href="#modelattribute" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#modelattribute"></a> @ModelAttribute</h3>      <p>被<code>@ModelAttribute</code>注解修饰的方法会在所有请求执行前执行，在该方法内可以从数据库获取到pojo对象，如下图中book对象，并将其添加到map中，这样其他请求方法在执行时就能从中获取到该对象。该注解在整合MyBatis后较少使用。</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1d4411g7tv?t=591&amp;p=155" >https://www.bilibili.com/video/BV1d4411g7tv?t=591&amp;p=155</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/image-20210715154723475.png" alt="image-20210715154723475" /></p>        <h3 id="乱码问题"   >          <a href="#乱码问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#乱码问题"></a> 乱码问题</h3>      <p>SpringMVC给我们提供了一个过滤器，可以在web.xml中配置。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注意：<url-pattern>里需要写上/*而非/，否则.jsp文件无法经过该过滤器，因此无法解决.jsp文件的乱码问题。</p>        <h2 id="controller-返回-json-数据"   >          <a href="#controller-返回-json-数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#controller-返回-json-数据"></a> Controller 返回 JSON 数据</h2>      <p>JSON解析工具：</p><ul><li>jackson</li><li>fastjson（阿里巴巴）</li></ul><p>首先使用jackson，导入jar包：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置web.xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置springmvc-servlet.xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>假设已经存在实体类User，编写一个Controller：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/json1&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里使用到注解<code>@ResponseBody</code>，其会将return 返回的字符串转为JSON格式</p><p>注意：使用JSON时记得处理可能出现的乱码问题，解决方案：在<code>@RequestMapping</code>中设置utf-8</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></div></figure><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加。可以通过Spring配置统一指定，这样就不用每次都去处理乱码问题。</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong><span class="exturl"><a class="exturl__link"   href="https://github.com/RestController" >@RestController</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong> ，这样子，里面所有的方法都只会返回 JSON字符串了，不用再每一个方法都添加<span class="exturl"><a class="exturl__link"   href="https://github.com/ResponseBody" >@ResponseBody</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 。在前后端分离开发中，一般都使用 <span class="exturl"><a class="exturl__link"   href="https://github.com/RestController" >@RestController</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ，十分便捷。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//由于@RestController，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="fastjson"   >          <a href="#fastjson" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#fastjson"></a> fastJson</h3>      <p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现JSON对象与JavaBean对象的转换，实现JavaBean对象与JSON字符串的转换，实现JSON对象与JSON字符串的转换。实现JSON的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>fastjson 三个主要的类：</p><ul><li><p>【JSONObject 代表 json 对象 】</p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应JSON对象，通过各种形式的get()方法可以获取JSON对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li><p>【JSONArray 代表 JSON对象数组】</p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p>【JSON 代表 JSONObject和JSONArray的转化】</p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ul><p><strong>代码测试，新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.zhao.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">        </span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="ajax"   >          <a href="#ajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ajax"></a> AJAX</h2>              <h3 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>      <p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<strong>AJAX 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><p>传统的网页(即不用AJAX技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。而使用AJAX技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。使用AJAX，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>        <h3 id="jqueryajax"   >          <a href="#jqueryajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jqueryajax"></a> jQuery.ajax</h3>      <ul><li>AJAX的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery AJAX本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">       部分参数：</span><br><span class="line">              url：请求地址</span><br><span class="line">             type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">          headers：请求头</span><br><span class="line">             data：要发送的数据</span><br><span class="line">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">            <span class="keyword">async</span>：是否异步</span><br><span class="line">          timeout：设置请求超时时间（毫秒）</span><br><span class="line">       beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">         complete：完成之后执行的回调函数(全局)</span><br><span class="line">          success：成功之后执行的回调函数(全局)</span><br><span class="line">            error：失败之后执行的回调函数(全局)</span><br><span class="line">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</span><br><span class="line">         dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">            <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">           <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">         <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">          <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></div></figure><p>ajax常用参数：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://www.hzhuti.com&quot;</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data: &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;value&quot;</span> &#125;,    <span class="comment">//参数值</span></span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//请求方式</span></span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><p>技巧：<code>data</code>属性中若想添加某个表单里的数据时，一个一个获取表单属性值较为繁琐，可以使用jQuery提供的<code>.serialize()</code>方法获取完整的表单数据，例如：<code>data: $&#123;#form&#125;.serialize()</code></p>        <h3 id="使用案例"   >          <a href="#使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用案例"></a> 使用案例</h3>      <p>配置文件</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写一个AjaxController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan3&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>前端页面</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#content&quot;</span>).html(html);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 事务</title>
      <link href="2021/05/31/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/05/31/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E4%BA%8B%E5%8A%A1/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="spring-事务管理介绍"   >          <a href="#spring-事务管理介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-事务管理介绍"></a> Spring 事务管理介绍</h2>      <p>事务需要添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）。在 Spring 进行事务管理操作有两种方式：编程式事务管理、<strong>声明式事务管理</strong>（推荐使用）：</p><ul><li><strong>编程式事务</strong>（需要手动调用事务管理器包裹业务代码进行提交回滚）使用<code>TransactionTemplate</code>或者直接使用底层的<code>PlatformTransactionManager</code>。对于编程式事务管理，Spring推荐使用<code>TransactionTemplate</code>。</li><li><strong>声明式事务</strong>（只用声明一下注解就可以）是建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明(或通过基于<code>@Transactional</code>注解的方式)，便可以将事务规则应用到业务逻辑中。</li></ul><p>显然声明式事务管理要优于编程式事务管理，这正是Spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要加上注解就可以获得完全的事务支持。和编程式事务相比，声明式事务唯一不足地方是，它的最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。</p><p>Spring事务原理与AOP原理十分相似，其详细的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 事务源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h2 id="声明式事务基于注解方式"   >          <a href="#声明式事务基于注解方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务基于注解方式"></a> 声明式事务——基于注解方式</h2>      <ol><li>导入相关依赖：数据源、数据库驱动、SpringJDBC模块</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li><p>配置数据源、<strong>JdbcTemplate</strong>操作数据库(Spring提供的简化数据库操作的工具)</p></li><li><p>添加 <strong>@EnableTransactionManagement</strong> 注解开启<strong>基于注解的事务管理功能</strong></p></li><li><p>配置<strong>事务管理器</strong>来控制事务（事务管理器操作数据源，进行事务管理）</p></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向容器中注册数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向容器中注册事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>在类或方法上添加 <strong>@Transactional()</strong> 注解表明该方法需要添加事务</li></ol><ul><li>添加到类上，这个类里面所有的方法都添加事务</li><li>添加到方法上，只有这个方法添加事务</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(propagation = Propagation.REQUIRED)</span></span>&#123;</span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中，可以在xml中配置数据库并开启事务管理器：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、在 spring 配置文件，开启事务注解,引入名称空间！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、在 spring 配置文件配置事务管理器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transactionmanager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、在 service 类上面（或者 service 类里面方法上面）添加事务注解--&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(propagation = Propagation.REQUIRED)</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用update方法</span></span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="声明式事务基于xml方式"   >          <a href="#声明式事务基于xml方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务基于xml方式"></a> 声明式事务——基于xml方式</h2>      <p>在 Spring 配置文件中进行配置：</p><ul><li>第一步：配置事务管理器</li><li>第二步：配置通知</li><li>第三步：配置切入点和切面</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;account*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="tag"><span class="string">                                      com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="事务细节参数"   >          <a href="#事务细节参数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事务细节参数"></a> 事务细节参数</h2>      <ul><li><code>read-only</code>：设置事务为只读事务，不需要增删改操作。可以提高查询速度。</li><li><code>timeout</code>：超时，事务超出指定执行时长后自动终止并回滚。</li><li><code>isolation</code>：设置隔离级别</li></ul><p>运行时异常（非检查异常）发生时默认回滚，编译时异常（检查异常）默认不回滚</p><ul><li><code>rollBackFor</code>：可以让原来默认不回滚的异常回滚</li><li><code>noRollBackFor</code>：可以让原来默认回滚的异常不回滚</li></ul>        <h2 id="事务和线程的关系"   >          <a href="#事务和线程的关系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事务和线程的关系"></a> 事务和线程的关系</h2>      <p><strong>当一个新的事务创建时，就会被绑定到当前线程上</strong>。</p><p><strong>TransactionAspectSupport</strong>类中的<code>ThreadLocal&lt;TransactionInfo&gt;</code>在当前线程保存了一个事务的信息<strong>TransactionInfo</strong>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818103221467.png" alt="image-20210818103221467" /></p><p>该线程会伴随着这个事务整个生命周期，直到事务提交、回滚或挂起（<strong>临时解绑</strong>）时该线程才会取消与该事务的绑定。</p><p>同时一个线程只能绑定一个事务，若当前线程原本正绑定的事务还未执行完毕就被新的事务所挂起，则该线程与该事务进行临时解绑，并绑定到新创建的事务上；直到新建的事务提交或回滚后，该线程才会结束与该新建事务的绑定，再次重新绑定之前的事务。</p><p>上述过程实现的原理为使用<strong>链表结构</strong>：创建一张<code>TransactionInfo</code>链表，将新创建的事务<code>TransactionInfo</code>链接到旧的事务<code>TransactionInfo</code>的尾部，待新事务执行完毕后再指回旧的事务<code>TransactionInfo</code>：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818104726262.png" alt="image-20210818104726262" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818105411421.png" alt="image-20210818105411421" /></p><p>当新创建的事务结束时恢复旧的事务状态：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818105517020.png" alt="image-20210818105517020" /></p><p><strong>什么是事务挂起，如何实现挂起</strong></p><p>对事务的配置在Spring内部会被封装成<strong>TransactionInfo</strong>，线程绑定了事务，自然也绑定了事务相关的<strong>TransactionInfo</strong>。<strong>挂起事务时，把TransactionInfo取出临时存储，等待执行完成后，把之前临时存储的TransactionInfo重新绑定到该线程上</strong>。</p><p><strong>关于事务挂起的举例：（某事务挂起之后，任何操作都不在该事务的控制之下）</strong></p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/xiaoshuo566/article/details/83929465" >https://blog.csdn.net/xiaoshuo566/article/details/83929465</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>例如： 方法A支持事务，方法B不支持事务，即<code>PROPAGATION_NOT_SUPPORTED</code>。方法A调用方法B：</p><ul><li>在方法A开始运行时，系统为它建立Transaction，方法A中对于数据库的处理操作，会在该Transaction的控制之下。</li><li>这时，方法A调用方法B，方法A打开的Transaction将挂起，方法B中任何数据库操作，都不在该Transaction的管理之下。</li><li>当方法B返回，方法A继续运行，之前的Transaction恢复，后面的数据库操作继续在该Transaction的控制之下提交或回滚。</li></ul>        <h2 id="声明式事务传播特性"   >          <a href="#声明式事务传播特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务传播特性"></a> 声明式事务传播特性</h2>      <p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。Spring支持7种事务传播行为：</p><ul><li><strong><code>propagation_required</code></strong>（需要事务，有就加入，没有就新建）：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。（如果设置为required，则事务的其他属性继承于大事务）好男人。</li><li><code>propagation_supports</code>（支持事务，有就加入，没有就非事务）：支持当前事务，如果没有当前事务，就以非事务方法执行。懒男人</li><li><code>propagation_mandatory</code>（强制使用当前事务，有就加入，没有就抛异常）：使用当前事务，如果没有当前事务，就抛出异常。</li></ul><p>上述三种类型<strong>都支持当前事务，当前如果有事务就加入。</strong></p><ul><li><strong><code>propagation_required_new</code></strong>（必须新建事务，当前有就抛挂起）：新建事务，如果当前存在事务，把当前事务挂起。挑剔男</li><li><code>propagation_not_supported</code>（不支持事务，当前有就挂起）：以非事务方式执行操作，如果当前存在事务，就把当前事务<strong>挂起</strong>（<strong>挂起指自己新建一个数据库连接，不再使用之前的数据库连接，在代码中体现为两个方法的connection不相同，详细介绍见上文</strong>）。减肥男</li><li><code>propagation_never</code>（强制非事务，当前有就抛异常）：以非事务方式执行操作，如果当前事务存在则抛出异常<code>IllegalTransactionStateException</code>，该方法内的代码无法运行。神经病</li></ul><p>上述三种类型都<strong>不支持当前事务，当前如果有事务，要么挂起，要么抛异常。</strong></p><ul><li><code>propagation_nested</code>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 <code>PROPAGATION_REQUIRED</code>，它适合于绝大多数的情况。</p><p>假设 <code>ServiveX#methodX()</code> 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：<code>Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()</code>，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p>        <h3 id="示例"   >          <a href="#示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(String name, <span class="keyword">int</span> initMoney)</span> </span>&#123;</span><br><span class="line">        String accountId = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddhhmmss&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        jdbc.Template.update(<span class="string">&quot;INSERT INTO `account` (accountName, user, money) VALUES(?,?,?)&quot;</span>, accountId, name, initMoney);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">// 制造异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    jdbc.Template.update(<span class="string">&quot;INSERT INTO `user` (name) VALUES(?)&quot;</span>, name);</span><br><span class="line">    accountService.addAccount(name, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>使用过上述案例进行实验，1代表插入成功，2代表插入失败：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210817144253822.png" alt="image-20210817144253822" /></p><ul><li>场景1：两个方法都没事务，都是普通方法，因此就算抛出异常，也不影响插入数据</li><li>场景2：<code>createUser()</code>没有事务，其仍然能插入数据；<code>addAccount()</code>有事务，其出现异常不能成功插入数据</li><li>场景3：<code>createUser()</code>有事务，出现异常后其不能插入数据；<code>addAccount()</code>没有声明事务，但其被createUser()调用，仍然会被事务包裹，出现异常不能成功插入数据。<strong>若某个方法包含事务，其调用的其他方法也会包含事务</strong></li><li>场景4：<code>addAccount()</code>将<code>createUser()</code>的事务挂起，<strong>挂起指自己新建一个数据库连接，不再使用之前的数据库连接，在代码中体现为两个方法的connection不相同，详细介绍见上文</strong>。因此<code>addAccount()</code>插入成功（因为没有事务，异常也能插入），<code>createUser()</code>插入失败（因为<code>addAccount()</code>抛出了异常，被重新恢复的事务所捕获从而插入失败）</li><li>场景5：<code>addAccount()</code>不支持事务，直接抛出<code>IllegalTransactionStateException</code>。所以直接无法运行该方法内插入的语句，所以插入失败；<code>createUser()</code>因为有事务，所以捕获到<code>addAccount()</code>抛出的异常后回滚，插入失败</li><li>场景6：见下文场景分析</li></ul><p>场景6详细分析：假设Spring IoC中有组件<code>AccountServiceImpl</code>，该组件中的<code>addAccount()</code>方法被<code>@Transactional</code>注解修饰，代表该方法将开启事务。</p><p>Spring容器启动时将使用事务后置处理器<strong>AutoProxyRegistrar</strong>会为该组件创建一个动态代理对象<code>accountProxy</code>，该对象将被注入到容器中，其他程序在调用<code>getBean()</code>获取该类的对象时，将获取到该类的动态代理对象，而非原始对象。此时在调用该代理对象<code>accountProxy</code>的<code>addAccount()</code>时，将有事务包裹。</p><p>而若不调用该代理对象的<code>addAccount()</code>，而是将该方法直接写在本类中，直接调用本类里的该方法，则不会交由Spring事务管理器拦截，此时的方法和普通方法一样。</p><p>结论：只有Spring事务代理对象的方法才能被事务拦截器所拦截。直接调用方法无法被拦截（即使该方法被<code>@Transactional</code>注解修饰）。</p>        <h2 id="编程式事务"   >          <a href="#编程式事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#编程式事务"></a> 编程式事务</h2>      <p>编程式事务指需要手动调用事务管理器包裹业务代码进行提交回滚。其需要使用<code>TransactionTemplate</code>或者直接使用底层的<code>PlatformTransactionManager</code>。对于编程式事务管理，Spring推荐使用<code>TransactionTemplate</code>。</p><p>Spring事务与JDBC事务的关系：上中下三个框分别代表基于AOP的声明式事务、编程式事务、JDBC事务。其中基于AOP的声明式事务原理见文章<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 事务源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>编程式事务中的两个重要类：</p><ul><li><strong>TransactionManager</strong>：事务管理器，用于控制事务的提交和回滚</li><li><strong>TransactionStatus</strong>：事务状态，保存了事务的各种状态，例如保存点等；其可创建保存点并利用其回滚到保存点。使用<strong>TransactionManager</strong>创建该对象。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818101801840.png" alt="image-20210818101801840" /></p><p>编程式事务使用示例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/image-20210818100033643.png" alt="image-20210818100033643" /></p><p>可利用<strong>TransactionAspectSupport</strong>获取当前线程方法栈中的事务状态，在不同的事务中该状态对象不同：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransactionStatus status = TransactionAspectSupport.currentTransactionStatus();</span><br></pre></td></tr></table></div></figure>        <h2 id="声明式事务原理"   >          <a href="#声明式事务原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务原理"></a> 声明式事务原理</h2>      <p><strong>@EnableTransactionManagement</strong> 注解向容器中添加<strong>AutoProxyRegistrar</strong>和<strong>ProxyTransactionManagementConfiguration</strong>组件，二者作用分别为：</p><ul><li><strong>AutoProxyRegistrar</strong>：类似于AOP中的<strong>AspectJAutoProxyRegistrar</strong>，用于向容器中注册<strong>InfrastructureAdvisorAutoProxyCreator</strong>组件（类似于AOP里的自动代理器，一种后置处理器）来为普通组件进行代理包装，创建<strong>代理对象</strong></li><li><strong>ProxyTransactionManagementConfiguration</strong>：用于注册<strong>事务增强器</strong>，该增强器内设置有事务拦截器，将在代理对象执行目标方法时进行拦截，并调用其<code>invoke()</code>方法，<strong>由事务管理器控制事务的提交与回滚</strong>。</li></ul><p>Spring事务原理与AOP原理十分相似，都包含有<strong>后置处理器</strong>和<strong>拦截器</strong>思想，在组件创建后包装出代理对象、在代理对象执行目标方法时进行拦截，使用事务管理器控制事务的提交与回滚。</p><p>详细的源码分析见文章<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 事务源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 AOP</title>
      <link href="2021/05/29/%E3%80%90Spring%E3%80%91Spring5-AOP/"/>
      <url>2021/05/29/%E3%80%90Spring%E3%80%91Spring5-AOP/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="aop-基本概念"   >          <a href="#aop-基本概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基本概念"></a> AOP 基本概念</h2>      <p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>Spring AOP的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudyfffec70f-ce10-4ca2-a71b-dbc535b0e07c-1625811781519.png" alt="img" /></p><ul><li><p>面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率；</p></li><li><p>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能。</p></li><li><p>使用登录例子说明 AOP：</p></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/20200702135106266-1625811781520.png" alt="img" /></p>        <h2 id="aop-底层原理"   >          <a href="#aop-底层原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-底层原理"></a> AOP 底层原理</h2>      <p>AOP 底层使用<strong>动态代理</strong> ，动态代理有两种情况：</p><p>第一种 有接口情况，使用<strong>JDK 动态代理</strong> ；创建<strong>接口实现类代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/20200702135134128-1625811781520.png" alt="在这里插入图片描述" /></p><p>第二种 没有接口情况，使用<strong>CGLIB 动态代理</strong>创建<strong>子类的代理对象</strong>，增强类的方法（该方法不需要实现接口，由CGLIB创建代理对象）<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/2020070213514980-1625811781520.png" alt="在这里插入图片描述" /></p><span id="more"></span>        <h2 id="aop-jdk-动态代理"   >          <a href="#aop-jdk-动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-jdk-动态代理"></a> <strong>AOP JDK 动态代理</strong></h2>      <p>1）使用 JDK 动态代理，使用 <code>Proxy</code>类里面的方法创建代理对象：</p><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InvocationHandler h)</span></span></span><br></pre></td></tr></table></div></figure><ul><li>参数一：类加载器</li><li>参数二：增强方法所在的类，这个类实现的接口，支持多个接口</li><li>参数三：实现这个接口 <code>InvocationHandler</code>，创建代理对象，写增强的部分</li></ul><p>2）编写 JDK 动态代理代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建接口，定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（2）创建接口实现类，实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">        <span class="comment">/** 第一参数，类加载器 </span></span><br><span class="line"><span class="comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span></span><br><span class="line"><span class="comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span></span><br><span class="line">        UserDao dao =(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line">                                                     <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="aop-术语"   >          <a href="#aop-术语" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-术语"></a> AOP 术语</h2>      <ul><li>连接点（JointPoint）：类里面哪些方法可以被增强，这些方法称为连接点，每一个方法的每一个位置（开始位置，返回位置，异常位置等）都是一个连接点。</li><li><strong>切入点（PointCut）</strong>：切面通知执行的“地点”的定义，实际被真正增强的方法称为切入点。</li><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li><strong>切面（Aspect）</strong>：横切关注点被模块化的特殊对象。即，它是一个类。</li><li><strong>通知方法（Advice）</strong>：切面必须要完成的工作。即，它是类中的一个方法。包含前置通知，后置通知，环绕通知 ，异常通知和最终通知。</li><li>目标（Target）：被通知的对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-AOP/image-20210713170239284.png" alt="image-20210713170239284" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudy7a512991-1651-44b4-afca-d09e12cbbe6f-1625811781520.png" alt="img" /></p>        <h2 id="aop-cglib-动态代理"   >          <a href="#aop-cglib-动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-cglib-动态代理"></a> AOP CGLIB 动态代理</h2>      <p>CGLIB是一个功能强大，高性能的<strong>代码生成库</strong>（第三方库，可以由Maven导入）。其被广泛应用于AOP框架（Spring、dynaop）中，用以提供方法拦截操作。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。通常可以使用Java的动态代理创建代理，但当要代理的类没有实现接口或者为了更好的性能，CGLIB是一个好的选择。CGLIB作为一个开源项目，其代码托管在github，地址为：<span class="exturl"><a class="exturl__link"   href="https://github.com/cglib/cglib" >https://github.com/cglib/cglib</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>CGLIB 原理</strong>：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。在子类中采用<strong>方法拦截</strong>的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。</p><p><strong>CGLIB 底层</strong>：使用字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p><p><strong>CGLIB缺点</strong>：对于final方法，无法进行代理。</p><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作。基于 AspectJ 实现 AOP 操作的两种方式：</p><ul><li>基于注解方式实现</li><li>基于 xml 配置文件实现</li></ul>        <h3 id="aop-基于注解开发"   >          <a href="#aop-基于注解开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基于注解开发"></a> AOP 基于注解开发</h3>      <p>采用<strong>动态代理</strong>的设计模式，在程序运行期间动态地将某段代码切入到指定方法（切入点）指定位置进行运行的编程方式。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>定义一个业务逻辑类（<code>MathCalculator</code>）。试图在业务逻辑运行的时候将日志进行打印（方法之前，方法运行结束，方法出现异常等）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>定义一个日志切面类（<code>LogAspects</code>），在切面类里需要动态感知<code>MathCalculator.div()</code>方法运行到什么阶段并执行相应通知方法。通知方法：</p><ul><li>前置通知（<code>@Before</code>）：在切入点（<code>PointCut</code>）运行之前运行</li><li>后置通知（<code>@After</code>）：在切入点运行结束之后运行（无论方法是否正常结束）</li><li>返回通知（<code>@AfterReturning</code>）：在切入点正常返回之后运行（异常不执行）</li><li>异常通知（<code>@AfterThrowing</code>）：在切入点出现异常之后运行</li><li>环绕通知（<code>@Around</code>）：动态代理的方式<strong>手动</strong>推进切入点运行（<code>joinPoint.procced()</code>），是最底层的通知，其可以实现上述四个通知效果</li></ul><p><strong>通知方法的执行顺序</strong>：</p><ul><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法之前的代码</li><li>前置通知（<code>@Before</code>）</li><li>业务代码</li><li>返回通知（<code>@AfterReturning</code>）/ 若有异常，此时执行异常通知（<code>@AfterThrowing</code>）</li><li>后置通知（<code>@After</code>）</li><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法以及其之后的代码</li></ul><p>多个切面的情况下，先执行前置通知的后执行返回通知和后置通知，后执行前置通知的先执行返回通知和后置通知。类似方法栈先进后出。执行顺序由切面类的字母顺序排序，也可以通过<code>@Order(1)</code>设置优先级</p><p>切入点表达式写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class="line">（<span class="number">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class="line">（<span class="number">3</span>）例子如下：</span><br><span class="line">    例 <span class="number">1</span>：对 com.zhao.dao.BookDao 类里面的 add 进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.add(..))</span><br><span class="line"> 例 <span class="number">2</span>：对 com.zhao.dao.BookDao 类里面的所有的方法进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.* (..))</span><br><span class="line">    例 <span class="number">3</span>：对 com.zhao.dao 包里面所有类，类里面所有方法进行增强</span><br><span class="line">execution(* com.zhao.dao.*.* (..))</span><br></pre></td></tr></table></div></figure><p>配置类需要<strong>添加@EnableAspectJAutoProxy以开启注解版的AOP自动代理。整个AOP就是从@EnableAspectJAutoProxy注解开始执行的。</strong>（Spring中有很多的<code>@EnableXXX</code>注解，其作用是代替xml文件中的一些配置开启某些功能）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigAOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将业务逻辑类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogsAspects <span class="title">logsAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogsAspects();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>切面类<code>LogsAspects</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogsAspects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽取公共的切入点表达式</span></span><br><span class="line">    <span class="comment">// 1. 本类可以引用</span></span><br><span class="line">    <span class="comment">// 2. 其他的切面类也可以引用（需要全类名）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(int com.zhao.aop.MathCalculator.div(int, int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs(); <span class="comment">// 方法参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知@Before.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知@After....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">// result: 方法返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知@AfterReturning.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知@AfterThrowing.... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签名: &quot;</span> + proceedingJoinPoint.getSignature());</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕前置通知】.... &quot;</span>);</span><br><span class="line">            <span class="comment">//执行目标方法proceed</span></span><br><span class="line">            Object result = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕返回通知】.... &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕异常通知】.... &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕后置通知】.... &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOfAop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfigAOP.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器创建完成....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须从容器中获得bean才能启动AOP</span></span><br><span class="line">        MathCalculator bean = context.getBean(MathCalculator.class);</span><br><span class="line">        bean.div(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>控制台打印：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">签名: int com.zhao.aop.MathCalculator.div(int,int)</span><br><span class="line">【环绕前置通知】.... </span><br><span class="line">前置通知@Before.... </span><br><span class="line">div方法执行...</span><br><span class="line">返回通知@AfterReturning.... </span><br><span class="line">后置通知@After....</span><br><span class="line">【环绕返回通知】.... </span><br><span class="line">【环绕后置通知】...</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure>        <h3 id="aop-基于xml开发"   >          <a href="#aop-基于xml开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基于xml开发"></a> AOP 基于xml开发</h3>      <p>使用AOP织入，需要导入一个依赖包（和上面的区别？）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="方式一通过-spring-api-实现aop"   >          <a href="#方式一通过-spring-api-实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一通过-spring-api-实现aop"></a> 方式一：通过 Spring API 实现AOP</h4>      <p>第一步：首先编写业务接口和实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：然后编写增强类 ：一个前置增强，一个后置增强</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">    <span class="comment">//Object : 目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue 返回值</span></span><br><span class="line">    <span class="comment">//method被调用的方法</span></span><br><span class="line">    <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">    <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">                           +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">                           +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第三步：最后去Spring的文件中注册 , 并实现AOP切入实现 , 注意导入约束</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点  expression:表达式匹配要执行的方法 ..代表该包下的子包也能被扫描到 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第四步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.search();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Spring的AOP就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 ，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用。</p>        <h4 id="方式二自定义类来实现aop"   >          <a href="#方式二自定义类来实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二自定义类来实现aop"></a> 方式二：自定义类来实现AOP</h4>      <p>目标业务类不变依旧是userServiceImpl</p><p>第一步：编写一个切入类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：在Spring中配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="spring-aop-源码分析"   >          <a href="#spring-aop-源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-aop-源码分析"></a> Spring AOP 源码分析</h2>      <p>Spring AOP的源码分析见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】Servlet</title>
      <link href="2021/05/28/%E3%80%90JavaWeb%E3%80%91Servlet/"/>
      <url>2021/05/28/%E3%80%90JavaWeb%E3%80%91Servlet/</url>
      
        <content type="html"><![CDATA[        <h2 id="servlet"   >          <a href="#servlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h2>      <p>Servlet是Sun公司开发动态web的一门技术。Sun在这些API中提供了一个接口：Servlet。开发Servlet程序需要完成两个步骤：</p><ul><li>编写一个Java类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中</li></ul><p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p>        <h3 id="helloservlet"   >          <a href="#helloservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#helloservlet"></a> HelloServlet</h3>      <p>Sevlet接口Sun公司提供有两个默认的实现类：HttpServlt，GenericServlet</p><ol><li><p>构建一个普通的Maven项目（不带模板），删掉里面的src目录，这个空的工程就是Maven的主工程。之后在这个项目里建立Module，新建的Module均为Maven父项目的子项目。</p></li><li><p>关于Maven父子工程的理解：在父项目中会有</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>父项目中的Maven依赖环境Jar包子项目可以直接使用</p></li><li><p>Maven环境优化：修改web.xml（与本地Tomcat中的内容一致）</p></li></ol>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>编写一个Servlet程序<ul><li>编写一个普通类</li><li>实现Servlet接口，这里继承HttpServlet</li></ul></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于get或者post只是请求实现的不同方式，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>编写Servlet映射：写的Java程序要通过浏览器访问，浏览器需要连接web服务器，所以需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能访问到的路径。</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="6"><li>配置Tomcat，注意配置项目发布的路径</li><li>启动测试</li></ol><span id="more"></span>        <h3 id="servlet原理"   >          <a href="#servlet原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet原理"></a> Servlet原理</h3>      <p>Servlet是由web服务器调用，web服务器在收到浏览器请求后会调用<code>service()</code>方法，该方法会根据请求的类型<code>GET</code>或<code>POST</code>分发处理，执行相应的<code>doGet()</code>或<code>doPost()</code>方法。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91Servlet/image-20210501200459226.png" alt="image-20210501200459226" /></p>        <h3 id="mapping问题"   >          <a href="#mapping问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapping问题"></a> Mapping问题</h3>      <ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>一个Servlet可以指定多个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>一个Servlet可以指定通用映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>默认请求路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>优先级问题：</p><p>指定了<strong>固有的映射路径优先级最高</strong>，如果找不到匹配的固有映射路径，则就会走默认路径（*)</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Error Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ErrorServlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="servletcontext"   >          <a href="#servletcontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletcontext"></a> ServletContext</h3>      <p>是一个接口，代表Servlet上下文对象，一个工程只有一个ServletContext对象，是一个域对象（这里的域指的是整个web工程）。</p><p>web容器在启动时，他会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用。</p><p>作用1：共享数据，即在某个Servlet中保存的数据可以在另一个Servlet中获得。</p><p>存入数据的Servlet类，用于保存数据到ServletContext对象中。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// this.getInitParameter();  初始化参数</span></span><br><span class="line">        <span class="comment">// this.getServletConfig();  Servlet配置</span></span><br><span class="line">        <span class="comment">// this.getServletContext(); Servlet上下文</span></span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = <span class="string">&quot;zhangsan&quot;</span>; <span class="comment">// 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个数据以键值对形式保存在了ServletContext中。</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>读入数据的Servlet类，用于从ServletContext对象中读取数据。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String)context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>作用2：获取初始化参数。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是上下文参数（属于整个web工程） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">resp.getWriter().print(url);</span><br></pre></td></tr></table></div></figure><p>作用3：请求转发。</p><p>访问当前url时，将消息转发给指定的其他url（当前url不会发生变化，重定向会变化）。当前url只充当转发功能。<strong>请求转发不需要添加项目名，只需要/+映射路径</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发的请求参数</span></span><br><span class="line">RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/servlet01&quot;</span>);</span><br><span class="line">requestDispatcher.forward(req, resp); <span class="comment">// 调用forward实现请求转发</span></span><br></pre></td></tr></table></div></figure><p>请求转发的特点：</p><ul><li>浏览器地址栏没有变化</li><li>是一次请求</li><li>共享Request域中的数据</li><li>可以转发到<code>WEB-INF</code>目录下</li><li>无法访问项目以外的其他资源（如百度）</li></ul><p>作用4：读取资源文件</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现都被打包到了同一个路径下：<code>/WEB-INF/classes</code>，将这个路径称为classpath。</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(resourceAsStream);</span><br><span class="line">String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">resp.getWriter().print(url + <span class="string">&#x27;:&#x27;</span> + password);</span><br></pre></td></tr></table></div></figure>        <h3 id="httpservletresponse"   >          <a href="#httpservletresponse" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletresponse"></a> HttpServletResponse</h3>      <p>web服务器接收到客户端的HTTP请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象。</p><ul><li>如果要获取客户端请求过来的参数，使用HttpServletRequest</li><li>如果要给客户端响应一些信息，使用HttpServletResponse</li></ul><p>负责向浏览器发送数据的方法：</p><ul><li><code>getOutputStream()</code></li><li><code>getWriter()</code></li></ul><p>常见应用：</p><ol><li>向浏览器输出消息</li><li>下载文件</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置让浏览器能够支持附件下载</span></span><br><span class="line">respones.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br></pre></td></tr></table></div></figure><ol start="3"><li>实现重定向</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/projectName/url&quot;</span>); <span class="comment">// 重定向到其他url</span></span><br></pre></td></tr></table></div></figure><p><strong>重定向和转发的区别</strong></p><ul><li>请求转发时，url不会发生变化。（转发在服务器内部完成，不需要加项目名路径，如&quot;/url&quot;）</li><li>重定向时，url会发生变化。（需要加项目名路径，如&quot;/projectName/url&quot;)</li></ul><p>在前端文件中写跳转链接时，因其不能得知服务器内部的项目结构，因此需要人为指定contextPath（在Servlet程序中不需要再指定当前项目在服务器内的路径）</p><p>细节：当用户提交完请求，浏览器会记录下最后一次请求的全部信息。当用户按下功能键F5，就会发起浏览器记录的最后一次请求。在此情况下如果使用请求转发的方式跳转页面，用户按下F5后会再次发起请求，因此这种情况应该使用重定向。</p>        <h3 id="httpservletrequest"   >          <a href="#httpservletrequest" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletrequest"></a> HttpServletRequest</h3>      <p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP协议中的所有消息信息会被封装到HttpServletRequest，通过该类的方法可以获得客户端传来的请求信息。</p><ol><li>获取传递的参数</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="2"><li>请求转发</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(requset, response);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91Servlet/image-20210501221519475.png" alt="image-20210501221519475" /></p><ol start="3"><li>获取请求头中Referer信息（浏览器发起请求时的url），可用于重定向回原地址</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = req.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="web中-斜杠的不同意义"   >          <a href="#web中-斜杠的不同意义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web中-斜杠的不同意义"></a> Web中 / 斜杠的不同意义</h3>      <p>在web中，/ 是一种绝对路径：</p><ul><li>/ 如果被<strong>浏览器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/ （指写在静态html代码中，无法被服务器解析，只能被浏览器解析）</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>/ 如果被<strong>服务器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/工程路径</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 映射</span><br><span class="line">&lt;url-pattern&gt;&#x2F;servlet1&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取绝对路径</span><br><span class="line">servletContext.getRealPath(&quot;&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请求转发</span><br><span class="line">request.getRequestDispacther(&quot;&#x2F;&quot;);</span><br></pre></td></tr></table></div></figure><ul><li>特殊情况：response.senRedirect(&quot;/&quot;); 会将斜杠发送给浏览器解析，得到http://ip:port/</li></ul><p><strong>/WEB-INF/目录下的资源文件，客户端无法直接访问（即不能在浏览器中输入url直接跳转），而只能在servlet程序中跳转</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5 IoC</title>
      <link href="2021/05/24/%E3%80%90Spring%E3%80%91Spring5-IoC/"/>
      <url>2021/05/24/%E3%80%90Spring%E3%80%91Spring5-IoC/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d" /></p>        <h2 id="spring-ioc容器"   >          <a href="#spring-ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-ioc容器"></a> Spring IoC容器</h2>      <p><strong>1、什么是IoC</strong></p><ul><li>把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IoC目的：为了降低耦合度</li></ul><p><strong>2、IoC底层</strong></p><p>xml解析、工厂模式、反射</p><p><strong>3、Spring提供的IoC容器实现的两种方式（两个接口）</strong></p><ul><li><code>BeanFactory</code>接口：IoC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</li><li><code>ApplicationContext</code>接口：<code>BeanFactory</code>接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</li></ul><p><strong>4、ApplicationContext接口的实现类</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5-IoC/image-20210523201040536.png" alt="image-20210523201040536" /></p><p><strong>5、管理Bean的方式有两种</strong>：</p><ul><li>基于xml的方式</li><li>基于注解的方式</li></ul><span id="more"></span>        <h2 id="基于xml方式"   >          <a href="#基于xml方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基于xml方式"></a> 基于xml方式</h2>              <h3 id="1-ioc操作bean管理"   >          <a href="#1-ioc操作bean管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-ioc操作bean管理"></a> 1、IoC操作Bean管理</h3>      <p>Bean管理就是两个操作：</p><ul><li>Spring创建对象；</li><li>Spring注入属性</li></ul>        <h3 id="2-配置文件创建对象"   >          <a href="#2-配置文件创建对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-配置文件创建对象"></a> 2、配置文件创建对象</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>获取类对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//在执行getBean的时候, user已经创建好了, 通过无参构造</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    <span class="comment">//User user = (User) context.getBean(&quot;user&quot;);</span></span><br><span class="line">    <span class="comment">//调用对象的方法</span></span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="3-注入属性di依赖注入注入属性"   >          <a href="#3-注入属性di依赖注入注入属性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-注入属性di依赖注入注入属性"></a> 3、注入属性（DI：依赖注入（注入属性））</h3>      <p><mark>set方式注入</mark></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建属性</span></span><br><span class="line">        <span class="keyword">private</span> String bname;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bname = bname;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>有参构造函数注入</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式：创建类，构建有参函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname,String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式：有参数构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>p名称空间注入</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   &lt;!--在这里添加一行p--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;very&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;good&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="4-注入空值和特殊符号"   >          <a href="#4-注入空值和特殊符号" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-注入空值和特殊符号"></a> 4、注入空值和特殊符号</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（1）null值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span> <span class="comment">&lt;!--属性里边添加一个null标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--（2）特殊符号赋值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">       b 把带特殊符号内容写到CDATA</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="5-注入属性-外部bean"   >          <a href="#5-注入属性-外部bean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-注入属性-外部bean"></a> 5、注入属性-外部bean</h3>      <p>创建两个类service和dao类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;<span class="comment">//service类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add...............&quot;</span>);</span><br><span class="line">        userDao.update();<span class="comment">//调用dao方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;<span class="comment">//dao类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在Spring配置文件中进行配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 service和dao对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="注入属性-bean自动装配"   >          <a href="#注入属性-bean自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注入属性-bean自动装配"></a> 注入属性-Bean自动装配</h3>      <p>在不使用自动装配时需要手动注入每个bean</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不使用自动装配时需要手动注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在xml中使用<code>autowire</code>设置自动装配：</p><ul><li><code>byName</code>：按照bean名称自动装配</li><li><code>byType</code>：按照bean类型自动装配</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="6-注入内部bean和级联赋值"   >          <a href="#6-注入内部bean和级联赋值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-注入内部bean和级联赋值"></a> 6、注入内部bean和级联赋值</h3>      <p>注入属性-内部bean</p><ul><li>一对多关系：部门和员工一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）</li><li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</li><li>在spring配置文件中配置</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span><span class="comment">&lt;!--内部bean赋值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宣传部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注入属性-级联赋值</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;公关部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二：生成dept的get方法（get方法必须有！！）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jams&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="7-ioc-操作-bean-管理xml注入集合属性"   >          <a href="#7-ioc-操作-bean-管理xml注入集合属性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-ioc-操作-bean-管理xml注入集合属性"></a> 7、IoC 操作 Bean 管理——xml注入集合属性</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">//2 list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">//3 map集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//4 set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）在 spring 配置文件进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="8-在集合里面设置对象类型值"   >          <a href="#8-在集合里面设置对象类型值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-在集合里面设置对象类型值"></a> 8、在集合里面设置对象类型值</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生所学多门课程</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courseList;<span class="comment">//创建集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.courseList = courseList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; &lt;!--添加util名称空间--&gt;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  <span class="comment">&lt;!--添加util名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把集合注入部分提取出来--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 提取list集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="9-bean-作用域"   >          <a href="#9-bean-作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-bean-作用域"></a> 9. Bean 作用域</h3>      <p>在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><ul><li>在 Spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</li><li><code>singleton</code>：表示是单实例对；<code>prototype</code>：表示是多实例对象</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span> <span class="comment">&lt;!--设置为多实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>设置 scope 值是 <code>singleton</code> 时候，加载 Spring 配置文件时候就会创建实例对象 ；设置 scope 值是 <code>prototype</code>时候，不是在加载 Spring 配置文件时候创建对象，而是在调用 <code>getBean</code>方法时候才创建实例对象</p>        <h3 id="10-bean-生命周期"   >          <a href="#10-bean-生命周期" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-bean-生命周期"></a> 10、Bean 生命周期</h3>      <p>生命周期 ：从对象创建到对象销毁的过程。bean 的生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）更多细节见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/25/%E3%80%90Spring%E3%80%91Spring5%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/" >【Spring】Spring5注解驱动开发</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>把 bean 实例传递 bean 后置处理器的方法 <code>postProcessBeforeInitialization</code></li><li>调用 bean 的初始化的方法（需要在配置文件中配置初始化的方法<code>init-method</code>）</li><li>把 bean 实例传递 bean 后置处理器的方法 <code>postProcessAfterInitialization</code></li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法<code>destroy-method</code>）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;<span class="comment">//创建后置处理器实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="10-factorybean"   >          <a href="#10-factorybean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-factorybean"></a> 10. FactoryBean</h3>      <p>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><ul><li>普通bean：在配置文件中定义 bean 类型就是返回类型</li><li>工厂bean：在配置文件定义 bean 类型可以和返回类型不一样。<ul><li>第一步：创建类，让这个类作为工厂bean，实现接口<code>FactoryBean</code>；</li><li>第二步：实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ApplicationContext context =</span><br><span class="line"> <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"> Course course = context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);<span class="comment">//返回值类型可以不是定义的bean类型！</span></span><br><span class="line"> System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="11-引入外部属性文件如druid"   >          <a href="#11-引入外部属性文件如druid" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-引入外部属性文件如druid"></a> 11. 引入外部属性文件（如Druid）</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--引入context名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="基于注解方式"   >          <a href="#基于注解方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基于注解方式"></a> 基于注解方式</h2>      <p>基于注解方式的Spring开发详细内容见<span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/25/%E3%80%90Spring%E3%80%91Spring5-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/" >【Spring】Spring5 注解驱动开发</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h3 id="1-什么是注解"   >          <a href="#1-什么是注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-什么是注解"></a> 1、什么是注解</h3>      <ul><li>注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解目的：简化 xml 配置</li></ul>        <h3 id="2-spring-针对-bean-管理中创建对象提供注解"   >          <a href="#2-spring-针对-bean-管理中创建对象提供注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-spring-针对-bean-管理中创建对象提供注解"></a> 2、Spring 针对 Bean 管理中创建对象提供注解</h3>      <p>下面四个注解功能是一样的，都可以用来创建 bean 实例</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Component" >@Component</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Controller" >@Controller</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：web层</li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Service" >@Service</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：service层</li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Repository" >@Repository</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：dao层</li></ul>        <h3 id="3-基于注解方式实现对象创建"   >          <a href="#3-基于注解方式实现对象创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-基于注解方式实现对象创建"></a> 3、基于注解方式实现对象创建</h3>      <p>第一步 引入依赖 （引入spring-aop jar包）</p><p>第二步 开启组件扫描</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment"> 1 如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment"> 2 扫描包上层目录 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="4-开启组件扫描细节配置"   >          <a href="#4-开启组件扫描细节配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-开启组件扫描细节配置"></a> 4、开启组件扫描细节配置</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="5-基于注解方式实现属性注入"   >          <a href="#5-基于注解方式实现属性注入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-基于注解方式实现属性注入"></a> 5、基于注解方式实现属性注入</h3>      <p>（1）<code>@Autowired</code>：根据属性<strong>类型</strong>进行自动装配:</p><ul><li>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</li><li>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义 dao 类型属性</span></span><br><span class="line">    <span class="comment">//不需要添加 set 方法</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）<code>@Qualifier</code>：根据对象<strong>名称</strong>进行注入，这个<code>@Qualifier</code> 注解的使用，和上面<code>@Autowired</code> 一起使用（目的在于区别同一接口下有多个实现类）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（3）<code>@Resource</code>：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（4）<code>@Value</code>：注入<strong>普通类型属性</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name</span><br></pre></td></tr></table></div></figure><p><strong>总结：若某类型的对象只有一个，则可以使用<code>@Autowired</code>注解，此时只会找到唯一的一个对象；但若某类型的对象不止一个，则要使用<code>@Qualifier</code>注解，其会根据对象名称去寻找指定的对象。若注入基本类型对象使用<code>@Value</code></strong>。</p>        <h3 id="6-作用域"   >          <a href="#6-作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-作用域"></a> 6、作用域</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/scope" >@scope</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;秦疆&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="7-完全注解开发"   >          <a href="#7-完全注解开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-完全注解开发"></a> 7、完全注解开发</h3>      <p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zhao&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(SpringConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册一个bean，相当于之前的一个bean标签</span></span><br><span class="line">    <span class="comment">// 方法名称，相当于bean标签里的id属性</span></span><br><span class="line">    <span class="comment">// 方法返回值，相当于bean标签里的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）编写测试类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载配置类</span></span><br><span class="line">    ApplicationContext context</span><br><span class="line">        = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>,</span><br><span class="line">                                              UserService.class);</span><br><span class="line">    System.out.println(userService);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="spring-循环依赖"   >          <a href="#spring-循环依赖" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-循环依赖"></a> Spring 循环依赖</h2>      <p>bean仓库只负责存储，不负责创建，创建由beanFactory完成</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory beanFactory;</span><br><span class="line">SingletonBeanRegistry beanRegistry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//DefaultListableBeanFactory 同时实现上面两个接口</span></span><br><span class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">factory.getSingleton(<span class="string">&quot;a&quot;</span>); <span class="comment">// 直接去bean仓库里取，若a不存在，不会创建该对象</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>双重检测所在getSingleton 有个双重检测</p><p>仓库自己将Bean添加，这个过程有双重检测</p><p>更集中地控制线程安全性</p><p>getparent</p><p>第一次取自己的，自己没有去取父亲的</p><p>父亲还取不到 再创建</p><p>该过程见图SPring mvc</p><p>半成品池</p><p>创建a时依赖b, 所以去创建b,但是创建b有依赖a，则先把a放到半成品池里。所以创建b时会从半成品里取a 取出后去创建b并放到单例池singletonFactory里，再回到创建a的过程，a从单例池中取出b，创建完毕后a放到单例池，半成品池里取消a</p><p>直播断了5分钟断在了 半成品和单例里的组件A是否是相同的</p><p>a.getB 有值，a是代理对象，能调用方法获取b的值</p><p>a.b没有值 因为被代理的原始a才有b，直接调代理的aProxy的.b没有值，因为代理对象没必要有b。只用代理方法，不用代理属性值</p><p>真实的a里的b属性也是个代理对象。</p><p>工厂池  提前引用 三级缓存</p><p>把工厂ObejectFactory放到工厂池中，后面就获得提前引用</p><p>singletonFactories是三级工厂</p><p>先去单例池，没有，再去半成品池取，最后去工厂池里找，从工厂池里获取一个工厂，该工厂调用getObject() ，获得提前引用，获取到的是代理对象，将该对象放到二级缓存半成品里，在从工厂里移除这个beanName</p><p>为什么有半成品池：提前引用可能有多次，比如a依赖b,c，两个都依赖a，b获得了a的提前引用后将该对象放到二级缓存里，并从工厂池移除该a的代理对象，c之后就不用再创建a了（若不放到二级缓存就会重复提前引用），直接去二级缓存取A。保证动态代理对象A只会被创建一次。</p><p>工厂池里存了很多工厂ObjectFactory，这些工厂调用getObject()取得a的动态代理对象singletonObject（提前引用），并将其放到二级缓存里，并从三级里移除该对象以免重复创建</p><p>半成品池在填充属性时（set时）获取的</p><p>半成品的目的：不要重复代理</p><p>对照着图</p><p>图片</p><p>什么时候不能解决循环依赖：</p><ul><li>多例</li><li>在构造方法里有依赖</li><li>手动关闭了循环依赖功能 <code>context.setAllowCircularReference(false);</code></li></ul><p>三级缓存（图片里的）</p><p>singletonObjects 单例池</p><p>earlySignletonObejctys是半成品池 二级缓存</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MyBatis】MyBatis</title>
      <link href="2021/05/15/%E3%80%90MyBatis%E3%80%91MyBatis/"/>
      <url>2021/05/15/%E3%80%90MyBatis%E3%80%91MyBatis/</url>
      
        <content type="html"><![CDATA[        <h2 id="mybatis简介"   >          <a href="#mybatis简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis简介"></a> MyBatis简介</h2>      <p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudyb0b1cef3-3796-4822-bfe8-52a894961853.png" alt="img" /></p>        <h3 id="什么是mybatis"   >          <a href="#什么是mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#什么是mybatis"></a> 什么是MyBatis</h3>      <ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。在2013年11月迁移到<strong>Github</strong> .</li><li>Mybatis官方文档 : <span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/index.html" >http://www.mybatis.org/mybatis-3/zh/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>GitHub : <span class="exturl"><a class="exturl__link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h3 id="持久化"   >          <a href="#持久化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h3>      <p>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li></ul>        <h3 id="mybatis的优点"   >          <a href="#mybatis的优点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis的优点"></a> MyBatis的优点</h3>      <ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li></ul><span id="more"></span>        <h2 id="hello-mybatis"   >          <a href="#hello-mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hello-mybatis"></a> Hello MyBatis</h2>      <p><strong>1.  maven中添加依赖</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置路径，保证src中的.xml文件能够被识别，解决静态资源路径问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>2. 配置mybatis-config.xml</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部资源文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将数据库字段名按照驼峰命名规定映射为实体类属性名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给某个类起别名，在mapper配置文件中可以直接使用别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在某个包下扫描所有类，首字母小写后作为其别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhao.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册mapper类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zhao/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>db.properties</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zhaoyuyun</span></span><br></pre></td></tr></table></div></figure><p><strong>注意</strong>：在MyBatis的核心配置文件xml中，配置数据库的参数时，url=xxx&amp;amp;characterset=xxx需要带上转义符号amp; 但是如果通过db.properties中设置参数时不需要加上转义符，只需要&amp;</p><p><strong>3. 编写MyBatis工具类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置自动提交事务</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>4. 注册实体类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;        <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;    <span class="comment">//密码</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//构造,有参,无参</span></span><br><span class="line">    <span class="comment">//set/get</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>5. 编写Mapper接口类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhao.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>6. 编写Mapper.xml配置文件（配置文件中namespace中的名称为对应Mapper接口或者Dao接口的完整包名，必须一致！）</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>7. 测试</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法一:</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList(&quot;com.zhao.mapper.UserMapper.selectUser&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二:</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis-crud"   >          <a href="#mybatis-crud" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis-crud"></a> MyBatis CRUD</h2>              <h3 id="select"   >          <a href="#select" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#select"></a> select</h3>      <p>四种语句的通用属性：</p><ul><li><code>id</code>：命名空间中唯一的标识符，接口中的方法名与映射文件中的SQL语句id一一对应</li><li><code>parameterType</code>：传入SQL语句的参数类型（可以使用万能的Map）</li><li><code>resultType</code>：SQL语句返回值类型（完整的类名或者别名）</li></ul><p><strong>需求：根据id查询用户</strong></p><ol><li><p>在UserMapper中添加对应方法（可以使用<code>@Param</code>注解给形参名起别名）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123; </span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="comment">//根据id查询用户    </span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>在UserMapper.xml中添加select语句（MyBatis会将<code>select *</code>返回的数据库字段名映射为pojo类对象的属性，即去对应的实体类中查找相应字段名的set方法设值【自动映射】，若属性名与数据库字段名不一致，即找不到对应的set方法，则属性值为null，此时需要使用<code>ResultMap</code>）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tsetSelectUserById</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//获取SqlSession连接  </span></span><br><span class="line">    SqlSession session = MybatisUtils.getSession();  </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="insert"   >          <a href="#insert" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#insert"></a> insert</h3>      <p><strong>需求：给数据库增加一个用户</strong></p><ol><li><p>在UserMapper接口中添加对应的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>在UserMapper.xml中添加insert语句（传入形参是pojo时，SQL语句中的#{}会与类对象的属性变量名判断是否能够对应，不能对应的解析为null）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span>     </span><br><span class="line">    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession(); </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;zxcvbn&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.addUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务，不写的话不会提交到数据库，除非设置sqlSessionFactory.openSession(true);</span></span><br><span class="line">    session.commit();</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol><p><strong>注意：增、删、改操作需要提交事务！设置方法：</strong></p><ul><li>每次会话使用完后<code>session.commit();</code></li><li>或在工具类中设置<code>sqlSessionFactory.openSession(true);</code></li></ul>        <h3 id="update"   >          <a href="#update" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#update"></a> update</h3>      <p><strong>需求：修改用户的信息</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.updateUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="delete"   >          <a href="#delete" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#delete"></a> delete</h3>      <p><strong>需求：根据id删除一个用户</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="传参时变量名不一致问题"   >          <a href="#传参时变量名不一致问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#传参时变量名不一致问题"></a> 传参时变量名不一致问题</h3>      <p>当传入的形参变量名称与SQL语句中的#{}中变量名不一致时，有两种解决方案：</p><ol><li>使用<code>@Param</code>注解</li></ol><ul><li>在方法只接受一个参数的情况下，可以不使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</li><li>在方法接受多个参数的情况下，建议一定要使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>注解给参数命名。</li><li>如果参数是 JavaBean ， 则不能使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</li><li>不使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>注解时，参数只能有一个，并且是Javabean。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过密码和名字查询用户</span></span><br><span class="line"><span class="function">User <span class="title">selectUserByNP</span><span class="params">(<span class="meta">@Param(&quot;uname&quot;)</span> String username, <span class="meta">@Param(&quot;pwd&quot;)</span> String password)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;select id=&quot;selectUserByNP&quot; resultType=&quot;com.zhao.pojo.User&quot;&gt;</span></span><br><span class="line"><span class="comment">      select * from user where name = #&#123;uname&#125; and password = #&#123;pwd&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>使用万能的Map</li></ol><p>在接口方法中，参数直接传递Map；</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUserByNP2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></div></figure><p>编写SQL语句的时候，需要传递参数类型，参数类型为Map</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNP2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;uname&#125; and password = #&#123;pwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;小明&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">User user = mapper.selectUserByNP2(map);</span><br></pre></td></tr></table></div></figure><p><strong>小结：</strong></p><ul><li>所有的增删改操作都需要提交事务</li><li>接口所有的普通参数，尽量都写上<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>参数，尤其是多个参数时，必须写上</li><li>有时候根据业务的需求，可以考虑使用map传递参数</li><li>为了规范操作，在SQL的配置文件中，尽量将Parameter参数和resultType都写上</li></ul>        <h3 id="与的区别"   >          <a href="#与的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#与的区别"></a> #与$的区别</h3>      <ul><li><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? ，其可以防止SQL注入问题【推荐使用】</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (#&#123;name&#125;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (?);</span><br></pre></td></tr></table></div></figure></li><li><p>${} 的作用是直接进行字符串替换</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;$&#123;name&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="mybatis配置解析"   >          <a href="#mybatis配置解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis配置解析"></a> MyBatis配置解析</h2>              <h3 id="核心配置文件"   >          <a href="#核心配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#核心配置文件"></a> 核心配置文件</h3>      <ul><li>mybatis-config.xml 系统核心配置文件</li><li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li><li>能配置的内容如下：</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="environments"   >          <a href="#environments" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#environments"></a> environments</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC|MANAGED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED|POOLED|JNDI&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p><p>子元素节点：<strong>environment</strong></p><ul><li>具体的一套环境，通过设置id进行区别，id保证唯一</li><li>子元素节点：transactionManager - [ 事务管理器 ]<ul><li>详情：<span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/configuration.html#environments" >点击查看官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>这两种事务管理器类型都不需要设置任何属性。</li></ul></li><li>子元素节点：<strong>数据源（dataSource）</strong><ul><li>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</li><li>数据源是必须配置的。</li><li>有三种内建的数据源类型</li><li>unpooled： 这个数据源的实现只是每次被请求时打开和关闭连接。</li><li><strong>pooled</strong>： 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</li><li>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</li><li>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</li></ul></li></ul>        <h3 id="mappers"   >          <a href="#mappers" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mappers"></a> mappers</h3>      <p>映射器 : 定义映射SQL语句文件。</p>        <h4 id="引入资源方式"   >          <a href="#引入资源方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#引入资源方式"></a> 引入资源方式</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器但是需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="mapper文件"   >          <a href="#mapper文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapper文件"></a> Mapper文件</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>namespace中文意思：命名空间，作用如下：</p><ol><li>namespace和子元素的id联合保证唯一，区别不同的mapper</li><li>绑定DAO接口<ul><li>namespace的命名必须跟某个接口同名</li><li>接口中的方法与映射文件中sql语句id应该一一对应</li></ul></li><li>namespace命名规则 : 包名+类名</li></ol>        <h3 id="typealiases"   >          <a href="#typealiases" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#typealiases"></a> typeAliases</h3>      <p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>当这样配置时，<code>User</code>可以用在任何使用<code>com.zhao.pojo.User</code>的地方。也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhao.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>每一个在包 <code>com.zhao.pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>若有注解，则别名为其注解值：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="settings"   >          <a href="#settings" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#settings"></a> settings</h3>      <p><span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" >设置（settings）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>相关</p><ul><li>懒加载</li><li>日志实现</li><li>缓存开启关闭</li></ul><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="resultmap"   >          <a href="#resultmap" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#resultmap"></a> ResultMap</h2>      <p><strong>要解决的问题：pojo属性名和数据库字段名不一致</strong>。解决方案：</p><ol><li><p>方案一：为字段名指定别名，别名和java实体类的属性名一致 .</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>    </span><br><span class="line">    select id, name, pwd as password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ol><p><strong>2. 方案二：使用结果集映射-&gt;ResultMap</strong> 【推荐】</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="自动映射"   >          <a href="#自动映射" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动映射"></a> 自动映射</h3>      <ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让开发人员从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来。</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li></ul><p>默认情况没有显式指定 <code>resultMap</code>。比如：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。我们的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p>        <h3 id="手动映射"   >          <a href="#手动映射" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#手动映射"></a> 手动映射</h3>      <ol><li><p>返回值类型为<code>resultMap</code></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>编写<code>resultMap</code>，实现手动映射</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名, property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ol>        <h2 id="使用注解开发"   >          <a href="#使用注解开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用注解开发"></a> 使用注解开发</h2>      <p>使用注解开发时不需要再写mapper.xml文件，直接在接口类的方法上添加注解即可。共有四个注解 :</p><ul><li><code>@select()</code></li><li><code>@update()</code></li><li><code>@Insert()</code></li><li><code>@delete()</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id删除用</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis执行流程分析"   >          <a href="#mybatis执行流程分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis执行流程分析"></a> MyBatis执行流程分析</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用class绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    <span class="comment">//本质上利用了jvm的动态代理机制</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">●   List&lt;User&gt; users = mapper.getAllUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>利用Debug查看本质</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy116bbcb8-3fb6-457d-829b-174782854039.png" alt="img" /></p><p><code>sqlSession</code>对象内包含：</p><ul><li><code>configuration</code>：用于加载<code>mybatis-config.xml</code>文件中的所有配置信息；</li><li><code>executor</code>：执行器，用于执行sql语句，含有缓存等信息。</li></ul><p><code>mapper</code>对象是指定<code>Mapper</code>接口的<strong>动态代理类</strong>，包含：</p><ul><li><code>sqlSession</code>：每个<code>mapper</code>都拥有一份<code>sqlSession</code>对象，用于执行sql语句；</li><li><code>mapperInterface</code>：通过反射机制获取<code>Mapper</code>接口的全路径名等信息；</li><li><code>methodCache</code>：方法缓存，包含接口的每个方法和实现。</li></ul><p>首先通过反射机制从<code>session.getMapper(UserMapper.class);</code>中获取到接口信息，然后动态创建出一个代理类对象<code>mapper</code>，其实现了接口的所有方法，使用该代理类执行相应的sql语句。</p><p>本质上利用了jvm的动态代理机制</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy49f6378c-cff1-46c0-9a2b-aec78e014953.png" alt="img" /></p><p>Mybatis详细的执行流程</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudyd3552e34-af83-4ce8-a4ab-45feb0fee43f.png" alt="img" /></p>        <h2 id="多对一处理"   >          <a href="#多对一处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多对一处理"></a> 多对一处理</h2>      <p>多对一的理解：多个学生对应一个老师</p>        <h3 id="按查询嵌套处理"   >          <a href="#按查询嵌套处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按查询嵌套处理"></a> 按查询嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">        2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">        3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">            1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">            2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">            3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">               多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">            4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">      select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association关联属性  property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">    association中column多参数配置：</span></span><br><span class="line"><span class="comment">        column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">        其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="按结果嵌套处理"   >          <a href="#按结果嵌套处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按结果嵌套处理"></a> 按结果嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>      <ul><li>按照<strong>查询</strong>进行嵌套处理就像SQL中的子查询</li><li>按照<strong>结果</strong>进行嵌套处理就像SQL中的联表查询</li></ul>        <h2 id="一对多处理"   >          <a href="#一对多处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一对多处理"></a> 一对多处理</h2>      <p>一对多的理解：一个老师拥有多个学生，即一个老师拥有一群学生（集合）</p>        <h3 id="按结果嵌套处理-2"   >          <a href="#按结果嵌套处理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按结果嵌套处理-2"></a> 按结果嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">        2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">            1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">                JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">                JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">                ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="按查询嵌套处理-2"   >          <a href="#按查询嵌套处理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按查询嵌套处理-2"></a> 按查询嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">  select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="小结-2"   >          <a href="#小结-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3>      <ul><li>关联-association用于一对一和多对一</li><li>集合-collection用于一对多的关系</li></ul><p>JavaType和ofType都是用来指定对象类型的</p><ul><li>JavaType是用来指定pojo中属性的类型</li><li>ofType指定的是映射到list集合属性中pojo的类型。</li></ul>        <h2 id="动态sql"   >          <a href="#动态sql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态sql"></a> 动态SQL</h2>      <p><span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="介绍"   >          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3>      <p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。    </span><br><span class="line">虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。    </span><br><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  </span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line">- if    </span><br><span class="line">- choose (when, otherwise)</span><br><span class="line">- trim (where, set)</span><br><span class="line">- foreach    </span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></div></figure><p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p><p>那么怎么去解决这个问题呢？这就要使用 MyBatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>        <h3 id="if"   >          <a href="#if" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#if"></a> if</h3>      <p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#{title}，但是如果title为空呢？那么查询语句为 select * from user where and author=#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p>        <h3 id="where"   >          <a href="#where" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#where"></a> where</h3>      <p>修改上面的SQL语句：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以 AND 或 OR 开头的，则它会剔除掉。【使用最频繁】</p>        <h3 id="set"   >          <a href="#set" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set"></a> set</h3>      <p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">              title = #&#123;title&#125;,</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">              author = #&#123;author&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="choose"   >          <a href="#choose" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#choose"></a> choose</h3>      <p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                 title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="sql片段"   >          <a href="#sql片段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#sql片段"></a> SQL片段</h3>      <p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p><p><strong>提取SQL片段：</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>引用SQL片段：</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li>最好基于 单表来定义 sql 片段，提高片段的可重用性</li><li>在 SQL 片段中不要包括 where</li></ul>        <h3 id="foreach"   >          <a href="#foreach" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#foreach"></a> foreach</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">        item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">        open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">        close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">        separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">        select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    </span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    </span><br><span class="line">    System.out.println(blogs);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis缓存"   >          <a href="#mybatis缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis缓存"></a> MyBatis缓存</h2>              <h3 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>      <p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>为什么使用缓存？：减少和数据库的交互次数，减少系统开销，提高系统效率。什么样的数据能使用缓存？：经常查询并且不经常改变的数据。</p>        <h3 id="mybatis缓存-2"   >          <a href="#mybatis缓存-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis缓存-2"></a> Mybatis缓存</h3>      <p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li>默认情况下，只有一级缓存开启，他是<strong>SqlSession</strong>级别的缓存，也称为本地缓存</li><li>二级缓存需要手动开启和配置，他是基于<strong>namespace</strong>级别的缓存</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li><li><strong>新的会话查询前会先查找二级缓存中是否有对应数据，若没有再去数据库查找</strong></li></ul>        <h3 id="一级缓存"   >          <a href="#一级缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一级缓存"></a> 一级缓存</h3>      <p>一级缓存也叫本地缓存：</p><ul><li>与数据库<strong>同一次会话期间</strong>（SqlSession）查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    User user1 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    </span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>user1==user2</code>判断结果为true，即同一个SqlSession中查询到的数据会保存到一级缓存中。<strong>每个sqlSession中的缓存相互独立</strong></p><p>一级缓存失效的情况：</p><ul><li>两次查询之间执行了增删改操作（因为增删改操作可能会对当前数据产生影响，所以一级缓存清空）</li><li>手动清除一级缓存<code>session.clearCache();</code></li></ul><p><strong>一级缓存就是一个map</strong></p>        <h3 id="二级缓存"   >          <a href="#二级缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二级缓存"></a> 二级缓存</h3>      <p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存。二级缓存是基于<strong>namespace</strong>级别的缓存，一个名称空间，对应一个二级缓存；</p><p>工作机制：</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li></ul><p>开启二级缓存步骤：</p><ol><li>开启全局缓存 【mybatis-config.xml】</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>去每个mapper.xml中配置使用二级缓存</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 --&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>代码测试</li></ol><ul><li>所有的实体类先实现序列化接口</li><li>测试</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">    </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>结论</strong></p><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li><strong>查出的数据都会被默认先放在一级缓存中</strong></li><li><strong>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</strong></li></ul>        <h3 id="缓存原理"   >          <a href="#缓存原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缓存原理"></a> 缓存原理</h3>      <p>新会话创建后本身没有一级缓存，其在查询前会先在二级缓存中查找是否有对应的数据，若没有再去数据库查找</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy203221f0-73d7-4d4c-bb81-84b1af9a63db.png" alt="img" /></p>        <h3 id="ehcache"   >          <a href="#ehcache" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ehcache"></a> EhCache</h3>      <p>第三方缓存实现—EhCache：Ehcache是一种广泛使用的java分布式缓存，用于通用缓存。<span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/ehcache-cache/" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>要在应用程序中使用Ehcache，需要引入依赖的jar包</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在mapper.xml中使用对应的缓存即可</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">“org.acme.FooMapper”</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span> = <span class="string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写ehcache.xml文件，如果在<code>加载时</code>未找到<code>/ehcache.xml</code>资源或出现问题，则将使用默认配置。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>  <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】常用Git命令</title>
      <link href="2021/05/15/%E3%80%90Git%E3%80%91%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/"/>
      <url>2021/05/15/%E3%80%90Git%E3%80%91%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[        <h2 id="常用流程"   >          <a href="#常用流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常用流程"></a> 常用流程</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git remote add origin 远程仓库地址</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span></span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></div></figure>        <h3 id="在远程分支与本地分支之间建立联系"   >          <a href="#在远程分支与本地分支之间建立联系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#在远程分支与本地分支之间建立联系"></a> 在远程分支与本地分支之间建立联系</h3>      <p>在本地分支新创建的分支没有与远程分支建立联系，需要使用以下指令建立本地分支与远程分支的联系，之后即可pull</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/dev dev</span><br><span class="line"></span><br><span class="line">git pull origin dev</span><br></pre></td></tr></table></div></figure>        <h3 id="更新远程分支列表"   >          <a href="#更新远程分支列表" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#更新远程分支列表"></a> 更新远程分支列表</h3>      <p>在远程仓库的分支发生变化而本地仓库的分支没有更新时使用</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune</span><br><span class="line">git fetch --all</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】文件上传</title>
      <link href="2021/04/28/%E3%80%90JavaWeb%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/04/28/%E3%80%90JavaWeb%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[        <h2 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2>      <p>apache的开源工具common-fileupload包负责完成文件上传，其依赖于common-io包</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="使用类介绍"   >          <a href="#使用类介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用类介绍"></a> 使用类介绍</h2>      <p>文件上传的注意事项：</p><ul><li>为保证服务器安全，上传文件应该放在外界无法访问的目录下，比如<code>WEB-INF</code>目录下（<strong>该目录下的文件只能通过转发和重定向跳转</strong>）</li><li>为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名（使用uuid或时间戳）</li><li>要限制上传文件的最大值</li><li>可以限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法</li></ul><p>使用类：</p><ul><li><strong>DiskFileItemFactory</strong>：解析ServletFileUpload对象</li><li><strong>ServletFileUpload</strong>：负责处理上传的文件数据，并将表单中每个输入项封装成一个FileItem对象</li><li><strong>FileItem</strong>：表单的每个输入项都是一个FileItem对象</li></ul><span id="more"></span>        <h2 id="用法示例"   >          <a href="#用法示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#用法示例"></a> 用法示例</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;%-- 通过表单上传文件</span><br><span class="line">     get：上传文件大小有限制</span><br><span class="line">     post：上传文件大小没限制</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload.do&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    上传用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span> | <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;</span><br><span class="line">    FileItemFactory fileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload servletFileUpload = <span class="keyword">new</span> ServletFileUpload(fileItemFactory);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">            <span class="comment">// 普通表单项</span></span><br><span class="line">            System.out.println(fileItem.getFieldName());</span><br><span class="line">            System.out.println(fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileItem.write(<span class="keyword">new</span> File(<span class="string">&quot;D:\\fileItem.getFieldName()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring 汇总</title>
      <link href="2021/04/23/%E3%80%90Spring%E3%80%91Spring5-%E6%B1%87%E6%80%BB/"/>
      <url>2021/04/23/%E3%80%90Spring%E3%80%91Spring5-%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%B1%87%E6%80%BB/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="spring-内容汇总"   >          <a href="#spring-内容汇总" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-内容汇总"></a> Spring 内容汇总</h2>              <h3 id="源码分析"   >          <a href="#源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#源码分析"></a> 源码分析</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/14/%E3%80%90Spring%E3%80%91Spring5-IoC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 IoC源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-AOP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 AOP源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/05/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring】Spring5 事务源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/13/%E3%80%90SpringMVC%E3%80%91SpringMVC-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring MVC】Spring MVC 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/07/12/%E3%80%90SpringBoot%E3%80%91SpringBoot2-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >【Spring Boot】Spring Boot2 源码分析</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/28/%E3%80%90Spring%E3%80%91Spring5-%E6%BA%90%E7%A0%81%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/" >【Spring】Spring5 源码中常用接口的底层原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="学习笔记"   >          <a href="#学习笔记" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#学习笔记"></a> 学习笔记</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/05/24/%E3%80%90Spring%E3%80%91Spring5-IoC/" >【Spring】Spring5 IoC</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/05/29/%E3%80%90Spring%E3%80%91Spring5-AOP/" >【Spring】Spring5 AOP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/05/31/%E3%80%90Spring%E3%80%91Spring5-%E4%BA%8B%E5%8A%A1/" >【Spring】Spring5 事务</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/25/%E3%80%90Spring%E3%80%91Spring5-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/" >【Spring】Spring5 注解驱动开发</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/03/%E3%80%90SpringMVC%E3%80%91SpringMVC/" >【Spring MVC】Spring MVC</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/03/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/" >【Spring MVC】SSM整合案例</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://yuyun-zhao.github.io/2021/06/30/%E3%80%90SpringBoot%E3%80%91SpringBoot2/" >【Spring Boot】Spring Boot2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】JavaWeb基础</title>
      <link href="2021/04/16/%E3%80%90JavaWeb%E3%80%91JavaWeb/"/>
      <url>2021/04/16/%E3%80%90JavaWeb%E3%80%91JavaWeb/</url>
      
        <content type="html"><![CDATA[        <h2 id="javaweb"   >          <a href="#javaweb" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javaweb"></a> JavaWeb</h2>      <p>JavaWeb是指所有通过Java语言编写的，可以通过浏览器访问的程序的总称。JavaWeb是基于请求和响应开发的。</p><ul><li>请求：客户端给服务器发送数据，Request</li><li>响应：服务器给客户端传回数据，Response</li></ul><p>JavaWeb三大组件：Servlet程序、Filter过滤器、Listener监听器</p>        <h2 id="http"   >          <a href="#http" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2>      <p>HTTP：超文本传输协议。是一个简单的请求-响应协议，通常运行在TCP之上，端口号：80。HTTPS相比HTTP更为安全。HTTP两个时代：</p><ul><li>HTTP1.0：客户端与web服务器连接后，只能获得一个web资源。</li><li>HTTP2.0：客户端与web服务器连接后，可以获得多个web资源。</li></ul>        <h3 id="http请求"   >          <a href="#http请求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http请求"></a> HTTP请求</h3>      <p><strong>请求行</strong>：</p><ul><li>请求行中的请求方式：<code>GET</code>或<code>POST</code></li><li>请求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>、<code>DELETE</code>、<code>PUT</code><ul><li><code>GET</code>：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li><code>POST</code>：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li></ul></li></ul><p><strong>GET请求</strong></p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501214204632.png" alt="image-20210501214204632" /></p><p><strong>POST请求</strong></p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501214745892.png" alt="image-20210501214745892" /></p>        <h3 id="http-响应"   >          <a href="#http-响应" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http-响应"></a> HTTP 响应</h3>      <p>响应状态码：</p><ul><li>101：转换协议（例如HTTP协议转换成WebSocket协议）</li><li>200：请求响应成功</li><li>3xx：请求与重定向</li><li>4xx：找不到资源（404 资源不存在），都是客户端的错误（比如输入错误的地址）</li><li>5xx：服务器代码错误（500），网关错误（502）</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501215225830.png" alt="image-20210501215225830" /></p><span id="more"></span>        <h2 id="tomcat"   >          <a href="#tomcat" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h2>      <p><strong>Tomcat</strong>是由Apache软件基金会属下<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Jakarta%E9%A1%B9%E7%9B%AE" >Jakarta项目</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>开发的<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Servlet" >Servlet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>容器，按照<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Sun_Microsystems" >Sun Microsystems</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提供的技术规范，实现了对<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Servlet" >Servlet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/JavaServer_Page" >JavaServer Page</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/JSP" >JSP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全局管理和Tomcat阀等。由于Tomcat本身也内含了<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/HTTP" >HTTP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此也可以视作单独的<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8" >Web服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。Tomcat提供了一个Jasper<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8" >编译器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>用以将JSP编译成对应的Servlet。</p><p>在官网安装Tomcat 9.0.45版本压缩包，解压到本地即可，无需配置环境变量。在构建Servlet项目时，在IDEA中指定Tomcat根目录即可使用Tomcat。</p>        <h2 id="maven"   >          <a href="#maven" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven"></a> Maven</h2>              <h3 id="maven项目架构管理工具"   >          <a href="#maven项目架构管理工具" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven项目架构管理工具"></a> Maven项目架构管理工具</h3>      <p>用于方便导入jar包。核心思想：约定大于配置。有约束，不要去违反。Maven会规定好如何去编写Java代码，必须按照这个规范组织结构。</p><p>修改为Maven阿里云镜像：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>修改本地仓库的位置：<code>localRepository</code></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.8.1\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="maven仓库"   >          <a href="#maven仓库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven仓库"></a> Maven仓库</h3>      <p>Maven repository：<span class="exturl"><a class="exturl__link"   href="https://mvnrepository.com/" >https://mvnrepository.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="maven约定"   >          <a href="#maven约定" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven约定"></a> Maven约定</h3>      <p>创建JavaWeb项目时，webapp目录创建在src/main目录下才能够自动导入maven配置文件中添加的包，否则需要在项目结构中手动导入包。</p>        <h2 id="servlet"   >          <a href="#servlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h2>      <p>Servlet是Sun公司开发动态web的一门技术。Sun在这些API中提供了一个接口：Servlet。开发Servlet程序需要完成两个步骤：</p><ul><li>编写一个Java类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中</li></ul><p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p>        <h3 id="helloservlet"   >          <a href="#helloservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#helloservlet"></a> HelloServlet</h3>      <p>Sevlet接口Sun公司提供有两个默认的实现类：HttpServlt，GenericServlet</p><ol><li><p>构建一个普通的Maven项目（不带模板），删掉里面的src目录，这个空的工程就是Maven的主工程。之后在这个项目里建立Module，新建的Module均为Maven父项目的子项目。</p></li><li><p>关于Maven父子工程的理解：在父项目中会有</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>父项目中的Maven依赖环境Jar包子项目可以直接使用</p></li><li><p>Maven环境优化：修改web.xml（与本地Tomcat中的内容一致）</p></li></ol>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>编写一个Servlet程序<ul><li>编写一个普通类</li><li>实现Servlet接口，这里继承HttpServlet</li></ul></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于get或者post只是请求实现的不同方式，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>编写Servlet映射：写的Java程序要通过浏览器访问，浏览器需要连接web服务器，所以需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能访问到的路径。</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="6"><li>配置Tomcat，注意配置项目发布的路径</li><li>启动测试</li></ol>        <h3 id="servlet原理"   >          <a href="#servlet原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet原理"></a> Servlet原理</h3>      <p>Servlet是由web服务器调用，web服务器在收到浏览器请求后会调用<code>service()</code>方法，该方法会根据请求的类型<code>GET</code>或<code>POST</code>分发处理，执行相应的<code>doGet()</code>或<code>doPost()</code>方法。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501200459226.png" alt="image-20210501200459226" /></p>        <h3 id="mapping问题"   >          <a href="#mapping问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapping问题"></a> Mapping问题</h3>      <ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>一个Servlet可以指定多个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>一个Servlet可以指定通用映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>默认请求路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>优先级问题：</p><p>指定了<strong>固有的映射路径优先级最高</strong>，如果找不到匹配的固有映射路径，则就会走默认路径（*)</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Error Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ErrorServlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="servletcontext"   >          <a href="#servletcontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletcontext"></a> ServletContext</h3>      <p>是一个接口，代表Servlet上下文对象，一个工程只有一个ServletContext对象，是一个域对象（这里的域指的是整个web工程）。</p><p>web容器在启动时，他会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用。</p><p>作用1：共享数据，即在某个Servlet中保存的数据可以在另一个Servlet中获得。</p><p>存入数据的Servlet类，用于保存数据到ServletContext对象中。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// this.getInitParameter();  初始化参数</span></span><br><span class="line">        <span class="comment">// this.getServletConfig();  Servlet配置</span></span><br><span class="line">        <span class="comment">// this.getServletContext(); Servlet上下文</span></span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = <span class="string">&quot;zhangsan&quot;</span>; <span class="comment">// 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个数据以键值对形式保存在了ServletContext中。</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>读入数据的Servlet类，用于从ServletContext对象中读取数据。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String)context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>作用2：获取初始化参数。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是上下文参数（属于整个web工程） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">resp.getWriter().print(url);</span><br></pre></td></tr></table></div></figure><p>作用3：请求转发。</p><p>访问当前url时，将消息转发给指定的其他url（当前url不会发生变化，重定向会变化）。当前url只充当转发功能。<strong>请求转发不需要添加项目名，只需要/+映射路径</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发的请求参数</span></span><br><span class="line">RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/servlet01&quot;</span>);</span><br><span class="line">requestDispatcher.forward(req, resp); <span class="comment">// 调用forward实现请求转发</span></span><br></pre></td></tr></table></div></figure><p>请求转发的特点：</p><ul><li>浏览器地址栏没有变化</li><li>是一次请求</li><li>共享Request域中的数据</li><li>可以转发到<code>WEB-INF</code>目录下</li><li>无法访问项目以外的其他资源（如百度）</li></ul><p>作用4：读取资源文件</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现都被打包到了同一个路径下：<code>/WEB-INF/classes</code>，将这个路径称为classpath。</p><p><strong>classpath</strong>：<code>src/main/</code>下的<code>java</code>目录和<code>resources</code>目录下的文件会被合并到<code>/WEB-INF/classes</code>下，将该路径称为classpath</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(resourceAsStream);</span><br><span class="line">String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">resp.getWriter().print(url + <span class="string">&#x27;:&#x27;</span> + password);</span><br></pre></td></tr></table></div></figure>        <h3 id="httpservletresponse"   >          <a href="#httpservletresponse" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletresponse"></a> HttpServletResponse</h3>      <p>web服务器接收到客户端的HTTP请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象。</p><ul><li>如果要获取客户端请求过来的参数，使用HttpServletRequest</li><li>如果要给客户端响应一些信息，使用HttpServletResponse</li></ul><p>负责向浏览器发送数据的方法：</p><ul><li><code>getOutputStream()</code></li><li><code>getWriter()</code></li></ul><p>常见应用：</p><ol><li>向浏览器输出消息</li><li>下载文件</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置让浏览器能够支持附件下载</span></span><br><span class="line">respones.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br></pre></td></tr></table></div></figure><ol start="3"><li>实现重定向</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/projectName/url&quot;</span>); <span class="comment">// 重定向到其他url</span></span><br></pre></td></tr></table></div></figure><p><strong>重定向和转发的区别</strong></p><ul><li>请求转发时，url不会发生变化。（转发在服务器内部完成，不需要加项目名路径，如&quot;/工程名&quot;）</li><li>重定向时，url会发生变化。（需要加项目名路径，如&quot;/projectName/url&quot;)</li><li>请求转发是服务器级别的，可以访问/WEB-INF/下的资源</li><li>重定向是浏览器级别的，无法访问/WEB-INF/下的资源</li><li>请求转发会将斜杠&quot;/&quot;发送给服务器解析，得到http://ip:port/工程名</li><li>重定向会将斜杠&quot;/&quot;发送给浏览器解析，得到http://ip:port/</li></ul><p>在前端文件中写跳转链接时，因其不能得知服务器内部的项目结构，因此需要人为指定contextPath（在Servlet程序中不需要再指定当前项目在服务器内的路径）</p><p>细节：当用户提交完请求，浏览器会记录下最后一次请求的全部信息。当用户按下功能键F5，就会发起浏览器记录的最后一次请求。在此情况下如果使用请求转发的方式跳转页面，用户按下F5后会再次发起请求，因此这种情况应该使用重定向。</p>        <h3 id="httpservletrequest"   >          <a href="#httpservletrequest" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletrequest"></a> HttpServletRequest</h3>      <p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP协议中的所有消息信息会被封装到HttpServletRequest，通过该类的方法可以获得客户端传来的请求信息。</p><ol><li>获取传递的参数</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="2"><li>请求转发</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(requset, response);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501221519475.png" alt="image-20210501221519475" /></p><ol start="3"><li>获取请求头中Referer信息（浏览器发起请求时的url），可用于重定向回原地址</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = req.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="web中-斜杠的不同意义"   >          <a href="#web中-斜杠的不同意义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web中-斜杠的不同意义"></a> Web中 / 斜杠的不同意义</h3>      <ul><li>浏览器内代表所有资源：<code>/**</code></li><li>服务器内代表所有资源：<code>/</code></li></ul><p>在Web中，/ 是一种<strong>绝对路径</strong>：</p><ul><li>/ 如果被<strong>浏览器</strong>解析，得到的地址是：<code>http://ip:port/</code> （指写在静态html代码中，无法被服务器解析，只能被浏览器解析）</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>/ 如果被<strong>服务器</strong>解析，得到的地址是：<code>http://ip:port/工程路径/</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 映射</span></span><br><span class="line">&lt;url-pattern&gt;/servlet1&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line">servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求转发</span></span><br><span class="line">request.getRequestDispacther(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></div></figure><ul><li>特殊情况：<code>response.sendRedirect(&quot;/&quot;);</code>会将斜杠发送给浏览器解析，得到<code>http://ip:port/</code> ，因此需要再加上工程名<code>response.sendRedirect(&quot;/projectName/xxx&quot;);</code></li></ul><p><strong>/WEB-INF/目录下的资源文件，客户端无法直接访问（即不能在浏览器中输入url直接跳转），而只能在servlet程序中跳转</strong></p><p><strong>在IDEA中，&quot;/“代表的项目文件路径为”<code>target/项目名-1.0-SNAPSHOT/</code>&quot;</strong></p><p>在Web应用的前端程序（.jsp）中：</p><ul><li>不以 / 开始的相对路径找资源时以<strong>当前资源的路径为基准</strong>，容易出现问题（不推荐使用）</li><li>以 / 开始的相对路径找资源时以<code>http://ip:port/</code>为基准，不包含<strong>当前项目名称路径</strong>，因此需要在资源前加上<code>$&#123;pageContext.request.contextPath&#125;/</code>以使程序能找到&quot;<code>target/项目名-1.0-SNAPSHOT/</code>&quot;下的资源文件。例如若想在.jsp文件中引入css文件的路径，需要写 <code>href=&quot;$&#123;pageContext.request.contextPath&#125;/css/style.css&quot;</code></li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210604105603326.png" alt="image-20210604105603326" /></p>        <h2 id="cookie-session"   >          <a href="#cookie-session" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cookie-session"></a> Cookie Session</h2>      <p>会话：用户打开一个浏览器，访问了一些web资源，关闭浏览器，这个过程可以称为一个会话。</p><p>有状态会话：浏览器能够保存客户端信息的会话。</p>        <h3 id="保存会话"   >          <a href="#保存会话" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#保存会话"></a> 保存会话</h3>      <p><strong>Cookie</strong>：客户端技术（请求，响应），服务器给客户端创建Cookie。是服务器通知客户端保存键值对的一种技术，客户端有了Cookie后，每次请求都会发送给服务器，每个Cookie的大小不能超过4kb</p><p><strong>Session</strong>：服务器技术，可以保存用户的会话信息。可以把信息和数据放在session中</p>        <h3 id="cookie"   >          <a href="#cookie" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h3>      <p>服务器创建Cookie</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210505095556020.png" alt="image-20210505095556020" /></p><p>服务器获取客户端的Cookie</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210505100507884.png" alt="image-20210505100507884" /></p><ol><li>从请求中拿到Cookie信息</li><li>服务器响应给客户端Cookie</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">// 获得cookies</span></span><br><span class="line"></span><br><span class="line">cookie.getName(); <span class="comment">// 获得cookie中的Key</span></span><br><span class="line">cookie.getValue(); <span class="comment">// 获得cookie中的Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;keyName&quot;</span>, value); <span class="comment">// 新建一个Cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">// 设置cookie的有效期，不设置默认关闭浏览器时删除</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">// 响应给客户端一个cookie</span></span><br></pre></td></tr></table></div></figure><p>删除Cookie的方法：</p><ul><li>不设置有效期，关闭浏览器（关闭Session），自动失效；</li><li>设置有效期，时间为0。</li></ul><p>Cookie有效路径Path的设置：通过设置path路径可以过滤掉不符合路径的Cookie。</p>        <h3 id="session"   >          <a href="#session" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#session"></a> Session</h3>      <p>服务器会给每一个用户（浏览器）创建一个Session对象。一个Session独占一个浏览器，只要浏览器没关，这个Session就一直存在。用户登录之后，整个网站都可以访问到用户信息。</p><p>Session技术，底层是基于Cookie技术实现的：每次创建出的Session对象都会保存成一个Cookie对象传给浏览器保存（该Cookie对象的生命周期为Session级别，即关闭浏览器后销毁）。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210506103813937.png" alt="image-20210506103813937" /></p><p>Session和Cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li><li>Session是把用户的浏览器写到用户独占的Session中，服务器保存（保存重要的信息，减少资源的浪费）</li><li>Session对象由服务器创建</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息</li><li>购物车信息</li><li>在整个网站中经常用到的数据</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在session中存入信息</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从session中获取信息</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">String name = session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注销session</span></span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></div></figure><p>Session销毁方法：</p><ol><li>手动销毁：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSession().invalidate();</span><br></pre></td></tr></table></div></figure><ol start="2"><li>自动销毁：设置会话自动过期：web.xml配置</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 15分钟后过期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="jsp"   >          <a href="#jsp" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp"></a> JSP</h2>      <p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于动态web技术。JSP页面中可以嵌入Java代码，为用户提供动态数据。其主要用于代替Servlet程序回传html页面的数据。</p>        <h3 id="jsp原理"   >          <a href="#jsp原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp原理"></a> JSP原理</h3>      <p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet。在Tomcat部署网页后，会为每个JSP文件生成对应的Java代码（放在work目录下），即<strong>JSP最终会被转换成Java源码</strong>，<strong>JSP本质上就是一个Servlet</strong>。</p><p>在JSP页面中，Java代码会原封还不动的输出，html代码会进行转换：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210423133239836.png" alt="image-20210423133239836" /></p>        <h3 id="jsp基础语法"   >          <a href="#jsp基础语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp基础语法"></a> JSP基础语法</h3>      <p><strong>JSP表达式</strong>：将结果输出到客户端</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- JSP表达式</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSP脚本片段</strong>：代码片段会被生成到_jspService方法中作为Java代码的一部分。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- jsp脚本片段 --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSP声明</strong>：会被编译到JSP生成的Java的类中，作为属性或方法声明。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了test方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="jsp指令"   >          <a href="#jsp指令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp指令"></a> JSP指令</h3>      <p>静态包含：<code>&lt;%@ include file=&quot;common/header.jsp&quot; %&gt;</code></p><p>特点：静态包含不会翻译被包含的jsp页面，其实是把被包含的jsp页面的代码拷贝到包含的位置执行输出，两个页面的作用域会冲突。</p><p>动态包含：<code>&lt; jsp:include page=&quot; &quot; &gt;&lt;/jsp:include&gt;</code></p><p>特点：动态包含会被包含的jsp页面翻译成java代码，两个页面的作用域不会冲突。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page args... %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--@ include ：静态包含，会将两个页面合而为一，在这里定义的变量不能重复，作用域冲突--%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;common/header.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;common/footer.jsp&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- JSP标签</span><br><span class="line">    jsp:include 拼接两个页面，本质还是三个网页，在这里定义的变量可以重复，作用域不冲突</span><br><span class="line">&lt; jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt; jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span> /&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="九大内置对象"   >          <a href="#九大内置对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#九大内置对象"></a> 九大内置对象</h3>      <ul><li>PageContext</li><li>Request</li><li>Response</li><li>Session</li><li>Application【ServletContext】</li><li>Config【ServletConfig】</li><li>out</li><li>page</li><li>exception</li></ul><p>四个能够保存数据信息的对象：</p><ul><li>PageContext：保存的数据只在一个页面中有效</li><li>Request：保存的数据只在一次请求中有效，请求转发会携带这个数据</li><li>Session：保存的数据只在一次会话中有效，从打开服务器到关闭服务器</li><li>Application【ServletContext】：保存的数据只在服务器中有效，从打开服务器到关闭服务器</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">   pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;zhangsan1&quot;</span>);  <span class="comment">// 保存的数据只在一个页面中有效</span></span><br><span class="line">   request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;zhangsan2&quot;</span>);      <span class="comment">// 保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">   session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;zhangsan3&quot;</span>);      <span class="comment">// 保存的数据只在一次会话中有效，从打开服务器到关闭服务器</span></span><br><span class="line">   application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;zhangsan4&quot;</span>);  <span class="comment">// 保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">   String name1 = (String) pageContext.getAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">   String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">   String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">   String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line"></span><br><span class="line">   request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;zhangsan2&quot;</span>);</span><br><span class="line">   session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;zhangsan3&quot;</span>);</span><br><span class="line">   application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;zhangsan4&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="out和responsegetwriter区别"   >          <a href="#out和responsegetwriter区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#out和responsegetwriter区别"></a> out和response.getWriter()区别</h3>      <p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210502203944192.png" alt="image-20210502203944192" /></p>        <h3 id="jsp标签-jstl标签-el表达式"   >          <a href="#jsp标签-jstl标签-el表达式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp标签-jstl标签-el表达式"></a> JSP标签、JSTL标签、EL表达式</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>EL（Expression Language）表达式</strong>：<code>$&#123;&#125;</code></p><ul><li>获取数据：<code>$&#123;username&#125;</code></li><li>执行运算：<code>$&#123;param.username==&quot;zhangsan&quot;&#125;</code></li><li>获取web开发的常用对象：<code>$&#123;param.username&#125;</code></li></ul><p><strong>JSP标签</strong></p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param name=&quot;name&quot;, value=&quot;zhangsan&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;age&quot;, value=&quot;3&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足，它自定义了许多标签，可以供我们使用 ，标签的功能和Java代码一样。</p><ul><li><strong>核心标签</strong></li><li>格式化标签</li><li>SQL标签</li><li>XML标签</li></ul><p><strong>JSTL标签库使用步骤：</strong></p><ol><li>引入对应的taglib才能使用JSTL标签</li></ol><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=:http:<span class="comment">//java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>在Tomcat也需要引入JSTL的包，否则无法解析JSTL库</li><li>使用其中的方法</li></ol><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span> &gt;</span><br><span class="line">&lt;c:out value=&quot;管理员欢迎您&quot;&gt;&lt;/c:out&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></div></figure><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;&amp;&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="javabean"   >          <a href="#javabean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javabean"></a> JavaBean</h3>      <p>JavaBean有特定的写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有get/set方法</li></ul><p>一般用来和数据库的字段做映射。</p><p>ORM：对象关系映射：</p><ul><li>数据库中的表——&gt;Java中的类</li><li>数据库中的字段——&gt;Java中的类的属性</li><li>数据库中的行数据——&gt;Java中的类的对象</li></ul>        <h2 id="mvc三层架构"   >          <a href="#mvc三层架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mvc三层架构"></a> MVC三层架构</h2>      <p><strong>MVC：Model View Controller</strong></p><p><strong>Controller(Servlet)</strong>：专注于处理请求以及控制视图跳转</p><ul><li>接受用户的请求</li><li>响应给客户端内容（交给业务层处理，接受业务层返回的数据）</li><li>重定向或转发（视图跳转）</li></ul><p><strong>View（JSP）</strong>：专注于显示网页与数据</p><ul><li>展示网页界面</li><li>提供用户操作，为Controller提供请求</li></ul><p><strong>Model（数据库）</strong>：</p><ul><li>存储数据</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/MVC%20(1).png" alt="MVC (1)" /></p><p>Model</p><ul><li>业务处理：业务逻辑（Servce）</li><li>数据持久层：CRUD（Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求（a，form，img…）</li></ul><p>Controller</p><ul><li>接受用户的请求（req：请求参数，Session信息）</li><li>交给业务层处理对应的代码，接受业务层返回的结果</li><li>控制视图的跳转</li></ul>        <h2 id="filter"   >          <a href="#filter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filter"></a> Filter</h2>      <p>Filter：过滤器，用来过滤网站的数据。</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210507213832192.png" alt="image-20210507213832192" /></p><p>Filter的先后执行顺序由Filter类在web.xml中定义的顺序有关</p><p>匹配方式：</p><ul><li>精确匹配：精确到具体的文件名</li><li>目录匹配：匹配到指定目录下的所有文件：/admin/*</li><li>后缀名匹配：匹配到指定后缀名的文件：*.html（不能以/开头）</li></ul><ol><li>实现<code>Filter</code>类的功能（处理中文乱码）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化：web服务器启动时就初始化，随时等待过滤对象出现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Chain：链</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response); <span class="comment">// 让请求继续写，如果不写，程序到这里就被拦截停止</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在web.xml中配置Filter</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zhao.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Filter的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定url下的任何请求都会经过这个过滤器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若想任意url下的请求都可以经过这个过滤器，则写/* 其会拦截jsp文件，否则无法过滤jsp文件里= --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>Filter的使用场景之一（事务）：在Filter中捕获Service层的异常</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210509102119700.png" alt="image-20210509102119700" /></p>        <h2 id="listener"   >          <a href="#listener" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#listener"></a> Listener</h2>      <p>Listener：监听器</p><ol><li>实现监听器的接口</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一旦创建Session就会触发一次这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) servletContext.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁Session监听</span></span><br><span class="line">    <span class="comment">// 一旦销毁Session就会触发一次这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) servletContext.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在web.xml中配置Listener</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zhao.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】JavaScript</title>
      <link href="2021/04/14/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript/"/>
      <url>2021/04/14/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript/</url>
      
        <content type="html"><![CDATA[        <h2 id="javascript"   >          <a href="#javascript" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h2>      <p>JavaScript是一门世界上最流行的脚本语言。<strong>ECMAScript</strong>可以理解为是JavaScript的一个标准</p>        <h3 id="引入javascript"   >          <a href="#引入javascript" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#引入javascript"></a> 引入JavaScript</h3>      <ol><li>内部标签</li></ol><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Script标签内，写JavaScript代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">   ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>外部引入</li></ol><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/helloworld.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="基本语法"   >          <a href="#基本语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Script标签内，写JavaScript代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(&#x27;hello world&#x27;);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> score = <span class="number">1</span>;</span></span><br><span class="line">    if (score &gt; 60)&#123;</span><br><span class="line"><span class="javascript">        alert(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="literal">false</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// console.log() 在浏览器的控制台打印变量</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="严格检查格式"   >          <a href="#严格检查格式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#严格检查格式"></a> 严格检查格式</h3>      <p><code>'use strict';</code> 严格检查模式，必须写在JavaScript第一行，防止JavaScript不严谨的语法误用。（前提:IDEA需要设置支持ES6语法）</p><span id="more"></span>        <h2 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>      <p>JavaScript数据类型包括：数值、文本、图形、音频、视频。</p><p>所有变量类型都是<code>var / let</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line">let num; <span class="comment">//（推荐）局部变量建议使用let定义</span></span><br></pre></td></tr></table></div></figure>        <h3 id="number"   >          <a href="#number" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#number"></a> number</h3>      <p>JavaScript不区分小数和整数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>      <span class="comment">// 整数</span></span><br><span class="line"><span class="number">123.1</span>    <span class="comment">// 浮点数</span></span><br><span class="line"><span class="number">1.123e4</span>  <span class="comment">// 科学计数法</span></span><br><span class="line"><span class="literal">NaN</span>      <span class="comment">// not a number</span></span><br></pre></td></tr></table></div></figure>        <h3 id="字符串"   >          <a href="#字符串" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">`abc <span class="subst">$&#123;str1&#125;</span>`</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="比较运算符"   >          <a href="#比较运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#比较运算符"></a> 比较运算符</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=    <span class="comment">// 赋值</span></span><br><span class="line">==   <span class="comment">// 等于（类型不一样，值一样，也会判断为true）</span></span><br><span class="line">===  <span class="comment">// 绝对等于（类型一样，值一样，才会判断为true）</span></span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li><code>NaN===NaN</code>，这个与所有数值都不相等，包括自己</li><li>只能通过<code>isNaN(NaN)</code>判断是否为<code>NaN</code></li></ul>        <h3 id="null和undefined"   >          <a href="#null和undefined" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#null和undefined"></a> null和undefined</h3>      <ul><li>null：空</li><li>undefined：未定义</li></ul>        <h3 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></div></figure><p>取数组下标如果越界了，则返回<code>undefined</code>。</p><p>常用方法：</p><ul><li>indexOf()：获取某元素对应的索引</li><li>slice()：截取Array的一部分，返回一个新数组</li><li>push()：向尾部压入一个数据</li><li>pop()：弹出尾部的一个元素</li><li>unshift()：向头部压入数据</li><li>shift()：弹出头部的第一个数据</li><li>sort()：排序</li><li>reverse()：元素反转</li><li>concat()：连接数组</li><li>join()：打印使用特定字符串连接后的数组</li></ul>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象"></a> 对象</h3>      <p>对象是大括号，数组是中括号。每个属性之间使用逗号隔开，最后一个不需要</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">13</span>,</span><br><span class="line">    tags:[<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看某属性对应的值</span></span><br><span class="line">person.name</span><br><span class="line">&gt; <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">person.name = <span class="string">&quot;lisi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加</span></span><br><span class="line">person.newAttribute = <span class="string">&quot;new attribute&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断某属性是否在这个对象中 xxx in xxx</span></span><br><span class="line"><span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h3 id="map和set"   >          <a href="#map和set" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map和set"></a> Map和Set</h3>      <blockquote><p>Map：可重复的键值对集合</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>], [<span class="string">&#x27;jack&#x27;</span>, <span class="number">90</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>, <span class="number">123456</span>);</span><br><span class="line">map.delete(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></div></figure><blockquote><p>Set：无序不重复的集合</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]);</span><br><span class="line">set.add(<span class="number">4</span>);</span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>));</span><br></pre></td></tr></table></div></figure>        <h3 id="iterator"   >          <a href="#iterator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#iterator"></a> iterator</h3>      <p>遍历数组</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in：取索引</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// of：取元素值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></div></figure><p>遍历Map</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>], [<span class="string">&#x27;jack&#x27;</span>, <span class="number">90</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>遍历Set</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="函数"   >          <a href="#函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>              <h3 id="定义函数"   >          <a href="#定义函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定义函数"></a> 定义函数</h3>      <blockquote><p>定义方式一</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>定义方式二</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>function(x)&#123;....&#125;</code>是一个匿名函数。但是可以把结果赋值给<code>abs</code>，通过<code>abs</code>就可以调用函数。</p><blockquote><p>调用函数</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">10</span>);</span><br><span class="line">abs(-<span class="number">10</span>);</span><br></pre></td></tr></table></div></figure><p>参数问题：JavaScript可以传任意个参数，也可以不传参数（返回<code>undefined</code>）。假设不传入参数，需要手动判断：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 手动抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>arguments</p></blockquote><p>代表传递进来的所有参数，是一个数组。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;x=&gt;&quot;</span> + x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>rest</p></blockquote><p>ES6引入的新特性，获取除了已经定义的参数外的所有参数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a=&gt;&quot;</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b=&gt;&quot;</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="变量的作用域"   >          <a href="#变量的作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#变量的作用域"></a> 变量的作用域</h3>      <p>在JavaScript中，var定义变量实际是有作用域的。假设在<strong>函数体中</strong>声明，则在<strong>函数体外</strong>不可以使用。内部函数可以访问外部函数的成员变量，反之不行。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = x + <span class="number">2</span>; <span class="comment">// Uncaught Reference </span></span><br></pre></td></tr></table></div></figure><blockquote><p>提升变量的作用域</p></blockquote><p>JavaScript执行引擎会先定义所有全局变量，然后按顺序赋值。</p><blockquote><p>全局变量</p></blockquote><p>放在函数外面的变量都是全局变量。默认所有的全局变量，都会自动绑定在window对象上.</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x);</span><br></pre></td></tr></table></div></figure><p>JavaScript实际上只有一个全局作用域（<code>window</code>对象），任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域（<code>windows</code>对象中）都没找到，报错<code>ReferenceError</code></p><blockquote><p>规范</p></blockquote><p>由于所有的全局变量都会绑定到<code>window</code>上，如果不同的js文件，使用了相同的全局变量，就会发生冲突。为避免冲突，可使用自定义唯一全局变量。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">MyApp.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">MyApp.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>将自己的代码全部放入自定义的唯一空间名中，降低全局命名冲突的问题</p><blockquote><p>局部作用域 let</p></blockquote><p>ES6 <code>let</code>关键字，解决局部作用域冲突问题</p><blockquote><p>常量 const</p></blockquote><p>ES6 <code>const</code>关键字</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&#x27;3.14&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3>      <blockquote><p>定义方法</p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    birth: <span class="number">2020</span>;</span><br><span class="line">    age: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 今年-出生的年</span></span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.name;</span><br><span class="line">person.age();</span><br></pre></td></tr></table></div></figure>        <h2 id="内部对象"   >          <a href="#内部对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内部对象"></a> 内部对象</h2>              <h3 id="json"   >          <a href="#json" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#json"></a> JSON</h3>      <p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。在JavaScript中一切即为对象，任何js支持的类型都可以用JSON表示。格式：</p><ul><li>对象用<code>&#123; &#125;</code></li><li>数组用<code>[ ]</code></li><li>所有的键值对用<code>key: value</code></li></ul><p>JSON字符串和JS对象的转换：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转化为json字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json字符串转换为对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: 3&#125;);</span></span><br></pre></td></tr></table></div></figure>        <h2 id="面向对象编程"   >          <a href="#面向对象编程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#面向对象编程"></a> 面向对象编程</h2>      <ul><li>类：模板，原型对象</li><li>对象：具体的实例</li></ul><blockquote><p>原型对象</p></blockquote><p>语法：<code>childObj.__proto__ = parentObj</code>。子对象的原型是父对象，可获得父对象的方法。</p><blockquote><p>class继承</p></blockquote><p><code>class</code>关键字，是在ES6引入的。</p><ol><li>定义一个类，包含属性和方法</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">xiaoming.hello();</span><br></pre></td></tr></table></div></figure><ol start="2"><li>继承</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, grade</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;xiaohong&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">xiaohong.myGrade();</span><br></pre></td></tr></table></div></figure><blockquote><p>原型链</p></blockquote><p>__ proto __：Object()的原型对象还是Object()对象。</p>        <h2 id="操作bom对象"   >          <a href="#操作bom对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作bom对象"></a> 操作BOM对象</h2>      <p>BOM：浏览器对象模型。</p><blockquote><p>window</p></blockquote><p><code>window</code>代表浏览器窗口。</p><blockquote><p>Navigator</p></blockquote><p><code>Navigator</code>封装了浏览器的信息。</p><blockquote><p>screen</p></blockquote><p><code>screen</code>代表屏幕属性。</p><blockquote><p>location</p></blockquote><p><code>location</code>代表当前界面的URL信息。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">host: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">href:<span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line">protocol:<span class="string">&quot;https:&quot;</span></span><br><span class="line">reload:f reload() 刷新网页</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新的地址，网页会跳转到指定为地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;https://xxxxx&#x27;</span>) </span><br></pre></td></tr></table></div></figure><blockquote><p>document</p></blockquote><p><code>document</code>代表当前页面</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.title <span class="comment">// 当前页面的标题</span></span><br></pre></td></tr></table></div></figure><p>获取具体的文档树节点</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>获取cookie</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></div></figure><blockquote><p>history</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.back()    <span class="comment">// 后退</span></span><br><span class="line">history.forward() <span class="comment">// 前进</span></span><br></pre></td></tr></table></div></figure>        <h2 id="操作dom对象"   >          <a href="#操作dom对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作dom对象"></a> 操作DOM对象</h2>      <p>DOM：文档对象模型。浏览器网页就是一个DOM属性结构。</p><ul><li>更新：更新DOM节点</li><li>遍历：遍历得到DOM节点</li><li>删除：删除DOM节点</li><li>添加：添加新DOM节点</li></ul><blockquote><p>获得DOM节点</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementsById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = father.children;</span><br></pre></td></tr></table></div></figure><blockquote><p>更新DOM节点</p></blockquote><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;id1&#x27;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> id1 = <span class="built_in">document</span>.getElementsById(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>操作文本</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id1.innerText = <span class="string">&#x27;456&#x27;</span> <span class="comment">// 修改文本的值</span></span><br><span class="line">id1.innerHTML = <span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>操作JS</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id1.style.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">id1.style.fontSize = <span class="string">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>删除节点</p></blockquote><p>步骤：获取父节点 ——&gt; 通过父节点删除自己</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = p1.parentElement;</span><br><span class="line">father.removeChild(self);</span><br></pre></td></tr></table></div></figure><blockquote><p>插入节点：appendChild</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.appendChild(js);</span><br></pre></td></tr></table></div></figure><blockquote><p>插入节点：insert</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要包含的节点.insertBefore(newNode, targetNode)</span></span><br><span class="line">list.insertBefore(js, ee);</span><br></pre></td></tr></table></div></figure>        <h2 id="操作表单"   >          <a href="#操作表单" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作表单"></a> 操作表单</h2>      <blockquote><p>表单：form DOM树</p></blockquote><ul><li>文本框 text</li><li>下拉框 select</li><li>单选框 radio</li><li>多选框 checkbox</li><li>隐藏域 hidden</li><li>密码框 password</li></ul><p>表单的作用：提交信息</p><blockquote><p>获得要提交的信息</p></blockquote><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多选框的值，就是定义好的value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;boy&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;girl&#x27;</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">// 得到输入框的值</span></span></span><br><span class="line">    input_text.value;</span><br><span class="line"><span class="javascript">    <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="javascript">    input_text.value = <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    boy_radio.checked; <span class="comment">// 查看是否被选中</span></span></span><br><span class="line"><span class="javascript">    girl_radio.checked = <span class="literal">true</span>; <span class="comment">// 设置被选中</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="事件"   >          <a href="#事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事件"></a> 事件</h2>              <h3 id="静态注册事件"   >          <a href="#静态注册事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态注册事件"></a> 静态注册事件</h3>      <p>在html标签中直接添加事件的响应函数，并在js文件中定义函数内容，这样既可在触发html标签事件时执行相应的响应函数。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun();&quot;</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="动态注册事件"   >          <a href="#动态注册事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态注册事件"></a> 动态注册事件</h3>      <p>网页加载后就注册好事件。这样每次检测到事件被触发就会执行响应函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">    btnObj.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="jquery"   >          <a href="#jquery" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jquery"></a> JQuery</h2>      <p>jQuery库，里面存在大量的JavaScript函数，用于简化开发。</p><p><strong>jQuery的本质</strong>：jQuery对象是DOM对象的数组 + jQuery提供的一系列功能函数。其会将查询到的符合条件的DOM对象封装成一个数组存放并附加一些功能函数。</p><p>jQuery对象和DOM对象互相转换：</p><ul><li>DOM转jQuery：var $obj= $(DOM对象)</li><li>jQuery转DOM：var dom = $obj[下标]</li></ul><p>公式：<strong>$(选择器).事件(响应函数)</strong></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">公式：$(selector).action()</span></span><br><span class="line"><span class="comment">selector就是css的选择器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello, jQuery&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="选择器"   >          <a href="#选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#选择器"></a> 选择器</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click(); <span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id1&#x27;</span>).click(); <span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).click(); <span class="comment">// class选择器</span></span><br></pre></td></tr></table></div></figure>        <h3 id="事件-2"   >          <a href="#事件-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事件-2"></a> 事件</h3>      <ul><li>鼠标事件</li><li>键盘事件</li><li>其他事件</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #divMove&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">公式：$(selector).action()</span></span><br><span class="line"><span class="comment">selector就是css的选择器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">mouse: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    在这里移动鼠标试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello, jQuery&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 当网页元素加载完毕之后响应事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27; x: &#x27;</span>+e.pageX + <span class="string">&#x27;  y: &#x27;</span>+e.pageY)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="操作dom"   >          <a href="#操作dom" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作dom"></a> 操作DOM</h3>      <p>节点文本操作</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).text();</span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).text(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>css操作</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).css(<span class="string">&quot;color:red&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>元素的显示和隐藏。本质：<code>display: none</code></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).show()</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).hide()</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】单元测试</title>
      <link href="2021/04/13/%E3%80%90Java%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>2021/04/13/%E3%80%90Java%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[        <h2 id="junit5-的变化"   >          <a href="#junit5-的变化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#junit5-的变化"></a> JUnit5 的变化</h2>      <p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong>。作为最新版本的JUnit框架，JUnit5与之前版本的JUnit框架有很大的不同。由三个不同子项目的几个不同模块组成：</p><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><ul><li><strong>JUnit Platform</strong>: JUnit Platform是在JVM上启动测试框架的基础，不仅支持JUnit自制的测试引擎，其他测试引擎也都可以接入。</li><li><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在JUnit Platform上运行。</li><li><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x和JUnit3.x的测试引擎。</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/image-20210813193410660-1628855815225.png" alt="image-20210813193410660" /></p><p>注意：<strong>Spring Boot 2.4 以上版本移除了默认对Vintage的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</strong></p><p>JUnit 5’s Vintage Engine Removed from <code>spring-boot-starter-test</code>，如果需要继续兼容junit4需要自行引入vintage：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90Java%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1606797616337-e73010e9-9cac-496d-a177-64b677af5a3d-1628855815226.png" alt="img" /></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>现在版本使用 <code>@SpringBootTest</code> ：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>以前版本使用 <code>@SpringBootTest + @RunWith(SpringTest.class)</code></p><p>Spring Boot整合JUnit以后：</p><ul><li>编写测试方法：<code>@Test</code>标注（注意需要使用JUnit5版本的注解）</li><li>JUnit类具有Spring的功能，<code>@Autowired</code>、比如 <code>@Transactional</code> 标注测试方法，测试完成后自动回滚</li></ul>        <h2 id="junit5常用注解"   >          <a href="#junit5常用注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#junit5常用注解"></a> JUnit5常用注解</h2>      <p>JUnit5的注解与JUnit4的注解有所变化：<span class="exturl"><a class="exturl__link"   href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" >https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li><strong>@Test</strong> 表示方法是测试方法。但是与JUnit4的<code>@Test</code>不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest</strong> 表示方法是参数化测试，下方会有详细介绍</li><li><strong>@RepeatedTest</strong> 表示方法可重复执行，下方会有详细介绍</li><li><strong>@DisplayName</strong> 为测试类或者测试方法设置展示名称</li><li><strong>@BeforeEach</strong> 表示在每个单元测试之前执行</li><li><strong>@AfterEach</strong> 表示在每个单元测试之后执行</li><li><strong>@BeforeAll</strong> 表示在所有单元测试之前执行</li><li><strong>@AfterAll</strong> 表示在所有单元测试之后执行</li><li><strong>@Tag</strong> 表示单元测试类别，类似于JUnit4中的 <strong>@Categories</strong></li><li><strong>@Disabled</strong> 表示测试类或测试方法不执行，类似于JUnit4中的 <strong>@Ignore</strong></li><li><strong>@Timeout</strong> 表示测试方法运行如果超过了指定时间将会返回错误</li><li><strong>@ExtendWith</strong> 为测试类或测试方法提供扩展类引用</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; <span class="comment">//注意这里使用的是JUnit5里jupiter的Test注解！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;第一次测试&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="断言assertions"   >          <a href="#断言assertions" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#断言assertions"></a> 断言（Assertions）</h2>      <p>断言（Assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。</p><p>断言用于<strong>检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告</strong></p>        <h3 id="简单断言"   >          <a href="#简单断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简单断言"></a> 简单断言</h3>      <p>用来对单个值进行简单的验证。如：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table></div><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;simple assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">2</span>, <span class="string">&quot;simple math&quot;</span>);</span><br><span class="line">    assertNotEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    assertNotSame(<span class="keyword">new</span> Object(), <span class="keyword">new</span> Object());</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    assertSame(obj, obj);</span><br><span class="line"></span><br><span class="line">    assertFalse(<span class="number">1</span> &gt; <span class="number">2</span>);</span><br><span class="line">    assertTrue(<span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    assertNull(<span class="keyword">null</span>);</span><br><span class="line">    assertNotNull(<span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数组断言"   >          <a href="#数组断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组断言"></a> 数组断言</h3>      <p>通过 <strong>assertArrayEquals()</strong> 方法来判断两个对象或原始类型的数组是否相等</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="组合断言"   >          <a href="#组合断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组合断言"></a> 组合断言</h3>      <p><code>assertAll()</code> 方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assert all&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">              () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">              () -&gt; assertTrue(<span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line">             );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="异常断言"   >          <a href="#异常断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常断言"></a> 异常断言</h3>      <p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule**注解的<code>ExpectedException</code>变量，还是比较麻烦的。而JUnit5提供了一种新的断言方式 <strong>Assertions.assertThrows()</strong> ，配合函数式编程就可以进行使用。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArithmeticException exception = Assertions.assertThrows(</span><br><span class="line">        <span class="comment">//扔出断言异常</span></span><br><span class="line">        ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="超时断言"   >          <a href="#超时断言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#超时断言"></a> 超时断言</h3>      <p>JUnit5还提供了 <strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="快速失败"   >          <a href="#快速失败" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#快速失败"></a> 快速失败</h3>      <p>通过 <strong>fail()</strong> 方法直接使得测试失败</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;fail&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail(<span class="string">&quot;This should fail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="前置条件assumptions"   >          <a href="#前置条件assumptions" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#前置条件assumptions"></a> 前置条件（Assumptions）</h2>      <p>JUnit 5 中的前置条件（<strong>Assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssumptionsTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String environment = <span class="string">&quot;DEV&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;simple&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAssume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>));</span><br><span class="line">        assumeFalse(() -&gt; Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;PROD&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assumeThenDo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumingThat(</span><br><span class="line">            Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>),</span><br><span class="line">            () -&gt; System.out.println(<span class="string">&quot;In DEV&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>assumeTrue()</strong> 和 <strong>assumFalse() <strong>确保给定的条件为 true 或 false，不满足条件会使得测试</strong>执行终止（不会失败）</strong>。</p><p><strong>assumingThat()</strong> 的参数是表示条件的布尔值和对应的 <code>Executable</code> 接口的实现对象。只有条件满足时，<code>Executable</code> 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>        <h2 id="嵌套测试"   >          <a href="#嵌套测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#嵌套测试"></a> 嵌套测试</h2>      <p>JUnit 5 可以通过 Java 中的内部类和 <strong>@Nested</strong> 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用 <strong>@BeforeEach</strong> 和 <strong>@AfterEach</strong> 注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="参数化测试"   >          <a href="#参数化测试" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#参数化测试"></a> 参数化测试</h2>      <p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用 <strong>@ValueSource</strong> 等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</li><li><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</li><li><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</li><li><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li></ul><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。他的强大之处的地方在于他可以支持外部的各类入参。如:CSV，YML，JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterizedTest1</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span>    <span class="comment">//指定方法名</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    Assertions.assertNotNull(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="迁移指南"   >          <a href="#迁移指南" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#迁移指南"></a> 迁移指南</h2>      <p>在进行迁移的时候需要注意如下变化：</p><ul><li>注解在 <code>org.junit.jupiter.api</code> 包中，断言在 <code>org.junit.jupiter.api.Assertions</code> 类中，前置条件在 <code>org.junit.jupiter.api.Assumptions</code> 类中。</li><li>把 <strong>@Before</strong> 和 <strong>@After</strong> 替换成 <strong>@BeforeEach</strong> 和 <strong>@AfterEach</strong>。</li><li>把 <strong>@BeforeClass</strong> 和 <strong>@AfterClass</strong> 替换成 <strong>@BeforeAll</strong> 和 <strong>@AfterAll</strong>。</li><li>把 <strong>@Ignore</strong> 替换成 <strong>@Disabled</strong>。</li><li>把 <strong>@Category</strong> 替换成 <strong>@Tag</strong>。</li><li>把 <strong>@RunWith</strong>、<strong>@Rule</strong> 和 <strong>@ClassRule</strong> 替换成 <strong>@ExtendWith</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】HTML5+CSS3</title>
      <link href="2021/04/10/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91HTML5/"/>
      <url>2021/04/10/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91HTML5/</url>
      
        <content type="html"><![CDATA[        <h2 id="html"   >          <a href="#html" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#html"></a> HTML</h2>              <h3 id="html-2"   >          <a href="#html-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#html-2"></a> HTML</h3>      <p><strong>Hyper Text Markup Language</strong>（超文本标记语言）</p>        <h3 id="w3c标准"   >          <a href="#w3c标准" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#w3c标准"></a> W3C标准</h3>      <p><strong>W3C：World Wide Web Consortium</strong>（万维网联盟），成立于1994年，是Web技术领域最权威和最具影响力的国际<strong>中立性技术标准结构</strong>。</p><p>W3C标准包括：</p><ul><li><strong>结构</strong>化标准语言（HTML、XML）</li><li><strong>表现</strong>标准语言（CSS）</li><li><strong>行为</strong>标准（DOM、ECMAScript）</li></ul><span id="more"></span>        <h2 id="css"   >          <a href="#css" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#css"></a> CSS</h2>      <p><strong>Cascading Style Sheet</strong>层叠级联样式表 。用于美化页面，可以设置字体、颜色、编剧、高度、宽度、背景图片、网页定位、网页浮动等。</p><p>导入CSS文件</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="基本选择器"   >          <a href="#基本选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本选择器"></a> 基本选择器</h3>      <blockquote><p>作用：选择页面上某一个或者某一类元素</p></blockquote><ul><li>标签选择器：选中一类标签。<code>标签&#123;&#125;</code></li><li>类<code>class</code>选择器：选中所有class属性一致的标签，可以跨标签。<code>.类名&#123;&#125;</code></li><li><code>id</code>选择器：全局唯一，不可重复。<code>#id名&#123;&#125;</code></li></ul><p>选择器优先级不遵循就近原则，是固定的：<strong>id选择器 &gt; class选择器 &gt; 标签选择器</strong></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: deepskyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*id选择器，id必须唯一*/</span></span></span><br><span class="line">        #id1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: antiquewhite;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器*/</span></span></span><br><span class="line">        .style1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: darkorange;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span> = <span class="string">&quot;id1&quot;</span>&gt;</span> 标题1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;style1&quot;</span>&gt;</span> 标题2 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;style1&quot;</span>&gt;</span> 标题3 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 标题4 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="层次选择器"   >          <a href="#层次选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#层次选择器"></a> 层次选择器</h3>      <ul><li>后代选择器</li><li>子选择器</li><li>相邻兄弟选择器</li><li>通用选择器</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*后代选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*子选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*相邻兄弟选择器，只有一个，并且相邻向下*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*通用兄弟选择器，当前选中元素的向下所有兄弟元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: darkorange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p0 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p01 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p1 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p2 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p3 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p11 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p4 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p5 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p6 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="属性选择器"   >          <a href="#属性选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#属性选择器"></a> 属性选择器</h3>      <blockquote><p>id 和 class的结合</p></blockquote><ul><li><code>=</code>：完全相等</li><li><code>*=</code>：包含等于</li><li><code>^=</code>：以xxx开头</li><li><code>$=</code>：以xxx结尾</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】MySQL高级</title>
      <link href="2021/04/06/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/"/>
      <url>2021/04/06/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[        <h2 id="1-索引"   >          <a href="#1-索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-索引"></a> 1. 索引</h2>      <blockquote><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL<strong>高效</strong>获取数据的数据结构</p><p>索引的本质：索引是数据结构</p></blockquote>        <h3 id="11-索引简介"   >          <a href="#11-索引简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-索引简介"></a> 1.1 索引简介</h3>      <p>索引在数据库表的字段上添加，是为了提高查询效率而存在的一种机制。索引是各种数据库进行优化时的重要手段，优化时优先考虑的因素就是索引。一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引。</p><p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。MySQL在查询方面主要是两种方式：</p><ul><li><strong>全表扫描</strong>：一条一条检索，效率较低</li><li><strong>根据索引检索</strong>：先通过索引定位大概位置，然后在此局部范围内扫描，效率较高</li></ul><p>缩小扫描范围，就是扫描某个具体区间。在MySQL数据库中索引也是需要排序的，并且这个索引的排序和TreeSet数据结构相同。在MySQL当中，索引是一个<strong>自平衡二叉树</strong>(B-Tree) 数据结构。遵循左小右大原则存放，采用中序遍历方式遍历取数据。</p>        <h3 id="12-索引的实现原理"   >          <a href="#12-索引的实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-索引的实现原理"></a> 1.2 索引的实现原理</h3>      <ol><li>在任何数据库当中<strong>主键上都会自动添加索引对象</strong>。另外在MySQL当中，一个字段上如果有<strong>UNIQUE</strong>约束的话，也会自动创建索引对象。</li><li>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有—个硬盘上的物理存储编号。</li><li>在MySQL当中，索引是一个单独的对象，在不同的存储引擎中以不同的形式存在。<ul><li>MyISAM：索引存储在一个.MYI文件中；</li><li>InnoDB：索引存储在一个逻辑名称叫做tablespace的空间当中；</li><li>MBMORY：索引被存储在内存当中。</li></ul></li></ol><p>不管索引存储在哪里，索引在MySQL当中都是以<strong>自平衡二叉树</strong>(B-Tree) 的形式存在。</p><blockquote><p>索引的简易实现原理：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Vy4y1z7EX?p=115" >https://www.bilibili.com/video/BV1Vy4y1z7EX?p=115</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br />索引的数据结构：<span class="exturl"><a class="exturl__link"   href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" >http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/index.png" alt="index" /></p><p>索引的实际实现原理更加复杂（数组+树的结合体），上图只是简易原理。</p><span id="more"></span>        <h3 id="13-索引原则"   >          <a href="#13-索引原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#13-索引原则"></a> 1.3 索引原则</h3>      <ul><li>索引不是越多越好（因为索引也是需要维护的，太多的话反而降低性能）</li><li>不要对经常变动的数据加索引（因为DML之后，索引需要重新排序）</li><li>小数据量的表不需要加索引（数据量庞大时才需要）</li><li>索引一般加在常用来查询的字段上（常出现在<code>WHERE</code>之后）</li><li>建议通过主键或<code>UNIQUE</code>字段修饰的字段进行查询</li></ul>        <h3 id="14-创建和删除索引"   >          <a href="#14-创建和删除索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#14-创建和删除索引"></a> 1.4 创建和删除索引</h3>      <blockquote><p>创建索引</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX emp_ename_index <span class="keyword">ON</span> emp(ename);</span><br></pre></td></tr></table></div></figure><p>给emp表的ename字段添加索引并起别名：emp_ename_index。</p><blockquote><p>删除索引</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX emp_ename_index <span class="keyword">ON</span> emp;</span><br></pre></td></tr></table></div></figure><p>将emp表上的emp_ename_index索引对象删除。</p><blockquote><p>查看某一个SQL语句是否使用了索引进行检索</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="15-索引失效的情况"   >          <a href="#15-索引失效的情况" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#15-索引失效的情况"></a> 1.5 索引失效的情况</h3>      <ol><li>使用模糊查询<code>LIKE</code>，并以<code>%</code>开始时索引失效（因为索引检索时需要知道第一个字母）</li><li>使用<code>OR</code>时，如果<code>OR</code>两边的条件字段<strong>有一个没有索引</strong>，则查询时索引失效（这种情况下可以使用<code>UNION</code>代替<code>OR</code>）</li><li>使用<strong>复合索引</strong>（两个字段或更多字段联合起来添加一个索引）的时候，没有使用<strong>左侧</strong>的列查找，索引失效</li><li>在<code>WHERE</code>中<strong>索引列参与了运算</strong>时，索引失效</li><li>在<code>WHERE</code>中索引列使用了<strong>函数</strong>时，索引失效</li></ol>        <h3 id="16-索引的分类"   >          <a href="#16-索引的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#16-索引的分类"></a> 1.6 索引的分类</h3>      <blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li>单一索引：一个字段上添加索引</li><li>复合索引：两个或更多字段上添加索引</li><li>主键索引：主键上添加索引</li><li>唯一索引：具有UNIQUE约束的字段上添加索引</li></ul><blockquote><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL<strong>高效</strong>获取数据的数据结构</p><p>索引的本质：索引是数据结构</p></blockquote>        <h3 id="1-索引的分类"   >          <a href="#1-索引的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-索引的分类"></a> .1 索引的分类</h3>      <blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li><p>主键索引（PRIMARY KEY)</p><ul><li>唯一的标识，主键不可重复，只能有一列作为主键</li></ul></li><li><p>唯一索引（UNIQUE KEY）</p><ul><li>唯一索引的名字不能重复出现，避免重复的列出现，唯一索引可以有多个</li></ul></li><li><p>常规索引（KEY/INDEX）</p><ul><li>默认的，用INDEX或KEY来设置</li></ul></li><li><p>全文索引（FULLTEXT）</p><ul><li>快速定位数据</li></ul></li></ul><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1. 在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2. 创建完毕后，增加索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引  ADD FULLTEXT INDEX 索引名（列名）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school.`student` <span class="keyword">ADD</span> FULLTEXT INDEX `studentName`(`studentName`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析sql执行的状况 </span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentName) AGAINST(<span class="string">&#x27;张&#x27;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="72-测试索引"   >          <a href="#72-测试索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#72-测试索引"></a> 7.2 测试索引</h3>      <p>增加索引后查询时速度提高很多</p><p>索引在大数据的时候区别十分明显。</p>        <h3 id="73-索引原则"   >          <a href="#73-索引原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#73-索引原则"></a> 7.3 索引原则</h3>      <ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><blockquote><p>索引的数据结构：<span class="exturl"><a class="exturl__link"   href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" >http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>Hash类型的索引</p><p>Btree：InnoDB的默认数据结构</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】JDBC</title>
      <link href="2021/04/01/%E3%80%90MySQL%E3%80%91JDBC/"/>
      <url>2021/04/01/%E3%80%90MySQL%E3%80%91JDBC/</url>
      
        <content type="html"><![CDATA[        <h2 id="jdbc简介"   >          <a href="#jdbc简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdbc简介"></a> JDBC简介</h2>      <blockquote><p>JDBC概念：<span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/e71990336319" >https://www.jianshu.com/p/e71990336319</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>参考视频：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1eJ411c7rf?p=1" >https://www.bilibili.com/video/BV1eJ411c7rf?p=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>JDBC（Java Data Base Connectivity，java数据库连接）是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API）。，定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</p><p>普通应用程序无法直接和数据库进行通讯连接，需要借助<strong>数据库驱动</strong>和数据库连接。<strong>SUN</strong>公司为了简化开发人员对数据库的统一操作，提供了一个Java操作数据库的规范，俗称JDBC。这些规范由具体的厂商去做，开发人员<strong>只需要调用接口</strong>即可连接数据库进行开发。</p><p>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p><p>应用程序 ——&gt;  JDBC  ——&gt; MySQL驱动 /Oracle驱动 ——&gt; MySQL数据库/Oracle数据库</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/image-20210517213554324.png" alt="image-20210517213554324" /></p><p>数据库应用厂商实现JDBC的接口。开发人员不需要关注每种数据库的具体实现。</p><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。————面向接口编程</strong></p></blockquote>        <h2 id="1-jdbc使用概览"   >          <a href="#1-jdbc使用概览" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-jdbc使用概览"></a> 1、JDBC使用概览</h2>      <p>JDBC使用步骤：</p><ul><li>加载驱动：<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></li><li>连接数据库：<code>DriverManager.getConnection(url, username, password);</code></li><li>创建执行sql语句的对象：<code>Statement statement = connection.createStatement();</code></li><li>获得返回的结果集：<code>ResultSet resultSet = statement.executeQuery(sql);</code></li><li>释放连接：<code>resultSet.close();</code></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/image-20210709164526603.png" alt="image-20210709164526603" /></p><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuyunzhao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* useUnicode=true：设置使用Unicode编码，支持中文</span></span><br><span class="line"><span class="comment">        *  characterEncoding=utf8：设置字符集为utf-8</span></span><br><span class="line"><span class="comment">        *  userSSL=true：安全连接</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 2. 设置用户信息和url</span></span><br><span class="line">        <span class="comment">// url: jdbc:mysql(主协议:子协议)://localhost(ip):3306(端口号)/school(数据库)</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;zhaoyuyun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 连接成功，Connection代表数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建执行SQL的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM `student`&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 执行sql语句，返回的结果集中封装了全部查询结果</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;studentno = &quot;</span> +  resultSet.getInt(<span class="string">&quot;studentno&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;sex = &quot;</span> +  resultSet.getInt(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;======================================== &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中：<code>url: jdbc:mysql(主协议:子协议)://localhost(ip):3306(端口号)/school(数据库)</code></p><p>注意：通常不用显式调用 **DriverManager <strong>类的  <strong>registerDriver() ** 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类</strong>都包含了静态代码块</strong>，在这个静态代码块中，会调用  **DriverManager.registerDriver() ** 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/image-20210709171009159.png" alt="image-20210709171009159" /></p>        <h3 id="11-statement对象"   >          <a href="#11-statement对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-statement对象"></a> 1.1 Statement对象</h3>      <p>JDBC中的Statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化)。</p><p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>        <h4 id="111-executeupdate方法"   >          <a href="#111-executeupdate方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#111-executeupdate方法"></a> 1.1.1 executeUpdate方法</h4>      <blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;insert into user(...) values(...)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>CRUD操作-delete</p></blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;delete from user where id=1&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>CRUD操作-update</p></blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;update user set name= &#x27;&#x27; where name=&#x27;&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="112-executequery方法"   >          <a href="#112-executequery方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#112-executequery方法"></a> 1.1.2 executeQuery方法</h4>      <blockquote><p>CRUD操作-read</p></blockquote><p>使用executeQuery(String sql)方法完成数据查询操作：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;select * from user where id=1&quot;</span>;</span><br><span class="line">ResultSet rs = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line"><span class="comment">// 根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>SQL注入的问题</p></blockquote><p>sql存在漏洞，会被攻击导致数据泄漏。例如，在sql语句中加入&quot; xxx or 1=1&quot;的字段，就会导致原先的判断条件失效，从而造成数据泄漏。</p>        <h3 id="12-preparedstatement对象"   >          <a href="#12-preparedstatement对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-preparedstatement对象"></a> 1.2 PreparedStatement对象</h3>      <p><strong>PreparedStatement接口是Statement的子接口，它表示一条预编译过的SQL语句，其能最大可能地提高性能：</strong></p><ul><li>PreparedStatement对象可以防止SQL注入，效率更高。其会预编译SQL语句，并通过传参的形式设置参数值。</li><li>DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码即可；</li><li>在statement语句中，即使是相同操作但是因为数据内容不一样，所以整个语句本身不能匹配，没有缓存语句的意义，事实是没有数据库会对普通语句变异后的执行代码缓存。这样每执行一次都要对传入的语句编译一次。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;inset into users(`id`, `name`, `password`) values(?, ?, ?)&quot;</span>;</span><br><span class="line">PreparedStatment st = connection.prepareStatement(sql);</span><br><span class="line">st.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">st.setString(<span class="number">2</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">st.setString(<span class="number">3</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>PreparedStatement防止SQL注入的本质：把传进来的参数当做字符，假设其中存在转义字符，就直接忽略，‘’引号会被直接转义。</p>        <h3 id="13-jdbc使用事务"   >          <a href="#13-jdbc使用事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#13-jdbc使用事务"></a> 1.3 JDBC使用事务</h3>      <p>要么都执行，要么都不执行。</p><blockquote><p>ACID原则</p></blockquote><p><strong>1. 原子性(Atomicity)</strong></p><p>原子性是指<strong>事务是一个不可分割的工作单位</strong>，事务中的操作<strong>要么都执行，要么都不执行</strong>。</p><p><strong>2. 一致性(Consistency)</strong></p><p>事务必须使数据库从一个一致性状态变换到另一个一致性状态。（例如A给B转账前后，数据库中二者余额之和相等，转账前为一个一致性状态，转账后也为一个一致性状态）。</p><p><strong>3. 隔离性(Isolation)</strong></p><p>隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他数据是隔离的，并发执行的各个事务之间不能互相干扰。</p><p><strong>4. 持久性(Durability)</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><blockquote><p>代码实现</p></blockquote><ol><li>开启事务：<code>connection.setAutoCommit(false);</code></li><li>一组业务执行完毕，提交事务：<code>connection.commit();</code></li><li>在<code>catch</code>中显式定义回滚语句，但<strong>默认失败后就回滚</strong>：<code>connection.rollback();</code></li></ol><p>若不调用<code>close()</code>就退出程序，则默认进行回滚。</p><p><strong>MySQL的JDBC中，默认开启事务，此时每一句sql语句都会在一个单独的事务中执行，例如两次查询语句都会在不同的事务中执行，执行完该语句都会立刻提交。</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuyunzhao.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* useUnicode=true：设置使用Unicode编码，支持中文</span></span><br><span class="line"><span class="comment">         *  characterEncoding=utf8：设置字符集为utf-8</span></span><br><span class="line"><span class="comment">         *  userSSL=true：安全连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 设置用户信息和url</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;zhaoyuyun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 连接成功，Connection代表数据库对象</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭数据库的自动提交，自动会开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            String sql1 = <span class="string">&quot;update `account` set `money` = `money` - 100 where `name` = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = connection.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟报错</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update `account` set `money` = `money` + 100 where `name` = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = connection.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 如果上述事务执行过程中异常，则回滚</span></span><br><span class="line">            <span class="comment">// 默认会回滚</span></span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                connection.rollback(); <span class="comment">// 如果失败则回滚事务</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            st.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="2-获取数据库连接"   >          <a href="#2-获取数据库连接" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-获取数据库连接"></a> 2、获取数据库连接</h2>              <h3 id="21-要素一driver接口实现类"   >          <a href="#21-要素一driver接口实现类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#21-要素一driver接口实现类"></a> 2.1 要素一：Driver接口实现类</h3>              <h4 id="211-driver接口介绍"   >          <a href="#211-driver接口介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#211-driver接口介绍"></a> 2.1.1 Driver接口介绍</h4>      <ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555576157618.png" alt="1555576157618" /></p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555576170074.png" alt="1555576170074" /></p><ul><li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566134718955.png" alt="1566134718955" /></p><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566134781682.png" alt="1566134781682" /></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566135290460.png" alt="1566135290460" /></p>        <h4 id="212-加载与注册jdbc驱动"   >          <a href="#212-加载与注册jdbc驱动" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#212-加载与注册jdbc驱动"></a> 2.1.2 加载与注册JDBC驱动</h4>      <ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566136831283.png" alt="1566136831283" /></p></li></ul></li></ul>        <h3 id="22-要素二url"   >          <a href="#22-要素二url" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#22-要素二url"></a> 2.2 要素二：URL</h3>      <ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。</p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc</li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555576477107.png" alt="1555576477107" /></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/atguigu</li><li>jdbc:mysql://localhost:3306/atguigu**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p></li></ul></li></ul></li></ul>        <h3 id="23-要素三用户名和密码"   >          <a href="#23-要素三用户名和密码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#23-要素三用户名和密码"></a> 2.3 要素三：用户名和密码</h3>      <ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul>        <h3 id="24-数据库连接方式举例"   >          <a href="#24-数据库连接方式举例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#24-数据库连接方式举例"></a> 2.4 数据库连接方式举例</h3>              <h4 id="241-连接方式一"   >          <a href="#241-连接方式一" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#241-连接方式一"></a> 2.4.1 连接方式一</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           Driver driver = <span class="keyword">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote>        <h4 id="242-连接方式二"   >          <a href="#242-连接方式二" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#242-连接方式二"></a> 2.4.2 连接方式二</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           String className = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">           Class clazz = Class.forName(className);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote>        <h4 id="243-连接方式三"   >          <a href="#243-连接方式三" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#243-连接方式三"></a> 2.4.3 连接方式三</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           String driverName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           Class clazz = Class.forName(driverName);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote>        <h4 id="244-连接方式四"   >          <a href="#244-连接方式四" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#244-连接方式四"></a> 2.4.4 连接方式四</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           String password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           String driverName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static &#123;</span></span><br><span class="line"><span class="comment">               try &#123;</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote>        <h4 id="245-连接方式五最终版"   >          <a href="#245-连接方式五最终版" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#245-连接方式五最终版"></a> 2.4.5 连接方式五(最终版)</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">       Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></div></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码</p><p>②如果修改了配置信息，省去重新编译的过程。</p></blockquote>        <h2 id="3-使用preparedstatement实现crud操作"   >          <a href="#3-使用preparedstatement实现crud操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-使用preparedstatement实现crud操作"></a> 3、使用PreparedStatement实现CRUD操作</h2>              <h3 id="31-操作和访问数据库"   >          <a href="#31-操作和访问数据库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#31-操作和访问数据库"></a> 3.1 操作和访问数据库</h3>      <ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。</li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566573842140.png" alt="1566573842140" /></p></li></ul>        <h3 id="32-使用statement操作数据表的弊端"   >          <a href="#32-使用statement操作数据表的弊端" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#32-使用statement操作数据表的弊端"></a> 3.2 使用Statement操作数据表的弊端</h3>      <ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> excuteUpdate(String <span class="keyword">sql</span>)：执行更新操作<span class="keyword">INSERT</span>、UPDATE、<span class="keyword">DELETE</span></span><br><span class="line">ResultSet executeQuery(String <span class="keyword">sql</span>)：执行查询操作<span class="keyword">SELECT</span></span><br></pre></td></tr></table></div></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=‘a’ OR 1 = ’ AND password = ’ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">String userName = scan.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;密   码：&quot;</span>);</span><br><span class="line">String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span></span><br><span class="line">String sql = <span class="string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password</span><br><span class="line">+ <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">User user = get(sql, User.class);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;登陆成功!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现对数据表的查询操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String sql, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.加载配置文件</span></span><br><span class="line">InputStream is = StatementTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取配置信息</span></span><br><span class="line">String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String url = pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">String driverClass = pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的元数据</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// //1. 获取列的名称</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取列的别名</span></span><br><span class="line">String columnName = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据列名获取对应数据表中的数据</span></span><br><span class="line">Object columnVal = rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将数据表中得到的数据，封装进对象</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>综上：</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566569819744.png" alt="1566569819744" /></p>        <h3 id="33-preparedstatement的使用"   >          <a href="#33-preparedstatement的使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#33-preparedstatement的使用"></a> 3.3 PreparedStatement的使用</h3>              <h4 id="331-preparedstatement介绍"   >          <a href="#331-preparedstatement介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#331-preparedstatement介绍"></a> 3.3.1 PreparedStatement介绍</h4>      <ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul>        <h4 id="332-preparedstatement-vs-statement"   >          <a href="#332-preparedstatement-vs-statement" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#332-preparedstatement-vs-statement"></a> 3.3.2 PreparedStatement vs Statement</h4>      <ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul>        <h4 id="333-java与sql对应数据类型转换表"   >          <a href="#333-java与sql对应数据类型转换表" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#333-java与sql对应数据类型转换表"></a> 3.3.3 Java与SQL对应数据类型转换表</h4>      <div class="table-container"><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table></div>        <h4 id="334-使用preparedstatement实现增-删-改操作"   >          <a href="#334-使用preparedstatement实现增-删-改操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#334-使用preparedstatement实现增-删-改操作"></a> 3.3.4 使用PreparedStatement实现增、删、改操作</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="335-使用preparedstatement实现查询操作"   >          <a href="#335-使用preparedstatement实现查询操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#335-使用preparedstatement实现查询操作"></a> 3.3.5 使用PreparedStatement实现查询操作</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote>        <h3 id="34-resultset与resultsetmetadata"   >          <a href="#34-resultset与resultsetmetadata" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#34-resultset与resultsetmetadata"></a> 3.4 ResultSet与ResultSetMetaData</h3>              <h4 id="341-resultset"   >          <a href="#341-resultset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#341-resultset"></a> 3.4.1 ResultSet</h4>      <ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555580152530.png" alt="1555580152530" /></p></li></ul>        <h4 id="342-resultsetmetadata"   >          <a href="#342-resultsetmetadata" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#342-resultsetmetadata"></a> 3.4.2 ResultSetMetaData</h4>      <ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。</p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。</p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。</p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。</p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p></li></ul></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555579494691.png" alt="1555579494691" /></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555579816884.png" alt="1555579816884" /></p>        <h3 id="35-资源的释放"   >          <a href="#35-资源的释放" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#35-资源的释放"></a> 3.5 资源的释放</h3>      <ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul>        <h3 id="36-jdbc-api小结"   >          <a href="#36-jdbc-api小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#36-jdbc-api小结"></a> 3.6 JDBC API小结</h3>      <ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul>        <h2 id="4-操作blob类型字段"   >          <a href="#4-操作blob类型字段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-操作blob类型字段"></a> 4、操作BLOB类型字段</h2>              <h3 id="41-mysql-blob类型"   >          <a href="#41-mysql-blob类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#41-mysql-blob类型"></a> 4.1 MySQL BLOB类型</h3>      <ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555581069798.png" alt="1555581069798" /></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul>        <h3 id="42-向数据表中插入大数据类型"   >          <a href="#42-向数据表中插入大数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#42-向数据表中插入大数据类型"></a> 4.2 向数据表中插入大数据类型</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;徐海强&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;xhq@126.com&quot;</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;xhq.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="43-修改数据表中的blob类型字段"   >          <a href="#43-修改数据表中的blob类型字段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#43-修改数据表中的blob类型字段"></a> 4.3 修改数据表中的Blob类型字段</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">&quot;update customers set photo = ? where id = ?&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;coffee.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></div></figure>        <h3 id="44-从数据表中读取大数据类型"   >          <a href="#44-从数据表中读取大数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#44-从数据表中读取大数据类型"></a> 4.4 从数据表中读取大数据类型</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">Integer id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">String email = rs.getString(<span class="number">3</span>);</span><br><span class="line">    Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line">Blob photo = rs.getBlob(<span class="number">5</span>);</span><br><span class="line">InputStream is = photo.getBinaryStream();</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="keyword">null</span>)&#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="5-批量插入"   >          <a href="#5-批量插入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-批量插入"></a> 5、批量插入</h2>              <h3 id="51-批量执行sql语句"   >          <a href="#51-批量执行sql语句" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#51-批量执行sql语句"></a> 5.1 批量执行SQL语句</h3>      <p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul>        <h3 id="52-高效的批量插入"   >          <a href="#52-高效的批量插入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#52-高效的批量插入"></a> 5.2 高效的批量插入</h3>      <p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></div></figure>        <h4 id="521-实现层次一使用statement"   >          <a href="#521-实现层次一使用statement" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#521-实现层次一使用statement"></a> 5.2.1 实现层次一：使用Statement</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="522-实现层次二使用preparedstatement"   >          <a href="#522-实现层次二使用preparedstatement" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#522-实现层次二使用preparedstatement"></a> 5.2.2 实现层次二：使用PreparedStatement</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></div></figure>        <h4 id="523-实现层次三"   >          <a href="#523-实现层次三" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#523-实现层次三"></a> 5.2.3 实现层次三</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="524-实现层次四"   >          <a href="#524-实现层次四" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#524-实现层次四"></a> 5.2.4 实现层次四</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="6-数据库事务"   >          <a href="#6-数据库事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-数据库事务"></a> 6、 数据库事务</h2>              <h3 id="61-数据库事务介绍"   >          <a href="#61-数据库事务介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#61-数据库事务介绍"></a> 6.1 数据库事务介绍</h3>      <ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：<strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都</strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务**回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p></li></ul>        <h3 id="62-jdbc事务处理"   >          <a href="#62-jdbc事务处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#62-jdbc事务处理"></a> 6.2 JDBC事务处理</h3>      <ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li>**关闭数据库连接，数据就会自动的提交。**如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBCTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line">String sql1 = <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>, <span class="keyword">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> </span>&#123;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="63-事务的acid属性"   >          <a href="#63-事务的acid属性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#63-事务的acid属性"></a> 6.3 事务的ACID属性</h3>      <ol><li><p><strong>原子性（Atomicity）</strong><br />原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></li><li><p><strong>一致性（Consistency）</strong><br />事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br />事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br />持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol>        <h4 id="631-数据库的并发问题"   >          <a href="#631-数据库的并发问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#631-数据库的并发问题"></a> 6.3.1 数据库的并发问题</h4>      <ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul>        <h4 id="632-四种隔离级别"   >          <a href="#632-四种隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#632-四种隔离级别"></a> 6.3.2 四种隔离级别</h4>      <ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555586275271.png" alt="1555586275271" /></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p></li></ul>        <h4 id="633-在mysql中设置隔离级别"   >          <a href="#633-在mysql中设置隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#633-在mysql中设置隔离级别"></a> 6.3.3 在MySql中设置隔离级别</h4>      <ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别:</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></table></div></figure></li><li><p>设置当前 mySQL 连接的隔离级别:</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level read committed;</span><br></pre></td></tr></table></div></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></table></div></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by &#39;abc123&#39;;</span><br></pre></td></tr></table></div></figure></li><li><p>授予权限</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line">grant all privileges on *.* to tom@&#39;%&#39;  identified by &#39;abc123&#39;; </span><br><span class="line"></span><br><span class="line"> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#39;abc123&#39;; </span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li></ul></li></ul>        <h2 id="7-dao及相关实现类"   >          <a href="#7-dao及相关实现类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-dao及相关实现类"></a> 7、DAO及相关实现类</h2>      <ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566726681515-1625822622017.png" alt="1566726681515" /></p><ul><li>层次结构：</li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1566745811244-1625822622017.png" alt="1566745811244" /></p>        <h3 id="basedaojava"   >          <a href="#basedaojava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#basedaojava"></a> 【BaseDAO.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line">ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">Object count = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="bookdaojava"   >          <a href="#bookdaojava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bookdaojava"></a> 【BookDAO.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="userdaojava"   >          <a href="#userdaojava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#userdaojava"></a> 【UserDAO.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="bookdaoimpljava"   >          <a href="#bookdaoimpljava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bookdaoimpljava"></a> 【BookDaoImpl.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">Book book = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">&quot;select count(*) from books&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">&quot;select count(*) from books where price between ? and ?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="userdaoimpljava"   >          <a href="#userdaoimpljava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#userdaoimpljava"></a> 【UserDaoImpl.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;select id,username,password,email from users where username = ?&quot;</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line">String sql = <span class="string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="bookjava"   >          <a href="#bookjava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bookjava"></a> 【Book.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title; <span class="comment">// 书名</span></span><br><span class="line"><span class="keyword">private</span> String author; <span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="keyword">private</span> Integer sales; <span class="comment">// 销量</span></span><br><span class="line"><span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line"><span class="keyword">private</span> String imgPath = <span class="string">&quot;static/img/default.jpg&quot;</span>; <span class="comment">// 封面图片的路径</span></span><br><span class="line"><span class="comment">//构造器，get()，set()，toString()方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="pagejava"   >          <a href="#pagejava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#pagejava"></a> 【Page.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="userjava"   >          <a href="#userjava" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#userjava"></a> 【User.java】</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="8-数据库连接池"   >          <a href="#8-数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-数据库连接池"></a> 8、数据库连接池</h2>              <h3 id="81-jdbc数据库连接池的必要性"   >          <a href="#81-jdbc数据库连接池的必要性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#81-jdbc数据库连接池的必要性"></a> 8.1 JDBC数据库连接池的必要性</h3>      <ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。**数据库的连接资源并没有得到很好的重复利用。**若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li>**对于每一次数据库连接，使用完后都得断开。**否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul></li></ul>        <h3 id="82-数据库连接池技术"   >          <a href="#82-数据库连接池技术" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#82-数据库连接池技术"></a> 8.2 数据库连接池技术</h3>      <ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555593464033.png" alt="1555593464033" /></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555593598606.png" alt="1555593598606" /></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul>        <h3 id="83-多种开源的数据库连接池"   >          <a href="#83-多种开源的数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#83-多种开源的数据库连接池"></a> 8.3 多种开源的数据库连接池</h3>      <ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，**速度相对较慢，稳定性还可以。**hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul>        <h4 id="831-c3p0数据库连接池"   >          <a href="#831-c3p0数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#831-c3p0数据库连接池"></a> 8.3.1 C3P0数据库连接池</h4>      <ul><li>获取连接方式一</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">cpds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">cpds.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource cpds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;helloc3p0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="832-dbcp数据库连接池"   >          <a href="#832-dbcp数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#832-dbcp数据库连接池"></a> 8.3.2 DBCP数据库连接池</h4>      <ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li>**Tomcat 的连接池正是采用该连接池来实现的。**该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table></div><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">BasicDataSource source = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">source.setUrl(<span class="string">&quot;jdbc:mysql:///test&quot;</span>);</span><br><span class="line">source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">source.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource source = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></div></figure>        <h4 id="833-druid德鲁伊数据库连接池"   >          <a href="#833-druid德鲁伊数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#833-druid德鲁伊数据库连接池"></a> 8.3.3 Druid（德鲁伊）数据库连接池</h4>      <p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></div></figure><ul><li>详细配置参数：</li></ul><div class="table-container"><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<span class="exturl"><a class="exturl__link"   href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" >https://github.com/alibaba/druid/wiki/使用ConfigFilter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table></div>        <h2 id="9-apache-dbutils实现crud操作"   >          <a href="#9-apache-dbutils实现crud操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-apache-dbutils实现crud操作"></a> 9、Apache-DBUtils实现CRUD操作</h2>              <h3 id="91-apache-dbutils简介"   >          <a href="#91-apache-dbutils简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#91-apache-dbutils简介"></a> 9.1 Apache-DBUtils简介</h3>      <ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils</li></ul></li><li><p>API包说明：</p></li></ul><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555595163263.png" alt="1555595163263" /></p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/1555595198644.png" alt="1555595198644" /></p>        <h3 id="92-主要api的使用"   >          <a href="#92-主要api的使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#92-主要api的使用"></a> 9.2 主要API的使用</h3>              <h4 id="921-dbutils"   >          <a href="#921-dbutils" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#921-dbutils"></a> 9.2.1 DbUtils</h4>      <ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。</li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul>        <h4 id="922-queryrunner类"   >          <a href="#922-queryrunner类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#922-queryrunner类"></a> 9.2.2 QueryRunner类</h4>      <ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>…</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>…</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…</li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql, <span class="string">&quot;何成飞&quot;</span>, <span class="string">&quot;he@qq.com&quot;</span>, <span class="string">&quot;1992-09-08&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">&quot;delete from customers where id &lt; ?&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="923-resultsethandler接口及实现类"   >          <a href="#923-resultsethandler接口及实现类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#923-resultsethandler接口及实现类"></a> 9.2.3 ResultSetHandler接口及实现类</h4>      <ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p>**BeanHandler：**将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p>**BeanListHandler：**将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p>**MapHandler：**将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p>**MapListHandler：**将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p>**ScalarHandler：**查询单个值对象</p></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;handle&quot;</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String email = rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line">String sql = <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line">ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">Date birth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="jdbc总结"   >          <a href="#jdbc总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdbc总结"></a> JDBC总结</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】MySQL基础</title>
      <link href="2021/03/29/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/29/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[        <h2 id="1-初识mysql"   >          <a href="#1-初识mysql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-初识mysql"></a> 1. 初识MySQL</h2>      <ul><li><strong>DB</strong>：DataBase，数据库，实际上在硬盘上以文件的形式存在</li><li><strong>SQL</strong>：Structured Query Language，结构化查询语言，是一门标准通用的语言，标准sql适用于所有的数据库产品，SQL语句在执行时，内部会先进行编译，然后再执行。（SQL语句的编译由DBMS完成）</li><li><strong>DBMS</strong>： DataBase Management System，数据库管理系统，如MySQL，Oracle，DB2等，用来管理DB（用来管理数据库中的数据）</li></ul><p><strong>DBMS负责执行sql语句，其通过执行sql语句来操作DB中的数据。</strong></p>        <h3 id="11-启动mysql服务"   >          <a href="#11-启动mysql服务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-启动mysql服务"></a> 1.1 启动MySQL服务</h3>      <p>命令行启动MySQL服务（管理员模式）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></div></figure>        <h3 id="12-连接数据库"   >          <a href="#12-连接数据库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-连接数据库"></a> 1.2 连接数据库</h3>      <p>命令行连接数据库（管理员模式）</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p xxxxx  <span class="comment">-- 连接数据库</span></span><br></pre></td></tr></table></div></figure>        <h3 id="13-sql命令"   >          <a href="#13-sql命令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#13-sql命令"></a> 1.3 SQL命令</h3>      <p>更改用户密码并刷新权限（sql语句需要以;结尾）</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user <span class="keyword">SET</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">AND</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 更改用户密码</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES; <span class="comment">-- 刷新权限</span></span><br></pre></td></tr></table></div></figure><span id="more"></span><p>基本命令</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 查询所有数据库</span></span><br><span class="line">USE xxx; <span class="comment">-- 切换数据库 use 数据库名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> TABLES; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> student; <span class="comment">-- 显示数据库中所有的表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE westos; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">EXIT; <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">hello </span></span><br><span class="line"><span class="comment">MySQL</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>        <h3 id="14-数据库语言分类"   >          <a href="#14-数据库语言分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#14-数据库语言分类"></a> 1.4 数据库语言分类</h3>      <ul><li><strong>DDL： Database Definition Language</strong> 数据库定义语言。用于对<strong>表的结构</strong>进行增删改：CREATE  DROP ALTER</li><li><strong>DML：Data Manipulation Language</strong>  数据库操纵语言。用于对<strong>表的数据</strong>进行增删改：INSERT DELETE UPDATE</li><li><strong>DQL：Data Query Language</strong> 数据库查询语言。用于查询表中的数据，基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：</li><li><strong>DCL：Data Control Language</strong> 数据库控制语言。用来授予或回收访问数据库的某种特权：GRANT REVOKE</li><li><strong>TCL：Transaction Control Language</strong> 事务控制语言。控制数据库操纵事务发生的时间及效果，对数据库实行监视等：COMMIT ROLLBACK</li></ul>        <h2 id="2-数据库基础"   >          <a href="#2-数据库基础" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-数据库基础"></a> 2. 数据库基础</h2>              <h3 id="21-操作数据库"   >          <a href="#21-操作数据库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#21-操作数据库"></a> 2.1 操作数据库</h3>      <p>操作数据库 ——&gt; 操作数据库中的表 ——&gt; 操作数据库中表的数据</p><p><mark><strong>MySQL关键字不区分大小写</strong></mark></p><p>以下关键字属于MySQL命令，并非SQL语句，只有在MySQL中才能使用</p><ol><li>创建数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] school;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>删除数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] school;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>使用数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果表名或者字符段名是一个特殊字符，需要带上 ` `</span></span><br><span class="line">USE `school`;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>查看数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;  <span class="comment">-- 查看所有数据库</span></span><br></pre></td></tr></table></div></figure>        <h3 id="22-数据库的列类型"   >          <a href="#22-数据库的列类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#22-数据库的列类型"></a> 2.2 数据库的列类型</h3>      <blockquote><p>数值</p></blockquote><ul><li>tinyint：   十分小的数据 ，        1个字节</li><li>smallint：     较小的数据  ，           2个字节</li><li>mediumint：中等大小的数据，     3个字节</li><li><strong>int：              标准的整数 ，          4个字节</strong></li><li>bigint：          较大的数据 ，            8个字节</li><li>float：            浮点数，                     4个字节</li><li>double：        浮点数，                     8个字节</li><li>decimal：      字符串形式的浮点数，  金融计算时，一般使用decimal</li></ul><p>其中浮点型数据创建时可以指定保留位数。例如double(M, D)代表小数点后保留D位小数，M代表整数部位+小数部位的总长度，如果超出范围，则插入临界值。M和D可以省略，如果是decimal，则默认M=10，D=0；如果是float和double，则会根据插入的数值的精度来决定精度。</p><blockquote><p>字符串</p></blockquote><ul><li>char：       <strong>固定大小</strong>字符串 0~255（在内存中分配固定长度存储数据）</li><li><strong>varchar： 可变长度字符串 0~65535，类比Java中String（按照实际字符串大小在内存中分配空间）</strong></li><li>tinytext： 微型文本  2^8 - 1</li><li>text：        文本串     2 ^16 - 1  保存大文本</li></ul><p>char(M)表示最大长度不能超过M，其中M可以省略，默认为1；<strong>varchar(M)的M不可以省略</strong>。</p><blockquote><p>时间日期</p></blockquote><p>类比java.util.Date</p><ul><li>date：  YYYY-MM-DD    日期格式</li><li>time ：  HH:mm::ss         时间格式</li><li><strong>datetime：    YYYY-MM-DD HH:mm::ss     最常用的时间格式</strong></li><li><strong>timestamp：  时间戳，1970.01.01到现在的毫秒数</strong></li><li>year： 年份表示</li></ul><blockquote><p>大对象</p></blockquote><ul><li>BLOB：Binary Large Object 二进制大对象（存储图片、视频等流媒体信息）对应Java中的Object</li><li>CLOB：Character Large Object 字符大对象（存储较大文本，比如可以存储4G的字符串）对应Java中的Object</li></ul><blockquote><p>NULL</p></blockquote><ul><li>没有值，未知</li><li><mark><strong>注意，不要使用NULL进行运算，NULL和任何数参与运算，计算结果都为NULL</strong></mark></li><li>想避免NULL对运算结果产生影响，则使用<code>IFNULL</code>空处理函数：<code>IFNULL(XXX, 0)</code></li></ul>        <h3 id="23-存储引擎"   >          <a href="#23-存储引擎" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#23-存储引擎"></a> 2.3 存储引擎</h3>      <p>存储引擎即一张表在数据库中的存储方式。</p><div class="table-container"><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持（最新版支持）</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持，只支持表锁</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持（最新版支持）</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table></div><ul><li><strong>MyISAM</strong>：<strong>可被转换为压缩、只读表来节省空间</strong>。节约空间，速度较快</li><li><strong>InnoDB</strong>：安全性高，支持<strong>事务</strong>的处理，多表多用户操作，在MySQL服务器<strong>崩溃后提供自动恢复</strong>，支持级联删除和更新</li><li><strong>MEMORY</strong>：查询速度最快，<strong>表数据和索引</strong>被存储在<strong>内存</strong>中，不支持事务，数据容易丢失。不能包含TEXT或BLOB字段</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有数据库文件都存在data目录下，一个文件夹就是一个数据库，本质还是文件的存储。</p><p>MySQL引擎在物理文件上的区别：</p><ul><li>InnoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MyISAM对应文件<ul><li>*.frm  表结构的定义文件</li><li>*.MYD 数据文件（data）</li><li>*.MYI  索引文件（index）</li></ul></li></ul><p>三种存储引擎的适用条件：</p><ul><li>MyISAM：适用于大量的数据读而少量数据更新的混合操作，另一种适用情形是使用压缩的只读表</li><li>InnoDB：适用于查询中包含较多的数据更新操作，其行级锁机制和多版本的支持为数据读取和更新的混合操作提供了良好的并发机制</li><li>MEMORY：适用于存储非永久需要的数据，或者是能够从基于磁盘的表中重新生成的数据</li></ul>        <h3 id="24-数据表的类型"   >          <a href="#24-数据表的类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#24-数据表的类型"></a> 2.4 数据表的类型</h3>      <blockquote><p>设置数据库表的字符集编码</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></div></figure><p>不设置的话，会是MySQL默认的字符集编码Latin1（不支持中文）。</p><p>可以在my.ini中配置默认的编码：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">-</span>server<span class="operator">=</span>utf8</span><br></pre></td></tr></table></div></figure>        <h3 id="25-约束"   >          <a href="#25-约束" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#25-约束"></a> 2.5 约束</h3>      <p>在创建表时，可以给表的字段添加相应的约束，从而保证表中数据的合法性、有效性和完整性。</p><ul><li>非空约束（NOT NULL）：约束的字段不能为NULL</li><li>唯一约束（UNIQUE）：约束的字段不能重复</li><li>主键约束（PRIMARY KEY）：约束的字段既不能为NULL，也不能重复（简称PK）</li><li>外键约束（FOREIGN KEY)：用于限制两个表的关系，约束的字段的值必须来自于主表的关联列的值（简称FK）</li><li>无符号约束（UNSIGNED）：约束该字段为无符号</li><li>零填充约束（ZEROFILL）：限制该字段0填充</li><li>自增约束（AUTO_INCREMENT）：限制该字段自增</li><li>默认值约束（DEFAULT）：设置该字段的默认值</li></ul><blockquote><p>唯一性约束（UNIQUE）</p></blockquote><p><strong>UNIQUE</strong>：唯一性约束修饰的字段具有唯一性，不能重复，但可以设置为NULL。</p><p>若给两列同时加UNIQUE，则为表级约束，联合起来不重复即可。若在列后面直接加UNIQUE，则为列级约束，该列数据不能有重复。</p><blockquote><p>主键（PRIMARY KEY）</p></blockquote><p><strong>PRIMARY KEY</strong>：主键值是这行数据在这张表中的唯一标识（第一范式要求每张表必须有主键）。</p><p>一张表的主键约束只能有一个，可以是单一主键（推荐）或复合主键（不推荐，违反三范式）。主键值最好是和业务没有关系的自然数。在字段后添加AUTO_INCREMENT设置主键值自增</p><blockquote><p>外键（FOREIGN KEY）</p></blockquote><p><strong>FOREIGN KEY</strong>：用于减少表的冗余，将一张表拆成两张表。</p><p>外键引用的父表的字段必须是唯一的（UNIQUE），一般情况都是子表外键引用父表主键</p><blockquote><p>无符号约束（UNSIGNED）</p></blockquote><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><blockquote><p>零填充约束（ZEROFILL）</p></blockquote><ul><li>0填充的</li><li>不足的位数，使用0填充。zerofill设置为3时，5——005</li></ul><blockquote><p>自增约束（AUTO_INCREMENT）</p></blockquote><ul><li>自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键，例如Index，必须是整数类型</li><li>可以自定义设置主键自增的起始值和步长</li></ul><blockquote><p>默认值约束（DEFAULT）</p></blockquote><ul><li>设置默认的值</li><li>例如若sex设置默认值为男，如果不指定该列的值，则会设置为默认值</li></ul><p>增加外键约束的方式：</p><blockquote><p>方式一：在创建表的时候，增加约束（比较麻烦）</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表的gradeid字段要去引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键KEY</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束（执行引用） reference 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(`id`), </span><br><span class="line">     <span class="keyword">CONSTRAINT</span> uq <span class="keyword">UNIQUE</span>(`name`), </span><br><span class="line"> KEY `FK_gradeid`(`gradeid`),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> `FK_gradid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure><p>删除有外键关系的表时，必须先删除引用别人的表（从表），再删除被引用的表（主表）</p><blockquote><p>方式二：创建表成功后，添加外键约束</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表（哪个字段)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br></pre></td></tr></table></div></figure><p>以上操作都是<code>物理外键</code>，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>想使用多张表的数据，想使用外键时，使用程序实现</li></ul><p><strong>主键约束（PRIMARY KEY）和唯一约束（UNIQUE）对比：</strong></p><div class="table-container"><table><thead><tr><th></th><th>保证唯一性</th><th>是否允许为空</th><th>一个表可以有几个</th><th>是否允许组合</th></tr></thead><tbody><tr><td><strong>主键约束</strong></td><td>√</td><td>×</td><td>最多有一个</td><td>√</td></tr><tr><td><strong>唯一约束</strong></td><td>√</td><td>√</td><td>可以有多个</td><td>√</td></tr></tbody></table></div><p><strong>列级约束和表级约束对比</strong></p><div class="table-container"><table><thead><tr><th></th><th>位置</th><th>支持的约束类型</th><th>是否可以起约束名</th></tr></thead><tbody><tr><td><strong>列级约束</strong></td><td>列的后面</td><td>语法都支持，但外键没有效果</td><td>不可以</td></tr><tr><td><strong>表级约束</strong></td><td>所有列的下面</td><td>默认和非空约束不支持，其他支持</td><td>可以（主键没有效果）</td></tr></tbody></table></div>        <h2 id="3-数据库定义语言ddl"   >          <a href="#3-数据库定义语言ddl" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-数据库定义语言ddl"></a> 3.  数据库定义语言（DDL）</h2>              <h3 id="31-创建表create"   >          <a href="#31-创建表create" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#31-创建表create"></a> 3.1 创建表（CREATE）</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意点 英文括号()，表的名称和字段尽量使用``</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- 所有语句后面加,（最后一句不用加）</span></span><br><span class="line"><span class="comment">-- PRIMAY KEY 一张表的主键约束只能有一个。单一主键或复合主键（不推荐，因为违反三范式）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure><p>一般格式：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    ...</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`字段名`)</span><br><span class="line">)[表类型][注释][字符集设置];</span><br></pre></td></tr></table></div></figure><p>约束位置处可以添加：</p><ul><li><code>UNSIGNED</code>：限制该字段为无符号</li><li><code>ZEROFILL</code>：该字段0填充</li><li><code>AUTO_INCREMENT</code>：该字段自增</li><li><code>DEFAULT</code> ：设置该字段的默认值</li><li><code>NOT NULL</code>：限制该字段不能为NULL</li><li><code>UNIQUE</code>：限制该字段不能重复</li><li><code>PRIMARY KEY</code>：约束该字段既不能为NULL，也不能重复</li><li><code>FOREIGN KEY</code>：约束该字段的值必须来自于主表的关联列的值（外键约束在列级约束处无效果）</li></ul><p>常用命令：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `school`; <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`;   <span class="comment">-- 查看创建student数据表的语句，使用Navicat生成表后，可以使用该命令查看创建表的语句</span></span><br><span class="line"><span class="keyword">DESC</span> `student`;                <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></div></figure><p>复制表：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复制表的结构+数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student_2`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student_2` <span class="keyword">LIKE</span> `student`;</span><br></pre></td></tr></table></div></figure>        <h3 id="32-修改表alter"   >          <a href="#32-修改表alter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#32-修改表alter"></a> 3.2 修改表（ALTER）</h3>      <blockquote><p>修改表的结构</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名：ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test RENAME <span class="keyword">AS</span> teacher1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加表的字段：ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（修改字段类型以及约束，字段重命名）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>); <span class="comment">-- 修改字段类型以及约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 CHANGE age age1 <span class="type">INT</span>(<span class="number">1</span>); <span class="comment">-- 字段重命名</span></span><br></pre></td></tr></table></div></figure><blockquote><p>删除表的结构</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表的字段：ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></div></figure><p>注意点：</p><ul><li>字段名使用``包裹</li><li>注释用-- 或/**/</li><li>sql关键字大小写不敏感</li></ul>        <h3 id="33-删除表drop"   >          <a href="#33-删除表drop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#33-删除表drop"></a> 3.3 删除表（DROP）</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t_student;</span><br></pre></td></tr></table></div></figure>        <h2 id="4-数据库操纵语言dml"   >          <a href="#4-数据库操纵语言dml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-数据库操纵语言dml"></a> 4. 数据库操纵语言（DML）</h2>              <h3 id="41-添加数据insert"   >          <a href="#41-添加数据insert" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#41-添加数据insert"></a> 4.1 添加数据（INSERT）</h3>      <p>语法：<mark><strong>INSERT INTO 表名(字段名1, 字段名2) VALUES (‘值11’,‘值12’), (‘值21’,‘值22’)</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入一个数据的一个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`) VALUES (&#x27;值1&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一个数据的多个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`, `字段名2`) VALUES (&#x27;值1&#x27;, &#x27;值2&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`, `pwd`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;aaaaaa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个数据的多个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`, `字段名2`) VALUES (&#x27;值11&#x27;, &#x27;值12&#x27;), (&#x27;值21&#x27;, &#x27;值22&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`, `pwd`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;aaaaaa&#x27;</span>), (<span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>注意事项：</p><ol><li>字段和字段使用英文逗号隔开</li><li>表后括号内的字段可以省略，但是后面的值必须与字段名一一对应</li><li>可以同时插入多条数据，此时VALUES后面的值使用逗号隔开<code>VALUES(), (), ()...</code></li></ol>        <h3 id="42-修改数据update"   >          <a href="#42-修改数据update" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#42-修改数据update"></a> 4.2 修改数据（UPDATE）</h3>      <p>语法：<mark><strong>UPDATE 表名 SET  字段名1=value, [字段名2=value2, …] WHERE [条件]</strong></mark></p><p>条件：WHERE子句，运算符</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  修改学员名字，带了条件</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况下，会改动所有的表</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span>, `email`<span class="operator">=</span><span class="string">&#x27;1234567@qq.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过多个条件定位数据，无上限</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span> <span class="keyword">AND</span> `sex`<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多张表的记录</span></span><br><span class="line">UPDATE `student1` s1 </span><br><span class="line"><span class="keyword">JOIN</span> `student2` s2</span><br><span class="line"><span class="keyword">ON</span> s1.`id` <span class="operator">=</span> s2.`id`</span><br><span class="line"><span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span></span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td>安全等于</td><td>5&lt;=&gt;NULL</td><td>false</td></tr><tr><td style="text-align:left">&lt;&gt; 或 !=</td><td>不等于</td><td>5&lt;&gt;6</td><td>true</td></tr><tr><td style="text-align:left">&gt;，&gt;=</td><td>大于，大于等于</td><td>5&gt;6, 5&gt;=6</td><td>false</td></tr><tr><td style="text-align:left">&lt;，&lt;=</td><td>小于，小于等于</td><td>5&lt;6, 5&lt;=6</td><td>true</td></tr><tr><td style="text-align:left">BETWEEN … AND …</td><td>闭区间[]</td><td>BETWEEN 2 AND 5</td><td>[2, 5]</td></tr><tr><td style="text-align:left">AND</td><td>&amp;&amp;</td><td>5&gt;1 AND 1&gt;2</td><td>false</td></tr><tr><td style="text-align:left">OR</td><td>||</td><td>5&gt;1 OR 1&gt;2</td><td>true</td></tr></tbody></table></div><p>注意：</p><ul><li>字段名是数据库的列，尽量带上``</li><li>筛选的条件如果没有指定，则会修改所有的列</li><li>value是一个具体的值，也可以是一个变量（时间变量）</li><li>多个设置的属性之间使用英文逗号隔开</li><li><strong>安全等于&lt;=&gt;可以判断某字段数值是否等于NULL，而普通等于=无法判断是否为NULL</strong></li></ul>        <h3 id="43-删除数据delete"   >          <a href="#43-删除数据delete" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#43-删除数据delete"></a> 4.3 删除数据（DELETE）</h3>      <p>语法：<mark><strong>DELETE  FROM 表名 [WHERE 条件]</strong></mark></p><p>作用：<strong>用于删除小表，删除后可以回滚，删除速度较慢</strong></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据 （避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联表删除数据</span></span><br><span class="line"><span class="comment">-- 将userid为Bbiri的user表和my_employees表的记录删除</span></span><br><span class="line"><span class="keyword">DELETE</span> u, e </span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">JOIN</span> my_employees e</span><br><span class="line"><span class="keyword">ON</span> u.`userid` <span class="operator">=</span> r.`Userid`</span><br><span class="line"><span class="keyword">WHERE</span> u.`userid` <span class="operator">=</span> <span class="string">&#x27;Bbiri&#x27;</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>TRUNCATE 命令</p></blockquote><p>作用：**用于删除大表，表被截断，不可回滚，永久消失，删除速度较快。**完全清空一个数据库表，表的结构和索引约束不会变。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `student`;</span><br></pre></td></tr></table></div></figure><blockquote><p>TRUNCATE与DELETE区别</p></blockquote><ul><li>相同点：都能删除数据，都不会删除表结构</li><li>不同点：<ul><li>TRUNCATE：**删除后不可回滚，永久丢失，删除速度较快。**重新设置自增列，<strong>自增会归零</strong>，不会影响事务，其后不能加<code>WHERE</code>过滤</li><li>DELETE：<strong>删除后可以回滚，删除速度较慢。<strong>不影响自增列，删除后</strong>自增不归零</strong></li></ul></li></ul><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`;    <span class="comment">-- 不会影响自增</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test`; <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></div></figure><p>了解即可： <code>DELETE删除的问题</code></p><p>重启数据库时：</p><ul><li>InnoDB，自增列会从1开始（存在内存当中，断电即失）</li><li>MyISAM，继续从上一个自增量开始（存在文件中，不会丢失）</li></ul>        <h2 id="5-数据库查询语言dql"   >          <a href="#5-数据库查询语言dql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-数据库查询语言dql"></a> 5. 数据库查询语言（DQL）</h2>              <h3 id="51-dql"   >          <a href="#51-dql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#51-dql"></a> 5.1 DQL</h3>      <p>DQL：Data Query Language，数据库查询语言</p><ul><li>所有的查询操作都使用SELECT</li><li>数据库中最核心的语言</li><li>使用频率最高</li></ul><p><strong>SELECT完整语法：</strong></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>[<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW <span class="operator">|</span> TOP]</span><br><span class="line">&#123;* | talbe.* | [table.]field1[AS alias1][,[table.]field2[AS alias2][,…]]&#125; -- 字段</span><br><span class="line"><span class="keyword">FROM</span> tableexpression[,…]  <span class="comment">-- 从哪张表（主表）查询</span></span><br><span class="line">[<span class="keyword">LEFT</span> <span class="operator">|</span> <span class="keyword">RIGHT</span> <span class="operator">|</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> externaldatabase]  <span class="comment">-- 联合查询</span></span><br><span class="line">[<span class="keyword">ON</span> …]          <span class="comment">-- 联合查询的等值判断</span></span><br><span class="line">[<span class="keyword">WHERE</span> …]       <span class="comment">-- 条件过滤：可以是具体的值，也可以是子查询语句</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> …]    <span class="comment">-- 分组：通过某个字段进行分组</span></span><br><span class="line">[<span class="keyword">HAVING</span> …]  <span class="comment">-- 过滤分组后信息：条件和WHERE相似，只是位置必须在GROUP BY之后</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> …]<span class="comment">-- 排序：通过某个字段排序</span></span><br><span class="line">[LIMIT ]        <span class="comment">-- 分页：指定查询记录从哪条，显示多少条</span></span><br></pre></td></tr></table></div></figure><p><mark><strong>SELECT语句执行顺序：</strong></mark></p><p><code>SELECT</code>在<code>HAVING</code>之后执行，因此分组函数不能在<code>WHERE</code>中使用</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>            <span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">FROM</span>              <span class="comment">-- 1</span></span><br><span class="line">[<span class="keyword">JOIN</span>  …]         <span class="comment">-- 2</span></span><br><span class="line">[<span class="keyword">ON</span>    …]         <span class="comment">-- 3</span></span><br><span class="line">[<span class="keyword">WHERE</span> …]         <span class="comment">-- 4</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> …]      <span class="comment">-- 5</span></span><br><span class="line">[<span class="keyword">HAVING</span> …]        <span class="comment">-- 6</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> …]      <span class="comment">-- 8</span></span><br><span class="line">[LIMIT ]          <span class="comment">-- 9</span></span><br></pre></td></tr></table></div></figure>        <h3 id="52-指定查询字段select"   >          <a href="#52-指定查询字段select" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#52-指定查询字段select"></a> 5.2 指定查询字段（SELECT）</h3>      <p>语法：<mark><strong>SELECT 字段，… FROM 表</strong></mark></p><blockquote><p>有时列的名字不是那么见名知意，此时可以其别名，使用AS ：字段名 AS 别名 或  表名 AS 别名</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全部学生 SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起个名字。可以给字段其别名，也可以给表名起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">AS</span> 学号, `StudentName` <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 CONCAT(a, b)，将连接后字符串显示</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名： &#x27;</span>, StudentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> `student`;</span><br></pre></td></tr></table></div></figure><blockquote><p>去重 DISTINCT</p></blockquote><p>作用：去除SELECT查询出来的结果中重复的数据，重复数据只显示一条</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询一下有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;            <span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">FROM</span> <span class="keyword">result</span>;  <span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `StudentNo` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>数据库的列（表达式）</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION();                   <span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果;          <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTO</span>_INCREMENT_INCREMENT;  <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员考试成绩+1分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><p>数据库中的表达式：文本值，列，NULL，函数，计算表达式，系统变量…</p><p>语法：<mark><strong>SELECT 表达式  FROM 表</strong></mark></p>        <h3 id="53-条件子句where"   >          <a href="#53-条件子句where" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#53-条件子句where"></a> 5.3 条件子句（WHERE）</h3>      <p>作用：检索数据中<code>符合条件</code>的值</p><p>搜索的条件由一个或多个表达式组成，结果为布尔值</p><blockquote><p>逻辑运算符</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>AND  &amp;&amp;</td><td>a AND b   a &amp;&amp; b</td><td>逻辑与，两个都为真，结果为真</td></tr><tr><td>OR     ||</td><td>a OR b      a || b</td><td>逻辑或，其中一个为真，结果为真</td></tr><tr><td>NOT   !</td><td>NOT a       ! a</td><td>逻辑非，真变假，假变真</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- &amp;&amp; AND </span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult`<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> `StudentResult`<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult`<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> `StudentResult`<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 区间</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- != NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="operator">!=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> `StudentNo` <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>模糊查询：比较运算符</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a IS NULL</td><td>如果操作符a为NULL，结果为真</td></tr><tr><td>IS NOT NULL</td><td>a IS NOT NULL</td><td>如果操作符a为NOT NULL，结果为真</td></tr><tr><td>BETWEEN</td><td>a BETWEEN b and c</td><td>若a在b和c之间，结果为真</td></tr><tr><td><strong>LIKE</strong></td><td>a   b</td><td>SQL匹配，如果a匹配b，结果为真</td></tr><tr><td><strong>IN</strong></td><td>a IN (a1, a2, a3…)</td><td>假设a在a1，或者a2…其中的某一个值中，则结果为真</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ======================= 模糊查询 =========================</span></span><br><span class="line"><span class="comment">-- 查询姓张的同学</span></span><br><span class="line"><span class="comment">-- LIKE结合 %(代表任意个字符)  _(表示一个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓张的同学，&#x27;张&#x27;后只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓张的同学，&#x27;张&#x27;后只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 若想匹配下划线&#x27;_&#x27;，则使用转义&#x27;\_&#x27;的方式才能查询到带有_的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有伟的字的同学 %伟%</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;%伟%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======================= IN =========================</span></span><br><span class="line"><span class="comment">-- 查询1000,1001号学员</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (<span class="number">1000</span>, <span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在北京的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `Address` <span class="keyword">IN</span> (<span class="string">&#x27;北京朝阳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======================= NULL/NOT NULL ======================= </span></span><br><span class="line"><span class="comment">-- 查询地址为空的学生，即等于 NULL 或 &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> adress <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学，即不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `BornDate` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></div></figure><p>注意：使用<code>LIKE</code>时，若想匹配下划线_，则使用转义的方式。</p>        <h3 id="54-连接查询join"   >          <a href="#54-连接查询join" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#54-连接查询join"></a> 5.4 连接查询（JOIN )</h3>      <ol><li><p>按照年代分类：</p><ul><li>SQL92（旧的语法）</li><li>SQL99（新的语法）</li></ul></li><li><p>按照表的连接方式分类：</p><ul><li>内连接（包括等值连接、非等值连接、自连接）</li><li>外连接（包括左外连接，右外连接）</li><li>全连接</li></ul></li></ol><p>笛卡尔积现象：当两张表进行连接查询时，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。（例如第一张表有7条数据，第二张表有8条数据，则不加条件限制时，查询出56条数据）避免笛卡尔积现象的方法：使用ON关键字加条件进行过滤。<strong>但避免笛卡尔积现象并不会减少记录的匹配次数，数据库在匹配数据时仍然是搜索了56次，但是只滤过剩下了符合条件的数据</strong></p><p>语法：<mark><strong>FROM 要查询的表 INNER/RIGHT/LEFT JOIN 要连接的表 ON 交叉条件</strong></mark></p><p><img src="http://wwxiong.oss-cn-beijing.aliyuncs.com/blog-img/technology/mysql/mysql-sql-joins/02.png" alt="七种SQL Joins 文氏图解" /></p><ul><li><strong>INNER JOIN</strong>：内连接，又叫等值连接，只返回两个表中连接字段相等的行数据</li><li><strong>LEFT JOIN</strong>：左连接，从左表中返回所有值，即使右表中没有匹配（没匹配上的数据显示NULL）</li><li><strong>RIGHT JOIN</strong>：右连接，从右表中返回所有值，即使左表中没有匹配（没匹配上的数据显示NULL）</li></ul><p>数据库在通过JOIN连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户，或与下一层的表进行连接。</p><p>在使用LEFT JOIN 时，ON和WHERE条件的区别如下：</p><ul><li>ON条件是在生成临时表时使用的条件，它不管ON中的条件是否为真，都会返回左边表中的记录。（为真的部分返回数值，为假的部分返回NULL）</li><li>WHERE条件是在临时表生成好后，再对临时表进行过滤的条件。</li></ul><p><strong>ON用于判断哪个字段在两个表中相等，从而连接两个表，WHERE则是在连接后生成的临时表的基础上进行过滤</strong>。</p><p>在使用INNER JOIN 时，ON和WHERE条件产生的效果相同。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- =========================== 连接查询 JOIN ==========================</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">result</span>`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">1. 分析需求，分析查询的表来自哪些表</span></span><br><span class="line"><span class="comment">2. 确定使用哪种连接查询 7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件：student表中的StudenNo = result表中的 StudentNo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INNER JOIN 内连接，取二者共有的行，交集</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN：左连接。以左表为主表，展示左表所有的数据、右表符合ON条件的数据、以及右表不符合条件的数据（这些不符合的数据显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN：右连接，以右表为主表，展示右表所有的数据、左表符合ON条件的数据、以及左表不符合条件的数据（这些不符合的数据显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="comment">-- 增加WHERE，对查询结果进行筛选过滤</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- =========================== 多张表连接查询 ===========================</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息：学号，学生姓名，科目名，分数</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">As</span> r</span><br><span class="line"><span class="keyword">ON</span> r.`StudentNo` <span class="operator">=</span> s.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.SubjectNo <span class="operator">=</span> sub.SubjectName;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式：</span></span><br><span class="line"><span class="comment">-- SELECT 要查询哪些数据 </span></span><br><span class="line"><span class="comment">-- FROM 要查询的表 </span></span><br><span class="line"><span class="comment">-- XXX JOIN 要连接的表 </span></span><br><span class="line"><span class="comment">-- ON 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，先查询两张表，然后再查询另一张表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- FROM a LEFT JOIN b  a为基准</span></span><br><span class="line"><span class="comment">-- FROM a RIGHT JOIN b  b为基准</span></span><br></pre></td></tr></table></div></figure><blockquote><p>自连接</p></blockquote><p><mark><strong>自己的表和自己的表连接，核心：一张表拆为两张一样的表即可</strong></mark></p><p><strong>原表</strong></p><div class="table-container"><table><thead><tr><th>categoryid</th><th>pid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>信息技术</td></tr><tr><td>3</td><td>1</td><td>软件开发</td></tr><tr><td>4</td><td>3</td><td>数据库</td></tr><tr><td>5</td><td>1</td><td>美术设计</td></tr><tr><td>6</td><td>3</td><td>Web开发</td></tr><tr><td>7</td><td>5</td><td>PS技术</td></tr><tr><td>8</td><td>2</td><td>办公信息</td></tr></tbody></table></div><blockquote><p>拆成父类表和子类表</p></blockquote><p><strong>父类</strong></p><div class="table-container"><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table></div><p><strong>子类</strong></p><div class="table-container"><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>Web开发</td></tr><tr><td>5</td><td>7</td><td>PS技术</td></tr></tbody></table></div><p>操作：查询父类对应的子类关系</p><div class="table-container"><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>Web开发</td></tr><tr><td>美术设计</td><td>PS技术</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息： 把一张表选定为两张一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span>  <span class="string">&#x27;父栏目&#x27;</span>, b.`categoryNAME` <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `category` <span class="keyword">AS</span> a, `category` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid` <span class="operator">=</span> b.`pid`;</span><br></pre></td></tr></table></div></figure>        <h3 id="55-分组和过滤group-by-having"   >          <a href="#55-分组和过滤group-by-having" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#55-分组和过滤group-by-having"></a> 5.5 分组和过滤（GROUP BY  / HAVING）</h3>      <p>语法：<mark><strong>GROUP BY  …   HAVING …</strong></mark></p><ul><li><code>GROUP BY</code>：按照某个字段或者某些字段进行分组，<strong>可以进行多个字段分组</strong></li><li><code>HAVING</code>：必须放在<code>GROUP BY</code>后，对<strong>分组后的结果</strong>进行过滤</li></ul><p><code>GROUP BY</code>语句在<code>WHERE</code>语句之后执行。</p><p><mark><strong>若某个语句中没有显式GROUP BY，则编译时会在最后添加缺省的GROUP BY</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80分</span></span><br><span class="line"><span class="comment">-- 核心：根据不同的课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> ANY_VALUE(subjectName), <span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分, <span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分, <span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectNo` <span class="operator">=</span> sub.`subjectNo`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.SubjectNo <span class="comment">-- 通过什么字段分组</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分 <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出每个部门不同工作岗位的最高薪资</span></span><br><span class="line"><span class="comment">-- 多字段分组</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, job, <span class="built_in">MAX</span>(sal) </span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">deptno, job;  <span class="comment">-- 按照部门和岗位分组，先部门，后岗位，多字段分组</span></span><br></pre></td></tr></table></div></figure><p><strong>当一条SQL语句有GROUP BY时，只允许SELECT查询<mark>参加分组</mark>的字段和<mark>分组函数</mark></strong>。</p><p>注意：<strong>在SELECT中使用到分组函数或使用GROUP BY关键字时，需要使用ANY_VALUE()修饰普通字段，其会选择被分到同一组的数据里第一条数据的指定列值作为返回数据，即只返回一个值</strong>。</p><p><strong>因为分组函数或使用GROUP BY关键字在使用时会从多条匹配到的数据中取出某一个作为返回结果（例如MAX()，只取了最大的数据），此时，没有被分组函数修饰的字段将匹配到多条数据，因此必须从中选出某一条作为返回结果，ANY_VALUE()即从中返回了第一条数据</strong>。</p><p>为提高效率，可先使用WHERE进行筛选，再在其基础上使用GROUP BY分组。若先GROUP BY，再HAVING，则效率低于前者。如果能在GROUP BY前使用WHERE过滤，则最好先使用WHERE。</p>        <h3 id="56-排序order-by"   >          <a href="#56-排序order-by" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#56-排序order-by"></a> 5.6 排序（ORDER BY ）</h3>      <p>语法：<mark><strong>ORDER BY 字段名 DESC/ASC</strong></mark></p><ul><li>升序ASC</li><li>降序DESC</li></ul><p>注意：当指定多个字段进行排序时，越靠前的字段越起主导地位，后面的字段只会在前面的字段排序相等的情况下才会启用。例如<code>ORDER BY XXX DESC, YYY ASC</code>，先按照XXX进行降序排列，再在其基础上，对XXX相等的数据进行升序排列。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ======================== 分页LIMIT 排序ORDER BY =========================</span></span><br><span class="line"><span class="comment">-- 排序：升序ASC，降序DESC</span></span><br><span class="line"><span class="comment">-- ORDER BY 通过哪个字段排序，怎么拍</span></span><br><span class="line"><span class="comment">-- 查询的结果根据成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="57-分页limit"   >          <a href="#57-分页limit" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#57-分页limit"></a> 5.7 分页（LIMIT）</h3>      <p>语法：<mark><strong>LIMIT 查询起始值，pagesize</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分页：缓解数据库压力，给人更好的体验</span></span><br><span class="line"><span class="comment">-- 网页应用：当前，总的页数，页面大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0, 5   1~5       </span></span><br><span class="line"><span class="comment">-- LIMIT 6, 5   6~10     </span></span><br><span class="line"><span class="comment">-- 第一页 LIMIT 0, 5</span></span><br><span class="line"><span class="comment">-- 第二页 LIMIT 5, 5</span></span><br><span class="line"><span class="comment">-- 第三页 LIMIT 10, 5</span></span><br><span class="line"><span class="comment">-- 第N页 LIMIT  (N-1)* pageSize, pageSize</span></span><br><span class="line"><span class="comment">-- [PageSize: 页面大小, (N-1)*PageSize：起始值, N: 当前页]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="58-子查询"   >          <a href="#58-子查询" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#58-子查询"></a> 5.8 子查询</h3>      <p>目标：WHERE（不使用固定值，而使用计算出来的值）</p><p>本质：<mark><strong>在WHERE语句中嵌套一个子查询语句</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据库结构-1的所有考试结果（学号，科目编号，成绩），降序排列</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, r.`SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  `StudentResult` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询（由里及外）</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, r.`SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> `SubjectNo` <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `SubjectNo` </span><br><span class="line"><span class="keyword">FROM</span> `subject` </span><br><span class="line"><span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `StudentResult` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库结构-1的学生的学号</span></span><br><span class="line"><span class="keyword">SELECT</span> `SubjectNo` <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName`</span><br><span class="line"><span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName`</span><br><span class="line"><span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line">);</span><br></pre></td></tr></table></div></figure>        <h3 id="59-合并查询结果union"   >          <a href="#59-合并查询结果union" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#59-合并查询结果union"></a> 5.9 合并查询结果（UNION）</h3>      <p>语法：<mark><strong>SELECT XXXXX  UNION SELECT XXXXX</strong></mark></p><p>作用：用于将两个SELECT语句查询到的结果合并成一张表（行数据拼接起来），可以把两个<strong>不相干的表</strong>中的数据拼接起来显示（例如要查询的结果来自于多张表，并且这些表之间没有直接的连接关系）。</p><p>要求：</p><ul><li>前后两个查询结果的列数必须一致</li><li>多条查询语句的查询的每一列的类型和顺序最好一致</li><li><code>UNION</code>关键字默认去重，如果使用<code>UNION ALL</code>可以包含重复项</li></ul>        <h2 id="6-mysql函数"   >          <a href="#6-mysql函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-mysql函数"></a> 6. MySQL函数</h2>              <h3 id="61-普通函数"   >          <a href="#61-普通函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#61-普通函数"></a> 6.1 普通函数</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数学运算 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>);       <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>);  <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);    <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND();        <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-2</span>);      <span class="comment">-- 判断一个数的符号 0返回0，负数返回-1，整数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- +号运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">90</span>;         <span class="comment">-- 两个操作数都为数值型，则做加法运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;123&#x27;</span> <span class="operator">+</span> <span class="number">90</span>；      <span class="comment">-- 其中一方为字符型，试图将字符型数值转换为数值型，</span></span><br><span class="line">                         <span class="comment">-- 如果转换成功，则继续做加法，如果转换失败，则将字符型数值转换成0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="operator">+</span> <span class="number">10</span>;        <span class="comment">-- 只要其中一方为NULL，则结果为NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;helloworld&#x27;</span>);          <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27; World&#x27;</span>);          <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;He&#x27;</span>);  <span class="comment">-- 从某个位置开始替换某个字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;HELLOWORLD&#x27;</span>);                <span class="comment">-- 变小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;helloworld&#x27;</span>);                <span class="comment">-- 变大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;h&#x27;</span>);          <span class="comment">-- 返回第一次出现的字符串的位置，找不到返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>);   <span class="comment">-- 替换</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">4</span>, <span class="number">6</span>);        <span class="comment">-- 返回指定的子字符串（源字符串，截取的位置，截取的长度）从第4个字符开始取，取6个字符长度</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;hello world&#x27;</span>);             <span class="comment">-- 反转</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;   HELLO   &#x27;</span>);                <span class="comment">-- 将字符串前后的空格去掉</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaHELLOaaa&#x27;</span>);       <span class="comment">-- 将字符串前后的指定字符&#x27;a&#x27;去掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(studentName, <span class="string">&#x27;周&#x27;</span>, <span class="string">&#x27;邹&#x27;</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;周%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数（记住）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();  <span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();       <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();           <span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();     <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();       <span class="comment">-- 本地时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 空处理函数，将xxx为NULL的值设置为0</span></span><br><span class="line">IFNULL(xxx, <span class="number">0</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="62-分组函数"   >          <a href="#62-分组函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#62-分组函数"></a> 6.2 分组函数</h3>      <p>分组函数都是对<strong>某一组</strong>数据进行操作的。 其也被称为聚合函数、多行处理函数：输入多行，最终输出一行结果。</p><ul><li><strong>分组函数自动忽略NULL，无需添加WHERE条件语句判断数据是否为NULL</strong></li><li><strong>分组函数不能直接使用在WHERE子句当中，因为WHERE语句在GROUP BY语句之前执行，而分组函数必须在分完组才能执行（即必须在GROUP BY语句之后执行）</strong></li><li><strong>分组函数一般都会和GROUP BY联合使用，其在GROUP BY语句执行后才执行</strong></li></ul><p>例如：<code>SELECT ename, sal FROM emp WHERE sal &gt; AVG(sal);</code>有语法错误，因为分组函数不能在WHERE子句中使用。修改办法：使用子查询语句<code>SELECT ename, sal FROM emp WHERE sal &gt; (SELECT AVG(sal) FROM emp);</code></p><div class="table-container"><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>计数</td></tr><tr><td>SUM()</td><td>求和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`StudentName`) <span class="keyword">FROM</span> student;  <span class="comment">-- COUNT(字段)，指定查询某列，会忽略所有的NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;  <span class="comment">-- COUNT(*)，不会忽略NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="keyword">result</span>;   <span class="comment">-- COUNT(1)，不会忽略NULL值，效果同COUNT(*)，本质是在表中加了一列全是1的数据，然后统计1的个数，本质还是COUNT(*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`studentResult`) <span class="keyword">AS</span> 总分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`studentResult`) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`studentResult`) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`studentResult`) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><p>注意：<mark><strong>count(*)和count(某字段)的区别：</strong></mark></p><ul><li><code>count(*)</code>：和字段内容没关系，会查询所有包含NULL在内的行数（统计总记录条数）</li><li><code>count(某字段)</code>：和字段内容有关系，会查询除了NULL值以外的行数（忽略NULL值）</li></ul><p>分组函数在<code>GROUP BY</code><strong>之后</strong>使用，用于统计分组后同一组内数据的最大/小值、平均值和总数。</p>        <h3 id="63-数据库级别的md5加密扩展"   >          <a href="#63-数据库级别的md5加密扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#63-数据库级别的md5加密扩展"></a> 6.3 数据库级别的MD5加密（扩展）</h3>      <p>MD5：Message-Digest Algorithm，信息摘要算法。</p><p>MD5主要增强算法复杂度和不可逆性。MD5破解网站的原理：背后有一个字典，一一查询匹配MD5加密后的值与加密前的值，看能否找到匹配。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ====================== 测试MD5 加密 ======================</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line">UPDATE `testmd5` <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd) <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">UPDATE `testmd5` <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据时加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;zhaoliu&#x27;</span>, MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验：将用户传递进来的密码进行md5加密，然后对比加密后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> testmd5 <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>(MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></div></figure>        <h2 id="7-事务"   >          <a href="#7-事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-事务"></a> 7. 事务</h2>              <h3 id="71-什么是事务"   >          <a href="#71-什么是事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#71-什么是事务"></a> 7.1 什么是事务</h3>      <p>TCL: Transaction Control Language 事务控制语言。</p><p>事务（Transaction）：事务由单独单元的一个或一组sql语句组成，在这个单元中，每个MySQL语句是相互依赖的，这个执行单元 <mark><strong>要么全部执行，要么全部不执行</strong></mark></p><ul><li>SQL语句1正在执行：A给B转账200     A：1000  ——&gt; 200   B：200</li><li>SQL语句2正在执行：B收到A的钱        B：800    ——&gt;            B：400</li></ul><p>将一组SQL放在一个批次中去执行。上述两条语句组成一组来执行，要么都成功，要么都失败，否则钱会凭空消失。</p>        <h3 id="72-事务原则"   >          <a href="#72-事务原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#72-事务原则"></a> 7.2 事务原则</h3>      <blockquote><p>事务原则：ACID原则——原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)；脏读，幻读，不可重复读</p></blockquote><p><strong>1. 原子性(Atomicity)</strong></p><p>原子性是指<strong>事务是一个不可分割的工作单位</strong>，事务中的操作<strong>要么都执行，要么都不执行</strong>。</p><p><strong>2. 一致性(Consistency)</strong></p><p>事务必须使数据库从一个一致性状态变换到另一个一致性状态。同一个事务中多次查询的到的结果应该一致（不确定，需要从网络补充其他）保证数据库一致性是指当事务完成时，必须使所有数据都具有一致的状态。（例如A给B转账前后，数据库中二者余额之和相等，转账前为一个一致性状态，转账后也为一个一致性状态）。</p><p><strong>3. 隔离性(Isolation)</strong></p><p>隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他数据是隔离的，并发执行的各个事务之间不能互相干扰。</p><p><strong>4. 持久性(Durability)</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p>        <h3 id="73-事务隔离级别"   >          <a href="#73-事务隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#73-事务隔离级别"></a> 7.3 事务隔离级别</h3>      <blockquote><p>参考链接：<span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1450773" >https://cloud.tencent.com/developer/article/1450773</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题：</p><p><strong>1. 脏读（读取未提交数据）：</strong></p><p>指一个事务读取了另一个事务未提交的数据。例如，两个事务T1和T2，T1读取了已经被T2更新但是<strong>还没有被提交</strong>的字段，之后，若T2回滚，T1读取到的内容就是临时且无效的。</p><p><strong>2. 不可重复读（前后多次读取，数据内容不一致）：</strong></p><p>指在一个事务内读取表中的某一行数据，过段时间，该字段数据被另一事务修改，此时第一个事务<strong>再读时读取结果不同</strong>。例如，两个事务T1和T2，T1读取了一个字段，然后T2<strong>更新</strong>了该字段，之后，T1再此读取同一字段时，值就不同了。</p><p><strong>3. 幻读（前后多次读取，数据总量不一致）：</strong></p><p>事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，这个时候事务A读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据。（类似班级里刚才看还是一个人，再看变成两个人，就像产生了幻觉）</p><p><strong>不可重复读和幻读的区别:</strong></p><p>(1) 不可重复读是读取了其他事务更改的数据，<strong>针对UPDATE操作</strong></p><p>解决：使用行级锁，锁定该行，事务A多次读取操作完成后才释放该锁，这个时候才允许其他事务更改刚才的数据。</p><p>(2) 幻读是读取了其他事务新增的数据，<strong>针对INSERT和DELETE操作</strong></p><p>解决：使用表级锁，锁定整张表，事务A多次读取数据总量之后才释放该锁，这个时候才允许其他事务新增数据。</p><p><strong>MySQL的JDBC中，默认开启事务，此时每一句sql语句都会在一个单独的事务中执行，例如两次查询语句都会在不同的事务中执行，执行完该语句都会立刻提交。</strong></p><p>MySQL支持4种事务隔离级别，默认级别为 <mark><strong>REPEATABLE READ</strong></mark></p><ul><li><strong>READ UNCOMMITTED（读未提交数据）</strong>：允许事务读取未被其他事务提交的变更。脏读、不可重复读和幻读都可能出现</li><li><strong>READ COMMITTED（读已提交数据）</strong>：只允许事务读取已经被其他事务提交的变更。可以避免脏读，但不可重复读和幻读仍然可能出现</li><li><strong>REPEATABLE READ（可重复读）</strong>：确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新。<strong>此时即使其他事务修改某字段并COMMIT，本事务查询时仍是原先值</strong>。可以避免脏读和不可重复读，但幻读仍然可能出现，<strong>即其他事务若插入了新的行，本事务查询时也会多出这些行，导致看起来像幻觉一样，每次读取的数据总量不同</strong></li><li><strong>SERIALIZABLE（串行化）</strong>：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作。所有并发问题都可以避免，但性能十分低下。在某个事务读取时，其他事务阻塞，无法对该表进行操作。<strong>该级别下无法进行并发</strong></li></ul><p>查看隔离级别：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION           <span class="comment">--（8.0以前） </span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANSACTION</span>_ISOLATION  <span class="comment">--（8.0以后）</span></span><br></pre></td></tr></table></div></figure><p>设置<strong>当前</strong>MySQL连接的隔离级别：</p><p><strong>SET <mark>SESSION</mark> TRANSACTION ISOLATION LEVEL <mark>READ COMMITTED</mark></strong></p><p>设置<strong>全局</strong>MySQL连接的隔离级别：</p><p><strong>SET <mark>GLOBAL</mark> TRANSACTION ISOLATION LEVEL <mark>READ COMMITTED</mark></strong></p>        <h3 id="74-悲观锁和乐观锁"   >          <a href="#74-悲观锁和乐观锁" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#74-悲观锁和乐观锁"></a> 7.4 悲观锁和乐观锁</h3>      <p>参考链接：<span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1450773" >https://cloud.tencent.com/developer/article/1450773</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>悲观锁</p></blockquote><p>正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处 于锁定状态。</p><p>悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机 制，也无法保证外部系统不会修改数据）。</p><p>在悲观锁的情况下，为了保证事务的隔离性，就需要一致性锁定读。读取数据时给加锁，其它事务无法修改这些数据。修改删除数据时也要加锁，其它事务无法读取这些数据。</p><blockquote><p>乐观锁</p></blockquote><p>相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。</p><p>而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。</p><p>何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。</p><p>此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如 果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p>        <h3 id="75-执行事务顺序"   >          <a href="#75-执行事务顺序" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#75-执行事务顺序"></a> 7.5 执行事务顺序</h3>      <ol><li>关闭自动提交：<code>SET autocommit = 0</code></li><li>开启一个事务：<code>START TRANSACTION</code><ul><li>提交（执行成功）：<code>COMMIT</code> ，获得新的数据库</li><li>回滚（执行失败）：<code>ROLLBACK</code>，返回原先数据库</li></ul></li><li>开启自动提交：<code>SET autocommit = 1</code></li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 开启（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;    <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> xx;</span><br><span class="line"><span class="keyword">INSERT</span> xx;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称a;              <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> 保存点名称a;            <span class="comment">-- 回滚到保存点 </span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称;       <span class="comment">-- 撤销保存点 </span></span><br></pre></td></tr></table></div></figure><p>测试案例：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 模拟转账</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;    <span class="comment">-- 开启一个事务</span></span><br><span class="line"></span><br><span class="line">UPDATE `account` <span class="keyword">SET</span> `money`<span class="operator">=</span>`money` <span class="operator">-</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">UPDATE `account` <span class="keyword">SET</span> `money`<span class="operator">=</span>`money` <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;    <span class="comment">-- 提交事务，执行后数据库内容才会修改</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- 回滚，数据库内容不会修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></div></figure>        <h3 id="76-delete和truncate在事务中的区别"   >          <a href="#76-delete和truncate在事务中的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#76-delete和truncate在事务中的区别"></a> 7.6 DELETE和TRUNCATE在事务中的区别</h3>      <ul><li><code>DELETE</code>在事务提交前使用，若回滚，则数据会恢复</li><li><code>TRUNCATE</code>事务提交前使用，若回滚，则数据依旧不会恢复</li></ul>        <h2 id="8-视图"   >          <a href="#8-视图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-视图"></a> 8. 视图</h2>      <blockquote><p>视图（VIEW）：一种虚拟存在的表。站在不同的角度去看待同一份数据</p></blockquote><p>视图是一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时<strong>动态生成的</strong>，<strong>只保存了SQL逻辑，不保存查询结果</strong>。视图使用时可以像操纵表一样操纵表中的数据。</p>        <h3 id="81-操作视图"   >          <a href="#81-操作视图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#81-操作视图"></a> 8.1 操作视图</h3>      <blockquote><p>创建视图</p></blockquote><p>语法：<mark><strong>CREATE VIEW 视图名 AS DQL语句（SELECT … FROM …)</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- CREATE后只能是DQL语句</span></span><br></pre></td></tr></table></div></figure><blockquote><p>删除视图</p></blockquote><p>语法：<mark><strong>DROP VIEW 视图名</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_view;</span><br></pre></td></tr></table></div></figure><blockquote><p>修改视图</p></blockquote><p>语法：<mark><strong>ALTER  VIEW  视图名</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> emp_view  <span class="comment">-- 如果存在则替换</span></span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> emp_view</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></div></figure><blockquote><p>更新视图</p></blockquote><p>语法同操作表时一模一样</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE emp_view <span class="keyword">SET</span> sal <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> dname <span class="operator">=</span> <span class="string">&#x27;ACCOUNTING&#x27;</span>;</span><br></pre></td></tr></table></div></figure><p><strong>视图的更新性和视图中查询的定义有关系，以下类型的视图时不能更新的：</strong></p><ul><li>包含以下关键字的SQL语句：分组函数、<code>DISTINCT</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>或<code>UNION ALL</code></li><li>常量视图</li><li><code>SELECT</code>中包含子查询</li><li><code>JOIN</code></li><li><code>FROM</code>一个不能更新的视图</li><li><code>WHERE</code>子句的子查询引用了<code>FROM</code>子句中的表</li></ul>        <h3 id="82-视图的作用"   >          <a href="#82-视图的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#82-视图的作用"></a> 8.2 视图的作用</h3>      <p>视图的特点：通过对视图的操作会影响到原表数据。可以<strong>面向视图对象</strong>进行增删改查，<strong>对视图对象的增删改查将会导致原表被操作</strong>。</p><p>视图的作用：假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。每次使用这条SQL语句的时候都需要重新编写（很麻烦），这时可以把这条复杂的SQL语句以视图对象的形式新建。在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发，并且有利于后期的维护，因为修改时只需要修改一个视图对象所映射的SQL语句。</p>        <h3 id="83-视图和表的区别"   >          <a href="#83-视图和表的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#83-视图和表的区别"></a> 8.3 视图和表的区别</h3>      <div class="table-container"><table><thead><tr><th></th><th>创建语法</th><th>是否占用实际物理空间</th><th>使用</th></tr></thead><tbody><tr><td><strong>视图</strong></td><td><code>CREATE VIEW</code></td><td>只是保存了SQL逻辑</td><td>主要用来查询</td></tr><tr><td><strong>表</strong></td><td><code>CREATE TABLE</code></td><td>保存了实际数据</td><td>增删改查</td></tr></tbody></table></div>        <h2 id="9-变量"   >          <a href="#9-变量" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-变量"></a> 9. 变量</h2>      <p>MySQL中变量类型：</p><ul><li><strong>系统变量</strong>：<ul><li><strong>全局变量</strong>：针对数据库全局有效。服务器每次启动将为所有的全局变量赋初值，针对所有的会话（连接）有效，但是不能跨重启（数据库重启后之前设置的值会恢复）</li><li><strong>会话变量</strong>：仅针对某次会话（连接）有效</li></ul></li><li>自定义变量：<ul><li><strong>用户变量</strong>：在当前会话中有效，同与会话变量的作用域</li><li><strong>局部变量</strong>：仅仅在定义它的<code>BEGIN END</code>中有效</li></ul></li></ul><div class="table-container"><table><thead><tr><th></th><th>作用域</th><th>定义和使用的地方</th><th>语法</th></tr></thead><tbody><tr><td><strong>用户变量</strong></td><td>当前会话</td><td>会话中的任何地方</td><td><code>SET @a = 0;</code>必须加@符号，不用限定类型</td></tr><tr><td><strong>局部变量</strong></td><td><code>BEGIN END</code>中</td><td><code>BEGIN END</code>中，且为第一句话</td><td><code>DECLARE a INT DEFAULT 0;</code>一般不用加@符号，需要限定类型</td></tr></tbody></table></div>        <h2 id="10-存储过程和函数"   >          <a href="#10-存储过程和函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-存储过程和函数"></a> 10. 存储过程和函数</h2>      <p>存储过程：一组预编译好的SQL语句的集合，可以理解成批处理语句（类似于Java中的函数）。</p><ul><li>提高代码的重用性</li><li>简化操作</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</li></ul>        <h3 id="101-存储过程的语法"   >          <a href="#101-存储过程的语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#101-存储过程的语法"></a> 10.1 存储过程的语法</h3>      <blockquote><p>创建存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名（参数列表）</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></div></figure><p>参数列表包含三部分：参数模式、参数名和参数类型。其中参数模式包含：</p><ul><li><code>IN</code>：该参数可以作为输入，也就是该参数需要调用方传入值</li><li><code>OUT</code> ：该参数可以作为输出，也就是该参数可以作为返回值</li><li><code>INOUT</code>：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</li></ul><p>如果存储过程体仅仅只有一句话，则<code>BEGIN END</code>可以省略。存储过程体中的每句SQL语句的结尾要求必须加分号。存储过程的结尾可以使用<code>DELIMITER</code>重新设置。</p><blockquote><p>调用存储方法</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名（实参列表）；</span><br></pre></td></tr></table></div></figure><blockquote><p>删除存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名;</span><br></pre></td></tr></table></div></figure><blockquote><p>查看存储过程的信息</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名;</span><br></pre></td></tr></table></div></figure>        <h3 id="102-创建和调用存储过程"   >          <a href="#102-创建和调用存储过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#102-创建和调用存储过程"></a> 10.2 创建和调用存储过程</h3>      <blockquote><p>空参列表</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `admin`;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admin`(`username`, `password`) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp1() $</span><br></pre></td></tr></table></div></figure><blockquote><p>带IN模式参数的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2(<span class="keyword">IN</span> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> `userid`</span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `username` <span class="operator">=</span> `name`;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp2(<span class="string">&#x27;zhangsan&#x27;</span>)$</span><br></pre></td></tr></table></div></figure><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp3(<span class="keyword">IN</span> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">IN</span> `password` <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> `<span class="keyword">result</span>` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 声明局部变量并初始化</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span>     <span class="comment">-- 将查询结果赋值给变量</span></span><br><span class="line"><span class="keyword">FROM</span> `admin`</span><br><span class="line"><span class="keyword">WHERE</span> `admin`.`username` <span class="operator">=</span> `name`</span><br><span class="line"><span class="keyword">AND</span> `admin`.`password` <span class="operator">=</span> `password`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> IF(`<span class="keyword">result</span>` <span class="operator">&gt;</span> <span class="number">0</span>, <span class="string">&#x27;成功&#x27;</span>, <span class="string">&#x27;失败&#x27;</span>)  <span class="comment">-- 变量使用</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp3(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)$</span><br></pre></td></tr></table></div></figure><blockquote><p>带OUT模式的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp4(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.boyName <span class="keyword">INTO</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b </span><br><span class="line"><span class="keyword">ON</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line"><span class="keyword">WHERE</span> b.name <span class="operator">=</span> beautyName;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户变量并调用存储过程</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@bName</span> $</span><br><span class="line"><span class="keyword">CALL</span> myp5(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="variable">@bName</span>)$</span><br></pre></td></tr></table></div></figure><blockquote><p>带INOUT模式的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp5(<span class="keyword">INOUT</span> a <span class="type">INT</span>, <span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> b <span class="operator">=</span> b <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span> <span class="operator">=</span> <span class="number">10</span>$</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span> <span class="operator">=</span> <span class="number">20</span>$</span><br><span class="line"><span class="keyword">CALL</span> myp5(<span class="variable">@m</span>, <span class="variable">@n</span>)$</span><br></pre></td></tr></table></div></figure>        <h3 id="103-函数的语法"   >          <a href="#103-函数的语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#103-函数的语法"></a> 10.3 函数的语法</h3>      <p>存储过程和函数的区别：</p><ul><li>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新</li><li>函数：有且只有一个返回，适合做处理数据后返回一个结果</li></ul><blockquote><p>创建函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数列表) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></div></figure><ul><li>参数列表包含：参数名、参数类型。</li><li>函数体：肯定会有<code>RETURN</code>语句。如果<code>RETURN</code>语句没有放在函数体的最后也不会报错，但不建议</li><li>当函数体中只有一句话，可以省略<code>BEGIN END</code></li><li>使用<code>DELIMITER</code>语句设置结束标记</li></ul><blockquote><p>调用函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(列表参数)</span><br></pre></td></tr></table></div></figure><blockquote><p>查看函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf1;</span><br></pre></td></tr></table></div></figure><blockquote><p>删除函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> myf1;</span><br></pre></td></tr></table></div></figure>        <h3 id="104-创建和调用函数"   >          <a href="#104-创建和调用函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#104-创建和调用函数"></a> 10.4 创建和调用函数</h3>      <blockquote><p>无参数，有返回</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf1() <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;  <span class="comment">-- 定义局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> c    <span class="comment">-- 给c赋值</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> c;                 <span class="comment">-- 返回值</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myf1()$</span><br></pre></td></tr></table></div></figure><blockquote><p>有参数，有返回</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf2(empName <span class="type">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sal</span> <span class="operator">=</span> <span class="number">0</span>;             <span class="comment">-- 定义用户变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> <span class="variable">@sal</span>   <span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> <span class="variable">@sal</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myf2(<span class="string">&#x27;king&#x27;</span>) $</span><br></pre></td></tr></table></div></figure>        <h2 id="11-权限管理和备份"   >          <a href="#11-权限管理和备份" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-权限管理和备份"></a> 11. 权限管理和备份</h2>              <h3 id="111-权限管理"   >          <a href="#111-权限管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#111-权限管理"></a> 11.1 权限管理</h3>      <blockquote><p>SQL命令</p></blockquote><p>用户表：mysql.user（存储用户信息）</p><p>本质：修改权限，添加用户等操作本质上是对这张表进行增删改查</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户： CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zhangsan IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改指定用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> zhangsan <span class="operator">=</span> PASSWORD(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名： RENAME USER 原名 TO 新名</span></span><br><span class="line">RENAME <span class="keyword">USER</span> zhangsan <span class="keyword">TO</span> zhangsanfeng;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权： ALL PRIVILEGES 全部权限 TO 库.表</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权，其他都权限都有</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> zhangsan;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> zhangsan <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限： REVOKE 哪些权限 ON 在哪个库 FROM 给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> zhangsan;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> zhangsan;</span><br></pre></td></tr></table></div></figure>        <h3 id="112-mysql备份"   >          <a href="#112-mysql备份" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#112-mysql备份"></a> 11.2 MySQL备份</h3>      <p>为什么要备份：</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份的方式：</p><ul><li>直接拷贝物理文件，data目录</li><li>在Navicat工具中手动导出</li><li>使用命令行：mysqldump</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =================================  导出 ===============================</span></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 schoool student &gt; D:/student.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 schoool &gt; D:/school.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================  导入 ===============================</span></span><br><span class="line"><span class="comment"># 在登入的情况下，切换到指定数据库</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">mysql&gt; USE school;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> D:/student.sql <span class="comment"># 或 source D:/school.sql</span></span><br></pre></td></tr></table></div></figure>        <h2 id="12-数据库设计的三大范式"   >          <a href="#12-数据库设计的三大范式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-数据库设计的三大范式"></a> 12. 数据库设计的三大范式</h2>              <h3 id="121-为什么需要设计"   >          <a href="#121-为什么需要设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#121-为什么需要设计"></a> 12.1 为什么需要设计</h3>      <p>当数据库交复杂时，就需要设计</p><p><strong>糟糕的数据库设计：</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦/异常（屏蔽使用物理外键）</li><li>程序的性能差</li></ul><p><strong>良好的数据库设计：</strong></p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便开发系统</li></ul><p><strong>软件开发中，关于数据库的设计：</strong></p><ul><li>分析需求，分析业务和需要处理的数据库需求</li><li>概要设计：设计关系图 E-R图</li></ul><p><strong>设计数据库的步骤：（个人博客）</strong></p><ul><li>收集信息，分析需求<ul><li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li><li>分类表（文章分类，谁创建的）</li><li>文章表（文章的信息）</li><li>评论表（评论的信息）</li><li>友链表（友链信息）</li><li>自定义表（系统信息，某个关键的字，或者一些主字段） 表中两列：key  | value</li></ul></li><li>标识实体（把需求落地到每个字段）</li><li>标识实体之间的关系<ul><li>写博客：user --&gt; blog</li><li>创建分类：user --&gt; category</li><li>关注：user --&gt; user</li><li>友链：links</li><li>评论：user --&gt; user --&gt; blog</li></ul></li></ul>        <h3 id="122-三大范式"   >          <a href="#122-三大范式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#122-三大范式"></a> 12.2 三大范式</h3>      <blockquote><p>三大范式：设计表的依据，按照这个三范式设计的表不会出现数据冗余 <span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1fx411X7BD?p=74" >https://www.bilibili.com/video/BV1fx411X7BD?p=74</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>1. 第一范式（1NF）：原子性</strong></p><p>任何一张表都应该有<strong>主键</strong>，并且每一个字段<strong>原子性不可再分</strong>，即每一列的信息不可再分</p><p><strong>2. 第二范式（2NF）：不可部分依赖</strong></p><p>前提：必须满足第一范式。所有非主键字段<strong>完全依赖</strong>主键，不能产生<strong>部分依赖</strong>。即每一列都只和主键相关，而不能只与主键的一部分相关（主要针对<strong>联合主键</strong>而言），例如，某表中有联合主键，某些非主键字段只依赖联合主键中的其中一个，不依赖于另一个，就产生了冗余</p><p><strong>多对多，三张表，关系表两个外键。<strong>若遇到不符合第二范式的表时，将一张</strong>多对多</strong>关系的表拆成<strong>三张表</strong>：</p><ul><li>两个表分别存储独立的信息，每个表有一个主键</li><li>一张关系表，关系表里有两个外键，分别引用两个独立表</li></ul><p><strong>3. 第三范式（3NF）：不可传递依赖</strong></p><p>前提：必须满足第一范式和第二范式。所有非主键字段<strong>直接依赖</strong>主键，不能产生<strong>传递依赖</strong>。</p><p><strong>一对多，两张表，多的表加外键。<strong>若遇到不符合第二范式的表时，将一张</strong>一对多</strong>关系的表拆成<strong>两张表</strong>：</p><ul><li>一张内容少的表，存储会产生传递依赖的信息</li><li>另一张内容多的表加外键，引用第一张表</li></ul><p><strong>规范性和性能的问题：在实际的开发中，以满足客户的需求位置，有时候会拿冗余换执行速度</strong></p><ul><li>考虑商业化的需求和目标，数据库的性能更加重要</li><li>在规范性能问题的时候，需要适当考虑一下规范性</li><li>故意给某些表增加一些冗余的字段（从多表查询边单表查询）</li><li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】稀疏矩阵</title>
      <link href="2021/03/27/%E3%80%90Java%E3%80%91%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>2021/03/27/%E3%80%90Java%E3%80%91%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparesArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个二维数组 11*11  0：没有旗子， 1：黑棋， 2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的矩阵&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为稀疏数组</span></span><br><span class="line">        <span class="comment">// 1. 获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值个数：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二维数组，将非零值放入稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span> + array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span> + array2[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ===============================================================</span></span><br><span class="line">        <span class="comment">// 稀疏数组还原</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 给其中元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++)&#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Stream API</title>
      <link href="2021/03/26/%E3%80%90Java%E3%80%91Stream-API/"/>
      <url>2021/03/26/%E3%80%90Java%E3%80%91Stream-API/</url>
      
        <content type="html"><![CDATA[        <h2 id="stream-api"   >          <a href="#stream-api" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream-api"></a> Stream API</h2>      <p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API。 Stream API ( <code>java.util.stream</code>) 把真正的<strong>函数式编程风格</strong>引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>Stream 是 Java8 中处理<strong>集合</strong>的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的<strong>查找</strong>、<strong>过滤</strong>和<strong>映射数据</strong>等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。 也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 “集合讲的是数据，Stream讲的是计算！” 注意：</p><ul><li>Stream 自己<strong>不会存储元素</strong>。</li><li>Stream <strong>不会改变源对象</strong>。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是<strong>延迟执行</strong>的。这意味着他们会等到需要结果的时候才执行。</li></ul>        <h3 id="为什么要是用stream-api"   >          <a href="#为什么要是用stream-api" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#为什么要是用stream-api"></a> 为什么要是用Stream API</h3>      <p>实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis 等，而这些 NoSQL 的数据就需要 Java 层面去处理。</p><p>Stream 和 Collection 集合的区别：Collection 是一种<strong>静态的内存数据结构</strong>，而 Stream 是有关<strong>计算</strong>的。前者是主要<strong>面向内存</strong>，存储在内存中， 后者主要是<strong>面向 CPU</strong>，通过 CPU 实现计算。</p>        <h3 id="stream的使用流程"   >          <a href="#stream的使用流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream的使用流程"></a> Stream的使用流程</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626155810489.png" alt="image-20210626155810489" /></p><p>使用流程的注意点：</p><ul><li>一个中间操作链，对数据源的数据进行处理</li><li>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</li></ul>        <h3 id="创建stream的方式"   >          <a href="#创建stream的方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建stream的方式"></a> 创建Stream的方式</h3>              <h4 id="方式一通过集合"   >          <a href="#方式一通过集合" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一通过集合"></a> 方式一：通过集合</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160117139.png" alt="image-20210626160117139" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式二通过数组"   >          <a href="#方式二通过数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二通过数组"></a> 方式二：通过数组</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160210175.png" alt="image-20210626160210175" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式三通过stream的of"   >          <a href="#方式三通过stream的of" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三通过stream的of"></a> 方式三：通过Stream的of()</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160255007.png" alt="image-20210626160255007" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式四创建无限流"   >          <a href="#方式四创建无限流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式四创建无限流"></a> 方式四：创建无限流</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160338594.png" alt="image-20210626160338594" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>总结四种方式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stream中间操作"   >          <a href="#stream中间操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream中间操作"></a> Stream中间操作</h3>      <p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160546946.png" alt="image-20210626160546946" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160550965.png" alt="image-20210626160550965" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160554806.png" alt="image-20210626160554806" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        <span class="comment">// filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class="line">        stream.filter(e -&gt; e.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class="line">        list.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//映射</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);</span><br><span class="line">        namesStream.filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//练习2：</span></span><br><span class="line">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);</span><br><span class="line">        streamStream.forEach(s -&gt;&#123;</span><br><span class="line">            s.forEach(System.out::println);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">        Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">        characterStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">fromStringToStream</span><span class="params">(String str)</span></span>&#123;<span class="comment">//aa</span></span><br><span class="line">        ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character c : str.toCharArray())&#123;</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="number">4</span>);</span><br><span class="line">        list2.add(<span class="number">5</span>);</span><br><span class="line">        list2.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list1.add(list2);</span></span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//sorted()——自然排序</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>, <span class="number">43</span>, <span class="number">65</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">0</span>, -<span class="number">98</span>, <span class="number">7</span>);</span><br><span class="line">        list.stream().sorted().forEach(System.out::println);</span><br><span class="line">        <span class="comment">//抛异常，原因:Employee没有实现Comparable接口</span></span><br><span class="line">        <span class="comment">//List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span></span><br><span class="line">        <span class="comment">//employees.stream().sorted().forEach(System.out::println);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sorted(Comparator com)——定制排序</span></span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());</span><br><span class="line">            <span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ageValue;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stream终止操作"   >          <a href="#stream终止操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream终止操作"></a> Stream终止操作</h3>      <p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：<code>List</code>、<code>Integer</code>，甚至是 <code>void</code>。流进行了终止操作后，不能再次使用。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160640867.png" alt="image-20210626160640867" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160645113.png" alt="image-20210626160645113" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160649435.png" alt="image-20210626160649435" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160653025.png" alt="image-20210626160653025" /></p><p>Collector需要使用Collectors提供实例。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160700820.png" alt="image-20210626160700820" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-匹配与查找</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line">        <span class="comment">//练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        <span class="keyword">boolean</span> allMatch = employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工姓“雷”</span></span><br><span class="line">        <span class="keyword">boolean</span> noneMatch = employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br><span class="line">        <span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        <span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line">        <span class="keyword">long</span> count = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">5000</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//max(Comparator c)——返回流中最大值</span></span><br><span class="line">        <span class="comment">//练习：返回最高的工资：</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br><span class="line">        <span class="comment">//min(Comparator c)——返回流中最小值</span></span><br><span class="line">        <span class="comment">//练习：返回最低工资的员工</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//forEach(Consumer c)——内部迭代</span></span><br><span class="line">        employees.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用集合的遍历操作</span></span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-归约</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">        <span class="comment">//练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        Integer sum = list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line">        <span class="comment">//练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class="line">        <span class="comment">//Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class="line">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class="line">        System.out.println(sumMoney.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-收集</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line">        <span class="comment">//练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        employeeSet.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="optional类"   >          <a href="#optional类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#optional类"></a> Optional类</h2>      <p>Optional类：为了解决java中的空指针问题而生。</p><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。 以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代 码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p><p>Optional 类(<code>java.util.Optional</code>) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存 null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p><p>Optional类的 Javadoc 描述如下：这是一个可以为 null 的容器对象。如果值存在则<code>isPresent()</code>方法会返回true，调用<code>get()</code>方法会返回该对象。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626162456425.png" alt="image-20210626162456425" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//empty():创建的Optional对象内部的value = null</span></span><br><span class="line">    Optional&lt;Object&gt; op1 = Optional.empty();</span><br><span class="line">    <span class="keyword">if</span>(!op1.isPresent())&#123;<span class="comment">//Optional封装的数据是否包含数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(op1);</span><br><span class="line">    System.out.println(op1.isPresent());</span><br><span class="line">    <span class="comment">//如果Optional封装的数据value为空，则get()报错。否则，value不为空时，返回value.</span></span><br><span class="line">    <span class="comment">//System.out.println(op1.get());</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//str = null;</span></span><br><span class="line">    <span class="comment">//of(T t):封装数据t生成Optional对象。要求t非空，否则报错。</span></span><br><span class="line">    Optional&lt;String&gt; op1 = Optional.of(str);</span><br><span class="line">    <span class="comment">//get()通常与of()方法搭配使用。用于获取内部的封装的数据value</span></span><br><span class="line">    String str1 = op1.get();</span><br><span class="line">    System.out.println(str1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;beijing&quot;</span>;</span><br><span class="line">    str = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//ofNullable(T t) ：封装数据t赋给Optional内部的value。不要求t非空</span></span><br><span class="line">    Optional&lt;String&gt; op1 = Optional.ofNullable(str);</span><br><span class="line">    <span class="comment">//orElse(T t1):如果Optional内部的value非空，则返回此value值。如果</span></span><br><span class="line">    <span class="comment">//value为空，则返回t1.</span></span><br><span class="line">    String str2 = op1.orElse(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(str2);<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Lambda表达式</title>
      <link href="2021/03/26/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/03/26/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[        <h2 id="lambda表达式"   >          <a href="#lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lambda表达式"></a> Lambda表达式</h2>      <p>Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升、</p><p>从匿名内部类到 Lambda 的转换举例1：</p><p>匿名内部类形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">r1.run();</span><br></pre></td></tr></table></div></figure><p>Lambda 表达式形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runnable r2 = () -&gt; System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">r2.run();</span><br></pre></td></tr></table></div></figure><p>从匿名内部类到Lambda 的转换举例2：</p><p>匿名内部类形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> compare1 = com1.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure><p>Lambda 表达式形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line"><span class="keyword">int</span> compare2 = com2.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure><p>方法引用形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line"><span class="keyword">int</span> compare3 = com3.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="语法"   >          <a href="#语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3>      <p>Lambda 表达式：在Java 8语言中引入的一种新的语法元素和操作符。这个操作符为 “-&gt;” ， 该操作符被称为 Lambda 操作符或箭头操作符。它将 Lambda 分为两个部分：</p><ul><li>左侧：指定了 Lambda 表达式需要的参数列表</li><li>右侧：指定了 Lambda体 ，是抽象方法的实现逻辑，也即 Lambda 表达式要执行的功能。</li></ul>        <h3 id="六种使用方式"   >          <a href="#六种使用方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六种使用方式"></a> 六种使用方式</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150542844.png" alt="image-20210626150542844" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150547722.png" alt="image-20210626150547722" /></p><p>总结六种情况：</p><ul><li>左边：lambda 形参列表的参数类型可以省略(类型推断)；如果 lambda 形参列表只一个参数，其一对()也可以省略</li><li>右边：lambda 体应该使用一对{}包裹；如果 lambda 体只一条执行语句（可能是<code>return</code>语句，省略这一对{}和<code>return</code>关键字）</li></ul>        <h3 id="类型推断"   >          <a href="#类型推断" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#类型推断"></a> 类型推断</h3>      <p>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150920181.png" alt="image-20210626150920181" /></p>        <h2 id="函数式接口"   >          <a href="#函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数式接口"></a> 函数式接口</h2>              <h3 id="定义"   >          <a href="#定义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3>      <p>只包含<strong>一个抽象方法的接口</strong>，称为<strong>函数式接口</strong>。</p><ul><li>可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>可以在一个接口上使用<code>@FunctionalInterface</code> 注解，这样可以检查它是否是一个函数式接口。</li><li>同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li></ul>        <h3 id="如何理解函数式接口"   >          <a href="#如何理解函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#如何理解函数式接口"></a> 如何理解函数式接口</h3>      <p>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP) 编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还 可以支持OOF（面向函数编程）</p><p>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在 Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的 对象类型——函数式接口。</p><p>简单的说，在Java8中，<strong>Lambda表达式就是一个函数式接口的实例</strong>。这就是 Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用 Lambda 表达式来表示。</p><p>所以以前用<strong>匿名实现类</strong>表示的现在都可以用 Lambda 表达式来写。</p><p><strong>Lambda表达式的本质：作为函数式接口的实例</strong></p><p>函数式接口举例：</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626151346747.png" alt="image-20210626151346747" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626151503858.png" alt="image-20210626151503858" /></p>        <h3 id="java内置四大核心函数式接口"   >          <a href="#java内置四大核心函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java内置四大核心函数式接口"></a> Java内置四大核心函数式接口</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153213826.png" alt="image-20210626153213826" /></p>        <h3 id="其他函数式接口"   >          <a href="#其他函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他函数式接口"></a> 其他函数式接口</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153330040.png" alt="image-20210626153330040" /></p>        <h2 id="方法引用"   >          <a href="#方法引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方法引用"></a> 方法引用</h2>      <p>方法引用可以看做是 Lambda 表达式深层次的表达。换句话说，<strong>方法引用就是Lambda表达式</strong>，也就是函数式接口的一个实例，通过方法的名字来指向一个方法。</p><ul><li>当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用。</li><li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致。</li><li>格式：使用操作符 “::” 将类(或对象) 与方法名分隔开来。</li><li>如下三种主要使用情况：<ul><li>情况一：对象::实例方法名</li><li>情况二：类::静态方法名</li><li>情况三：类::实例方法名</li></ul></li></ul><p>要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时：<code>ClassName::methodName</code>（针对于情况3）</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153934414.png" alt="image-20210626153934414" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154023663.png" alt="image-20210626154023663" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">    con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    PrintStream ps = System.out;</span><br><span class="line">    Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">    con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee emp = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">    System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;Double,Long&gt; func = <span class="keyword">new</span> Function&lt;Double, Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Double d)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.round(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">    System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">    System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况：类 :: 实例方法  (难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">    System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">    System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">    System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">    System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">    System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">    System.out.println(func2.apply(employee));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="构造器引用"   >          <a href="#构造器引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#构造器引用"></a> 构造器引用</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154608885.png" alt="image-20210626154608885" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">    System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">    Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">    System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">    System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数组引用"   >          <a href="#数组引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组引用"></a> 数组引用</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154622412.png" alt="image-20210626154622412" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">    String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">    String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】网络编程</title>
      <link href="2021/03/25/%E3%80%90Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2021/03/25/%E3%80%90Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="inetaddress"   >          <a href="#inetaddress" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#inetaddress"></a> InetAddress</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line">        InetAddress inet1 = InetAddress.getByName(<span class="string">&quot;192.168.10.14&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(inet1);</span><br><span class="line"></span><br><span class="line">        InetAddress inet2 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(inet2);</span><br><span class="line"></span><br><span class="line">        InetAddress inet3 = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        System.out.println(inet3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本地ip</span></span><br><span class="line">        InetAddress inet4 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(inet4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getHostName()</span></span><br><span class="line">        System.out.println(inet2.getHostName());</span><br><span class="line">        <span class="comment">//getHostAddress()</span></span><br><span class="line">        System.out.println(inet2.getHostAddress());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="tcp-socket"   >          <a href="#tcp-socket" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-socket"></a> TCP Socket</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">            InetAddress inet = InetAddress.getByName(<span class="string">&quot;192.168.14.100&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(inet,<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.写出数据的操作</span></span><br><span class="line">            os.write(<span class="string">&quot;你好，我是客户端mm&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//3.获取输入流</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不建议这样写，可能会有乱码</span></span><br><span class="line">            <span class="comment">//        byte[] buffer = new byte[1024];</span></span><br><span class="line">            <span class="comment">//        int len;</span></span><br><span class="line">            <span class="comment">//        while((len = is.read(buffer)) != -1)&#123;</span></span><br><span class="line">            <span class="comment">//            String str = new String(buffer,0,len);</span></span><br><span class="line">            <span class="comment">//            System.out.print(str);</span></span><br><span class="line">            <span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//4.读取输入流中的数据</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//5.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据的输出</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bufferr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span>((len1 = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer,<span class="number">0</span>,len1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.</span></span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        Socket socket = ss.accept();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//5.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;图片传输完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好！&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.</span></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="udp-datagramsocket"   >          <a href="#udp-datagramsocket" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#udp-datagramsocket"></a> UDP DatagramSocket</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;我是UDP方式发送的导弹&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">        InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>,data.length,inet,<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接收端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="url"   >          <a href="#url" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#url"></a> URL</h2>      <p>URL:统一资源定位符，对应着互联网的某一资源地址。</p><p>格式：<span class="exturl"><a class="exturl__link"   href="http://localhost:8080/examples/beauty.jpg?username=Tom" >http://localhost:8080/examples/beauty.jpg?username=Tom</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>协议  主机名  端口号 资源地址  参数列表</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/beauty.jpg?username=Tom&quot;</span>);</span><br><span class="line"><span class="comment">//            public String getProtocol(  )     获取该URL的协议名</span></span><br><span class="line">            System.out.println(url.getProtocol());</span><br><span class="line"><span class="comment">//            public String getHost(  )           获取该URL的主机名</span></span><br><span class="line">            System.out.println(url.getHost());</span><br><span class="line"><span class="comment">//            public String getPort(  )            获取该URL的端口号</span></span><br><span class="line">            System.out.println(url.getPort());</span><br><span class="line"><span class="comment">//            public String getPath(  )           获取该URL的文件路径</span></span><br><span class="line">            System.out.println(url.getPath());</span><br><span class="line"><span class="comment">//            public String getFile(  )             获取该URL的文件名</span></span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line"><span class="comment">//            public String getQuery(   )        获取该URL的查询名</span></span><br><span class="line">            System.out.println(url.getQuery());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】反射</title>
      <link href="2021/03/23/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/"/>
      <url>2021/03/23/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[        <h2 id="反射概述"   >          <a href="#反射概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射概述"></a> 反射概述</h2>      <p>Reflection（反射）是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作意对象部属性及方法。</p><p><strong>框架 = 反射 + 注解 + 设计模式</strong></p><p>加载完类之后，在<strong>堆内存的方法区</strong>中就产生了一个<code>Class</code>类型的对象（一个类只有一个<code>Class</code>对象），这个对象就包含了<strong>完整的类的结构信息</strong>。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</p><p><img src="/images/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/image-20210623202252209.png" alt="image-20210623202252209" /></p>        <h3 id="动态语言-vs-静态语言"   >          <a href="#动态语言-vs-静态语言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态语言-vs-静态语言"></a> 动态语言 vs 静态语言</h3>      <p><strong>动态语言</strong>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言：<code>Object-C</code>、<code>C#</code>、<code>JavaScript</code>、<code>PHP</code>、<code>Python</code>、<code>Erlang</code>。</p><p><strong>静态语言</strong>与动态语言相对应的，运行时<strong>结构不可变</strong>的语言就是静态语言。如<code>Java</code>、<code>C</code>、<code>C++</code>。</p><p>Java不是动态语言，但Java可以称之为“<strong>准动态</strong>语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。 Java的动态性让编程的时候更加灵活。</p>        <h3 id="反射相关类"   >          <a href="#反射相关类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射相关类"></a> 反射相关类</h3>      <ul><li><code>java.lang.Class</code>：反射的源头</li><li><code>java.lang.reflect.Method</code></li><li><code>java.lang.reflect.Field</code></li><li><code>java.lang.reflect.Constructor</code></li></ul>        <h3 id="反射优点和缺点"   >          <a href="#反射优点和缺点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射优点和缺点"></a> 反射优点和缺点</h3>      <p>优点：可以动态地创建和使用对象（也是框架底层核心）</p><p>缺点：使用反射基本是解释执行，对执行速度有影响</p><span id="more"></span>        <h2 id="class类的理解"   >          <a href="#class类的理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#class类的理解"></a> Class类的理解</h2>      <p>类的加载过程：程序经过<code>javac.ex</code>e命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用<code>java.exe</code>命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为<code>Class</code>的一个实例。</p><p>换句话说，<strong>Class的实例就对应着一个运行时类，其包含该运行时类的完整结构信息</strong>。</p><p>加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类，<strong>得到的是同一个Class对象</strong>。</p>        <h2 id="获取class实例的几种方式"   >          <a href="#获取class实例的几种方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#获取class实例的几种方式"></a> 获取Class实例的几种方式</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">Class clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz2 = p1.getClass();</span><br><span class="line">System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三：调用Class的静态方法：forName(String classPath)，常用</span></span><br><span class="line">clazz3 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式四：使用类的加载器：ClassLoader  (了解)</span></span><br><span class="line">ClassLoader classLoader = ReflectionTest.class.getClassLoader();</span><br><span class="line">Class clazz4 = classLoader.loadClass(<span class="string">&quot;com.zhao.java.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz4);</span><br></pre></td></tr></table></div></figure><p>补充：<code>ClassLoader</code>类的使用：使用Classloader加载src目录下的配置文件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Properties pros =  <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的方式一：</span></span><br><span class="line">    此时的文件默认在当前的<span class="keyword">module</span>下，与src同级。</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>);</span><br><span class="line">    pros.load(fis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的方式二：使用ClassLoader</span></span><br><span class="line">    <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">    ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">    InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">    pros.load(is);</span><br><span class="line"></span><br><span class="line">    String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;,password = &quot;</span> + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用一创建运行时类的对象"   >          <a href="#反射应用一创建运行时类的对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用一创建运行时类的对象"></a> 反射应用一：创建运行时类的对象</h2>      <p>代码举例</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">Person obj = clazz.newInstance();</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></div></figure><p>说明<code>newInstance():</code>调用此方法，创建对应的运行时类的对象。<strong>内部调用了运行时类的空参的构造器。</strong></p><p>要想此方法正常的创建运行时类的对象，要求：</p><ul><li>运行时类必须提供<strong>空参</strong>的构造器</li><li>空参的构造器的<strong>访问权限</strong>得够。通常，设置为public。</li></ul><p>在javabean中要求提供一个public的空参构造器。原因：</p><ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行时类时，子类默认调用super()时能保证父类有默认构造器</li></ul>        <h2 id="反射应用二获取运行时类的完整结构"   >          <a href="#反射应用二获取运行时类的完整结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用二获取运行时类的完整结构"></a> 反射应用二：获取运行时类的完整结构</h2>      <p>通过反射，可以获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取属性结构</span></span><br><span class="line">    <span class="comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : fields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getDeclaredFields():获取当前运行时类中声明的所属性。（不包含父类中声明的属性）</span></span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getMethods():获取当前运行时类及其所父类中声明为public权限的方法</span></span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法</span></span><br><span class="line">    Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : declaredMethods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取构造器结构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器</span></span><br><span class="line">    Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">    <span class="keyword">for</span>(Constructor c : constructors)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getDeclaredConstructors():获取当前运行时类中声明的所的构造器</span></span><br><span class="line">    Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span>(Constructor c : declaredConstructors)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Class superclass = clazz.getSuperclass();</span><br><span class="line">    System.out.println(superclass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    System.out.println(genericSuperclass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的带泛型的父类的泛型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    ParameterizedType paramType = (ParameterizedType) genericSuperclass;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取泛型类型</span></span><br><span class="line">    Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line">    <span class="comment">//System.out.println(actualTypeArguments[0].getTypeName());</span></span><br><span class="line">    System.out.println(((Class)actualTypeArguments[<span class="number">0</span>]).getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类实现的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span>(Class c : interfaces)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取运行时类的父类实现的接口</span></span><br><span class="line">    Class[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line">    <span class="keyword">for</span>(Class c : interfaces1)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类所在的包</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Package pack = clazz.getPackage();</span><br><span class="line">    System.out.println(pack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类声明的注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">    <span class="keyword">for</span>(Annotation annos : annotations)&#123;</span><br><span class="line">        System.out.println(annos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用三调用运行时类的指定结构"   >          <a href="#反射应用三调用运行时类的指定结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用三调用运行时类的指定结构"></a> 反射应用三：调用运行时类的指定结构</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testField1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建运行时类的对象</span></span><br><span class="line">    Person p = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span></span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//3.获取、设置指定对象的此属性值</span></span><br><span class="line">    name.set(p,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(name.get(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用指定的方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建运行时类的对象</span></span><br><span class="line">    Person p = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1.获取指定的某个方法</span></span><br><span class="line"><span class="comment">      getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Method show = clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">    <span class="comment">//2.保证当前方法是可访问的</span></span><br><span class="line">    show.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">      invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Object returnValue = show.invoke(p,<span class="string">&quot;CHN&quot;</span>); <span class="comment">//String nation = p.show(&quot;CHN&quot;);</span></span><br><span class="line">    System.out.println(returnValue);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*************如何调用静态方法*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private static void showDesc()</span></span><br><span class="line"></span><br><span class="line">    Method showDesc = clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">    showDesc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//如果调用的运行时类中的方法没返回值，则此invoke()返回null</span></span><br><span class="line">    <span class="comment">//Object returnVal = showDesc.invoke(null);</span></span><br><span class="line">    Object returnVal = showDesc.invoke(Person.class);</span><br><span class="line">    System.out.println(returnVal);<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用指定的构造器：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Person(String name)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取指定的构造器</span></span><br><span class="line"><span class="comment">    getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.调用此构造器创建运行时类的对象</span></span><br><span class="line">    Person per = (Person) constructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    System.out.println(per);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用四动态代理"   >          <a href="#反射应用四动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用四动态代理"></a> 反射应用四：动态代理</h2>              <h3 id="代理模式的原理"   >          <a href="#代理模式的原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#代理模式的原理"></a> 代理模式的原理</h3>      <p>使用一个代理将对象包装起来,，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p>        <h3 id="静态代理"   >          <a href="#静态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h3>      <p>举例：实现Runnable接口的方法创建多线程。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyThread implements Runnable&#123;&#125; <span class="comment">//相当于被代理类</span></span><br><span class="line">Class Thread implements Runnable&#123;&#125; <span class="comment">//相当于代理类</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(t);</span><br><span class="line">thread.start();<span class="comment">//启动线程；调用线程的run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="静态代理的缺点"   >          <a href="#静态代理的缺点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态代理的缺点"></a> 静态代理的缺点</h3>      <ul><li>代理类和目标对象的类都是在<strong>编译期间</strong>确定下来，不利于程序的扩展；</li><li><strong>每一个代理类只能为一个接口服务</strong>，这样一来程序开发中必然产生过多的代理。</li></ul>        <h3 id="动态代理的特点"   >          <a href="#动态代理的特点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态代理的特点"></a> 动态代理的特点</h3>      <p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在<strong>程序运行时</strong>根据需要<strong>动态</strong>创建目标类的代理对象。</p>        <h3 id="动态代理的实现"   >          <a href="#动态代理的实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态代理的实现"></a> 动态代理的实现</h3>      <p>需要解决的两个主要问题：</p><ul><li>问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。<br />（通过<code>Proxy.newProxyInstance()</code>实现）</li><li>问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。<br />（通过<code>InvocationHandler</code>接口的实现类及其方法<code>invoke()</code>）</li></ul><p>代码实现：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法一====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法二====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        HumanUtil util = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        util.method1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line">        </span><br><span class="line">        util.method2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);</span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>动态代理其他应用：</p><p>MyBatis中<code>sqlSession</code>返回的每个<code>mapper</code>对象都是一个代理类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】IO流</title>
      <link href="2021/03/18/%E3%80%90Java%E3%80%91IO%E6%B5%81/"/>
      <url>2021/03/18/%E3%80%90Java%E3%80%91IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[        <h2 id="file类"   >          <a href="#file类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#file类"></a> File类</h2>      <p><code>java.io.File</code>类：文件和文件目录路径的抽象表示形式，与平台无关</p><ul><li>File 能新建、删除、重命名文件和目录，但 File不能访问文件内容本身。 如果需要访问文件内容本身，则需要使用输入/输出流。</li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li><li>File对象可以作为参数传递给流的构造器，指明读取或写入的&quot;终点&quot;。</li></ul><p>Java路径：</p><ul><li>相对路径：相较于某个路径下，指明的路径。在某个Module下代码内的相对路径默认相对于当前Module</li><li>绝对路径：包含盘符在内的文件或文件目录的路径</li></ul><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如何创建File类的实例</span></span><br><span class="line"><span class="comment">        File(String filePath)</span></span><br><span class="line"><span class="comment">        File(String parentPath,String childPath)</span></span><br><span class="line"><span class="comment">        File(File parentFile,String childPath)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">    相对路径：相较于某个路径下，指明的路径。</span></span><br><span class="line"><span class="comment">    绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.路径分隔符</span></span><br><span class="line"><span class="comment">     windows:\\</span></span><br><span class="line"><span class="comment">     unix:/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相对于当前module</span></span><br><span class="line">        File file2 =  <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior\\day08\\he.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2：</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1&quot;</span>,<span class="string">&quot;JavaSenior&quot;</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3：</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3,<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">    public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">    public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">    public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">    public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">    public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如下的两个方法适用于文件目录：</span></span><br><span class="line"><span class="comment">    public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">    public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsolutePath());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(file2.lastModified());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">     比如：file1.renameTo(file2)为例：</span></span><br><span class="line"><span class="comment">        要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file2.renameTo(file1);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">    public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">    public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">    public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">    public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">    public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io&quot;</span>);</span><br><span class="line">        file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());</span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建硬盘中对应的文件或文件目录</span></span><br><span class="line"><span class="comment">    public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">    public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">    public boolean mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    删除磁盘中的文件或文件目录</span></span><br><span class="line"><span class="comment">    public boolean delete()：删除文件或者文件夹</span></span><br><span class="line"><span class="comment">    删除注意事项：Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            <span class="comment">//文件的创建</span></span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//文件存在</span></span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file1.mkdir();</span><br><span class="line">        <span class="keyword">if</span>(mkdir)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir1 = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span>(mkdir1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要想删除成功，io4文件目录下不能有子目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1\\io4&quot;</span>);</span><br><span class="line">        file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="io流原理及流的分类"   >          <a href="#io流原理及流的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流原理及流的分类"></a> IO流原理及流的分类</h2>              <h3 id="io流原理"   >          <a href="#io流原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流原理"></a> IO流原理</h3>      <ul><li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li><li>Java程序中，对于数据的输入/输出操作以“流(stream)” 的方式进行。</li><li>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</li></ul>        <h3 id="流的分类"   >          <a href="#流的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#流的分类"></a> 流的分类</h3>      <ul><li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132238499.png" alt="image-20210624132238499" /></p><p>IO流类型示意图</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132519552.png" alt="image-20210624132519552" /></p>        <h3 id="节点流和处理流"   >          <a href="#节点流和处理流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#节点流和处理流"></a> 节点流和处理流</h3>      <p><strong>节点流</strong>：直接从数据源或目的地读写数据。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132703272.png" alt="image-20210624132703272" /></p><p><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132713974.png" alt="image-20210624132713974" /></p>        <h3 id="io流体系"   >          <a href="#io流体系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流体系"></a> IO流体系</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132602926.png" alt="image-20210624132602926" /></p><div class="table-container"><table><thead><tr><th>抽象基类</th><th>节点流（或文件流）</th><th>缓冲流（处理流的一种）</th></tr></thead><tbody><tr><td><strong>InputStream</strong></td><td><strong>FileInputStream</strong> read(byte[] buffer)</td><td><strong>BufferedInputStream</strong> read(byte[] buffer)</td></tr><tr><td><strong>OutputStream</strong></td><td><strong>FileOutputStream</strong> write(byte[] buffer,0,len)</td><td><strong>BufferedOutputStream</strong> write(byte[] buffer,0,len) / flush()</td></tr><tr><td><strong>Reader</strong></td><td><strong>FileReader</strong> read(char[] cbuf)</td><td><strong>BufferedReader</strong> read(char[] cbuf) / readLine()</td></tr><tr><td><strong>Writer</strong></td><td><strong>FileWriter</strong> write(char[] cbuf,0,len)</td><td><strong>BufferedWriter</strong> write(char[] cbuf,0,len) / flush()</td></tr></tbody></table></div><ul><li>对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</li><li>对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理</li></ul>        <h2 id="filereader和filewriter"   >          <a href="#filereader和filewriter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filereader和filewriter"></a> FileReader和FileWriter</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;day09\\hello.txt&quot;</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将day09下的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明点：</span></span><br><span class="line"><span class="comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前Module</span></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对于方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fr != null)</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//或</span></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对read()操作升级：使用read的重载方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">    1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fw != null)</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;finally&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    if(fr != null)</span></span><br><span class="line"><span class="comment">//                        fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="fileinputstream和fileoutputstream"   >          <a href="#fileinputstream和fileoutputstream" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#fileinputstream和fileoutputstream"></a> FileInputStream和FileOutputStream</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现对图片的复制操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="缓冲流"   >          <a href="#缓冲流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缓冲流"></a> 缓冲流</h2>      <p>处理流，就是“套接”在已有的流的基础上。缓冲流能提高读写速度，原因：内部提供了一个<strong>缓冲区</strong>，读写时先将内存中的数据存放在缓冲区内，当缓冲区内容满了再统一对硬盘进行读写，节省了大量向硬盘读写所耗费的时间。</p><ul><li><code>BufferedInputStream</code></li><li><code>BufferedOutputStream</code></li><li><code>BufferedReader</code></li><li><code>BufferedWriter</code></li></ul><p>**创建缓冲流时，需要将对应的节点流对象作为构造器参数传入。**关闭外部流（缓冲流）后，其内部流（节点流）会自动关闭，不需要再<code>close</code>。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624140207933.png" alt="image-20210624140207933" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情3.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//                bos.flush();//刷新缓冲区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath,destPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618 - 176</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="转换流"   >          <a href="#转换流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#转换流"></a> 转换流</h2>      <p>转换流：属于<strong>字符流</strong>。因为其后缀为<code>Reader</code>和<code>Writer</code>。</p><ul><li><code>InputStreamReader</code>：将一个字节输入流转换为字符输入流</li><li><code>OutputStreamWriter</code>：将一个字符输出流转换为字节输出流</li></ul><p>作用：提供字节流与字符流之间的转换。可指定使用不同的字符集编码方式读取同一段文本数据。</p><ul><li>解码：字节、字节数组 —&gt; 字符数组、字符串</li><li>编码：字符数组、字符串 —&gt; 字节、字节数组</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624140145352.png" alt="image-20210624140145352" /></p>        <h3 id="字符集"   >          <a href="#字符集" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符集"></a> 字符集</h3>      <ul><li>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</li><li>ISO8859-1：拉丁码表（欧洲码表）。用一个字节的8位表示。</li><li>GB2312：中国的中文编码表。多两个字节编码所有字符</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</li><li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</li><li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment">    综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.造文件、造流</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读写过程</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="序列化"   >          <a href="#序列化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#序列化"></a> 序列化</h2>      <p><strong>序列化机制：</strong></p><ul><li>对象序列化机制允许把<strong>内存</strong>中的Java对象转换成<strong>平台无关的二进制流</strong>，从而允许把这种二进制流持久地保存在<strong>磁盘</strong>上，或通过<strong>网络</strong>将这种二进制流传输到另一个网络节点。</li><li>当其它程序获取了这种二进制流，就可以恢复成原来的Java对象（反序列化）</li></ul><p>Java的序列化机制是通过在运行时判断类的<code>serialVersionUID</code>来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的<code>serialVersionUID</code>与本地相应实体类的<code>serialVersionUID</code>进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(<code>InvalidCastException</code>)</p><p>若不提供<code>serialVersionUID</code>，则JVM会为该类生成一个默认的<code>serialVersionUID</code>，这样的缺陷在于，若后续该类进行了改动，重新编译出的class文件将会拥有另一个默认的<code>serialVersionUID</code>，二者不会相同，此时将不再能进行反序列化。</p><p>谈谈你对<code>java.io.Serializable</code>接口的理解，我们知道它用于序列化， 是<strong>空方法接口</strong>，还有其它认识吗？</p><p><code>Serializable</code>接口是给JVM参考的，JVM看到该接口后，会为该类自动生成一个<strong>序列化版本号</strong>：<code>serialVersionUID</code>，其用于唯一标识该对象在数据源中的位置。</p><p>实现了<code>Serializable</code>接口的对象，可将它们转换成一系列字节，并可在以后完全恢复回原来的样子。<strong>这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异</strong>。换句话说，可以先在Windows机器上创建一个对象，对其序列化，然后通过网络发给一台Unix机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。由于大部分作为参数的类如<code>String</code>、<code>Integer</code>等都实现了<code>java.io.Serializable</code>的接口，也可以利用多态的性质，作为参数使接口更灵活。</p>        <h2 id="对象流"   >          <a href="#对象流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象流"></a> 对象流</h2>      <p><code>ObjectInputStream</code>和<code>OjbectOutputSteam</code></p><p>作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p><p>要想一个java对象是<strong>可序列化</strong>的，需要满足的要求：</p><ul><li>需要实现接口：<code>Serializable</code></li><li>当前类提供一个全局常量：<code>serialVersionUID</code>，其用于唯一标识该对象在数据源中的位置</li><li>除了当前类需要实现<code>Serializable</code>接口之外，还必须保证其内部所有属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）</li></ul><p>补充：<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>不能序列化<code>static</code>和<code>transient</code>（表示游离，不参与序列化）修饰的成员变量。可以一次序列化多个对象（用集合存放多个对象一起传给<code>ObjectOutputStream</code>）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">    使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectOutputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">            oos.flush();<span class="comment">//每write一个对象就要刷新一次</span></span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;王铭&quot;</span>,<span class="number">23</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;张学良&quot;</span>,<span class="number">23</span>,<span class="number">1001</span>,<span class="keyword">new</span> Account(<span class="number">5000</span>)));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//3.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    反序列化：将磁盘文件中的对象还原为内存中的一个java对象</span></span><br><span class="line"><span class="comment">    使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectInputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line">            String str = (String) obj;</span><br><span class="line"></span><br><span class="line">            Person p = (Person) ois.readObject();</span><br><span class="line">            Person p1 = (Person) ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">            System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="randomaccessfile"   >          <a href="#randomaccessfile" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#randomaccessfile"></a> RandomAccessFile</h2>      <ul><li><code>RandomAccessFile</code>直接继承于<code>java.lang.Object</code>类，实现了<code>DataInput</code>和<code>DataOutput</code>接口</li><li><code>RandomAccessFile</code>既可以作为一个输入流，又可以作为一个输出流</li></ul><p>如果<code>RandomAccessFile</code>作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）可以通过相关的操作，实现<code>RandomAccessFile</code>“插入”数据的效果。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情1.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">if</span>(raf1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf1.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(raf2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());<span class="comment">//</span></span><br><span class="line">        raf1.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用RandomAccessFile实现数据的插入效果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        <span class="comment">//保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            builder.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调回指针，写入“xyz”</span></span><br><span class="line">        raf1.seek(<span class="number">3</span>);</span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line">        raf1.write(builder.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="其他流"   >          <a href="#其他流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他流"></a> 其他流</h2>      <ul><li>标准的输入、输出流：<span class="exturl"><a class="exturl__link"   href="http://System.in" >System.in</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、System.out</li><li>打印流：PrintStream、PrintWriter</li><li>数据流：DataInputStream、DataOutputStream。作用：用于读取或写出基本数据类型的变量或字符串</li></ul>        <h3 id="打印流"   >          <a href="#打印流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#打印流"></a> 打印流</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\IO\\text.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &#x27;\n&#x27; 时都会刷新输出缓冲区)</span></span><br><span class="line">        ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">            System.setOut(ps);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">            System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">                System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数据流"   >          <a href="#数据流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据流"></a> 数据流</h3>      <p>将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。 注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</p><p>将内存中的字符串、基本数据类型的变量写出到文件中：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    dos.writeUTF(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    dos.flush();<span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">    dos.writeInt(<span class="number">23</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    String name = dis.readUTF();</span><br><span class="line">    <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">    <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">    System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】集合</title>
      <link href="2021/03/16/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/"/>
      <url>2021/03/16/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[        <h2 id="集合框架的概述"   >          <a href="#集合框架的概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合框架的概述"></a> 集合框架的概述</h2>      <p>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。</p>        <h3 id="java数组"   >          <a href="#java数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java数组"></a> Java数组</h3>      <p>数组在存储多个数据方面的特点：</p><ul><li>一旦初始化以后，其长度就确定了。</li><li>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。比如：<code>String[] arr;int[] arr1;Object[] arr2;</code></li></ul><p>数组在存储多个数据方面的缺点：</p><ul><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li></ul><p>数组存储数据的特点：<strong>有序、可重复。对于无序、不可重复的需求，不能满足。</strong></p>        <h3 id="java集合"   >          <a href="#java集合" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java集合"></a> Java集合</h3>      <p>Java集合类可以用于存储数量不等的多个对象 ，还可用于保存具有映射关系的关联数组。其可分为 <code>Collection</code>和<code>Map</code>两种体系。</p><ul><li><code>Collection</code>接口：<strong>单列</strong>集合，用来存储一个一个的对象<ul><li><code>List</code>接口：存储<strong>有序的、可重复的</strong>数据。包含<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code></li><li><code>Set</code>接口：存储<strong>无序的、不可重复的</strong>数据。包含<code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code></li></ul></li><li><code>Map</code>接口：<strong>双列</strong>集合，用来存储一对(key-value)一对的数据。包含<code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>Properties</code></li></ul><p><strong>Collection接口继承树</strong></p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617161218475.png" alt="image-20210617161218475" /></p><p><strong>Map接口继承树</strong></p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617161305507.png" alt="image-20210617161305507" /></p><span id="more"></span>        <h2 id="collection接口"   >          <a href="#collection接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#collection接口"></a> Collection接口</h2>      <p>向<code>Collection</code>接口的实现类的对象中添加数据obj时，要求obj所在类要重写<code>equals()</code>方法。</p><p>Collection接口常用方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e):将元素e添加到集合coll中</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size():获取添加的元素的个数</span></span><br><span class="line">        System.out.println(coll.size());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll1):将coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.size());<span class="comment">//6</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear():清空集合元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty():判断当前集合是否为空</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>向<code>Collection</code>接口的实现类的对象中添加数据obj时，要求obj所在类要重写<code>equals()</code>方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()。</span></span><br><span class="line">        <span class="keyword">boolean</span> contains = coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">4567</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj):从当前集合中移除obj元素。</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">123</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line"><span class="comment">//        Collection coll1 = Arrays.asList(123,456,789);</span></span><br><span class="line"><span class="comment">//        coll.retainAll(coll1);</span></span><br><span class="line"><span class="comment">//        System.out.println(coll);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll1.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll1.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.equals(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 ---&gt;数组：toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        List arr1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        List arr2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.iterator():返回Iterator接口的实例，用于遍历集合元素。放在IteratorTest.java中测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>集合元素的遍历操作，使用迭代器<code>Iterator</code>接口。获取方法：<code>collection.iterator();</code></p><ul><li>内部的方法：<code>hasNext()</code>和 <code>next()</code></li><li>集合对象每次调用<code>iterator()</code>方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</li><li>内部定义了<code>remove()</code>，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用<code>remove()</code>。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hasNext():判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：</span></span><br><span class="line"><span class="comment">//        Iterator iterator = coll.iterator();</span></span><br><span class="line"><span class="comment">//        while((iterator.next()) != null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class="line">        <span class="keyword">while</span> (coll.iterator().hasNext())&#123;</span><br><span class="line">            System.out.println(coll.iterator().next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试Iterator中的remove()</span></span><br><span class="line">    <span class="comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span></span><br><span class="line">    <span class="comment">// 再调用remove都会报IllegalStateException。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用<code>next()</code>方法时，先将<code>iterator</code>的指针下移，再将下移后位置上的元素返回。</p><p>增强for循环：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line"><span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="list接口"   >          <a href="#list接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#list接口"></a> List接口</h2>      <p>List接口：存储有序的、可重复的数据。是一种“动态”数组。能够替换原有的数组。其实现类有三种：</p><ul><li><strong>ArrayList</strong>：作为<code>List</code>接口的<strong>主要实现类</strong>；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>ArrayList</code>），效率高</strong>；底层使用<code>Object[] elementData</code><strong>数组</strong>存储；数组长度动态扩容时每次扩容1.5倍。</li><li><strong>LinkedList</strong>：对于<strong>频繁的插入、删除操作</strong>，使用此类效率比<code>ArrayList</code>高；底层使用<strong>双向链表</strong>存储。</li><li><strong>Vector</strong>：作为<code>List</code>接口的<strong>古老</strong>实现类；<strong>线程安全的，效率低</strong>；底层使用<code>Object[] elementData</code><strong>数组</strong>存储；数组长度动态扩容时每次扩容2倍。不常使用</li></ul><p>List接口中的常用方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span> <span class="comment">//在index位置插入ele元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection eles)</span> <span class="comment">//从index位置开始将eles中的所有元素添加进来</span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//获取指定index位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span> <span class="comment">//返回obj在集合中首次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span> <span class="comment">//返回obj在当前集合中末次出现的位置</span></span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//移除指定index位置的元素，并返回此元素</span></span></span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span> <span class="comment">//设置指定index位置的元素为ele</span></span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> <span class="comment">//返回从fromIndex到toIndex位置的子集合</span></span></span><br></pre></td></tr></table></div></figure><p>总结：</p><ul><li>增：add(Object obj)</li><li>删：remove(int index) / remove(Object obj)</li><li>改：set(int index, Object ele)</li><li>查：get(int index)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历：<ul><li>Iterator迭代器方式</li><li>增强for循环</li><li>普通的循环</li></ul></li></ul><p>注意：remove方法有两个重载，一个是删除指定索引位置，一个是删除指定对象</p>        <h3 id="arraylist"   >          <a href="#arraylist" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#arraylist"></a> ArrayList</h3>      <p><code>ArrayList</code>的源码分析</p><p>jdk 7情况下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();<span class="comment">//底层创建了长度是10的Object[]数组elementData</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//elementData[0] = new Integer(123);</span></span><br><span class="line">...</span><br><span class="line">list.add(<span class="number">11</span>);<span class="comment">//如果此次的添加导致底层elementData数组容量不够，则扩容1.5倍。</span></span><br></pre></td></tr></table></div></figure><p>默认情况下，扩容为原来的容量的1.5倍，<strong>同时需要将原有数组中的数据复制到新的数组中</strong>。<strong>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity);</strong></p><p>jdk 8中<code>ArrayList</code>的变化：</p> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();<span class="comment">//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span></span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><p>后续的添加和扩容操作与jdk 7无异。</p><p>小结：jdk 7中的ArrayList的对象的创建类似于单例的<strong>饿汉式</strong>，而jdk 8中的<code>ArrayList</code>的对象的创建类似于单例的<strong>懒汉式</strong>，延迟了数组的创建，节省内存。</p>        <h3 id="linkedlist"   >          <a href="#linkedlist" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedlist"></a> LinkedList</h3>      <p><code>LinkedList</code>的源码分析：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList(); <span class="comment">//内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//将123封装到Node中，创建了Node对象。</span></span><br></pre></td></tr></table></div></figure><p>其中，Node定义为：体现了LinkedList的双向链表的说法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="vector"   >          <a href="#vector" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#vector"></a> Vector</h3>      <p><code>Vector</code>的源码分析：jdk7和jdk8中通过<code>Vector()</code>构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。</p><p><strong>问：ArrayList、LinkedList、Vector三者的异同？</strong></p><ul><li>同：三个类都是实现了<code>List</code>接口，存储数据的特点相同：存储<strong>有序的、可重复的</strong>数据</li><li>异：<ul><li><code>ArrayList</code>和<code>Vector</code>区别：<code>ArrayList</code>效率高，线程不安全，<code>Vector</code>效率低，线程安全；数组长度动态扩容倍数不同；</li><li><code>ArrayList</code>和<code>LinkedList</code>的区别：<code>ArrayList</code>使用<strong>数组</strong>结构存储，<code>LinkedList</code>使用<strong>双向链表</strong>结构存储；<code>LinkedList</code>适用于频繁插入删除数据，<code>Array</code>适用于频繁查询某个位置数据；</li></ul></li></ul>        <h2 id="set接口"   >          <a href="#set接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set接口"></a> Set接口</h2>      <p>Set接口：存储无序的、不可重复的数据。<code>Set</code>接口中没有额外定义新的方法，使用的都是<code>Collection</code>中声明过的方法。其实现类有三个：</p><ul><li><strong>HashSet</strong>：作为<code>Set</code>接口的<strong>主要实现类</strong>；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>HashSet</code></strong>；可以存储<code>null</code>值；遍历时无法按照添加时的顺序遍历（<code>HashSet</code>底层是通过<code>HashMap</code>实现的，HashSet中的值就是<code>HashMap</code>中的key）<ul><li><strong>LinkedHashSet</strong>：作为<code>HashSet</code>的子类；遍历其内部数据时，<strong>可以按照添加的顺序遍历</strong>。对于频繁的<strong>遍历</strong>操作，<code>LinkedHashSet</code>效率高于<code>HashSet</code>。</li></ul></li><li><strong>TreeSet</strong>：可以按照添加对象的指定属性，进行排序。</li></ul><p>使用要求：向<code>Set</code>(主要指：<code>HashSet</code>、<code>LinkedHashSet</code>)中添加的数据，<strong>其所在的类一定要重写hashCode()和equals()方法</strong>。并且重写的<code>hashCode()</code>和<code>equals()</code>尽可能保持一致性：相等的对象必须具有相等的hashCode 值。重写两个方法的小技巧：对象中用作 <code>equals()</code>方法比较的 <code>Field</code>，都应该用来计算 hashCode 值。</p>        <h3 id="hashset"   >          <a href="#hashset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashset"></a> HashSet</h3>      <p><code>HashSet</code>底层：数组+链表的结构。</p><ul><li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</li><li>不可重复性：保证添加的元素按照<code>equals()</code>判断时，不能返回true。即：相同的元素只能添加一个。</li></ul><p>添加元素的过程：</p><ul><li>向<code>HashSet</code>中添加元素a，首先调用元素a所在类的<code>hashCode</code>()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在<code>HashSet</code>底层数组中的存放位置（即为：索引位置）；</li><li>判断数组此位置上是否已经有元素：如果此位置上没有其他元素，则元素a添加成功。（情况1）</li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：<ul><li>如果hash值不相同，则元素a添加成功。（情况2）</li><li>如果hash值相同，进而需要调用元素a所在类的<code>equals()</code>方法：<code>equals()</code>返回true，元素a添加失败；<code>equals()</code>返回false，则元素a添加成功。（情况3）</li></ul></li></ul><p>对于添加成功的情况2和情况3而言：元素a与已经存在指定索引位置上数据以<strong>链表</strong>的方式存储。jdk 7：元素a放到数组中，指向原来的元素。jdk 8：原来的元素在数组中，指向元素a</p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617201737187.png" alt="image-20210617201737187" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="linkedhashset"   >          <a href="#linkedhashset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedhashset"></a> LinkedHashSet</h3>      <p><code>LinkedHashSet</code>作为<code>HashSet</code>的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据（类似于双向链表结构）。优点：对于频繁的遍历操作，<code>LinkedHashSet</code>效率高于<code>HashSet</code>。<br /><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617202602059.png" alt="image-20210617202602059" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="treeset"   >          <a href="#treeset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#treeset"></a> TreeSet</h3>      <p><code>TreeSet</code>是 <code>SortedSet</code>接口的实现类，<code>TreeSet</code>可以确保集合元素处于排序状态。<code>TreeSet</code>底层使用<strong>红黑树</strong>结构存储数据。特点：有序，查询速度比List快。</p><p>向<code>TreeSet</code>中添加的数据，要求是<strong>相同类</strong>的对象。两种排序方式：自然排序（实现<code>Comparable</code>接口）和定制排序（<code>Comparator</code>）。自然排序中，比较两个对象是否相同的标准为：<code>compareTo()</code>返回0，不再使用<code>equals()</code>。定制排序中，比较两个对象是否相同的标准为：<code>compare()</code>返回0，不再使用<code>equals()</code>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">        <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User u1 = (User)o1;</span><br><span class="line">                User u2 = (User)o2;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数传入Comparator类的对象后将不再使用原先的compareTo方法判断</span></span><br><span class="line">    TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>List和Set插入数据时判断是否重复的方法：</strong></p><ul><li>List：遍历每个元素，调用其<code>equals()</code>方法判断是否相等。效率较低。</li><li>Set：计算插入数据的哈希值，判断是否已经存在该哈希值，不存在说明没有重复；若存在则调用<code>equals()</code>方法判断是否相等。效率较高。</li></ul>        <h3 id="set的使用"   >          <a href="#set的使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set的使用"></a> Set的使用</h3>      <p>List实现类对象和Set实现类对象可以相互转换，用于过滤List中重复的元素</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：在List内去除重复数字值，要求尽量简单</span></span><br><span class="line"><span class="comment">//方法：将List对象赋给Set对象，其会过滤掉重复的元素，再将其转回List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">duplicateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    List list2 = duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>考察Set接口的底层原理：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="map接口"   >          <a href="#map接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map接口"></a> Map接口</h2>      <p><code>Map</code>：双列数据，存储key-value对的数据</p><ul><li><code>HashMap</code>：作为Map的主要实现类；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>HashMap</code>），效率高</strong>；可以存储null的key和value；不可以按照添加的顺序实现遍历（<code>HashSet</code>底层是通过<code>HashMap</code>实现的，<code>HashSet</code>中的值就是<code>HashMap</code>中的key）<ul><li><code>LinkedHashMap</code>：继承自<code>HashMap</code>，保证在遍历map元素时，<strong>可以按照添加的顺序实现遍历</strong>。原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行效率高于<code>HashMap</code></li></ul></li><li><code>TreeMap</code>：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序。底层使用<strong>红黑树</strong></li><li><code>Hashtable</code>：作为古老的实现类；<strong>线程安全的，效率低</strong>；不能存储null的key和value；其他实现细节和<code>HashMap</code>一致<ul><li><code>Properties</code>：常用来处理配置文件。key和value都是<code>String</code>类型</li></ul></li></ul><p><code>HashMap</code>的底层：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）</p><p>问：</p><ol><li><code>HashMap</code>的底层实现原理？</li><li><code>HashMap</code>和 <code>Hashtable</code>的异同？<ul><li>HashMap是线程不安全的，效率高，可以存储null的key和value</li><li>Hashtable是线程安全的，效率低，不可以存储null的key和value</li></ul></li><li><code>CurrentHashMap</code>与 <code>Hashtable</code>的异同？</li></ol>        <h3 id="map结构的理解"   >          <a href="#map结构的理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map结构的理解"></a> Map结构的理解：</h3>      <p><code>Map</code>中的key：<strong>无序的、不可重复的</strong>，使用<code>Set</code>存储所有的key。key所在的类要重写<code>equals()</code>和<code>hashCode()</code>方法（以HashMap为例）</p><p><code>Map</code>中的value：<strong>无序的、可重复的</strong>，使用<code>Collection</code>存储所有的value。value所在的类要重写<code>equals()</code>方法。</p><p>一个键值对：key-value构成了一个<code>Entry</code>对象。<code>Map</code>中的<code>Entry</code>：<strong>无序的、不可重复的</strong>，使用<code>Set</code>存储所有的<code>Entry</code></p>        <h3 id="hashmap的底层实现原理"   >          <a href="#hashmap的底层实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashmap的底层实现原理"></a> HashMap的底层实现原理</h3>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=552" >https://www.bilibili.com/video/BV1Kb411W75N?p=552</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>以jdk7为例说明：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></div></figure><p>在实例化以后，底层创建了长度是16的一维数组<code>Entry[] table</code>。经过执行过多次put()方法…</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(key1,value1);</span><br></pre></td></tr></table></div></figure><p>首先，调用key1所在类的<code>hashCode()</code>计算key1哈希值，此哈希值经过某种算法计算以后（一些位运算操作），得到在<code>Entry</code>数组中的存放位置。如果此位置上的数据为空，此时的key1-value1添加成功。 ---- 情况1</p><p>如果此位置上的数据不为空(意味着此位置上存在一个或多个数据(以<strong>链表</strong>形式存在))，比较key1和已经存在的一个或多个数据的哈希值：</p><ul><li>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。---- 情况2</li><li>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的<code>equals(key2)</code>方法，比较：<ul><li>如果<code>equals()</code>返回false：此时key1-value1添加成功。----情况3</li><li>如果<code>equals()</code>返回true：使用value1替换value2。</li></ul></li></ul><p>补充：关于情况2和情况3：此时key1-value1和原来的数据以<strong>链表</strong>的方式存储。</p><p>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210625091437538.png" alt="image-20210625091437538" /></p><p><strong>jdk8相较于jdk7在底层实现方面的不同：</strong></p><ol><li><code>new HashMap();</code> 底层没有立刻创建一个长度为16的数组</li><li>jdk 8底层的数组是：<code>Node[]</code>，而非<code>Entry[]</code></li><li>首次调用<code>put()</code>方法时，底层创建长度为16的数组</li><li>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+<strong>红黑树</strong>。<ul><li>形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储（若数组长度 &lt; 64，则数组扩容，不改用红黑树）。</li></ul></li></ol><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210625091347684.png" alt="image-20210625091347684" /></p><p>HashMap内重要常量：</p><ul><li><code>DEFAULT_INITIAL_CAPACITY</code>: <code>HashMap</code>的默认容量，16</li><li><code>DEFAULT_LOAD_FACTOR</code>：<code>HashMap</code>的默认加载因子：0.75</li><li><code>threshold</code>：扩容的临界值，= 容量*填充因子：16 * 0.75 =&gt; 12，大于该值时扩容</li><li><code>TREEIFY_THRESHOLD</code>：<code>Bucket</code>中链表长度大于该默认值，转化为红黑树:8</li><li><code>MIN_TREEIFY_CAPACITY</code>：桶中的<code>Node</code>被树化时最小的hash表容量:64</li></ul><p>问：负载因子值的大小，对HashMap有什么影响？</p><ul><li>负载因子的大小决定了HashMap的数据密度。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长, 造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul>        <h3 id="linkedhashmap的底层实现原理"   >          <a href="#linkedhashmap的底层实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedhashmap的底层实现原理"></a> LinkedHashMap的底层实现原理</h3>      <p>继承自<code>HashMap</code>。修改了<code>Entry</code>的内容，增加了两个Entry类型对象代表链表结构中当前对象指向的前后对象。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;<span class="comment">//能够记录添加的元素的先后顺序</span></span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="hashmap常用方法"   >          <a href="#hashmap常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashmap常用方法"></a> HashMap常用方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">            Iterator iterator = set.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(Object obj : values)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式一：entrySet()</span></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Set keySet = map.keySet();</span><br><span class="line">        Iterator iterator2 = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator2.hasNext())&#123;</span><br><span class="line">            Object key = iterator2.next();</span><br><span class="line">            Object value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=====&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">// Object get(Object key)</span></span><br><span class="line">        System.out.println(map.get(<span class="number">45</span>));</span><br><span class="line">        <span class="comment">//containsKey(Object key)</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = map.containsKey(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">        isExist = map.containsValue(<span class="number">123</span>);</span><br><span class="line">        System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">        map.clear();</span><br><span class="line"></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">87</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">&quot;CC&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;DD&quot;</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        Object value = map.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map = null操作不同</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="comment">//        map = new Hashtable();</span></span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="treemap"   >          <a href="#treemap" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#treemap"></a> TreeMap</h3>      <p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象。因为要<strong>按照key进行排序</strong>：自然排序 、定制排序。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的类型不匹配！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="collections工具类"   >          <a href="#collections工具类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#collections工具类"></a> Collections工具类</h2>      <p>Collections 是一个操作 <code>Set</code>、<code>List</code> 和 <code>Map</code> 等集合的工具类（操作数组的工具类：Arrays）</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作， 还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。</p><p>排序操作：（均为static方法）</p><ul><li><code>reverse(List)</code>：反转<code>List</code>中元素的顺序</li><li><code>shuffle(List)</code>：对<code>List</code>集合元素进行随机排序</li><li><code>sort(List)</code>：根据元素的自然顺序对指定<code>List</code>集合元素按升序排序</li><li><code>sort(List，Comparator)</code>：根据指定的<code>Comparator</code>产生的顺序对<code>List</code>集合元素进行排序</li><li><code>swap(List，int， int)</code>：将指定<code>List</code>集合中的 i 处元素和 j 处元素进行交换</li></ul><p>查找、替换</p><ul><li><code>Object max(Collection)</code>：根据元素的自然顺序，返回给定集合中的最大元素</li><li><code>Object max(Collection，Comparator)</code>：根据 <code>Comparator</code>指定的顺序，返回给定集合中的最大元素</li><li><code>Object min(Collection)</code>：根据元素的自然顺序，返回给定集合中的最小元素</li><li><code>Object min(Collection，Comparator)</code>：根据 <code>Comparator</code>指定的顺序，返回给定集合中的最小元素</li><li><code>int frequency(Collection，Object)</code>：返回指定集合中指定元素的出现次数</li><li><code>void copy(List dest,List src)</code>：将<code>src</code>中的内容复制到<code>dest</code>中</li><li><code>boolean replaceAll(List list，Object oldVal，Object newVal)</code>：使用新值替换 <code>List</code>对象的所有旧值</li></ul><p><strong>同步控制</strong>：<code>Collections</code>类中提供了多个 <code>synchronizedXxx()</code> 方法，该方法可使将指定集合包装成<strong>线程同步</strong>的集合，从而可以解决多线程并发访问集合时的线程安全问题。使用 <code>synchronizedXxx()</code> 方法，将返回一个新的集合类对象，其各个方法都添加了同步代码块：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.hashCode();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.get(index);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;list.add(index, element);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.remove(index);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();</span></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line"></span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span></span><br><span class="line"><span class="comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span></span><br><span class="line"><span class="comment">        多线程并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"><span class="comment">//        Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);</span></span><br><span class="line"><span class="comment">//        Collections.swap(list,1,2);</span></span><br><span class="line">        <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(frequency);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>问：Collection 和 Collections的区别？</p><ul><li><code>Collection</code>：集合中的一种接口，其实现类有<code>ArrayList</code>，<code>LinkedArrayList</code>等。</li><li><code>Collections</code>：集合工具类，用于对集合进行排序、查找等操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】String</title>
      <link href="2021/03/16/%E3%80%90Java%E3%80%91String/"/>
      <url>2021/03/16/%E3%80%90Java%E3%80%91String/</url>
      
        <content type="html"><![CDATA[        <h2 id="string的特性"   >          <a href="#string的特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string的特性"></a> String的特性</h2>      <p><code>String</code>类：代表字符串。Java 程序中的所有字符串<strong>字面值</strong>（如&quot;abc&quot;）都作为此类的实例实现。</p><ul><li><code>String</code>是一个<strong>final</strong>类，代表<strong>不可变</strong>的<strong>字符序列</strong>，其不可被继承。</li><li>字符串是<strong>常量</strong>，用双引号引起来表示。它们的值在创建之后<strong>不能更改</strong>。</li><li><code>String</code>对象的字符内容是存储在一个<strong>字符数组常量</strong><code>final char value[]</code>中的。</li><li><code>String</code>实现了<code>Serializable</code>接口：表示字符串是支持<strong>序列化</strong>的。实现了<code>Comparable</code>接口：表示<code>String</code>可以<strong>比较大小</strong>。</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625102721429.png" alt="image-20210625102721429" /></p><p><code>String</code>特性的体现：</p><ol><li>当对字符串重新赋值时，需要<strong>重新指定内存区域赋值</strong>，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用<code>String</code>的<code>replace()</code>方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>通过<strong>字面量</strong>（如&quot;abc&quot;）的方式（<strong>区别于new</strong>）给一个字符串赋值，此时的字符串值声明在<strong>字符串常量池</strong>中</li><li>字符串常量池中是<strong>不会存储相同内容</strong>的字符串的。</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625102749139.png" alt="image-20210625102749139" /></p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=451" >https://www.bilibili.com/video/BV1Kb411W75N?p=451</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;abc&quot;</span>; <span class="comment">//字面量的定义方式</span></span><br><span class="line">    String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值 false</span></span><br><span class="line">    System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">    System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">    System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">    System.out.println(s5);<span class="comment">//mbc</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="string的实例化方式"   >          <a href="#string的实例化方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string的实例化方式"></a> String的实例化方式</h2>      <ul><li>方式一：通过<strong>字面量</strong>定义的方式  <code>String str1 = &quot;abc&quot;;</code></li><li>方式二：通过<strong>new + 构造器</strong>的方式  <code>String str2 = new String(&quot;abc&quot;);</code></li></ul><p>二者区别：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103416513.png" alt="image-20210625103416513" /></p><p>字符串对象存储方式：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103432649.png" alt="image-20210625103432649" /></p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103730602.png" alt="image-20210625103730602" /></p><p>字符串的特性：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103806711.png" alt="image-20210625103806711" /></p><p>结论：</p><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用<code>intern()</code>方法，返回值就在常量池中。</li></ul><p>测试代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    <span class="comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">    String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name.equals(p2.name));<span class="comment">//true</span></span><br><span class="line">    System.out.println(p1.name == p2.name);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;Jerry&quot;</span>;</span><br><span class="line">    System.out.println(p2.name);<span class="comment">//Tom</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">    String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    String s8 = s6.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">    System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    结论：</span></span><br><span class="line"><span class="comment">    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</span></span><br><span class="line"><span class="comment">    2.只要其中有一个是变量，结果就在堆中。</span></span><br><span class="line"><span class="comment">    3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">    String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s5);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>问：<code>String s = new String(&quot;abc&quot;);</code>方式创建对象，在内存中创建了几个对象？</p><p>答：两个。一个是堆空间中<code>new</code>出来的结构，另一个是<code>char[]</code>对应的常量池中的数据<code>&quot;abc&quot;</code></p>        <h2 id="string使用陷阱"   >          <a href="#string使用陷阱" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string使用陷阱"></a> String使用陷阱</h2>      <ul><li><code>String s1 = &quot;a&quot;;</code>说明：在字符串常量池中创建了一个字面量为<code>&quot;a&quot;</code>的字符串。</li><li><code>s1 = s1 + &quot;b&quot;;</code>说明：实际上原来的<code>&quot;a&quot;</code>字符串对象已经丢弃了，现在在堆空间中产生了一个字符串<code>s1+&quot;b&quot;</code>（也就是<code>&quot;ab&quot;</code>)。如果多次执行这些改变串内容的操作，会<strong>导致大量副本字符串对象存留在内存中，降低效率</strong>。如果这样的操作放到循环中，会极大影响程序的性能。</li><li><code>String s2 = &quot;ab&quot;;</code>说明：直接在字符串常量池中创建一个字面量为<code>&quot;ab&quot;</code>的字符串。</li><li><code>String s3 = &quot;a&quot; + &quot;b&quot;;</code>说明：s3指向字符串常量池中已经创建的<code>&quot;ab&quot;</code>的字符串。</li><li><code>String s4 = s1.intern();</code>说明：堆空间的s1对象在调用<code>intern()</code>之后，会将常量池中已经存在的<code>&quot;ab&quot;</code>字符串赋值给s4。</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625105035027.png" alt="image-20210625105035027" /></p><p>面试题：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625105058682.png" alt="image-20210625105058682" /></p><p>结果：输出 good and best。原因：</p><ul><li><code>ex.str</code>传入<code>change()</code>方法后，在栈中创建了一个局部变量<code>str</code>，其同样指向<code>ex.str</code>所指向的字符串常量&quot;good&quot;，此时<code>str = &quot;test ok&quot;</code>执行后，局部变量str所指向的字符串常量变为&quot;test ok&quot;，但<code>ex.str</code>的内容保持不变（仍然指向字符串常量&quot;good&quot;）；</li><li><code>ex.ch</code>传入<code>change()</code>方法后，在栈中创建了局部变量<code>ch[]</code>，其同样指向<code>ex.ch</code>数组，但修改<code>ch[0]</code>会导致<code>ex.ch</code>的内容同样被修改。</li></ul><p>二者的区别在于：<code>String</code>类对象和<code>char</code>数组对象作为形参传入时都是引用类型，修改形参时原本对象也应该被修改，但<code>String</code>类的不可变性导致修改形参时在常量池中创建了新的字符串内容，因此原本对象内容没有改变，但<code>char</code>数组并无此特性，因此会被修改。</p>        <h2 id="string常用方法"   >          <a href="#string常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string常用方法"></a> String常用方法</h2>      <ul><li><code>int length()</code>：返回字符串的长度： return value.length</li><li><code>char charAt(int index)</code>： 返回某索引处的字符return value[index]</li><li><code>boolean isEmpty()</code>：判断是否是空字符串：return value.length == 0</li><li><code>String toLowerCase()</code>：使用默认语言环境，将 String 中的所有字符转换为小写</li><li><code>String toUpperCase()</code>：使用默认语言环境，将 String 中的所有字符转换为大写</li><li><code>String trim()</code>：返回字符串的副本，忽略前导空白和尾部空白</li><li><code>boolean equals(Object obj)</code>：比较字符串的内容是否相同</li><li><code>boolean equalsIgnoreCase(String anotherString)</code>：与equals方法类似，忽略大小写</li><li><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 等价于用“+”</li><li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小</li><li><code>String substring(int beginIndex)</code>：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。</li><li><code>String substring(int beginIndex, int endIndex)</code> ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li><li><code>boolean endsWith(String suffix)</code>：测试此字符串是否以指定的后缀结束</li><li><code>boolean startsWith(String prefix)</code>：测试此字符串是否以指定的前缀开始</li><li><code>boolean startsWith(String prefix, int toffset)</code>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li><li><code>boolean contains(CharSequence s)</code>：当且仅当此字符串包含指定的 char 值序列时，返回 true</li></ul>        <h3 id="索引"   >          <a href="#索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#索引"></a> 索引</h3>      <ul><li><code>int indexOf(String str)</code>：返回指定子字符串在此字符串中第一次出现处的索引</li><li><code>int indexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li><li><code>int lastIndexOf(String str)</code>：返回指定子字符串在此字符串中最右边出现处的索引</li><li><code>int lastIndexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</li></ul><p>注：<code>indexOf</code>和<code>lastIndexOf</code>方法如果未找到都是返回-1</p>        <h3 id="替换"   >          <a href="#替换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#替换"></a> 替换</h3>      <ul><li><code>String replace(char oldChar, char newChar)</code>：返回一个新的字符串，它是通过用 <code>newChar</code>替换此字符串中出现的所有 <code>oldChar</code>得到的。</li><li><code>String replace(CharSequence target, CharSequence replacement)</code>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li><li><code>String replaceAll(String regex, String replacement)</code>：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li><code>String replaceFirst(String regex, String replacement)</code>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ul>        <h3 id="匹配"   >          <a href="#匹配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#匹配"></a> 匹配</h3>      <ul><li><code>boolean matches(String regex)</code>：告知此字符串是否匹配给定的正则表达式。</li></ul>        <h3 id="切片"   >          <a href="#切片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3>      <ul><li><code>String[] split(String regex)</code>：根据给定正则表达式的匹配拆分此字符串。</li><li><code>String[] split(String regex, int limit)</code>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    替换：</span></span><br><span class="line"><span class="comment">    String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="comment">    String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="comment">    String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="comment">    String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="comment">    匹配:</span></span><br><span class="line"><span class="comment">    boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="comment">    切片：</span></span><br><span class="line"><span class="comment">    String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="comment">    String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;北京教育北京&quot;</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">&#x27;北&#x27;</span>, <span class="string">&#x27;东&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        String str3 = str1.replace(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        String str = <span class="string">&quot;12hello34world5java7891mysql456&quot;</span>;</span><br><span class="line">        <span class="comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span></span><br><span class="line">        String string = str.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;,&quot;</span>).replaceAll(<span class="string">&quot;^,|,$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">        <span class="keyword">boolean</span> matches = str.matches(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        System.out.println(matches);</span><br><span class="line">        String tel = <span class="string">&quot;0571-4534289&quot;</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tel.matches(<span class="string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        str2 = <span class="string">&quot;hello.world.java&quot;</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs2.length; i++) &#123;</span><br><span class="line">            System.out.println(strs2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="comment">    boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="comment">    boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="comment">    boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</span></span><br><span class="line"><span class="comment">    int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="comment">    int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="comment">    int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="comment">    int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="comment">    注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;hellowworld&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = str1.endsWith(<span class="string">&quot;rld&quot;</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = str1.startsWith(<span class="string">&quot;He&quot;</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = str1.startsWith(<span class="string">&quot;ll&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">&quot;wor&quot;</span>;</span><br><span class="line">        System.out.println(str1.contains(str2));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lol&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lo&quot;</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        String str3 = <span class="string">&quot;hellorworld&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>));</span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span></span><br><span class="line">        <span class="comment">//情况一：存在唯一的一个str。情况二：不存在str</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int length()：返回字符串的长度： return value.length</span></span><br><span class="line"><span class="comment">    char charAt(int index)： 返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment">    boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line"><span class="comment">    String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line"><span class="comment">    String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line"><span class="comment">    String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment">    boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line"><span class="comment">    boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment">    String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line"><span class="comment">    int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment">    String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="comment">    String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s4 = s3.concat(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        String s5 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(<span class="string">&quot;abe&quot;</span>);</span><br><span class="line">        System.out.println(s5.compareTo(s6));<span class="comment">//涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line">        String s7 = <span class="string">&quot;北京尚硅谷教育&quot;</span>;</span><br><span class="line">        String s8 = s7.substring(<span class="number">2</span>);</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">        System.out.println(s8);</span><br><span class="line"></span><br><span class="line">        String s9 = s7.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        System.out.println(s1.length());</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">9</span>));</span><br><span class="line"><span class="comment">//        System.out.println(s1.charAt(10));</span></span><br><span class="line"><span class="comment">//        s1 = &quot;&quot;;</span></span><br><span class="line">        System.out.println(s1.isEmpty());</span><br><span class="line"></span><br><span class="line">        String s2 = s1.toLowerCase();</span><br><span class="line">        System.out.println(s1);<span class="comment">//s1不可变的，仍然为原来的字符串</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//改成小写以后的字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;   he  llo   world   &quot;</span>;</span><br><span class="line">        String s4 = s3.trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s3 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s4 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="string与其他数据类型转换"   >          <a href="#string与其他数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与其他数据类型转换"></a> String与其他数据类型转换</h2>              <h3 id="string与基本数据类型转换"   >          <a href="#string与基本数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与基本数据类型转换"></a> String与基本数据类型转换</h3>      <ul><li>字符串 ——&gt; 基本数据类型、包装类<ul><li><code>Integer</code>包装类的<code>public static int parseInt(String s)</code>：可以将由“数字”字符组成的字符串转换为整型。</li><li>类似地，使用<code>java.lang</code>包中的<code>Byte</code>、<code>Short</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。</li></ul></li><li>基本数据类型、包装类 ——&gt; 字符串<ul><li>调用<code>String</code>类的<code>public static String valueOf(int n)</code>可将int型转换为字符串</li><li><code>valueOf(byte b)</code>、<code>valueOf(long l)</code>、<code>valueOf(float f)</code>、<code>valueOf(double d)</code>、<code>valueOf(boolean b)</code>可由参数的相应类型到字符串的转换</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串 ——&gt; 基本数据类型、包装类 </span></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本数据类型、包装类 ——&gt; 字符串 </span></span><br><span class="line">String str1 = String.valueOf(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">String str2 = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2); <span class="comment">//false 有String变量参与的运算都会new新的对象</span></span><br></pre></td></tr></table></div></figure>        <h3 id="string与字符数组char转换"   >          <a href="#string与字符数组char转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与字符数组char转换"></a> String与字符数组char[]转换</h3>      <ul><li>字符数组<code>char[]</code> ——&gt; 字符串<ul><li><code>String</code>类的构造器：<code>String(char[]) 和 String(char[]，int offset，int length)</code>分别用字符数组中的全部字符和部分字符创建字符串对象。</li></ul></li><li>字符串 ——&gt; 字符数组<code>char[]</code><ul><li><code>public char[] toCharArray()</code>：将字符串中的全部字符存放在一个字符数组中的方法。</li><li><code>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code>：提供了将指定索引范围内的字符串存放到数组中的方法。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数组char[] ——&gt; 字符串</span></span><br><span class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">String str1 = <span class="keyword">new</span> String(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串 ——&gt; 字符数组char[]</span></span><br><span class="line">String str2 = <span class="string">&quot;abc123&quot;</span>;  </span><br><span class="line"><span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br></pre></td></tr></table></div></figure>        <h3 id="string与字节数组转换"   >          <a href="#string与字节数组转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与字节数组转换"></a> String与字节数组转换</h3>      <ul><li>字节数组 ——&gt; 字符串<ul><li><code>String(byte[])</code>：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 <code>String</code>。</li><li><code>String(byte[]，int offset，int length)</code>：用指定的字节数组的一部分， 即从数组起始位置offset开始取length个字节构造一个字符串对象。</li></ul></li><li>字符串  ——&gt; 字节数组<ul><li><code>public byte[] getBytes()</code> ：使用平台的默认字符集将此 <code>String</code>编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li><li><code>public byte[] getBytes(String charsetName)</code> ：使用指定的字符集将此 <code>String</code>编码到 byte 序列，并将结果存储到新的 byte 数组。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节数组 ——&gt; 字符串</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">System.out.println(str2);</span><br><span class="line"></span><br><span class="line">String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line">String str4 = <span class="keyword">new</span> String(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">System.out.println(str4);<span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串  ——&gt; 字节数组</span></span><br><span class="line">String str1 = <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(); <span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="stringbuffer和stringbuilder"   >          <a href="#stringbuffer和stringbuilder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer和stringbuilder"></a> StringBuffer和StringBuilder</h2>              <h3 id="stringbuffer"   >          <a href="#stringbuffer" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer"></a> StringBuffer</h3>      <p><code>java.lang.StringBuffer</code>代表<strong>可变</strong>的字符序列，JDK1.0中声明，可以对字符串内容进行增删，此时<strong>不会产生新的对象</strong>。很多方法与<code>String</code>相同。作为参数传递时，方法内部可以改变值。</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625131148661.png" alt="image-20210625131148661" /></p><p><code>StringBuffer</code>类不同于<code>String</code>，其对象必须使用构造器生成。有三个构造器：</p><ul><li><code>StringBuffer()</code>：初始容量为16的字符串缓冲区</li><li><code>StringBuffer(int size)</code>：构造指定容量的字符串缓冲区</li><li><code>StringBuffer(String str)</code>：将内容初始化为指定字符串内容</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625131436828.png" alt="image-20210625131436828" /></p>        <h3 id="stringbuffer的常用方法"   >          <a href="#stringbuffer的常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer的常用方法"></a> StringBuffer的常用方法</h3>      <ul><li><code>StringBuffer append(xxx)</code>：提供了很多的append()方法，用于进行字符串拼接</li><li><code>StringBuffer delete(int start,int end)</code>：删除指定位置的内容</li><li><code>StringBuffer replace(int start, int end, String str)</code>：把[start,end)位置替换为str</li><li><code>StringBuffer insert(int offset, xxx)</code>：在指定位置插入xxx</li><li><code>StringBuffer reverse()</code> ：把当前字符序列逆转</li><li><code>public int indexOf(String str)</code></li><li><code>public String substring(int start,int end)</code>:返回一个从start开始到end索引结束的左闭右开区间的子字符串</li><li><code>public int length()</code></li><li><code>public char charAt(int n )</code></li><li><code>public void setCharAt(int n ,char ch)</code></li></ul><p>当<code>append</code>和<code>insert</code>时，如果原来value数组长度不够，可扩容</p><p>总结：</p><ul><li>增：<code>append(xxx)</code></li><li>删：<code>delete(int start,int end)</code></li><li>改：<code>setCharAt(int n ,char ch) / replace(int start, int end, String str)</code></li><li>查：<code>charAt(int n )</code></li><li>插：<code>insert(int offset, xxx)</code></li><li>长度：<code>length()</code></li><li>*遍历：<code>for() + charAt() / toString()</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuffer s1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    s1.append(<span class="number">1</span>);</span><br><span class="line">    s1.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">    <span class="comment">// s1.delete(2,4);</span></span><br><span class="line">    <span class="comment">//s1.replace(2,4,&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">//s1.insert(2,false);</span></span><br><span class="line">    <span class="comment">//s1.reverse();</span></span><br><span class="line">    String s2 = s1.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">    System.out.println(s1.length());</span><br><span class="line">    System.out.println(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stringbuilder"   >          <a href="#stringbuilder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuilder"></a> StringBuilder</h3>      <p><code>StringBuilder</code>和 <code>StringBuffer</code>非常类似，均代表<strong>可变</strong>的字符序列，而且提供相关功能的方法也一样。</p>        <h3 id="string-stringbuffer-stringbuilder三者的异同"   >          <a href="#string-stringbuffer-stringbuilder三者的异同" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string-stringbuffer-stringbuilder三者的异同"></a> String、StringBuffer、StringBuilder三者的异同</h3>      <ul><li><code>String</code>:<strong>不可变</strong>的字符序列；底层使用<strong>final</strong> char[]存储</li><li><code>StringBuffer</code>:<strong>可变</strong>的字符序列；<strong>线程安全的，效率低</strong>；底层使用char[]存储</li><li><code>StringBuilder</code>:<strong>可变</strong>的字符序列；jdk5.0新增的，<strong>线程不安全的，效率高</strong>；底层使用char[]存储</li></ul><p>对比String、StringBuffer、StringBuilder三者的效率：<strong>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</strong></p><p>注意：作为参数传递时，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值（因为其内的<code>char[] value</code>不是<code>final</code>的）。</p><p><strong>源码分析：</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">System.out.println(sb1.length());<span class="comment">//0</span></span><br><span class="line">sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br></pre></td></tr></table></div></figure><ul><li>问题1. <code>System.out.println(sb2.length());</code> 答：3</li><li>问题2. 扩容问题：如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的<strong>2倍 + 2</strong>，<strong>同时将原有数组中的元素复制到新的数组中</strong>。</li></ul><p>开发中建议使用：<code>StringBuffer(int capacity)</code> 或<code>StringBuilder(int capacity)</code>。提前将容量设置好，以免扩容时复制元素造成时间浪费。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Java常用类</title>
      <link href="2021/03/15/%E3%80%90Java%E3%80%91Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>2021/03/15/%E3%80%90Java%E3%80%91Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[        <h2 id="日期时间类"   >          <a href="#日期时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#日期时间类"></a> 日期时间类</h2>              <h3 id="jdk-8之前的日期时间类"   >          <a href="#jdk-8之前的日期时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdk-8之前的日期时间类"></a> JDK 8之前的日期时间类</h3>      <ul><li><code>System</code>类中<code>currentTimeMillis()</code></li><li><code>java.util.Date</code>和子类<code>java.sql.Date</code></li><li><code>SimpleDateFormat</code></li><li><code>Calendar</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.System类中的currentTimeMillis()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line">        <span class="comment">//称为时间戳</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Date类</span></span><br><span class="line"><span class="comment">           |---java.sql.Date类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.两个构造器的使用</span></span><br><span class="line"><span class="comment">        &gt;构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line"><span class="comment">        &gt;构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment">    2.两个方法的使用</span></span><br><span class="line"><span class="comment">        &gt;toString():显示当前的年、月、日、时、分、秒</span></span><br><span class="line"><span class="comment">        &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3. java.sql.Date对应着数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment">        &gt;如何实例化</span></span><br><span class="line"><span class="comment">        &gt;如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line"></span><br><span class="line">        System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">155030620410L</span>);</span><br><span class="line">        System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">        System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line">        <span class="comment">// Date date4 = new java.sql.Date(2343243242323L);</span></span><br><span class="line">        <span class="comment">// java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk 8之前的日期时间的API测试</span></span><br><span class="line"><span class="comment"> * 1. System类中currentTimeMillis();</span></span><br><span class="line"><span class="comment"> * 2. java.util.Date和子类java.sql.Date</span></span><br><span class="line"><span class="comment"> * 3. SimpleDateFormat</span></span><br><span class="line"><span class="comment"> * 4. Calendar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.两个操作：</span></span><br><span class="line"><span class="comment">    1.1 格式化：日期 ---&gt;字符串</span></span><br><span class="line"><span class="comment">    1.2 解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.SimpleDateFormat的实例化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleDateFormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//实例化SimpleDateFormat:使用默认的构造器</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化：日期 ---&gt;字符串</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line">        String str = <span class="string">&quot;19-12-18 上午11:43&quot;</span>;</span><br><span class="line">        Date date1 = sdf.parse(str);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2019-02-18 11:48:27</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">&quot;2020-02-18 11:48:27&quot;</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Calendar日历类(抽象类）的使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCalendar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.实例化</span></span><br><span class="line">        <span class="comment">//方式一：创建其子类（GregorianCalendar）的对象</span></span><br><span class="line">        <span class="comment">//方式二：调用其静态方法getInstance()</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"><span class="comment">//        System.out.println(calendar.getClass());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.常用方法</span></span><br><span class="line">        <span class="comment">//get()</span></span><br><span class="line">        <span class="keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set()</span></span><br><span class="line">        <span class="comment">//calendar可变性</span></span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add()</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getTime():日历类---&gt; Date</span></span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//setTime():Date ---&gt; 日历类</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        calendar.setTime(date1);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="jdk-8中新时间类"   >          <a href="#jdk-8中新时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdk-8中新时间类"></a> JDK 8中新时间类</h3>      <ul><li><code>LocalDate</code></li><li><code>LocalTime</code></li><li><code>LocalDateTime</code>（常用）</li><li><code>DateTimeFormatter</code>（类似<code>SimpleTimeFormat</code>）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk 8中日期时间API的测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDK8DateTimeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">2020</span> - <span class="number">1900</span>,<span class="number">9</span> - <span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(date1);<span class="comment">//Tue Sep 08 00:00:00 GMT+08:00 2020</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    LocalDate、LocalTime、LocalDateTime 的使用</span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高</span></span><br><span class="line"><span class="comment">        2.类似于Calendar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取当前的日期、时间、日期+时间</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span></span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">43</span>);</span><br><span class="line">        System.out.println(localDateTime1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getXxx()：获取相关的属性</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfMonth());</span><br><span class="line">        System.out.println(localDateTime.getDayOfWeek());</span><br><span class="line">        System.out.println(localDateTime.getMonth());</span><br><span class="line">        System.out.println(localDateTime.getMonthValue());</span><br><span class="line">        System.out.println(localDateTime.getMinute());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//体现不可变性</span></span><br><span class="line">        <span class="comment">//withXxx():设置相关的属性</span></span><br><span class="line">        LocalDate localDate1 = localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localDate1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime2 = localDateTime.withHour(<span class="number">4</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        LocalDateTime localDateTime3 = localDateTime.plusMonths(<span class="number">3</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime3);</span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime4 = localDateTime.minusDays(<span class="number">6</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Instant的使用</span></span><br><span class="line"><span class="comment">    类似于 java.util.Date类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取本初子午线对应的标准时间</span></span><br><span class="line">        Instant instant = Instant.now();</span><br><span class="line">        System.out.println(instant);<span class="comment">//2019-02-18T07:29:41.719Z</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加时间的偏移量</span></span><br><span class="line">        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(offsetDateTime);<span class="comment">//2019-02-18T15:32:50.611+08:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span></span><br><span class="line">        <span class="keyword">long</span> milli = instant.toEpochMilli();</span><br><span class="line">        System.out.println(milli);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span></span><br><span class="line">        Instant instant1 = Instant.ofEpochMilli(<span class="number">1550475314878L</span>);</span><br><span class="line">        System.out.println(instant1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    DateTimeFormatter:格式化或解析日期、时间</span></span><br><span class="line"><span class="comment">    类似于SimpleDateFormat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">//格式化:日期--&gt;字符串</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        String str1 = formatter.format(localDateTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(str1);<span class="comment">//2019-02-18T15:42:18.797</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串 --&gt;日期</span></span><br><span class="line">        TemporalAccessor parse = formatter.parse(<span class="string">&quot;2019-02-18T15:42:18.797&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        方式二：</span></span><br><span class="line"><span class="comment">//        本地化相关的格式。如：ofLocalizedDateTime()</span></span><br><span class="line"><span class="comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str2 = formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);<span class="comment">//2019年2月18日 下午03时47分16秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//      本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str3 = formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2019-2-18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span></span><br><span class="line">        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);<span class="comment">//2019-02-18 03:52:09</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        TemporalAccessor accessor = formatter3.parse(<span class="string">&quot;2019-02-18 03:52:09&quot;</span>);</span><br><span class="line">        System.out.println(accessor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="比较器"   >          <a href="#比较器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#比较器"></a> 比较器</h2>      <ul><li>自然排序：<code>Comparable</code>接口，让类本身修改代码以实现排序</li><li>定制排序：<code>Comparator</code>接口</li></ul>        <h3 id="comparable"   >          <a href="#comparable" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#comparable"></a> Comparable</h3>      <p>像String、包装类等实现了<code>Comparable</code>接口，重写了<code>compareTo(obj)</code>方法，给出了比较两个对象大小的方式。重写<code>compareTo(obj)</code>的规则：</p><ul><li>如果当前对象this大于形参对象obj，则返回正整数</li><li>如果当前对象this小于形参对象obj，则返回负整数</li><li>如果当前对象this等于形参对象obj，则返回零。</li></ul><p>对于自定义类来说，如果需要排序，我们可以让自定义类实现<code>Comparable</code>接口，重写<code>compareTo(obj)</code>方法。在<code>compareTo(obj)</code>方法中指明如何排序。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> xxx)&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 比较大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="comparator"   >          <a href="#comparator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#comparator"></a> Comparator</h3>      <p>当元素的类型没有实现<code>Comparable</code>接口而又不方便修改代码，或者实现了<code>Comparable</code>接口的排序规则不适合当前的操作，那么可以考虑使用 <code>Comparator</code>的对象来排序。重写 <code>Comparator</code>对象的<code>compare(Object o1, Object o2</code>)方法，比较o1和o2的大小：</p><ul><li>如果方法返回正整数，则表示o1大于o2；</li><li>如果返回0，表示相等；</li><li>返回负整数，表示o1小于o2。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;KK&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;JJ&quot;</span>,<span class="string">&quot;DD&quot;</span>&#125;;</span><br><span class="line">    Arrays.sort(arr,<span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">        <span class="comment">//按照字符串从大到小的顺序排列</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span>  String)&#123;</span><br><span class="line">                String s1 = (String) o1;</span><br><span class="line">                String s2 = (String) o2;</span><br><span class="line">                <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】多线程</title>
      <link href="2021/03/14/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2021/03/14/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="基本概念"   >          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2>      <p>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是一个进程；进程——资源分配的最小单位</p><p>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流；线程——程序执行的最小单位</p>        <h2 id="创建多线程"   >          <a href="#创建多线程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建多线程"></a> 创建多线程</h2>      <p>创建多线程有四种方式：</p><ul><li>继承<code>Thread</code>类</li><li>实现<code>Runnable</code>接口</li><li>实现<code>Callable</code>接口</li><li>使用线程池</li></ul>        <h3 id="方式一继承thread类"   >          <a href="#方式一继承thread类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一继承thread类"></a> 方式一：继承Thread类</h3>      <ol><li>创建一个继承于<code>Thread</code>类的子类</li><li>重写<code>Thread</code>类的<code>run()</code> --&gt; 将此线程执行的操作声明在<code>run()</code>中</li><li>创建<code>Thread</code>类的子类的对象</li><li>通过此对象调用<code>start()</code></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line">        <span class="comment">// t1.run();</span></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line">        <span class="comment">// t1.start();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot;***********main()************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="方式二实现runnable接口"   >          <a href="#方式二实现runnable接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二实现runnable接口"></a> 方式二：实现Runnable接口</h3>      <ol><li>创建一个实现了<code>Runnable</code>接口的类</li><li>实现类去实现<code>Runnable</code>中的抽象方法：<code>run()</code></li><li>创建实现类的对象</li><li>将此对象作为参数传递到<code>Thread</code>类的构造器中，创建<code>Thread</code>类的对象</li><li>通过Thread类的对象调用<code>start()</code></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MyThread mThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>重点：Thread类实现了Runnable接口，该方法本质上使用了静态代理的设计模式</strong>：Thread类实现了Runnable接口中的run()方法，调用Thread的run()方法时，会调用在构造器中传入的自定义类的run()方法，因此是一种静态代理的设计模式</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread类的run()方法，其中target时构造方法中传入的自定义类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyThread implements Runnable&#123;&#125; <span class="comment">//相当于被代理类</span></span><br><span class="line">Class Thread implements Runnable&#123;&#125;   <span class="comment">//相当于代理类</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();   <span class="comment">//创建被代理类对象</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(t); <span class="comment">//创建代理类，执行start方法时会调用接口的run()方法</span></span><br><span class="line">thread.start(); <span class="comment">//启动线程；调用线程的run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>比较创建线程的两种方式。开发中优先选择：实现<code>Runnable</code>接口的方式。原因：</p><ol><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有<strong>共享数据</strong>的情况。</li></ol><p>相同点：两种方式都需要重写<code>run()</code>，将线程要执行的逻辑声明在<code>run()</code>中。</p><span id="more"></span>        <h3 id="方式三实现callable接口"   >          <a href="#方式三实现callable接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三实现callable接口"></a> 方式三：实现Callable接口</h3>      <p>和<code>Runnable</code>相比，<code>Callable</code>功能更强大：</p><ul><li>相比<code>run()</code>方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助<code>FutureTask</code>类，比如获取返回结果</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将此Callable接口的实现类的对象传递到FutureTask构造器中</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 将FutureTask类对象作为参数传递到Thread类的构造器中，创建对象并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 获取Callable中call方法的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="方式四使用线程池"   >          <a href="#方式四使用线程池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式四使用线程池"></a> 方式四：使用线程池</h3>      <p>经常创建和销毁、使用量特别大的资源，比如并发情况下线程对性能影响很大。思路： 提前创建好多个线程，放入池中使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。好处：</p><ul><li>提高响应速度 （减少了创建新线程的时间）</li><li>降低资源消耗 （重复利用线程池中，不需要每次都创建）</li><li>便于线程管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务时最多保持长间后会 终止</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并使用多线程的第四种方法：使用线程池</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1.调用Executors的newFixedThreadPool(),返回指定线程数量的ExecutorService</span></span><br><span class="line">      ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 2.将Runnable实现类的对象作为形参传递给ExecutorService的submit()方法中，开启线程并执行相关的run()</span></span><br><span class="line">      pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">     </span><br><span class="line">      <span class="comment">// pool.submit(Callable callable);</span></span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 3.结束线程的使用</span></span><br><span class="line">      pool.shutdown();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 设置线程池属性</span></span><br><span class="line">      ThreadPoolExecutor service1 = (ThreadPoolExecutor)service;</span><br><span class="line">      service1.setCorePoolSize(<span class="number">15</span>);</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="thread类中常用方法"   >          <a href="#thread类中常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#thread类中常用方法"></a> Thread类中常用方法</h2>      <p><code>Thread</code>中的常用方法：</p><ul><li><code>start()</code>:启动当前线程；调用当前线程的<code>run()</code></li><li><code>run()</code>: 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li><code>currentThread()</code>:静态方法，返回执行当前代码的线程</li><li><code>getName()</code>:获取当前线程的名字</li><li><code>setName()</code>:设置当前线程的名字</li><li><code>yield()</code>:释放当前cpu的执行权，释放后所有线程重新竞争cpu执行权</li><li><code>join()</code>:在线程a中调用线程b的<code>join()</code>，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li><li><code>stop()</code>:已过时。当执行此方法时，强制结束当前线程。</li><li><code>sleep(long millitime)</code>:让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li><li><code>isAlive()</code>:判断当前线程是否存活</li></ul><p>线程的优先级：</p><ul><li><code>MAX_PRIORITY</code>：10</li><li><code>MIN_PRIORITY</code>：1</li><li><code>NORM_PRIORITY</code>：5  --&gt;默认优先级</li></ul><p>如何获取和设置当前线程的优先级：</p><ul><li><code>getPriority()</code>:获取线程的优先级</li><li><code>setPriority(int p)</code>:设置线程的优先级</li></ul><p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p>        <h2 id="线程的生命周期"   >          <a href="#线程的生命周期" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程的生命周期"></a> 线程的生命周期</h2>      <p><img src="/images/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210615154527649.png" alt="image-20210615154527649" /></p>        <h2 id="解决线程安全问题"   >          <a href="#解决线程安全问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解决线程安全问题"></a> 解决线程安全问题</h2>              <h3 id="方式一同步代码块"   >          <a href="#方式一同步代码块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一同步代码块"></a> 方式一：同步代码块</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">// 需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低（局限性）。说明：</p><ol><li>操作共享数据的代码，即为需要被同步的代码。不能包含代码多了，也不能包含代码少了。</li><li>共享数据：多个线程共同操作的变量。</li><li>同步监视器，俗称：<strong>锁</strong>。<strong>任何一个类的对象，都可以充当锁</strong>。</li></ol><p>要求：<strong>多个线程必须要共用同一把锁（同步监视器）</strong>：</p><ul><li>在实现<code>Runnable</code>接口创建多线程的方式中，我们可以考虑使用<code>this</code>充当同步监视器。因为<code>Runnable</code>类对象被多个<code>Thread</code>类对象所共享，所以多个线程共用同一把锁。</li><li>在继承<code>Thread</code>类创建多线程的方式中，因为多个线程类对象本身不能共享数据，因此需要设置一个<code>static</code>修饰的对象作为锁，或使用反射方式<code>xxx.class</code>作为锁。</li></ul><p>实现Runnable接口例子：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123; <span class="comment">//此时的this:唯一的Window1的对象，也可以用其他任意类对象作为锁</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>若使用继承<code>Thread</code>类的方式，需要在类中设置一个<code>static</code>对象作为锁，或使用反射方式<code>Window1.class</code>。</p>        <h3 id="方式二同步方法"   >          <a href="#方式二同步方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二同步方法"></a> 方式二：同步方法</h3>      <p>同步方法仍然涉及到同步监视器，只是不需要显示声明：</p><ul><li>非静态的同步方法（适用于实现<code>Runnable</code>接口），同步监视器是：<code>this</code></li><li>静态的同步方法（适用于继承<code>Thread</code>类），同步监视器是：当前类本身</li></ul><p>非静态的同步方法（适用于实现<code>Runnable</code>接口）：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 在while循环内加锁</span></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器：this</span></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>静态的同步方法（适用于继承<code>Thread</code>类）：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器：Window3.class</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="方式三lock锁"   >          <a href="#方式三lock锁" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三lock锁"></a> 方式三：Lock锁</h3>      <p>解决线程安全问题的方式三：Lock锁  — JDK5.0新增</p><p><code>synchronized</code>与<code>Lock</code>的区别：</p><ul><li><code>synchronized</code>：在执行完同步代码以后自动释放同步监视器</li><li><code>Lock</code>：需要手动开启同步<code>lock()</code>，结束时需要手动<code>unlock()</code></li></ul><p>优先使用顺序：<code>Lock</code>——&gt; 同步代码块（已经进入了方法体，分配了相应资源）——&gt; 同步方法（在方法体之外）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>死锁的理解：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。</p>        <h2 id="线程安全的懒汉式单例模式"   >          <a href="#线程安全的懒汉式单例模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程安全的懒汉式单例模式"></a> 线程安全的懒汉式单例模式</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">                instance = new Bank();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return instance;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：效率更高，如果实例对象已经非空，说明已经造好了对象，不需要再进入同步代码块内</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="线程的通信"   >          <a href="#线程的通信" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程的通信"></a> 线程的通信</h2>      <p>涉及到的三个方法：</p><ul><li><code>wait()</code>：一旦执行此方法，当前线程就进入阻塞状态，<strong>并释放同步监视器</strong></li><li><code>notify()</code>：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li><li><code>notifyAll()</code>：一旦执行此方法，就会唤醒所有被wait的线程</li></ul><p>注意：</p><ul><li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>这三个方法必须使用在<strong>同步代码块或同步方法中</strong>；</li><li>三者的调用者必须是同步代码块或同步方法中的同步监视器，否则会出现<code>IllegalMonitorStateException</code>异常；</li><li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>这三个方法是定义在<code>java.lang.Object</code>类中。</li></ul><p>例子：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程通信的例子：使用两个线程交替打印1-100</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 涉及到三个方法：</span></span><br><span class="line"><span class="comment"> *  wait()：一旦执行此方法，当前线程就进入阻塞状态，**并释放同步监视器**</span></span><br><span class="line"><span class="comment"> *  notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</span></span><br><span class="line"><span class="comment"> *  notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// 唤醒其他所有线程</span></span><br><span class="line">                notifyAll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (number &lt; <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 使得调用wait()方法的线程进入阻塞状态，同时释放锁</span></span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>sleep()和wait()的异同</strong>：</p><ul><li>相同点：一旦执行方法，都可以使得当前线程进入阻塞状态</li><li>不同点：<ul><li>两个方法声明的位置不同：<code>Thread</code>类声明<code>sleep()</code>，<code>Object</code>类中声明<code>wait()</code></li><li>调用的要求不同：<code>sleep()</code>可以在任何需要的场景下调用，<code>wait()</code>必须在同步代码块或同步方法中调用</li><li>关于是否释放同步监视器：如果两个方法都是用在同步代码块或同步方法中，<code>sleep()</code>不会释放锁，<code>wait()</code>会释放锁</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】基本数据类型</title>
      <link href="2021/03/12/%E3%80%90Java%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/12/%E3%80%90Java%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="java-数据类型"   >          <a href="#java-数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java-数据类型"></a> Java 数据类型</h2>      <p>基本数据类型：</p><ul><li>整型：<code>byte \ short \ int \ long</code></li><li>浮点型：<code>float \ double</code></li><li>字符型：<code>char</code></li><li>布尔型：<code>boolean</code></li></ul><p>引用数据类型：</p><ul><li>类（<code>class</code>）</li><li>接口（<code>interfac</code>）</li><li>数组（<code>array</code>）</li></ul>        <h3 id="容量"   >          <a href="#容量" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#容量"></a> 容量</h3>      <ul><li>整型：<code>byte</code>（1字节=8bit） \ <code>short</code>（2字节）\ <code>int</code>（4字节）\ <code>long</code>（8字节）</li><li>浮点型：<code>float</code>（4字节） \ <code>double</code>（8字节）</li><li>字符型：<code>char</code>（1字符=2字节）</li></ul><p><strong>注意：定义long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾；定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</strong></p><p><strong>整型常量默认为int类型，浮点类型常量默认为double类型。</strong></p>        <h3 id="自动类型提升"   >          <a href="#自动类型提升" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动类型提升"></a> 自动类型提升</h3>      <p>自动类型提升：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p><p><code>byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double</code></p><p><strong>特别的：当byte、char、short三种类型的变量做运算时，结果为int型</strong></p><p><code>float</code>和<code>double</code>类型的变量相加时，结果为<code>double</code>类型。</p>        <h3 id="强制类型转换"   >          <a href="#强制类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#强制类型转换"></a> 强制类型转换</h3>      <p>强制类型转换：从容量大的类型转换成容量小的类型。它是自动类型提升运算的<strong>逆运算</strong>。其中容量大小指的是，表示数的范围的大小。比如：<code>float</code>容量要大于<code>long</code>的容量</p>        <h3 id="注意事项"   >          <a href="#注意事项" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3>      <ol><li>情况1：编译不出错，因为右边的123456默认是<code>int</code>类型，转给<code>long</code>类型时为自动类型提升（小转大，不出错）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num  = <span class="number">123456</span>;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>情况2：编译出错——过大的整数。因为右边的数默认为int类型，但因为该数字过大超过了<code>int</code>类型的范围，所以会报错。此时需要再其后面加上<code>&quot;l&quot;</code>或<code>&quot;L&quot;</code>。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num = <span class="number">12345678987654321</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：</span></span><br><span class="line"><span class="keyword">long</span> num = <span class="number">12345678987654321L</span>;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>情况3：编译出错——不兼容的类型：从<code>double</code>转换到<code>float</code>可能会有损失。因为右边的12.3默认为<code>double</code>类型，不能直接转换，需要加上强制类型转换<code>(float)12.3</code>。此时需要再其后面加上<code>&quot;f&quot;</code>或<code>&quot;F&quot;</code>。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">float</span> f1 = (<span class="keyword">float</span>)<span class="number">12.3</span>;</span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>情况4：编译出错——不兼容的类型：从int转换到byte可能会有损失。因为此时的 1 默认是int类型，不能直接转换，需要加上强制类型转换。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = b + <span class="number">1</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="进制转换"   >          <a href="#进制转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h3>      <blockquote><p>二进制转十进制细节：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?t=470&amp;p=64" >https://www.bilibili.com/video/BV1Kb411W75N?t=470&amp;p=64</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>计算机底层使用<strong>补码</strong>的方式存储数据</p>        <h3 id="基本数据类型使用示例"   >          <a href="#基本数据类型使用示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本数据类型使用示例"></a> 基本数据类型使用示例</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)</span></span><br><span class="line">        <span class="comment">//① byte范围：-128 ~ 127</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">byte</span> b2 = -<span class="number">128</span>;</span><br><span class="line">        <span class="comment">//b2 = 128;//编译不通过</span></span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        <span class="comment">// ② 声明long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾</span></span><br><span class="line">        <span class="comment">// ③ 通常，定义整型变量时，使用int型。</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">1234</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">3414234324L</span>;</span><br><span class="line">        System.out.println(l1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 浮点型：float(4字节) \ double(8字节)</span></span><br><span class="line">        <span class="comment">//① 浮点型，表示带小数点的数值</span></span><br><span class="line">        <span class="comment">//② float表示数值的范围比long还大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">123.3</span>;</span><br><span class="line">        System.out.println(d1 + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//③ 定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</span></span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        <span class="comment">//④ 通常，定义浮点型变量时，使用double型。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 字符型：char （1字符=2字节)</span></span><br><span class="line">        <span class="comment">//① 定义char型变量，通常使用一对&#x27;&#x27;,内部只能写一个字符</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//c1 = &#x27;AB&#x27;;</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">&#x27;ス&#x27;</span>;</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</span></span><br><span class="line">        <span class="keyword">char</span> c5 = <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//换行符</span></span><br><span class="line">        c5 = <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//制表符</span></span><br><span class="line">        System.out.print(<span class="string">&quot;hello&quot;</span> + c5);</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c6 = <span class="string">&#x27;\u0043&#x27;</span>;</span><br><span class="line">        System.out.println(c6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.布尔型：boolean</span></span><br><span class="line">        <span class="comment">//① 只能取两个值之一：true 、 false</span></span><br><span class="line">        <span class="comment">//② 常常在条件判断、循环结构中使用</span></span><br><span class="line">        <span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(bb1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="整数类型扩展"   >          <a href="#整数类型扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#整数类型扩展"></a> 整数类型扩展</h3>      <p>整数进制：</p><ul><li>二进制：0b10，对应对应十进制2</li><li>十进制：10</li><li>八进制：010，对应十进制8</li><li>十六进制：0x10，对应十进制16</li></ul><p>多个不同整数类型的变量相加时，若其中有一个long类型，则相加结果为long；否则都为int类型。</p>        <h2 id="浮点数类型扩展"   >          <a href="#浮点数类型扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#浮点数类型扩展"></a> 浮点数类型扩展</h2>      <p>浮点数<code>float</code>类型占32字节，<code>double</code>类型占64字节，其位数有限、是离散的、有舍入误差的，因此容易出现数值溢出的情况。两个浮点数可能很接近但不严格相等。<code>float</code>和<code>double</code>类型的变量相加时，结果为<code>double</code>类型。</p><p>使用浮点数时应注意，银行业务中不能使用float和double类型，要使用BigDecimal类进行判断。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 理论上f和d应该相等</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是结果输出false</span></span><br><span class="line">System.out.println(f == d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">2158452165841256123584f</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = f1 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果输出true</span></span><br><span class="line">System.out.println(f1 == f2);</span><br></pre></td></tr></table></div></figure>        <h2 id="字符类型"   >          <a href="#字符类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h2>      <p>编码类型：Unicode  2字节，范围0-65536</p><p>转义字符：</p><ul><li>\t  制表符</li><li>\n  换行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenCV】OpenCV读取摄像头数据</title>
      <link href="2021/03/10/%E3%80%90OpenCV%E3%80%91OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/%E3%80%90OpenCV%E3%80%91OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>通过cv::VideoCapture类读取外接设备视频流（摄像头或外接读卡器获取到的视频流）</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!capture.isOpened())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;could not open camera...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cv::namedWindow(<span class="string">&quot;capture&quot;</span>, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">cv::Mat frame;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!capture.read(frame)) </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    cv::imshow(<span class="string">&quot;capture&quot;</span>, frame);</span><br><span class="line">    <span class="keyword">char</span> c = waitKey(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="number">49</span>) &#123;</span><br><span class="line">    index = c - <span class="number">49</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">27</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capture.release();</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Qt】基于Qt显示OpenCV的Mat数据</title>
      <link href="2021/03/10/%E3%80%90Qt%E3%80%91%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/%E3%80%90Qt%E3%80%91%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="读取图片"   >          <a href="#读取图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#读取图片"></a> 读取图片</h2>      <p>使用<code>QFileDialog::getOpenFileName</code>函数获取文件名：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br></pre></td></tr></table></div></figure><p>使用<code>cv::imread</code>函数读取图片：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> xxxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="cvmat转换为qimage"   >          <a href="#cvmat转换为qimage" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cvmat转换为qimage"></a> cv::Mat转换为QImage</h2>      <p>将<code>cv::Mat</code>类对象转换为<code>QImage</code>类对象。注意事项：</p><ol><li><p>cv::Mat类通道顺序为BGR，QImgae类为RGB，因此需要先使用<code>cv::cvtColor</code>做色彩转换。</p></li><li><p>需要判断Mat对象的通道数，单通道和三通道处理方式略有不同：</p></li></ol><ul><li>三通道RGB图片：<code>QImage::Format_RGB888</code></li><li>单通道图片：<code>QImage::Format_Indexed8</code></li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat rgbMat;</span><br><span class="line">QImage img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="qlabel显示图片"   >          <a href="#qlabel显示图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#qlabel显示图片"></a> QLabel显示图片</h2>      <p>在Qt Designer中创建一个<code>QLabel</code>类对象img_label，并根据需求设置其长宽大小，最后通过<code>setPixmap</code>函数设置QImage数据。</p><p>调整图片大小时有两种设置方式：</p><ul><li>图片尺寸调整到QLabel实际尺寸：<code>setScaledContents(true)</code></li><li>QLabel尺寸调整到图片实际尺寸：resize()</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br></pre></td></tr></table></div></figure>        <h2 id="完整代码"   >          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br><span class="line"></span><br><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat rgbMat;</span><br><span class="line">    QImage img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> OpenCV </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络原理</title>
      <link href="2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[        <h2 id="计算机网络分层结构"   >          <a href="#计算机网络分层结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#计算机网络分层结构"></a> 计算机网络分层结构</h2>      <ul><li>OSI参考模型：7层</li><li>TCP/IP参考模型：4层</li></ul><p>一台主机的每一张网卡都拥有一个固定的物理地址（MAC地址）。两台主机在进行通讯时，交换机通过MAC地址确定传输目标对象，从而通过网线将数据包传输给目标主机。</p><span id="more"></span>        <h2 id="数据传输过程"   >          <a href="#数据传输过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据传输过程"></a> 数据传输过程</h2>      <p>一台主机A想与另一台主机B通讯时，需要首先知道对方的<strong>MAC地址</strong>（每张网卡有一个MAC地址），其先在缓存文件中寻找有没有这个MAC地址对应的设备，若没有，则通过<strong>ARP协议</strong>在子网内广播一个信号，判断哪台设备的ip地址是B的ip地址。目标设备B发现A要找的ip地址是自己时，就会返回给对方自己的MAC地址，并储存在交换机（不确定）中，此时A即知道了B的ip地址和MAC地址，即可进行通讯；</p>        <h2 id="创建虚拟机时三种网络连接方式"   >          <a href="#创建虚拟机时三种网络连接方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建虚拟机时三种网络连接方式"></a> 创建虚拟机时三种网络连接方式</h2>      <p><strong>桥接模式</strong>：在主机上创建一个与主机ip地址（192.168.0.20）位于同一网段下的虚拟机ip地址（192.168.0.30），其内的虚拟机操作系统可以与外界其他操作系统通信，但会占用真实的ip地址（<span class="exturl"><a class="exturl__link"   href="http://192.168.0.xxx" >192.168.0.xxx</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）</p><p><strong>NAT模式</strong>(Network Address Translation，网络地址转换)：在主机上创建另一个网段的ip地址（192.168.100.200），虚拟机中的ip地址（192.168.100.50）与这个ip地址处于同一网段下，不再占用主机上真实的ip地址（192.168.0.40）。这种方式可以避免虚拟机的ip地址占用真实的ip地址（<span class="exturl"><a class="exturl__link"   href="http://192.168.0.xxx" >192.168.0.xxx</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）。</p><p><strong>主机模式</strong>：创建的虚拟机操作系统是独立的主机，不能访问外网。</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210721095121364.png" alt="image-20210721095121364" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】C++实现ping功能</title>
      <link href="2021/02/12/%E3%80%90C%E3%80%91C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/"/>
      <url>2021/02/12/%E3%80%90C%E3%80%91C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[        <h2 id="目的"   >          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#目的"></a> 目的</h2>      <p>使用C++实现ping功能，用于在进行TCP/IP通讯前测试是否能与目标主机通讯。</p>        <h2 id="原理"   >          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2>      <p>ping 命令是基于ICMP 协议来工作的，「ICMP」全称为Internet 控制报文协议( Internet Control Message Protocol)。基于ICMP协议向目标IP发送ICMP响应请求报文，目标主机收到这个报文之后，会向源IP回复一个ICMP响应应答报文。</p>        <h2 id="c实现"   >          <a href="#c实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c实现"></a> C++实现</h2>      <p>构建ICMPPing类实现上述功能。</p><ul><li>icmp_ping.h：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ICMPPING_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMPPING_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iphlpapi.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Iphlpapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICMPPing</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ICMPCREATEFILE)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ICMPCLOSEHANDLE)</span><span class="params">(HANDLE)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ICMPSENDECHO)</span><span class="params">(HANDLE, DWORD, LPVOID, WORD, PIP_OPTION_INFORMATION, LPVOID, DWORD, DWORD)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICMPPing();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~ICMPPing();</span><br><span class="line"><span class="function"><span class="keyword">static</span> ICMPPing* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// init ICMP function, return true for success, or for error</span></span><br><span class="line"><span class="function">BOOL <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// ping host, return true for connect success, or for timeout</span></span><br><span class="line"><span class="function">BOOL <span class="title">Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> ICMPPing* icmp_ping_;</span><br><span class="line"><span class="comment">// pointer of function</span></span><br><span class="line">ICMPCREATEFILE pIcmpCreateFile_;</span><br><span class="line">ICMPCLOSEHANDLE pIcmpCloseHandle_;</span><br><span class="line">ICMPSENDECHO pIcmpSendEcho_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></div></figure><span id="more"></span><ul><li>icmp_ping.cpp：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ICMPPing* ICMPPing::icmp_ping_ = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ICMPPing::ICMPPing()</span><br><span class="line">    : pIcmpCreateFile_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpCloseHandle_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpSendEcho_(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ICMPPing::~ICMPPing()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> icmp_ping_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ICMPPing* <span class="title">ICMPPing::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (icmp_ping_ == <span class="literal">NULL</span>)</span><br><span class="line">        icmp_ping_ = <span class="keyword">new</span> ICMPPing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> icmp_ping_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HINSTANCE hIcmp = LoadLibrary(<span class="string">&quot;ICMP.DLL&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hIcmp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pIcmpCreateFile_ = (ICMPCREATEFILE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCreateFile&quot;</span>);</span><br><span class="line">    pIcmpCloseHandle_ = (ICMPCLOSEHANDLE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCloseHandle&quot;</span>);</span><br><span class="line">    pIcmpSendEcho_ = (ICMPSENDECHO)GetProcAddress(hIcmp, <span class="string">&quot;IcmpSendEcho&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((pIcmpCreateFile_ == <span class="literal">NULL</span>) || (pIcmpCloseHandle_ == <span class="literal">NULL</span>) || (pIcmpSendEcho_ == <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD timeOut = <span class="number">1000</span>;  </span><br><span class="line">    ULONG hAddr = inet_addr(host);  </span><br><span class="line">    <span class="keyword">if</span> (hAddr == INADDR_NONE)</span><br><span class="line">    &#123;</span><br><span class="line">        hostent* hp = gethostbyname(host);   </span><br><span class="line">        <span class="keyword">if</span> (hp)</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;hAddr, hp-&gt;h_addr_list, hp-&gt;h_length); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HANDLE hIp = pIcmpCreateFile_();</span><br><span class="line">    IP_OPTION_INFORMATION ipoi;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;ipoi, <span class="number">0</span>, <span class="keyword">sizeof</span>(IP_OPTION_INFORMATION));</span><br><span class="line">    ipoi.Ttl = <span class="number">128</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pSend[<span class="number">36</span>];  </span><br><span class="line">    <span class="built_in">memset</span>(pSend, <span class="string">&#x27;E&#x27;</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> repSize = <span class="keyword">sizeof</span>(ICMP_ECHO_REPLY) + <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pReply[<span class="number">100</span>]; </span><br><span class="line">    ICMP_ECHO_REPLY* pEchoReply = (ICMP_ECHO_REPLY*)pReply;</span><br><span class="line"></span><br><span class="line">    DWORD nPackets = pIcmpSendEcho_(hIp, hAddr, pSend, <span class="number">32</span>, &amp;ipoi, pReply, repSize, timeOut);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEchoReply-&gt;Status != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pIcmpCloseHandle_(hIp);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pIcmpCloseHandle_(hIp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>该类使用单例模式，在主程序中使用时，通过调用<code>GetInstance()</code>函数返回类指针对象；之后通过<code>Init()</code>函数进行初始化，并判断返回值是否为false；最后调用<code>Ping()</code>函数验证是否能和目标主机进行通讯。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ICMPPing* icmp_ping = ICMPPing::GetInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!icmp_ping-&gt;Init())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;init error!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icmp_ping-&gt;Ping(<span class="string">&quot;192.168.0.12&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping success!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping fail!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="注意"   >          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2>      <p>若该类同时与其他包含有&lt;Windows.h&gt;的文件放在同一项目下编译时，会报重定义的错误，这是因为&lt;Windows.h&gt;中包含了&lt;Winsock.h&gt;头文件，而本类包含了&lt;Winsock2.h&gt;文件，因此会有重定义。解决方案：</p><p>在项目属性  ——&gt;  C/C++  ———&gt;  预处理器  -------&gt; 预处理器定义</p><p>增加如下定义</p><p><code>WIN32_LEAN_AND_MEAN</code></p>        <h2 id="致谢"   >          <a href="#致谢" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#致谢"></a> 致谢</h2>      <blockquote><p>代码参考自http://www.cnblogs.com/guoyz1314/p/3527340.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Java基础语法</title>
      <link href="2021/02/11/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2021/02/11/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[        <h2 id="java-数据类型"   >          <a href="#java-数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java-数据类型"></a> Java 数据类型</h2>      <p>基本数据类型：</p><ul><li>整型：<code>byte \ short \ int \ long</code></li><li>浮点型：<code>float \ double</code></li><li>字符型：<code>char</code></li><li>布尔型：<code>boolean</code></li></ul><p>引用数据类型：</p><ul><li>类（<code>class</code>）</li><li>接口（<code>interfac</code>）</li><li>数组（<code>array</code>）</li></ul>        <h3 id="容量"   >          <a href="#容量" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#容量"></a> 容量</h3>      <ul><li>整型：<code>byte</code>（1字节=8bit） \ <code>short</code>（2字节）\ <code>int</code>（4字节）\ <code>long</code>（8字节）</li><li>浮点型：<code>float</code>（4字节） \ <code>double</code>（8字节）</li><li>字符型：<code>char</code>（1字符=2字节）</li></ul><p><strong>注意：定义long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾；定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</strong></p><p><strong>整型常量默认为int类型，浮点类型常量默认为double类型。</strong></p>        <h3 id="自动类型提升"   >          <a href="#自动类型提升" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动类型提升"></a> 自动类型提升</h3>      <p>自动类型提升：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。</p><p><code>byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double</code></p><p><strong>特别的：当byte、char、short三种类型的变量做运算时，结果为int型</strong></p><p><code>float</code>和<code>double</code>类型的变量相加时，结果为<code>double</code>类型。</p>        <h3 id="强制类型转换"   >          <a href="#强制类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#强制类型转换"></a> 强制类型转换</h3>      <p>强制类型转换：从容量大的类型转换成容量小的类型。它是自动类型提升运算的<strong>逆运算</strong>。其中容量大小指的是，表示数的范围的大小。比如：<code>float</code>容量要大于<code>long</code>的容量</p>        <h3 id="注意事项"   >          <a href="#注意事项" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3>      <ol><li>情况1：编译不出错，因为右边的123456默认是<code>int</code>类型，转给<code>long</code>类型时为自动类型提升（小转大，不出错）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num  = <span class="number">123456</span>;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>情况2：编译出错——过大的整数。因为右边的数默认为int类型，但因为该数字过大超过了<code>int</code>类型的范围，所以会报错。此时需要再其后面加上<code>&quot;l&quot;</code>或<code>&quot;L&quot;</code>。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num = <span class="number">12345678987654321</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：</span></span><br><span class="line"><span class="keyword">long</span> num = <span class="number">12345678987654321L</span>;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>情况3：编译出错——不兼容的类型：从<code>double</code>转换到<code>float</code>可能会有损失。因为右边的12.3默认为<code>double</code>类型，不能直接转换，需要加上强制类型转换<code>(float)12.3</code>。此时需要再其后面加上<code>&quot;f&quot;</code>或<code>&quot;F&quot;</code>。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">float</span> f1 = (<span class="keyword">float</span>)<span class="number">12.3</span>;</span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>情况4：编译出错——不兼容的类型：从int转换到byte可能会有损失。因为此时的 1 默认是int类型，不能直接转换，需要加上强制类型转换。</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">byte</span> b1 = b + <span class="number">1</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="进制转换"   >          <a href="#进制转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h3>      <blockquote><p>二进制转十进制细节：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?t=470&amp;p=64" >https://www.bilibili.com/video/BV1Kb411W75N?t=470&amp;p=64</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>计算机底层使用<strong>补码</strong>的方式存储数据</p>        <h3 id="基本数据类型使用示例"   >          <a href="#基本数据类型使用示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本数据类型使用示例"></a> 基本数据类型使用示例</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)</span></span><br><span class="line">        <span class="comment">//① byte范围：-128 ~ 127</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">byte</span> b2 = -<span class="number">128</span>;</span><br><span class="line">        <span class="comment">//b2 = 128;//编译不通过</span></span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">        <span class="comment">// ② 声明long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾</span></span><br><span class="line">        <span class="comment">// ③ 通常，定义整型变量时，使用int型。</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">1234</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">3414234324L</span>;</span><br><span class="line">        System.out.println(l1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 浮点型：float(4字节) \ double(8字节)</span></span><br><span class="line">        <span class="comment">//① 浮点型，表示带小数点的数值</span></span><br><span class="line">        <span class="comment">//② float表示数值的范围比long还大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">123.3</span>;</span><br><span class="line">        System.out.println(d1 + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//③ 定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</span></span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        <span class="comment">//④ 通常，定义浮点型变量时，使用double型。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 字符型：char （1字符=2字节)</span></span><br><span class="line">        <span class="comment">//① 定义char型变量，通常使用一对&#x27;&#x27;,内部只能写一个字符</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="comment">//c1 = &#x27;AB&#x27;;</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">&#x27;ス&#x27;</span>;</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</span></span><br><span class="line">        <span class="keyword">char</span> c5 = <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//换行符</span></span><br><span class="line">        c5 = <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//制表符</span></span><br><span class="line">        System.out.print(<span class="string">&quot;hello&quot;</span> + c5);</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c6 = <span class="string">&#x27;\u0043&#x27;</span>;</span><br><span class="line">        System.out.println(c6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.布尔型：boolean</span></span><br><span class="line">        <span class="comment">//① 只能取两个值之一：true 、 false</span></span><br><span class="line">        <span class="comment">//② 常常在条件判断、循环结构中使用</span></span><br><span class="line">        <span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(bb1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2>              <h3 id="数组默认初始值"   >          <a href="#数组默认初始值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组默认初始值"></a> 数组默认初始值</h3>      <ul><li><code>int[]</code>类型：0</li><li><code>double[]</code>类型：0.0</li><li><code>String[]</code>类型：null</li></ul>        <h3 id="数组元素的默认初始化值"   >          <a href="#数组元素的默认初始化值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组元素的默认初始化值"></a> 数组元素的默认初始化值</h3>      <p>针对于初始化方式一：比如：<code>int[][] arr = new int[4][3];</code></p><ul><li>外层元素的初始化值为：地址值</li><li>内层元素的初始化值为：与一维数组初始化情况相同</li></ul><p>针对于初始化方式二：比如：<code>int[][] arr = new int[4][];</code></p><ul><li>外层元素的初始化值为：null</li><li>内层元素的初始化值为：不能调用，否则报错。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">//[I@15db9742 </span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        System.out.println(arr);<span class="comment">//[[I@6d06d69c</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line">        <span class="keyword">float</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);<span class="comment">//地址值</span></span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//0.0</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[][] arr2 = <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);<span class="comment">//地址值</span></span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span>[][] arr3 = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>][];</span><br><span class="line">        System.out.println(arr3[<span class="number">1</span>]);<span class="comment">//null</span></span><br><span class="line">        <span class="comment">//System.out.println(arr3[1][0]);//报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数组的内存解析"   >          <a href="#数组的内存解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组的内存解析"></a> 数组的内存解析</h3>      <ol><li>一维数组</li></ol><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=152" >https://www.bilibili.com/video/BV1Kb411W75N?p=152</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210710163256394.png" alt="image-20210710163256394" /></p><ol start="2"><li>二维数组</li></ol><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=153" >https://www.bilibili.com/video/BV1Kb411W75N?p=153</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210710164551679.png" alt="image-20210710164551679" /></p>        <h3 id="注意点"   >          <a href="#注意点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意点"></a> 注意点</h3>      <p><code>System.out.println</code>对<code>char[]</code>数组的重载方法是<strong>打印其内容</strong>，其他类型数组<strong>打印的是地址值</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(arr); <span class="comment">// 地址值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;;</span><br><span class="line">System.out.println(arr1); <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="包装类"   >          <a href="#包装类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#包装类"></a> 包装类</h2>      <p>基本数据类型、包装类和String类间的转化：</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711100436651.png" alt="image-20210711100436651" /></p>        <h3 id="面试题"   >          <a href="#面试题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#面试题"></a> 面试题</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterviewTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o1);<span class="comment">// 1.0 因为三元运算符在编译期间就会将 : 左右的类型进行统一，即将int类型提升为double类型的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object o2;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line">o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">System.out.println(o2); <span class="comment">// 1 这里不需要同一类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span></span><br><span class="line"><span class="comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line"><span class="comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span></span><br><span class="line"></span><br><span class="line">Integer m = <span class="number">1</span>;</span><br><span class="line">Integer n = <span class="number">1</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer x = <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line">Integer y = <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>Integer</code>内部定义了<strong>IntegerCache</strong>子类，其在<code>static</code>代码块中，随着<code>Integer</code>类的加载而加载，<code>IntegerCache</code>中定义了<code>Integer[]</code>数组，保存了从**-128~127**范围的整数。如果我们使用自动装箱的方式，给<code>Integer</code>赋值的范围在<code>-128~127</code>范围内时，可以直接从该<code>Integer[]</code>数组中获取相应的<code>Integer</code>对象，不用再去new了，因此两次获取到的对象相等。目的：提高效率。</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711101552184.png" alt="image-20210711101552184" /></p>        <h2 id="面向对象"   >          <a href="#面向对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h2>              <h3 id="理解-万事万物皆对象"   >          <a href="#理解-万事万物皆对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#理解-万事万物皆对象"></a> 理解 “万事万物皆对象”</h3>      <ul><li>在Java语言范畴中，我们将功能、结构等封装到类中，通过类的实例，来调用具体的功能结构。<ul><li>Scanner、String等</li><li>文件File等</li></ul></li><li>涉及到Java语言与前端html、后端的数据库交互时，前后端的结构在Java层次交互时，都体现为类、对象</li></ul>        <h3 id="方法参数的值传递机制"   >          <a href="#方法参数的值传递机制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方法参数的值传递机制"></a> 方法参数的值传递机制</h3>      <ul><li>如果变量是<strong>基本</strong>数据类型，此时赋值的是变量所保存的<strong>数据值</strong>。</li><li>如果变量是<strong>引用</strong>数据类型，此时赋值的是变量所保存的数据的<strong>地址值</strong>。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueTransferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********基本数据类型：****************&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = m;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********引用数据类型：****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Order o1 = <span class="keyword">new</span> Order();</span><br><span class="line">        o1.orderId = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">        Order o2 = o1;<span class="comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId); <span class="comment">// 都是1001</span></span><br><span class="line"></span><br><span class="line">        o2.orderId = <span class="number">1002</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId); <span class="comment">// 都是1002</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B61.png" alt="方法参数传递机制1" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B62.png" alt="方法参数传递机制2" /></p>        <h3 id="对象的内存解析"   >          <a href="#对象的内存解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象的内存解析"></a> 对象的内存解析</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.png" alt="对象的内存解析" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.png" alt="对象数组的内存解析" /></p>        <h3 id="封装性"   >          <a href="#封装性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#封装性"></a> 封装性</h3>      <p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗地讲，<strong>把该隐藏的隐藏起来，该暴露的暴露出来，这就是封装性的设计思想</strong></p><p>程序设计追求“高内聚，低耦合”：</p><ul><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合 ：仅对外暴露少量的方法用于使用 。</li></ul><p>封装性解决结构的可见性问题。其体现在：</p><ul><li>将属性私有化（<code>private</code>），避免外界用户通过“对象.属性”的方式获取对象的属性值，提供公共的（<code>public</code>）方法获取（<code>getXxx</code>）和设置（<code>setXxx</code>）该属性的值</li><li>不对外暴露私有方法</li><li>单例模式</li></ul><p>四种权限修饰符：</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210710200928296.png" alt="image-20210710200928296" /></p>        <h3 id="继承性"   >          <a href="#继承性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#继承性"></a> 继承性</h3>      <p>继承性：子类可以继承父类的方法和属性（Java只能单继承，但可以实现多个接口）。继承性的优点：</p><ul><li>减少了代码的冗余，提高代码的复用性</li><li>便于功能的扩展</li><li>为多态性提供了前提</li></ul><p>继承性的体现：一旦子类A继承父类B后，子类A就获取了父类B中声明的<strong>所有</strong>属性和方法。<strong>特别的，父类中声明为private的属性或方法，子类继承后，仍然能够拥有。只是因为封装性的影响（封装性将私有属性隐藏起来，不允许其他对象访问），使得子类不能直接调用父类的这些private属性和方法。（只拥有，却不能访问）</strong></p><p>继承的特点：</p><ul><li>一个类可以被多个子类继承。</li><li>Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</li></ul>        <h3 id="重写overrideoverwrite"   >          <a href="#重写overrideoverwrite" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#重写overrideoverwrite"></a> 重写（override/overwrite）</h3>      <p>定义：在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的<strong>重置</strong>、<strong>覆盖</strong>。在程序执行时，子类的方法将覆盖父类的方法。</p><p>要求：</p><ul><li>子类重写的方法必须和父类被重写的方法<strong>具有相同的方法名称</strong>、<strong>参数列表</strong></li><li>子类重写的方法的<strong>返回值类型不能大于</strong>父类被重写的方法的返回值类型：<ul><li>父类的方法返回类型是<strong>引用类型</strong>A，子类重写的方法返回值类型可以是A类或者A的子类</li><li>‌若父类返回的是<strong>基本类型</strong>，子类重写的方法返回值类型必须是<strong>同样的基本类型</strong></li></ul></li><li>子类重写的方法使用的<strong>访问权限不能小于</strong>父类被重写的方法的访问权限<ul><li><strong>子类不能重写父类中声明为private权限的方法</strong></li></ul></li><li>子类方法抛出的异常不能大于父类被重写方法的异常：即子类不能抛出父类所抛出异常的父类异常，因为这不符合继承性和多态性。必须抛出父类所抛出异常的子类异常。</li><li>‌父类<strong>static</strong>修饰的方法子类<strong>不能重写（但可以访问）</strong></li><li>父类<strong>static</strong>修饰的同名方法子类也必须<strong>static</strong>修饰</li></ul>        <h3 id="super关键字"   >          <a href="#super关键字" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#super关键字"></a> super关键字</h3>      <p>我们可以在子类的方法或构造器中。通过使用<code>&quot;super.属性&quot;</code>或<code>&quot;super.方法&quot;</code>的方式，显式地调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略<code>&quot;super.&quot;</code>。特殊情况：</p><ul><li>当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用<code>&quot;super.属性&quot;</code>的方式，表明调用的是父类中声明的属性。</li><li>当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用&quot;super.方法&quot;的方式，表明调用的是父类中被重写的方法。</li></ul><p>我们可以在子类的构造器中显式的使用<code>&quot;super(形参列表)&quot;</code>的方式，调用父类中声明的指定的构造器<code>&quot;super(形参列表)&quot;</code>的使用，但必须声明在子类构造器的<strong>首行</strong>。</p><p>在类的构造器中，针对于<code>&quot;this(形参列表)&quot;</code>或&quot;<code>super(形参列表)&quot;</code>只能二选一，不能同时出现在构造器的首行。没有显式声明<code>&quot;this(形参列表)&quot;</code>或<code>&quot;super(形参列表)&quot;</code>，则默认调用的是父类中空参的构造器：<code>super()</code>在类的多个构造器中，至少有一个类的构造器中使用了<code>&quot;super(形参列表)&quot;</code>，调用父类中的构造器。</p><p><strong>super.()可以忽略不写，缺省情况下调用父类的无参构造器</strong></p>        <h3 id="子类对象实例化的全过程"   >          <a href="#子类对象实例化的全过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#子类对象实例化的全过程"></a> 子类对象实例化的全过程</h3>      <p>从结果上来看：（继承性）</p><ul><li>子类继承父类以后，就获取了父类中声明的全部属性或方法（包括私有）。</li><li>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</li></ul><p>从过程上来看：</p><ul><li>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接地调用其父类的构造器，进而调用父类的父类的构造器，…</li><li>直到调用了<code>java.lang.Object</code>类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。</li></ul><p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711094253729.png" alt="image-20210711094253729" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711094328686.png" alt="image-20210711094328686" /></p>        <h3 id="static关键字"   >          <a href="#static关键字" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#static关键字"></a> static关键字</h3>      <p>static可以用来修饰属性、方法、代码块、内部类。static关键字修饰的属性所有对象共享一份数据，修饰的方法可以直接使用类.方法名()的方式使用，其不依赖于类对象，随着类的加载而加载，无需创建类对象即可使用。因为不需要实例就可以访问static方法，<strong>因此static方法内部不能有this</strong>。(也不能有super )</p><p>被修饰后的成员具备以下特点：</p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>修饰的成员，被所有对象所共享</li><li>访问权限允许时，可不创建对象，直接被类调用</li><li>static修饰的方法不能被重写</li></ul><p>类变量 vs 实例变量内存解析：</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711103801256.png" alt="image-20210711103801256" /></p>        <h3 id="main方法"   >          <a href="#main方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#main方法"></a> main()方法</h3>      <p>由于Java虚拟机需要调用类的<code>main()</code>方法，所以该方法的访问权限必须是<code>public</code>，又因为Java虚拟机在执行<code>main()</code>方法时不必创建对象，所以该方法必须是<code>static</code>的，该方法接收一个<code>String</code>类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。</p><p>又因为<code>main()</code>方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</p>        <h3 id="代码块"   >          <a href="#代码块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3>      <p>代码块(或初始化块)的作用： 对Java类或对象进行初始化</p><p>代码块(或初始化块)的分类：</p><ul><li>一个类中代码块若有修饰符，则只能被static修饰，称为静态代码块 (static block)，没有使用static修饰的，为非静态代码块。</li><li>static代码块通常用于初始化static的属性</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> total; </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        total = <span class="number">100</span>; <span class="comment">//为total赋初值 </span></span><br><span class="line">    &#125; </span><br><span class="line">    …… <span class="comment">//其它属性或方法声明 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>静态代码块：用static修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li><li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li><li>静态代码块的执行要<strong>先于非静态代码块</strong>。</li><li>静态代码块随着类的加载而加载，且只执行一次。</li></ol><p>**非静态代码块：没有static修饰的代码块 **</p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>除了调用非静态的结构外，还可以调用静态的变量或方法。</li><li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li><li>每次创建对象的时候，都会执行一次。<strong>且先于构造器执行</strong>。</li></ol><p>程序中成员变量赋值的执行顺序：</p><ol><li>默认初始化（类加载到虚拟机中就会先为每个属性值赋初始值</li><li>显式初始化（<code>int i = 3</code>) 或 在代码块中赋值（<code>&#123; i = 3&#125;</code>）。此时的顺序看二者谁先写谁后写</li><li>在构造器中初始化</li><li>有了对象后，通过&quot;对象.属性&quot;等方法赋值</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711104038949.png" alt="image-20210711104038949" /></p>        <h3 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多态"></a> 多态</h3>      <p>对象的多态性：父类的引用指向子类的对象，可以直接应用在抽象类和接口上。</p><p>Java引用变量有两个类型：<strong>编译时类型</strong>和<strong>运行时类型</strong>。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。简称：<strong>编译时，看左边；运行时，看右边</strong>。若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)。多态情况下：</p><ul><li>“看左边” ：看的是父类的引用（父类中不具备子类特有的方法和属性）</li><li>“看右边” ：看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul><p><strong>属性不遵循多态性</strong>，直接<code>对象.属性</code>得到的是父类里的属性值，无法获得子类的属性值。</p><p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就<strong>不能再访问子类中独有的属性和方法，只能访问父类的属性和方法</strong>。若仍想使用子类独有的属性和方法，则需要<strong>向下转型</strong>。</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711141054224.png" alt="image-20210711141054224" /></p><p><strong>内存空间分析</strong>：如下代码中，在<code>new Student()</code> 时，会在堆空间中创建出该对象的<strong>所有属性和方法</strong>，在栈空间中创建一个<code>Person</code>类型的引用变量，存储堆中<code>Student</code>对象的地址值。之后可以通过<code>p.方法()</code>的方式获取到<code>Student</code>类所<strong>重写</strong>的方法，但却无法访问到<code>Student</code>所<strong>独有的属性和方法</strong>（这些属性虽然已经加载在了堆空间中，但却无法被p对象所访问，因为编译时期编译器判断p对象所属的Person类并没有这些属性和方法，因此编译不通过），只有使用<strong>向下转型</strong>后p对象才能访问到这些独有的属性。<strong>p对象可以获取到Person类拥有的属性值</strong>。</p><p><strong>关键原因还在于编译器在编译时期判断当前对象p是否有这些属性和方法，有的就可以调用，没有的就不能调用（只能使用向下转型后变成子类类型对象，编译器才能通过）。</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></div></figure>        <h4 id="虚拟方法调用"   >          <a href="#虚拟方法调用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#虚拟方法调用"></a> 虚拟方法调用</h4>      <p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法（类比C++中的虚函数）。简单理解：编译时使用该方法是虚拟的，运行时还是调用子类的方法。</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711141318323.png" alt="image-20210711141318323" /></p>        <h4 id="对象类型转换"   >          <a href="#对象类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象类型转换"></a> 对象类型转换</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711143413130.png" alt="image-20210711143413130" /></p>        <h4 id="向上转型"   >          <a href="#向上转型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#向上转型"></a> 向上转型</h4>      <p>向上转型：多态的体现。将指向子类的父类引用对象向上转型为指向父类，该过程可以自动进行，就如同小的基本数据类型可以自动转换为大的数据类型，没有任何问题。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">Person p1 = (Person) p; <span class="comment">// 向上转型没有问题 可以忽略(Person)不写</span></span><br><span class="line"><span class="comment">// 或 Person p1 = p;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="向下转型"   >          <a href="#向下转型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#向下转型"></a> 向下转型</h4>      <p>向下转型：父类引用类型对象原本无法使用所指向的子类独有的属性和方法，若想使用，则需要q强制类型转换。即从父类引用类型对象转换为子类引用类型对象（无继承关系的引用类型间的转换是非法的，在转型前可以使用<code>instanceof</code>操作符测试一个对象的类型是否有继承关系）。就如同大的基本数据类型向小的基本数据类型转换需要使用强制类型转换。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">Student s = (Student) p; <span class="comment">// 向下转型：强制转换为子类引用类型对象</span></span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711141608212.png" alt="image-20210711141608212" /></p>        <h4 id="重写与重载的区别"   >          <a href="#重写与重载的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#重写与重载的区别"></a> 重写与重载的区别</h4>      <p>从编译和运行的角度看： 重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。<strong>它们的调用地址在编译期就绑定了</strong>。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<strong>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”</strong>；</p><p>而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为 <strong>“晚绑定”或“动态绑定”</strong>。</p><blockquote><p>Bruce Eckel：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p></blockquote>        <h4 id="谈谈你对多态性的理解"   >          <a href="#谈谈你对多态性的理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#谈谈你对多态性的理解"></a> 谈谈你对多态性的理解？</h4>      <ul><li>实现代码的<strong>通用性</strong>。</li><li><code>Object</code>类中定义的<code>public boolean equals(Object obj)&#123; &#125;</code></li><li>JDBC：使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</li><li>抽象类、接口的使用体现了多态性。（因为抽象类、接口不能实例化，需要通过多态性创建指向子类的对象）</li></ul>        <h4 id="多态性小结"   >          <a href="#多态性小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多态性小结"></a> 多态性小结</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210711142448188.png" alt="image-20210711142448188" /></p>        <h4 id="多态性练习"   >          <a href="#多态性练习" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多态性练习"></a> 多态性练习</h4>      <p>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法， 系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边</p><p>对于属性变量则不存在这样的现象，即使子类里定义了与父类完全相同的属性变量，这个属性变量依然不可能覆盖父类中定义的属性变量：编译运行都看左边</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sub s = <span class="keyword">new</span> Sub();</span><br><span class="line">        System.out.println(s.count);<span class="comment">//20</span></span><br><span class="line">        s.display();<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        Base b = s;<span class="comment">//多态性</span></span><br><span class="line">        <span class="comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span></span><br><span class="line">        System.out.println(b == s);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b.count);<span class="comment">//10</span></span><br><span class="line">        b.display();<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="与-equals"   >          <a href="#与-equals" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#与-equals"></a> == 与 equals()</h2>              <h3 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#运算符"></a> == 运算符</h3>      <p>== ：运算符。可以使用在基本数据类型变量和引用数据类型变量中。</p><ul><li>如果比较的是<strong>基本</strong>数据类型变量：比较两个变量保存的<strong>数据是否相等</strong>。（不一定类型要相同，int和double类型的变量也能比较）</li><li>如果比较的是<strong>引用</strong>数据类型变量：比较两个对象的<strong>地址值是否相同</strong>。即两个引用是否指向同一个对象实体</li></ul><p>补充： == 符号使用时，必须保证符号左右两边的变量类型一致。</p>        <h3 id="equals"   >          <a href="#equals" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#equals"></a> equals()</h3>      <p>equals()方法的使用：</p><ul><li>是一个<strong>方法</strong>，而<strong>非运算符</strong></li><li>只能适用于<strong>引用数据类型</strong></li><li><code>Object</code>类中<code>equals()</code>的定义：</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>说明：<code>Object</code>类中定义的<code>equals()</code>和<code>==</code>的作用是相同的：比较两个对象的地址值是否相同。即两个引用是否指向同一个对象实体</p><p>像<code>String</code>、<code>Date</code>、<code>File</code>、包装类等都<strong>重写</strong>了<code>Object</code>类中的<code>equals()</code>方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的&quot;实体内容&quot;是否相同。</p><p>通常情况下，我们自定义的类如果使用<code>equals()</code>的话，也通常是比较两个对象的&quot;实体内容&quot;是否相同。那么，我们就需要对<code>Object</code>类中的<code>equals()</code>进行重写。重写的原则：比较两个对象的实体内容是否相同。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10.0</span>;</span><br><span class="line">System.out.println(i == j);<span class="comment">//true</span></span><br><span class="line">System.out.println(i == d);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//System.out.println(i == b);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">10</span>;</span><br><span class="line">System.out.println(i == c);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="number">65</span>;</span><br><span class="line">System.out.println(c1 == c2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用类型：</span></span><br><span class="line">Customer cust1 = <span class="keyword">new</span> Customer(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">Customer cust2 = <span class="keyword">new</span> Customer(<span class="string">&quot;Tom&quot;</span>,<span class="number">21</span>);</span><br><span class="line">System.out.println(cust1 == cust2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">System.out.println(str1 == str2);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;****************************&quot;</span>);</span><br><span class="line">System.out.println(cust1.equals(cust2));<span class="comment">//false---&gt;true</span></span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Date date1 = <span class="keyword">new</span> Date(<span class="number">32432525324L</span>);</span><br><span class="line">Date date2 = <span class="keyword">new</span> Date(<span class="number">32432525324L</span>);</span><br><span class="line">System.out.println(date1.equals(date2));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210712180142189.png" alt="image-20210712180142189" /></p>        <h2 id="final"   >          <a href="#final" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#final"></a> final</h2>      <p>final 可以用来修饰：类、方法、变量。</p><ul><li>final 用来修饰<strong>类</strong>：此类<strong>不能被其他类所继承</strong>。比如：<code>String</code>类、<code>System</code>类、<code>StringBuffer</code>类</li><li>final 用来修饰<strong>方法</strong>：表明此方法<strong>不可以被重写</strong>。比如：<code>Object</code>类中<code>getClass()</code>;</li><li>final 用来修饰<strong>变量</strong>：此时的&quot;变量&quot;就称为是一个<strong>常量</strong><ul><li>final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</li><li>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。<strong>一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值</strong>。</li></ul></li></ul><p><strong>static final 用来修饰的属性：全局常量</strong></p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210713132535979.png" alt="image-20210713132535979" /></p>        <h2 id="abstract"   >          <a href="#abstract" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#abstract"></a> abstract</h2>      <p>可以用来修饰：类、方法。</p><p><code>abstract</code>修饰类：抽象类</p><ul><li><strong>此类不能实例化</strong></li><li><strong>抽象类中一定有构造器，便于子类实例化时调用</strong>（涉及：子类对象实例化的全过程）</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;  抽象的使用前提：继承性</li></ul><p><code>abstract</code>修饰方法：抽象方法</p><ul><li>抽象方法只有方法的声明，没方法体</li><li>包含抽象方法的类，一定是一个抽象类。反之，<strong>抽象类中可以没有抽象方法的</strong>。</li><li>若子类重写了父类中的所的抽象方法后，此子类方可实例化</li><li>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用<code>abstract</code>修饰</li></ul><p>注意点：</p><ul><li>abstract不能用来修饰：属性、构造器等结构</li><li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li></ul>        <h2 id="interface"   >          <a href="#interface" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#interface"></a> interface</h2>      <p><strong>Java中，接口和类是并列的两个结构</strong>。接口中不能定义构造器的！意味着<strong>接口不可以实例化</strong>。</p><p>如何定义接口：定义接口中的成员，<strong>JDK7及以前：只能定义全局常量和抽象方法。JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法。</strong></p><ul><li>全局常量：<code>public static final</code>的。书写时，可以省略不写</li><li>抽象方法：<code>public abstract</code>的</li></ul><p>Java开发中，接口通过让类去实现(<strong>implements</strong>)的方式来使用。</p><ul><li>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</li><li>如果实现类没覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</li></ul><p>Java类<strong>可以实现多个接口</strong>—&gt; 弥补了Java单继承性的局限性。格式：<code>class AA extends BB implements CC,DD,EE</code></p><p>接口与接口之间可以继承，而且可以多继承。接口的具体使用，体现多态性。接口，实际上可以看做是一种<strong>规范</strong>。</p>        <h3 id="java8中关于接口的新规范"   >          <a href="#java8中关于接口的新规范" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java8中关于接口的新规范"></a> Java8中关于接口的新规范</h3>      <ul><li>知识点1：接口中定义的静态方法，只能通过接口来调用。</li><li>知识点2：通过实现类的对象，可以调用接口中的默认方法。如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法。</li><li>知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt; <strong>类优先原则</strong></li><li>知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt; <strong>接口冲突</strong>。这就需要我们必须在实现类中重写此方法。</li><li>知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</li></ul>        <h3 id="抽象类和接口的异同"   >          <a href="#抽象类和接口的异同" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#抽象类和接口的异同"></a> 抽象类和接口的异同</h3>      <ul><li>相同点：都不能实例化；都可以包含抽象方法的。</li><li>不同点：<ul><li>把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明</li><li>抽象类里可以没有抽象方法，但接口里都是抽象方法（Java 8之后可以定义默认方法）</li><li>抽象类中必须定义构造器，接口中不能定义构造器</li><li>类：单继承性，接口：多继承</li><li>类与接口：多实现</li></ul></li></ul>        <h2 id="异常"   >          <a href="#异常" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常"></a> 异常</h2>      <p><strong>运行时异常</strong>：</p><ul><li>是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。<code>java.lang.RuntimeException</code>类及它的子类都是运行时异常。</li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li></ul><p><strong>编译时异常</strong>：</p><ul><li>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。</li><li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li></ul>        <h3 id="常见异常"   >          <a href="#常见异常" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#常见异常"></a> 常见异常</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210712202713944.png" alt="image-20210712202713944" /></p><p>编译时异常：执行<code>javac.exe</code>命名时，可能出现的异常</p><p>运行时异常：执行<code>java.exe</code>命名时，出现的异常</p><p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210712203924066.png" alt="image-20210712203924066" /></p>        <h3 id="异常体系结构"   >          <a href="#异常体系结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常体系结构"></a> 异常体系结构</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210712203715919.png" alt="image-20210712203715919" /></p>        <h3 id="异常总结"   >          <a href="#异常总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#异常总结"></a> 异常总结</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20210712203002466.png" alt="image-20210712203002466" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo</title>
      <link href="2021/02/03/%E3%80%90Hexo%E3%80%91Hexo/"/>
      <url>2021/02/03/%E3%80%90Hexo%E3%80%91Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="quick-start"   >          <a href="#quick-start" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>              <h3 id="create-a-new-post"   >          <a href="#create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="run-server"   >          <a href="#run-server" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="generate-static-files"   >          <a href="#generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="deploy-to-remote-sites"   >          <a href="#deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
