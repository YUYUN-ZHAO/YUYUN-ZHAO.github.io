<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++实现ping功能</title>
      <link href="2021/03/12/C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/"/>
      <url>2021/03/12/C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[        <h2 id="目的"   >          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#目的"></a> 目的</h2>      <p>使用C++实现ping功能，用于在进行TCP/IP通讯前测试是否能与目标主机通讯。</p>        <h2 id="原理"   >          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2>      <p>ping 命令是基于ICMP 协议来工作的，「ICMP」全称为Internet 控制报文协议( Internet Control Message Protocol)。基于ICMP协议向目标IP发送ICMP响应请求报文，目标主机收到这个报文之后，会向源IP回复一个ICMP响应应答报文。</p>        <h2 id="c实现"   >          <a href="#c实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c实现"></a> C++实现</h2>      <p>构建ICMPPing类实现上述功能。</p><ul><li>icmp_ping.h：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ICMPPING_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMPPING_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iphlpapi.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Iphlpapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICMPPing</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ICMPCREATEFILE)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ICMPCLOSEHANDLE)</span><span class="params">(HANDLE)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ICMPSENDECHO)</span><span class="params">(HANDLE, DWORD, LPVOID, WORD, PIP_OPTION_INFORMATION, LPVOID, DWORD, DWORD)</span></span>;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICMPPing();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~ICMPPing() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ICMPPing* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init ICMP function, return true for success, or for error</span></span><br><span class="line"><span class="function">BOOL <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ping host, return true for connect success, or for timeout</span></span><br><span class="line"><span class="function">BOOL <span class="title">Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> ICMPPing* icmp_ping_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pointer of function</span></span><br><span class="line">ICMPCREATEFILE pIcmpCreateFile_;</span><br><span class="line">ICMPCLOSEHANDLE pIcmpCloseHandle_;</span><br><span class="line">ICMPSENDECHO pIcmpSendEcho_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></div></figure><span id="more"></span><ul><li>icmp_ping.cpp：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ICMPPing* ICMPPing::icmp_ping_ = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ICMPPing::ICMPPing()</span><br><span class="line">    : pIcmpCreateFile_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpCloseHandle_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpSendEcho_(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ICMPPing* <span class="title">ICMPPing::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (icmp_ping_ == <span class="literal">NULL</span>)</span><br><span class="line">        icmp_ping_ = <span class="keyword">new</span> ICMPPing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> icmp_ping_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HINSTANCE hIcmp = LoadLibrary(<span class="string">&quot;ICMP.DLL&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hIcmp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pIcmpCreateFile_ = (ICMPCREATEFILE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCreateFile&quot;</span>);</span><br><span class="line">    pIcmpCloseHandle_ = (ICMPCLOSEHANDLE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCloseHandle&quot;</span>);</span><br><span class="line">    pIcmpSendEcho_ = (ICMPSENDECHO)GetProcAddress(hIcmp, <span class="string">&quot;IcmpSendEcho&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((pIcmpCreateFile_ == <span class="literal">NULL</span>) || (pIcmpCloseHandle_ == <span class="literal">NULL</span>) || (pIcmpSendEcho_ == <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD timeOut = <span class="number">1000</span>;  </span><br><span class="line">    ULONG hAddr = inet_addr(host);  </span><br><span class="line">    <span class="keyword">if</span> (hAddr == INADDR_NONE)</span><br><span class="line">    &#123;</span><br><span class="line">        hostent* hp = gethostbyname(host);   </span><br><span class="line">        <span class="keyword">if</span> (hp)</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;hAddr, hp-&gt;h_addr_list, hp-&gt;h_length); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HANDLE hIp = pIcmpCreateFile_();</span><br><span class="line">    IP_OPTION_INFORMATION ipoi;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;ipoi, <span class="number">0</span>, <span class="keyword">sizeof</span>(IP_OPTION_INFORMATION));</span><br><span class="line">    ipoi.Ttl = <span class="number">128</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pSend[<span class="number">36</span>];  </span><br><span class="line">    <span class="built_in">memset</span>(pSend, <span class="string">&#x27;E&#x27;</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> repSize = <span class="keyword">sizeof</span>(ICMP_ECHO_REPLY) + <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pReply[<span class="number">100</span>]; </span><br><span class="line">    ICMP_ECHO_REPLY* pEchoReply = (ICMP_ECHO_REPLY*)pReply;</span><br><span class="line"></span><br><span class="line">    DWORD nPackets = pIcmpSendEcho_(hIp, hAddr, pSend, <span class="number">32</span>, &amp;ipoi, pReply, repSize, timeOut);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEchoReply-&gt;Status != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pIcmpCloseHandle_(hIp);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pIcmpCloseHandle_(hIp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>该类使用单例模式，在主程序中使用时，通过调用<code>GetInstance()</code>函数返回类指针对象；之后通过<code>Init()</code>函数进行初始化，并判断返回值是否为false；最后调用<code>Ping()</code>函数验证是否能和目标主机进行通讯。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ICMPPing* icmp_ping = ICMPPing::GetInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!icmp_ping-&gt;Init())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;init error!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icmp_ping-&gt;Ping(<span class="string">&quot;192.168.0.12&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping success!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping fail!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="注意"   >          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2>      <p>若该类同时与其他包含有&lt;Windows.h&gt;的文件放在同一项目下编译时，会报重定义的错误，这是因为&lt;Windows.h&gt;中包含了&lt;Winsock.h&gt;头文件，而本类包含了&lt;Winsock2.h&gt;文件，因此会有重定义。解决方案：</p><p>在项目属性  ——&gt;  C/C++  ———&gt;  预处理器  -------&gt; 预处理器定义</p><p>增加如下定义</p><p><code>WIN32_LEAN_AND_MEAN</code></p>        <h2 id="致谢"   >          <a href="#致谢" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#致谢"></a> 致谢</h2>      <p>代码参考自http://www.cnblogs.com/guoyz1314/p/3527340.html</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV读取摄像头数据</title>
      <link href="2021/03/10/OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>通过cv::VideoCapture类读取外接设备视频流（摄像头或外接读卡器获取到的视频流）</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!capture.isOpened())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;could not open camera...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cv::namedWindow(<span class="string">&quot;capture&quot;</span>, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">cv::Mat frame;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!capture.read(frame)) </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    cv::imshow(<span class="string">&quot;capture&quot;</span>, frame);</span><br><span class="line">    <span class="keyword">char</span> c = waitKey(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="number">49</span>) &#123;</span><br><span class="line">    index = c - <span class="number">49</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">27</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capture.release();</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Qt显示OpenCV的Mat数据</title>
      <link href="2021/03/10/%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="读取图片"   >          <a href="#读取图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#读取图片"></a> 读取图片</h2>      <p>使用<code>QFileDialog::getOpenFileName</code>函数获取文件名：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br></pre></td></tr></table></div></figure><p>使用<code>cv::imread</code>函数读取图片：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> xxxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="cvmat转换为qimage"   >          <a href="#cvmat转换为qimage" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cvmat转换为qimage"></a> cv::Mat转换为QImage</h2>      <p>将<code>cv::Mat</code>类对象转换为<code>QImage</code>类对象。注意事项：</p><ol><li><p>cv::Mat类通道顺序为BGR，QImgae类为RGB，因此需要先使用<code>cv::cvtColor</code>做色彩转换。</p></li><li><p>需要判断Mat对象的通道数，单通道和三通道处理方式略有不同：</p></li></ol><ul><li>三通道RGB图片：<code>QImage::Format_RGB888</code></li><li>单通道图片：<code>QImage::Format_Indexed8</code></li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat rgbMat;</span><br><span class="line">QImage img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="qlabel显示图片"   >          <a href="#qlabel显示图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#qlabel显示图片"></a> QLabel显示图片</h2>      <p>在Qt Designer中创建一个<code>QLabel</code>类对象img_label，并根据需求设置其长宽大小，最后通过<code>setPixmap</code>函数设置QImage数据。</p><p>调整图片大小时有两种设置方式：</p><ul><li>图片尺寸调整到QLabel实际尺寸：<code>setScaledContents(true)</code></li><li>QLabel尺寸调整到图片实际尺寸：resize()</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br></pre></td></tr></table></div></figure>        <h2 id="完整代码"   >          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br><span class="line"></span><br><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat rgbMat;</span><br><span class="line">    QImage img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
          <category> C++ </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VTK8.2.0 + VS2019 + Win10 编译与配置</title>
      <link href="2021/03/02/VTK%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/02/VTK%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="vtk编译与配置"   >          <a href="#vtk编译与配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#vtk编译与配置"></a> VTK编译与配置</h2>      <ul><li>系统平台</li></ul><p>Windows10 x64位系统</p><ul><li>所需工具：</li></ul><p>VS2019 + CMAKE 3.14.4 + QT 5.12.4（要勾选：QtWebEngine和QtScript）</p>    <div class="note-plugin success">      <span class="note-plugin__icon note-plugin__icon--success">              <i class="fas fa-check-circle"></i>            </span>      <p><strong>Success</strong><br />This is success note.</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> VTK </category>
          
          <category> C++ </category>
          
          <category> CMake </category>
          
          <category> Third-party libraries </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> VTK </tag>
            
            <tag> CMake </tag>
            
            <tag> Third-party libraries </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络原理</title>
      <link href="2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本文将简要介绍计算机网络的基础知识，以及数据在两台主机间传输的大概过程</p>        <h2 id="计算机网络分层结构"   >          <a href="#计算机网络分层结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#计算机网络分层结构"></a> 计算机网络分层结构</h2>      <ul><li>OSI参考模型：7层</li><li>TCP/IP参考模型：4层</li></ul><p>一台主机的每一张网卡都拥有一个固定的物理地址（MAC地址）。两台主机在进行通讯时，交换机通过MAC地址确定传输目标对象，从而通过网线将数据包传输给目标主机。</p><span id="more"></span>        <h2 id="数据传输过程"   >          <a href="#数据传输过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据传输过程"></a> 数据传输过程</h2>      <p>一台主机A想与另一台主机B通讯时，需要首先知道对方的MAC地址（每张网卡有一个MAC地址），其先在缓存文件中寻找有没有这个MAC地址对应的设备，若没有，则通过ARP协议在子网内广播一个信号，判断哪台设备的ip地址是B的ip地址。目标设备B发现A要找的ip地址是自己时，就会返回给对方自己的MAC地址，并储存在交换机（不确定）中，此时A即知道了B的ip地址和MAC地址，即可进行通讯；</p>        <h2 id="测试段"   >          <a href="#测试段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#测试段"></a> 测试段</h2>      <p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><msub><mi>h</mi><mi>x</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_1^2 = sqrt(h_x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><hr /><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix} a &amp; b \\ c &amp; d \end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.424em;vertical-align:-0.9500199999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.47398em;"><span style="top:-1.65598em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26198em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.86798em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47398em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500199999999999em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><code>IGT</code>代码</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>* position = m_navigationData-&gt;GetPosition();</span><br><span class="line"><span class="keyword">double</span>* orientation = m_navigationData-&gt;GetOrientation();</span><br><span class="line"><span class="keyword">double</span>* direction = m_navigationData-&gt;GetDirection(<span class="number">2</span>);</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/28/hello-world/"/>
      <url>2021/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="quick-start"   >          <a href="#quick-start" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>              <h3 id="create-a-new-post"   >          <a href="#create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="run-server"   >          <a href="#run-server" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><span id="more"></span>        <h3 id="generate-static-files"   >          <a href="#generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="deploy-to-remote-sites"   >          <a href="#deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
