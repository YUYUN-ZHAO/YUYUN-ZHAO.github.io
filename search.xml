<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【SpringBoot】SpringBoot2</title>
      <link href="2021/06/30/%E3%80%90SpringBoot%E3%80%91SpringBoot/"/>
      <url>2021/06/30/%E3%80%90SpringBoot%E3%80%91SpringBoot/</url>
      
        <content type="html"><![CDATA[        <h2 id="springboot-简介"   >          <a href="#springboot-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springboot-简介"></a> SpringBoot 简介</h2>      ]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Memo】常见问题汇总</title>
      <link href="2021/06/28/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>2021/06/28/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[        <h2 id="配置文件"   >          <a href="#配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/CoderBruis/article/details/80721841" >https://blog.csdn.net/CoderBruis/article/details/80721841</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>IDEA 的<code>properties</code>文件中默认是不会将中文转为ASCII码的。只需要在<code>File-&gt;Settings-&gt;File Encodings</code>里面设置编码的自动转变即可，如图操作：</p><p><img src="/images/%E3%80%90Memo%E3%80%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/20180617233755855" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> Memo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5源码分析</title>
      <link href="2021/06/28/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/"/>
      <url>2021/06/28/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[        <h2 id="aop原理"   >          <a href="#aop原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop原理"></a> AOP原理</h2>      <p>本质原理：为每个需要被增强的组件（带有切入点的组件）创建一个代理对象，在需要执行切入点方法时，调用代理对象的相应方法，并在其中按顺序切入通知方法。</p><p>AOP会通过Import的方式在容器中添加一个AnnotationAwareAspectJAutoProxyCreator组件，该组件本质上是一个后置处理器，它会随着其他后置处理器一起注册到容器中（在普通bean注册之前）。在普通bean实例化前，调用该组件的before方法把带有Aspect相关的切面类添加到拦截器（由增强器包装组成）集合中，之后bean实例化后，再调用after方法为带有切入点的组件（待增强的组件）创建一个代理对象，后续执行该组件的切入点方法时，则是通过执行其对应的代理对象的相应方法，同时把通知方法切入进去。</p>        <h3 id="aop简易执行流程"   >          <a href="#aop简易执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop简易执行流程"></a> AOP简易执行流程</h3>      <ul><li>配置类开启@<strong>EnableAspectJAutoProxy</strong>注解</li><li><code>@EnableAspectJAutoProxy</code>注解会注册<strong>AnnotationAwareAspectJAutoProxyCreator</strong>组件（通过<code>@Import(AspectJAutoProxyRegistrar.class)</code>的方式）。<strong>AnnotationAwareAspectJAutoProxyCreator</strong>本质上是一个后置处理器（实现了相应接口）</li><li>容器创建（<code>refresh()</code>方法栈中）：<ul><li><strong>registerBeanPostProcessors()</strong>：注册所有的后置处理器，此时创建了<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，在创建时会执行<code>invokeAwareMethods()</code>方法，回调地执行其实现的<code>setBeanFactory()</code>方法以获取容器中的<strong>BeanFactory</strong></li><li><strong>finishBeanFactoryInitialization()</strong>：注册其他普通单实例组件（非后置处理器）<ul><li>创建业务逻辑组件和切面组件</li><li><code>AnnotationAwareAspectJAutoProxyCreator</code>会拦截每个组件的创建</li><li>若拦截到的组件是切面类，则加入到增强器集合中（后被包装为拦截器）</li><li>在组件创建完后，判断组件是否需要增强，若是，==2121=</li></ul></li></ul></li><li>代理对象执行目标方法CglibAopProxy.intercept()进行拦截<ul><li>先得到目标方法的拦截器链（增强器包装成拦截器）</li><li>利用拦截器的链式机制依次进入每一个拦截器进行执行</li><li>效果：<ul><li>前置通知 -&gt; 目标方法 -&gt; 正常返回通知  -&gt; 后置通知   或</li><li>前置通知 -&gt; 目标方法 -&gt; 异常返回通知  -&gt; 后置通知</li></ul></li></ul></li></ul>        <h3 id="enableaspectjautoproxy"   >          <a href="#enableaspectjautoproxy" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#enableaspectjautoproxy"></a> @EnableAspectJAutoProxy</h3>      <p>要开启AOP自动代理，配置类中需要<strong>添加@EnableAspectJAutoProxy。整个AOP就是从@EnableAspectJAutoProxy注解开始执行的。</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigAOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将业务逻辑类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogsAspects <span class="title">logsAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogsAspects();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@EnableAspectJAutoProxy</code>注解：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630165506770.png" alt="image-20210630165506770" /></p><span id="more"></span>        <h3 id="importaspectjautoproxyregistrarclass"   >          <a href="#importaspectjautoproxyregistrarclass" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#importaspectjautoproxyregistrarclass"></a> @Import(AspectJAutoProxyRegistrar.class)</h3>      <p><code>@Import(AspectJAutoProxyRegistrar.class)</code>表明<code>@EnableAspectJAutoProxy</code>注解会向容器中注册<strong>AspectJAutoProxyRegistrar</strong>类。</p><p><code>AspectJAutoProxyRegistrar</code>类实现了<code>ImportBeanDefinitionRegistrar</code>接口的<code>registerBeanDefinitions()</code>方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630190714343.png" alt="image-20210630190714343" /></p><p>该方法使用<code>BeanDefinitionRegistry</code>类的对象<code>registry</code>给容器中注册了一个id名称为<code>internalAutoProxyCreator</code>的<code>AnnotationAwareAspectJAutoProxyCreator</code>组件（注解装配模式的AspectJ自动代理创建器）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630192408003.png" alt="image-20210630192408003" /></p><p><strong>总结</strong>：<code>@EnableAspectJAutoProxy</code>注解会向容器中注册了一个<code>AspectJAutoProxyRegistrar</code>组件，该组件会向容器中注册一个<strong>AnnotationAwareAspectJAutoProxyCreator</strong>组件，即创建了一个自动代理创建器。AOP思想的实现都是通过该组件。</p>        <h3 id="annotationawareaspectjautoproxycreator"   >          <a href="#annotationawareaspectjautoproxycreator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#annotationawareaspectjautoproxycreator"></a> AnnotationAwareAspectJAutoProxyCreator</h3>      <p>AnnotationAwareAspectJAutoProxyCreator类实现了两个接口：</p><ul><li><strong>SmartInstantiationAwareBeanPostProcessor</strong>接口：一种特殊的后置处理器，在每个普通组件<strong>创建前后</strong>（不同于普通后置处理器是在组件<strong>初始化前后</strong>）拦截并进行<mark>代理处理</mark>（它实现的接口方法为postProcessBefore<strong>Instantiation</strong>()，有区别于其他BeanPostProcessor里的postProcessBefore<strong>Initialization</strong>()）</li><li><strong>BeanFactoryAware</strong>接口：在<code>AnnotationAwareAspectJAutoProxyCreator</code>组件被注册到容器中时（组件创建时首先执行<code>invokeAwareMethods()</code>方法，此时会回调<code>BeanFactoryAware</code>的接口），获取到容器中的bean创建工厂BeanFactory</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630193143177.png" alt="image-20210630193143177" /></p><p>因此需要关心其实现的两个接口方法有什么功能。</p>        <h4 id="beanfactoryaware接口的作用"   >          <a href="#beanfactoryaware接口的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanfactoryaware接口的作用"></a> BeanFactoryAware接口的作用</h4>      <p><code>AnnotationAwareAspectJAutoProxyCreator</code>的父类<code>AspectJAwareAdvisorAutoProxyCreator</code>（上图红色框所示）重写了<code>BeanFactoryAware</code>接口的<strong>setBeanFactory()方法</strong>（<code>AnnotationAwareAspectJAutoProxyCreator</code>类本身并没有重写该方法），该方法内调用了<strong>initBeanFactory()方法</strong>（被<code>AnnotationAwareAspectJAutoProxyCreator</code>类重写）。</p><p>在<code>AnnotationAwareAspectJAutoProxyCreator</code>组件被注册到容器中时，容器会执行<strong>invokeAwareMethods()方法</strong>，这是<code>Aware</code>接口的回调方法。因为<code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>Aware</code>接口的<code>setBeanFactory</code>()方法，因此此时会执行其重写的<code>setBeanFactory()</code>方法<strong>获取bean创建工厂BeanFactory</strong>。</p>        <h4 id="smartinstantiationawarebeanpostprocessor接口的作用"   >          <a href="#smartinstantiationawarebeanpostprocessor接口的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#smartinstantiationawarebeanpostprocessor接口的作用"></a> SmartInstantiationAwareBeanPostProcessor接口的作用</h4>      <p><code>SmartInstantiationAwareBeanPostProcessor</code>接口的<code>postProcessBeforeInstantiation()</code>方法不同于其他<code>BeanPostProcessor</code>里的<code>postProcessBeforeInitialization()</code>。</p><p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口，会使得其在所有的普通单实例bean<strong>创建前后</strong>能够进行拦截，调用<code>postProcessBeforeInstantiation()</code>方法和<code>postProcessorsAfterInitialization()</code>方法对<mark>XXX</mark></p>        <h3 id="annotationawareaspectjautoproxycreator执行时机"   >          <a href="#annotationawareaspectjautoproxycreator执行时机" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#annotationawareaspectjautoproxycreator执行时机"></a> AnnotationAwareAspectJAutoProxyCreator执行时机</h3>      <p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口，它会在任何bean实例创建之前（此时还没创建对象，也就还没执行普通<code>BeanPostProcessor</code>的处理器）先尝试执行<code>postProcessBeforeInstantiation()</code>方法返回对象的<mark>212112</mark>    。</p><p>即<code>AnnotationAwareAspectJAutoProxyCreator</code>会在所有的普通单实例bean创建之前进行拦截，调用<code>postProcessBeforeInstantiation()</code>方法对<mark>XXX</mark></p>        <h3 id="aop详细执行流程"   >          <a href="#aop详细执行流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop详细执行流程"></a> AOP详细执行流程</h3>              <h4 id="1-传入配置类创建ioc容器"   >          <a href="#1-传入配置类创建ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-传入配置类创建ioc容器"></a> 1. 传入配置类，创建IoC容器</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203107349.png" alt="image-20210630203107349" /></p>        <h4 id="2-注册配置类调用refresh方法刷新容器"   >          <a href="#2-注册配置类调用refresh方法刷新容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-注册配置类调用refresh方法刷新容器"></a> 2.  注册配置类，调用refresh()方法刷新容器</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203127243.png" alt="image-20210630203127243" /></p>        <h4 id="3-在refresh方法内执行registerbeanpostprocessors注册所有已定义的后置处理器以拦截bean的初始化-以下为该方法内执行逻辑"   >          <a href="#3-在refresh方法内执行registerbeanpostprocessors注册所有已定义的后置处理器以拦截bean的初始化-以下为该方法内执行逻辑" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-在refresh方法内执行registerbeanpostprocessors注册所有已定义的后置处理器以拦截bean的初始化-以下为该方法内执行逻辑"></a> 3. 在refresh()方法内执行registerBeanPostProcessors()注册所有已定义的后置处理器，以拦截bean的初始化。（以下为该方法内执行逻辑）</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203203476.png" alt="image-20210630203203476" /></p><p>3.1 在<code>registerBeanPostProcessors</code>()方法内：先获取IoC容器中所有已经定义了的需要实例化的<code>BeanPostProcessor</code>组件（此时还没创建对象实例）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630203357418.png" alt="image-20210630203357418" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630202829082.png" alt="image-20210630202829082" /></p><p>此时的<strong>org.springframework.aop.config.internalAutoProxyCreator</strong>正是之前在<code>@Import(AspectJAutoProxyRegistrar.class)</code>)中使用<code>BeanDefinitionRegistry</code>类给容器中添加<strong>定义</strong>的id名称为<code>internalAutoProxyCreator</code>的组件。（即之前<code>BeanDefinitionRegistry</code>内<strong>定义了</strong>该后置处理器实现类，<strong>但还未创建实例化对象</strong>，步骤3.5处才创建了该组件）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630192408003.png" alt="image-20210630192408003" /></p><p>3.2  给容器添加其他<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204433781.png" alt="image-20210630204433781" /></p><p>3.3 遍历3.1中取出的所有<code>BeanPostProcessor</code>，并根据其是否实现了<code>Ordered</code>接口进行分类</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630213254910.png" alt="image-20210630213254910" /></p><p>3.4 优先注册实现了<code>PriorityOrdered</code>接口的<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204659073.png" alt="image-20210630204659073" /></p><p>3.5 再给容器中注册实现了<code>Ordered</code>接口的<code>BeanPostProcessor</code>（以下分析均为3.5断点方法<code>getBean()</code>中创建<code>AnnotationAwareAspectJAutoProxyCreator</code>对象的过程）</p><p><strong>AnnotationAwareAspectJAutoProxyCreator类实现了Ordered接口，因此在这一步被注册</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204914536.png" alt="image-20210630204914536" /></p><p><strong>注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象并保存在容器中</strong></p><p>如何创建id为<code>internalAutoProxyCreator</code>的<strong>AnnotationAwareAspectJAutoProxyCreator</strong>对象【本质为<code>BeanPostProcessor</code>对象 】？</p><ol><li>创建bean实例</li><li>调用<code>populateBean(beanName, mbd, instanceWrapper)</code> 为bean属性赋值</li><li>调用<code>initializeBean(beanName, exposedObject, mbd)</code>为bean初始化</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210629163559536.png" alt="image-20210629163559536" /></p><p><code>initializeBean()</code>方法内部依次执行：</p><ul><li><code>invokeAwareMethods()</code>方法（绿色框）：处理Aware接口的回调方法</li><li><code>applyBeanPostProcessorsBeforeInitialization()</code>方法（红色框）：调用后置处理器</li><li><code>invokeInitMethods()</code>方法完成初始化（黄色框）：执行自定义的初始化方法</li><li><code>applyBeanPostProcessorsAfterInitialization()</code>方法（红色框）：调用后置处理器</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630214340913.png" alt="image-20210630214340913" /></p><p>执行调用<code>invokeAwareMethods(beanName, bean)</code>作用：执行<code>Aware</code>接口的回调方法。因为<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了<strong>BeanFactoryAware</strong>接口，因此在这里，执行了该组件的<code>setBeanFactory()</code>方法，用于获取bean创建工厂<code>BeanFactory</code>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630213635404.png" alt="image-20210630213635404" /></p><ol start="4"><li>此时即调用了<code>AnnotationAwareAspectJAutoProxyCreator</code>类父类的<code>setBeanFactory()</code>方法（下图红色框），获取了bean创建工厂<code>BeanFactory</code>。</li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630220411754.png" alt="image-20210630220411754" /></p><ol start="5"><li>接着执行<code>this.initBeanFactory((ConfigurableListableBeanFactory)beanFactory);</code>（上图黄色框）得到<mark>Advisorxxxx</mark></li></ol><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630220448668.png" alt="image-20210630220448668" /></p><p>3.6 最后再注册没实现优先级接口的<code>BeanPostProcessor</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204929418.png" alt="image-20210630204929418" /></p>        <h4 id="4-经过上述创建初始化等操作此时35中getbean方法执行完毕获得了beanpostprocessor实例化对象再执行registerbeanpostprocessors方法将annotationawareaspectjautoproxycreator组件注册到beanfactory中"   >          <a href="#4-经过上述创建初始化等操作此时35中getbean方法执行完毕获得了beanpostprocessor实例化对象再执行registerbeanpostprocessors方法将annotationawareaspectjautoproxycreator组件注册到beanfactory中" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-经过上述创建初始化等操作此时35中getbean方法执行完毕获得了beanpostprocessor实例化对象再执行registerbeanpostprocessors方法将annotationawareaspectjautoproxycreator组件注册到beanfactory中"></a> 4. 经过上述创建初始化等操作，此时3.5中getBean()方法执行完毕，获得了BeanPostProcessor实例化对象，再执行registerBeanPostProcessors()方法将AnnotationAwareAspectJAutoProxyCreator组件注册到BeanFactory中</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630204914536.png" alt="image-20210630204914536" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630221118378.png" alt="image-20210630221118378" /></p><p><mark>以上即为<strong>创建和注册AnnotationAwareAspectJAutoProxyCreator组件的过程</strong>。</mark></p>        <h4 id="5-步骤3中已经注册了所有的beanpostprocessor黄色框之后执行finishbeanfactoryinitialization方法红色框注册所有非lazy修饰的单实例普通组件"   >          <a href="#5-步骤3中已经注册了所有的beanpostprocessor黄色框之后执行finishbeanfactoryinitialization方法红色框注册所有非lazy修饰的单实例普通组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-步骤3中已经注册了所有的beanpostprocessor黄色框之后执行finishbeanfactoryinitialization方法红色框注册所有非lazy修饰的单实例普通组件"></a> 5. 步骤3中已经注册了所有的BeanPostProcessor（黄色框），之后执行finishBeanFactoryInitialization()方法（红色框）注册所有非@Lazy修饰的单实例普通组件。</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701153743299.png" alt="image-20210701153743299" /></p><p>5.1 进入<code>finishBeanFactoryInitialization()</code>方法后，首先遍历获取容器中所有的<code>beanNames</code>，并依次执行以下方法创建bean对象。方法栈调用：</p><ul><li><code>-&gt; finishBeanFactoryInitialization(beanFactory)</code></li><li><code>-&gt; beanFactory.preInstantiateSingletons()</code></li><li><code>-&gt; getBean(beanName)</code></li><li><code>-&gt; doGetBean()</code></li><li><code>-&gt; getSingleton()</code></li><li><code>-&gt; createBean()</code></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163050223.png" alt="image-20210701163050223" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163108692.png" alt="image-20210701163108692" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701161459941.png" alt="image-20210701161459941" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701161016809.png" alt="image-20210701161016809" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701163847923.png" alt="image-20210701163847923" /></p><p>补充：在调用<code>getSingleton()</code>创建单实例bean之前，首先从缓存中查找当前bean是否存在，如果存在，说明这个bean之前已被创建过，可以直接使用，不再需要创建；否则再执行<code>getSingleton()</code>方法创建。只要创建好的bean都会被缓存起来。从缓存中查找bean是否存在：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701162202790.png" alt="image-20210701162202790" /></p><p>经过上述方法栈，在执行<code>getBean(beanName)</code>方法后创建bean的流程：</p><p>5.2 执行<code>getSingleton(beanName)</code>方法，从缓存中查找当前bean是否存在，如果存在，说明这个bean之前已被创建过，可以直接使用，不再需要创建；否则再执行getSingleton()方法创建。</p><p>5.3 进入<code>createBean()</code> 方法体：</p><p>5.3.1 在<code>createBean()</code> 方法中首先执行<code>resolveBeforeInstantiation()</code>方法（红色框，指在实例化前<strong>解析</strong>对象） 。该方法试图在此返回一个<strong>代理对象</strong>，如果能返回代理对象就使用，如果不能就向下继续执行<code>doCreateBean()</code>方法（黄色框）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701180818426.png" alt="image-20210701180818426" /></p><p><code>resolveBeforeInstantiation()</code>方法体内，在实例化前先后执行前处理和后处理：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701181816332.png" alt="image-20210701181816332" /></p><p>进入<code>applyBeanPostProcessorsBeforeInstantiation()</code>方法，该方法调用<code>getBeanPostProcessorCache()</code>方法判断当前容器中是否存在实现了<code>SmartInstantiationAwareBeanPostProcessor</code>接口的组件。恰好<code>AnnotationAwareAspectJAutoProxyCreator</code>类实现了该接口，因此会调用该类的<code>postProcessBeforeInstantiation()</code>方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701182427290.png" alt="image-20210701182427290" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701182344197.png" alt="image-20210701182344197" /></p><p><strong>重点</strong>：</p><ul><li><strong>BeanPostProcessor</strong>在普通bean对象<strong>创建完成之后，执行初始化方法前后</strong>调用</li><li><strong>InstantiationAwareBeanPostProcessor</strong>在普通bean实例<strong>创建之前先进行拦截调用</strong>，尝试使用后置处理器返回该bean的代理对象</li></ul><p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>InstantiationAwareBeanPostProcessor</code>接口，它会在任何bean实例创建之前（此时还没创建对象，也就还没执行普通<code>BeanPostProcessor</code>的处理器）先尝试执行<code>postProcessBeforeInstantiation()</code>返回对象的。</p><p>5.3.2 若<code>resolveBeforeInstantiation()</code>方法无法返回代理对象（意味着容器中没有<code>AnnotationAwareAspectJAutoProxyCreator</code>组件，即不需要开启AOP，也自然不需要返回代理对象），则程序继续向下执行<code>doCreateBean()</code>方法。此时才真正地去创建一个普通单实例bean实例，<strong>该过程和3.5中流程一样</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210701171303958.png" alt="image-20210701171303958" /></p>        <h4 id="6-进入annotationawareaspectjautoproxycreator类的postprocessbeforeinstantiation方法该方法用于将切面类添加到增强器集合中通知方法该方法内"   >          <a href="#6-进入annotationawareaspectjautoproxycreator类的postprocessbeforeinstantiation方法该方法用于将切面类添加到增强器集合中通知方法该方法内" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-进入annotationawareaspectjautoproxycreator类的postprocessbeforeinstantiation方法该方法用于将切面类添加到增强器集合中通知方法该方法内"></a> 6. 进入AnnotationAwareAspectJAutoProxyCreator类的postProcessBeforeInstantiation()方法，该方法用于将切面类添加到增强器集合中（通知方法），该方法内：</h4>      <p>每个组件都会进入该方法，但我们只关心和AOP相关的组件：自定义的MathCalculator（业务逻辑类）和LogAspect（切面类）。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703101045896.png" alt="image-20210703101045896" /></p><p>6.1 黄色框：判断当前advisedBeans.cotains(cacheKey)（保存了所有带有通知方法的bean，又被称为增强器）中是否已经包含了当前bean，若包含，则直接返回。</p><p>6.2 若不包含，则判断this.isInfrastructureClass(beanClass)，即判断当前bean：</p><ul><li>是否是基础类型的Advice、Pointcut、Advisor或AopInfrastructureBean接口的实现类。</li><li>是否是切面类型（@Aspect注解修饰的类）</li></ul><p>若符合，说明当前bean是切面类，则将其添加到advisedBeans中（包含所有增强器）</p><p>6.3 判断this.shouldSkip(beanClass, beanName)：判断是否需要跳过该bean的处理。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703104658589.png" alt="image-20210703104658589" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703104753304.png" alt="image-20210703104753304" /></p><p>获取候选的增强器Advisors（切面里的通知方法），以ArrayList方式存储【List&lt;Advisor&gt; candidateAdvisors】。每一个封装的通知方法增强器是InstantiationModelAwarePointcutAdvisor类型，判断每一个增强器是否是AspectJPointcutAdvisor类型：若是，返回true；否则继续循环判断其他增强器，若都不是，返回false</p><p>6.4 自定义的MathCalculator类经过6.2和6.3的判断均返回false，而LogAspect切面类因为被@Aspect注解修饰，所以会返回true，因此被添加到advisedBeans中</p><p><strong>总结</strong>：AnnotationAwareAspectJAutoProxyCreator类的postProcessBeforeInstantiation()方法在组件实例化前调用，目的是<strong>将每个自定义的切面类添加到增强器集合中</strong>。</p>        <h4 id="7-经过步骤6的前处理postprocessbeforeinstantiation后new一个mathcalculator对象"   >          <a href="#7-经过步骤6的前处理postprocessbeforeinstantiation后new一个mathcalculator对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-经过步骤6的前处理postprocessbeforeinstantiation后new一个mathcalculator对象"></a> 7. 经过步骤6的前处理postProcessBeforeInstantiation()后，new一个MathCalculator对象</h4>              <h4 id="8-创建对象完成后调用postprocesafterinstantiation方法该方法用于为容器中返回当前组件使用cglib增强了的代理对象该方法内"   >          <a href="#8-创建对象完成后调用postprocesafterinstantiation方法该方法用于为容器中返回当前组件使用cglib增强了的代理对象该方法内" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-创建对象完成后调用postprocesafterinstantiation方法该方法用于为容器中返回当前组件使用cglib增强了的代理对象该方法内"></a> 8. 创建对象完成后，调用postProcesAfterInstantiation()方法，该方法用于为容器中返回当前组件使用cglib增强了的代理对象，该方法内：</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703131501253.png" alt="image-20210703131501253" /></p><p>8.1 调用this.wrapIfNecessary(bean, beanName, cacheKey)方法：如果需要的话进行<strong>包装</strong>。进入该方法后，调用this.getAdvicesAndAdvisorsForBean()以获取<strong>能切入到当前bean的增强器（通知方法）</strong>。将这些增强器存储为Object[] specificInterceptors数组。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703131753642.png" alt="image-20210703131753642" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703132909220.png" alt="image-20210703132909220" /></p><p>该方法将遍历所有<strong>候选</strong>的增强器（通知方法）；再找到能在当前bean使用的增强器（eligible，有资格的增强器），<strong>即找到哪些通知方法是需要切入到当前bean方法的。<strong>最后给有资格的增强器</strong>排序</strong>（排序是为了后续做切入时按照Before，AfterReturning，After等顺序执行）。</p><p>8.2 this.getAdvicesAndAdvisorsForBean()方法执行完成后获得了Object[] specificInterceptors，里面存有能切入到当前bean的所有增强器（通知方法）。如果当前specificInterceptors不为null，则说明当前bean有被增强，那么将当前bean保存到this.advisedBeans当中。</p><p>8.3 如果当前bean需要被增强，则执行this.createProxy()为其创建代理对象：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703153159704.png" alt="image-20210703153159704" /></p><p>接上段：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703154315455.png" alt="image-20210703154315455" /></p><p>该方法内执行流程：</p><ul><li>创建代理工厂ProxyFactory</li><li>获取所有增强器（增强方法）并保存到ProxyFactory中</li><li>使用代理工厂创建代理对象proxyFactory.getProxy(classLoader)，其中代理对象有两种，其由Spring自动决定：<ul><li>JdkDynamicAopProxy(config)：jdk动态代理</li><li>ObjenesisCglibAopProxy(config)：cglib动态代理</li></ul></li></ul><p>在proxyFactory.getProxy(classLoader)方法内执行了以下方法返回动态代理对象：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703153617812.png" alt="image-20210703153617812" /></p><p><strong>总结</strong>：至此postProcesAfterInstantiation()方法中的this.wrapIfNecessary()方法执行完毕，其为容器中返回当前组件使用cglib增强了的代理对象。之后从容器中获取到的就是这个组件的代理对象，执行目标方法的时候，该代理对象就会额外执行通知方法的流程（除原本的业务代码外）。</p><p>该代理对象保存了许多详细信息（比如增强器、目标对象等）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703163430269.png" alt="image-20210703163430269" /></p>        <h4 id="9-代理对象被注册到容器中后当执行该bean被增强的方法时aop代理会执行cglibaopproxyintercept方法拦截目标方法的执行"   >          <a href="#9-代理对象被注册到容器中后当执行该bean被增强的方法时aop代理会执行cglibaopproxyintercept方法拦截目标方法的执行" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-代理对象被注册到容器中后当执行该bean被增强的方法时aop代理会执行cglibaopproxyintercept方法拦截目标方法的执行"></a> 9. 代理对象被注册到容器中后，当执行该bean被增强的方法时，AOP代理会执行CglibAopProxy.intercept()方法拦截目标方法的执行：</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703163932927.png" alt="image-20210703163932927" /></p><p>9.1 该方法中执行ProxyFactory对象的getInterceptorsAndDynamicInterceptionAdvice()方法获取将要执行的<strong>目标方法</strong>的<strong>拦截器链</strong>（拦截器集合，拦截器是由增强器包装后得到的，用于拦截每个目标方法的执行）。具体获得拦截器链的代码——进入该方法：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703164925461.png" alt="image-20210703164925461" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703191531684.png" alt="image-20210703191531684" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703193456012.png" alt="image-20210703193456012" /></p><p>接上段：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703191904882.png" alt="image-20210703191904882" /></p><ul><li>从配置类中获取所有的增强器（一个默认的增强器和其余自定义的增强器）</li><li>创建List&lt;Object&gt; interceptorList 保存拦截器，长度为所有增强器的数量，包含一个默认的ExposeInvocationInterceptor拦截器</li><li>遍历所有的增强器，将其转为拦截器：interceptors = registry.getInterceptors(advisor)</li></ul><p>将增强器转为List&lt;MethodInterceptor&gt;的方式：</p><ul><li>如果传入的增强器advisor是MethodInterceptor，直接加入到集合中</li><li>如果不是，则使用适配器AdvisorAdapter将增强器转为MethodInterceptor</li><li>转换完成，返回每个增强器对应的拦截器MethodInterceptor</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703192130240.png" alt="image-20210703192130240" /></p><p>AdvisorAdapter将增强器转为MethodInterceptor举例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703192455597.png" alt="image-20210703192455597" /></p><p><strong>总结</strong>：经过上述方法栈后，将每个增强器（通知方法）包装成了一个拦截器，返回了一个拦截器链（拦截器集合）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703193611280.png" alt="image-20210703193611280" /></p><p>9.2 得到拦截器链后，判断：</p><ul><li>如果没有拦截器链（说明目标方法没有被增强），直接执行目标方法</li><li>如果有拦截器链（说明目标方法有被增强），把需要执行的目标对象、目标方法、拦截器链等所有信息传入一个<strong>CglibMethodInvocation</strong>对象，并调用其<strong>proceed()方法</strong>，从而执行带有<strong>通知方法</strong>的业务代码。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703164633170.png" alt="image-20210703164633170" /></p>        <h4 id="10-cglibmethodinvocationproceed方法解析"   >          <a href="#10-cglibmethodinvocationproceed方法解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-cglibmethodinvocationproceed方法解析"></a> 10. CglibMethodInvocation().proceed()方法解析：</h4>      <p>进入<code>CglibMethodInvocation().proceed()</code>方法后：</p><ul><li>获取第一个拦截器；</li><li>该拦截器执行<code>invoke</code>方法（将当前<code>CglibMethodInvocation</code>对象传入），该方法会再次地调用<code>CglibMethodInvocation.proceed()</code>方法；</li><li><code>currentInterceptorIndex</code>记录当前拦截器的索引：从-1开始递增，每次执行<code>procced()</code>，索引自增一次，即再获取下一个拦截器；</li><li>获取第二个拦截器后再次执行<code>invoke</code>方法，再次获取第三个拦截器；</li><li>重复上述操作，直至获取到最后一个拦截器，执行完其通知方法（此时是第一次调用通知方法，其他拦截器的通知方法还未调用）；</li><li>执行完通知方法的拦截器将弹出方法栈，执行后续通知方法；</li></ul><p>使用这种<strong>拦截器链</strong>的机制，按顺序调用其余的通知方法和目标方法。</p><p>下面按照执行顺序分析流程，假设当前bean对象共有四个自定义的拦截器（<code>@Before</code>、<code>@After</code>、<code>@AfterReturnig</code>、<code>@AfterThrowing</code>）和一个默认的拦截器（<code>ExposeInvocationInterceptor</code>）：</p><p><strong>10.1</strong> 首次调用<code>procced()</code>方法，当前索引<code>this.currentInterceptorIndex</code>为-1，自加1后为0。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703224011722.png" alt="image-20210703224011722" /></p><p><code>this.interceptorsAndDynamicMethodMatchers</code>中按顺序存储了所有拦截器（一个默认和四个自定义）：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704115329357.png" alt="image-20210704115329357" /></p><p>首先取出第一个拦截器，调用其<code>invoke</code>方法，将<strong>CglibMethodInvocation</strong>对象作为参数传入：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210703234254881.png" alt="image-20210703234254881" /></p><p>调用第一个默认的拦截器：<code>ExposeInvocationInterceptor</code>的<code>invoke</code>方法，在红色框中调用了<code>CglibMethodInvocation.proceed()</code>方法，从而获取了下一个拦截器@<strong>Before</strong>（此时<code>finally</code>代码块中的代码，还未执行，需要等到其余的方法栈全部执行完毕后最后执行）。</p><p><strong>10.2</strong> <mark>@Before</mark>：10.1中调用<code>procced()</code>获取到第二个拦截器<strong>MethodBeforeAdviceInterceptor</strong>：该拦截器首先执行<code>advice.before()</code>，即自定义的<strong>Before</strong>通知方法，再调用<code>CglibMethodInvocation.proceed()</code>方法获取下一个拦截器@<strong>After</strong>。注意此时Before通知已经执行。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704102922612.png" alt="image-20210704102922612" /></p><p><strong>10.3</strong> <mark>@After</mark>：获取到的下一个拦截器是<strong>AspectJAfterAdvice</strong>，该拦截器内将<code>procced()</code>方法包装在<code>try</code>代码块内。<code>finally</code>内的代码块为<strong>After后置通知方法</strong>，此时暂不调用，等待<code>try</code>内的<code>mi.procced()</code>方法栈执行完再调用。（因为<code>@After</code>的执行顺序在<code>@AfterReturning</code>和<code>@AfterThrowing</code>之后，所以需要等到他们执行完后再调用）执行<code>mi.procced()</code>方法获取下一个拦截器@<strong>AfterReturing</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114113510.png" alt="image-20210704114113510" /></p><p><strong>10.4</strong> <mark>@AfterReturning</mark>：进入<code>mi.procced()</code>方法内获取了下一个拦截器<strong>AfterReturningAdviceInterceptor</strong>。该拦截器的<code>invoke</code>方法内再次调用<code>mi.procced()</code>方法获取下一个拦截器<strong>AfterThrowing</strong>。注意此处的代码并没有被<code>try catch</code>包裹，意味着后续方法栈出现异常此处无法继续向下正常执行<code>advice.afterReturning()</code>通知。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114640043.png" alt="image-20210704114640043" /></p><p><strong>10.5</strong> <mark>@AfterThrowing</mark>：进入<code>mi.procced()</code>方法内获取了下一个拦截器<strong>AspectJAfterThrowing</strong>。此时再执行<code>procced()</code>方法时，因为该组件对应的拦截器<strong>已经全部遍历完</strong>，因此<code>this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1</code>判断成立，此时将执行目标对象的<strong>业务代码</strong>。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704120009098.png" alt="image-20210704120009098" /></p><p>同时<code>procced()</code>方法包裹在try代码块中，若业务代码中出现异常，则将被后面的<code>catch</code>捕获，并执行<code>invokeAdviceMethod()</code>将<code>@AfterThrowing</code>通知方法执行，<strong>同时抛出了一个异常ex，返回给上一层的@AfterReturing</strong>。上一层的<code>@AfterReturing</code>中并没有添加<code>try catch</code>代码块，因此若业务代码出现了异常，则将该异常抛给<code>@AfterReturing</code>后其无法继续执行后续的<strong>AfterReturing</strong>代码，反而将该异常继续向上抛给<code>@After</code>（<code>@After</code>内有<code>try</code>，可以捕获）。<strong>也就说明@AfterReturing的通知不能在出现异常时执行，@AfterThrowing的通知不能在不出现异常时执行（因为异常通知方法在catch中，只有业务代码出现异常才能执行）</strong></p><p>此时已经遍历完了所有的目标对象，执行目标对象的业务代码：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704120832349.png" alt="image-20210704120832349" /></p><p>执行完业务代码后，当前已经执行了<code>@Before</code>前置通知方法、目标对象业务代码，其余的通知方法还未执行。后续的执行顺序：</p><ul><li>如果业务代码内没有出现异常，则<code>catch</code>内的<code>@AfterThrowing</code>的通知不会执行，方法栈向上一层返回，返回到<code>@AfterReturing</code>，执行其<code>@AfterReturing</code>通知方法，执行后再返回到<code>@After</code>层执行<code>@After</code>通知方法。（此时都没有异常）</li><li>如果业务代码内出现异常，则执行<code>catch</code>内的<code>@AfterThrowing</code>的通知，同时抛出异常<code>ex</code>，返回给上一层的<code>@AfterReturing</code>，而该层并没有<code>try catch</code>，因此不会执行<code>@AfterReturing</code>的通知，将此异常继续向上层抛出到<code>@After</code>层</li></ul><p><strong>10.6</strong> 之后回到==@After层==，此处有<code>try</code>保证异常不会继续向上抛出，同时不论是否有异常抛出，都会执行<code>invokeAdviceMethod()</code>方法执行<code>@After</code>后置通知。因此<strong>说明@After通知不论是够有异常，都会在最后执行</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704114113510.png" alt="image-20210704114113510" /></p><p><code>@After</code>通知方法执行完后继续弹栈，此时所有的通知方法都执行完毕，顺序依次为：</p><ul><li>前置通知（<code>@Before</code>）</li><li>业务代码</li><li>返回通知（<code>@AfterReturning</code>）/ 若有异常，此时执行异常通知（<code>@AfterThrowing</code>）</li><li>后置通知（<code>@After</code>）</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">容器创建完成....</span><br><span class="line"></span><br><span class="line">切入点div运行@Before .... 参数列表：&#123;[1, 1]&#125;</span><br><span class="line">div方法执行...</span><br><span class="line">切入点正常返回@AfterReturning....运行结果：&#123;1&#125;</span><br><span class="line">切入点结束@After....</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure><p>补充：Spring4源码中拦截器调用的顺序与Spring5不同，是相反的顺序，但执行效果仍然相同：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210704122728211.png" alt="image-20210704122728211" /></p><p>总体思想是链式地执行每个拦截器的<code>invoke()</code>方法，在合适的位置执行通知方法，并回调<code>CglibMethodInvocation.procced()</code>方法实现链式执行，直到所有的拦截器均执行完毕。</p>        <h3 id="aop原理总结"   >          <a href="#aop原理总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop原理总结"></a> AOP原理总结</h3>              <h2 id="spring常用接口"   >          <a href="#spring常用接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring常用接口"></a> Spring常用接口</h2>              <h3 id="importbeandefinitionregistrar"   >          <a href="#importbeandefinitionregistrar" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#importbeandefinitionregistrar"></a> ImportBeanDefinitionRegistrar</h3>      <p><code>ImportBeanDefinitionRegistrar</code>接口的实现类用在<code>@Import</code>注解中，用于向IoC容器中自定义注册组件。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@Import</code> 注解中可以传入<code>ImportBeanDefinitionRegistrar</code>接口的实现类。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210628212948066.png" alt="image-20210628212948066" /></p><p><mark>xxx</mark>通过调用<code>ImportBeanDefinitionRegistrar</code>接口实现类的<code>registerBeanDefinitions()</code> 方法，可以自定义地给容器中添加组件。方法参数：</p><ul><li><code>importingClassMetadata</code>：当前标注Import注解的类（即SpringConfig类）的所有注解信息</li><li><code>registry</code>：所有bean对象都通过此对象注册，可以使用该对象给容器中注册一个bean</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210628213321835.png" alt="image-20210628213321835" /></p><p>使用方法：把所有要添加到容器中的bean调用<code>registry.registerBeanDefinition(String beanName, BeanDefinition beanDefinition)</code>方法手动注册到容器中。该方法需要传入<code>beanName</code>和一个实现了<strong>beanDefinition</strong>接口的类的对象（通常使用其实现类<strong>RootBeanDefinition</strong>）</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210628215427638.png" alt="image-20210628215427638" /></p><p>使用实例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210628220119176.png" alt="image-20210628220119176" /></p>        <h3 id="beanpostprocessor"   >          <a href="#beanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor"></a> BeanPostProcessor</h3>              <h3 id="aware"   >          <a href="#aware" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aware"></a> Aware</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A marker superinterface indicating that a bean is eligible to be notified by the</span></span><br><span class="line"><span class="comment"> * Spring container of a particular framework object through a callback-style method.</span></span><br><span class="line"><span class="comment"> * The actual method signature is determined by individual subinterfaces but should</span></span><br><span class="line"><span class="comment"> * typically consist of just one void-returning method that accepts a single argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Aware接口有若干继承的接口，命名格式为xxxAware：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630101718020.png" alt="image-20210630101718020" /></p><p>开发人员自定义的组件若想使用<strong>Spring底层的一些组件</strong>（如ApplicationContext、BeanFactory等），只需要实现相应的<strong>xxxAware</strong>（如ApplicationContextAware、BeanFactoryAware）接口，这些接口均继承自Aware接口，其特有的方法会以<strong>callback-style</strong>的方式被容器中对应的<strong>xxxAwareProcessor</strong>组件调用。</p><p>每个Aware接口实现类都对应了一个xxxAwareProcessor类（如ApplicationContextAware对应ApplicationContextAwareProcessor），该Processor类负责在容器中创建组件后（初始化之前）以<strong>回调的风格</strong>调用xxxAware实现类的特定方法（每个xxxAware实现类都有其特有的方法，功能都不同）。容器在逐一注册bean时，若发现某个bean实现了某个Aware接口，就会在容器中注册相应的xxxAwareProcessor类组件，让其负责回调该bean中实现的xxxAware接口的方法。</p><p>例如：<strong>ApplicationContextAware</strong>接口对应了一个<strong>ApplicationContextAwareProcessor</strong>类：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630102625001.png" alt="image-20210630102625001" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630103554590.png" alt="image-20210630103554590" /></p><p>若开发人员自定义的某个bean（如下图中BookDao类）实现了<code>ApplicationContextAware</code>接口的<code>setApplicationContext(ApplicationContext applicationContext)</code>方法，则在容器加载<code>BookDao</code>类时，会根据其实现的<code>ApplicationContextAware</code>接口动态注册一个<code>ApplicationContextAwareProcessor</code>类。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630103106864.png" alt="image-20210630103106864" /></p><p>IoC容器在执行到方法栈<code>AbstractAutowireCapableBeanFactory.java</code>时，会遍历得到容器中所有的<code>BeanPostProcessor</code>，并一执行<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization()</code>方法，将bean对象逐一经过每个<code>BeanPostProcessor</code>处理器，此时会调用：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210629164433894-1625020601639.png" alt="image-20210629164433894" /></p><p><code>ApplicationContextAwareProcessor</code>类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210629192447682.png" alt="image-20210629192447682" /></p><p>每个bean在进入该方法后都会判断是否符合黄色框中接口的实现类，若符合（代表实现了xxxAware接口），则会执行<code>invokeAwareInterfaces()</code>方法，根据其实现的接口类型调用相应的方法设置相应的容器组件（红色框）。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630103302320.png" alt="image-20210630103302320" /> 注意：在创建bean之前调用的invokeAwareMethods()方法（绿色框）内只会调用三个特殊的Aware接口实现类的方法，其他的Aware接口并不会在此执行，只能通过创建相应xxxAwareProcessor的方式回调执行相应方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630214340913.png" alt="image-20210630214340913" /></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E6%BA%90%E7%A0%81/image-20210630213635404.png" alt="image-20210630213635404" /></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring注解驱动开发</title>
      <link href="2021/06/25/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>2021/06/25/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629094903500.png" alt="image-20210629094903500" /></p>        <h2 id="ioc容器"   >          <a href="#ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ioc容器"></a> IoC容器</h2>      <p>导入maven依赖</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>IoC容器部分案例汇总：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span> <span class="comment">// 导入外部资源文件</span></span><br><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span> <span class="comment">// 满足当前条件，这个类中配置的所有bean注册才能生效</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">// prototype：多实例的，singleton：单实例的</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">(initMethod = <span class="string">&quot;init&quot;</span>, destroyMethod = <span class="string">&quot;destroy&quot;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>使用<code>AnnotationConfigApplicationContext</code>类获取IoC容器中的组件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载配置类 SpringConfig</span></span><br><span class="line">    ApplicationContext context</span><br><span class="line">        = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    </span><br><span class="line">    String[] beanDefinitionNames = context.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : beanDefinitionNames) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    User user = context.getBean(User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    Object studentFactoryBean = context.getBean(<span class="string">&quot;studentFactoryBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bean的类型： &quot;</span> + studentFactoryBean.getClass()); <span class="comment">//返回的是Student类对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="组件注册"   >          <a href="#组件注册" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件注册"></a> 组件注册</h2>      <p>在Spring IoC容器中注册组件有三种方法</p><ul><li><code>@Bean</code>：编写相应方法返回组件（可用于导入的第三方包中的组件）</li><li><code>@ComponentScan</code>：包扫描+组件标注注解</li><li><code>@Import</code>：调用无参构造快速导入组件（可用于导入的第三方包中的组件）</li></ul>        <h3 id="bean在springconfig类里编写相应方法返回组件"   >          <a href="#bean在springconfig类里编写相应方法返回组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean在springconfig类里编写相应方法返回组件"></a> @Bean：在SpringConfig类里编写相应方法返回组件</h3>      <p>方法返回值类型为组件类型，方法名为默认组件id，也可以在<code>@Bean()</code>中自定义组件id</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="componentscan在springconfig类上添加包扫描"   >          <a href="#componentscan在springconfig类上添加包扫描" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#componentscan在springconfig类上添加包扫描"></a> @ComponentScan：在SpringConfig类上添加包扫描</h3>      <p>指定<strong>排除</strong>哪些组件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></div></figure><p>指定<strong>包含</strong>哪些组件（注意：需要设置<code>useDefaultFilters = false</code>）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value=&quot;com.zhao&quot;, includeFilters=&#123;</span></span><br><span class="line"><span class="meta">        @Filter(type= FilterType.ANNOTATION,classes=&#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;, useDefaultFilters = false)</span></span><br></pre></td></tr></table></div></figure><p>若想指定多个<code>@ComponentScan</code>，可以使用<code>@ComponentScans</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></div></figure>        <h3 id="filter组件注册过滤器"   >          <a href="#filter组件注册过滤器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filter组件注册过滤器"></a> @Filter：组件注册过滤器</h3>      <p><code>@Filter</code>可以指定的类型：</p><ul><li><code>FilterType.ANNOTATION</code>：过滤指定的注解</li><li><code>FilterType.ASSIGNABLE_TYPE</code>：过滤指定的类</li><li><code>FilterType.CUSTOM</code>：自定义过滤器类，指定包下的所有类都会经过该过滤器类，并判断是否需要被过滤</li></ul><p><code>FilterType.CUSTOM</code>需要传入一个自定义过滤器类<code>MyTypeFilter</code>，其需要实现<code>TypeFilter</code>接口的方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义Filter，每个自定义组件的信息都会被该方法获取，再判断是否过滤掉该组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader：读取到的当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory：可以获取到其他任何类信息的工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前类的注解信息</span></span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">// 获取当前扫描的类信息</span></span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">// 获取当前类资源信息（类路径等）</span></span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&gt; &quot;</span> + className);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;er&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="import快速导入组件"   >          <a href="#import快速导入组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#import快速导入组件"></a> @Import：快速导入组件</h3>      <ol><li><code>@Import(xxx.class</code>)：注册xxx类，id默认是全类名</li><li><code>@Import(ImportSelector)</code>：实现<code>ImportSelector</code>接口，在其方法中返回需要注册的组件全类名<strong>数组</strong></li><li><code>@Import(ImportBeanDefinitionRegistrar)</code>：实现<code>ImportBeanDefinitionRegistrar</code>接口，在其方法中调用<code>BeanDefinitionRegistry</code>类对象的<code>registerBeanDefinition()</code>方法手动注册组件（<strong>详细源码见【Spring】Spring5源码</strong>）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>ImportSelector</code>接口实现类：<code>MyImportSelector</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法返回的全类名将被注册到容器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata：当前标注Import注解的类（即SpringConfig类）的所有注解信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值就是要导入到容器中的组件全类名，不能返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">// 返回要导入到容器中的组件全类名，方法不能返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.zhao.bean.Student&quot;</span>, <span class="string">&quot;com.zhao.bean.User&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>ImportBeanDefinitionRegistrar</code>接口实现类<code>MyImportBeanDefinitionRegistrar</code>：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现registerBeanDefinitions接口以手动注册bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> importingClassMetadata：当前类的注解信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry：BeanDefinition注册类</span></span><br><span class="line"><span class="comment">     *                把所有要添加到容器中的bean调用registry.registerBeanDefinition()手动注册类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> definition = registry.containsBeanDefinition(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">            <span class="comment">// 指定Bean定义信息（bean类型，作用域等）</span></span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(Student.class);</span><br><span class="line">            <span class="comment">// 注册一个bean，指定bean名</span></span><br><span class="line">            registry.registerBeanDefinition(<span class="string">&quot;student&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="scope设置组件作用域"   >          <a href="#scope设置组件作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#scope设置组件作用域"></a> @Scope：设置组件作用域</h3>      <p><code>@Scope</code>常用的两种作用域：</p><ul><li><strong>singleton</strong>：单实例（默认值）。IoC容器启动时就<strong>会</strong>调用方法创建对象到IoC容器中，之后获取就直接从容器中拿（map.get()）。关闭工厂 时，所有的对象都会销毁。</li><li><strong>prototype</strong>：多实例。IoC容器启动时<strong>不会</strong>调用方法创建对象到IoC容器中，每次获取的时候才会调用方法创建对象。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> </span><br><span class="line"><span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="lazy懒加载"   >          <a href="#lazy懒加载" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lazy懒加载"></a> @Lazy：懒加载</h3>      <p>单实例bean默认在容器启动时就创建对象，而使用了@Lazy后，在容器启动时并不会创建对象，而会等到第一次获取bean时才创建对象并初始化。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="conditional按照一定条件进行判断满足条件的给容器中注册bean"   >          <a href="#conditional按照一定条件进行判断满足条件的给容器中注册bean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#conditional按照一定条件进行判断满足条件的给容器中注册bean"></a> @Conditional：按照一定条件进行判断，满足条件的给容器中注册bean</h3>      <p><strong>在方法上添加@Conditional</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>需要实现Condition接口的matches(ConditionContext context, AnnotatedTypeMetadata metadata)方法。当前组件只有满足该条件才会被注册</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件判断是否注册组件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context：判断条件能否使用的上下文（环境）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadata：标记了<span class="doctag">@Condition</span>注解的注释信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true: 注册  false：不注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到ioc使用的工厂</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        <span class="comment">// 获取类加载器</span></span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        <span class="comment">// 获取当前环境信息</span></span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        <span class="comment">// 获取到bean定义的注册类，所有bean的定义都在这里注册</span></span><br><span class="line">        BeanDefinitionRegistry registry = context.getRegistry();</span><br><span class="line"></span><br><span class="line">        String property = environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> property.contains(<span class="string">&quot;Windows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>在配置类上添加@Conditional</strong></p><p>满足条件，这个类中配置的所有bean注册才能生效</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="使用factorybean注册组件"   >          <a href="#使用factorybean注册组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用factorybean注册组件"></a> 使用FactoryBean注册组件</h3>      <p>在<code>Spring</code>和其他框架整合时，大量使用<code>FactoryBean</code>注册组件。</p><ol><li>创建<code>FactoryBean</code>接口的实现类<code>StudentFactoryBean</code>：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个Student对象，该对象会添加到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在配置类中声明该工厂类对象</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>获取<code>FactoryBean</code>调用<code>getObject()</code>创建的对象（并非<code>FactoryBean</code>组件，而是其内生产的组件）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext  context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">Object studentFactoryBean = context.getBean(<span class="string">&quot;studentFactoryBean&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;bean的类型： &quot;</span> + studentFactoryBean.getClass()); <span class="comment">//返回的是Student类对象</span></span><br></pre></td></tr></table></div></figure><p>若想获取<code>FactoryBean</code>组件，需要：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object studentFactoryBean = context.getBean(<span class="string">&quot;&amp;studentFactoryBean&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="组件注册小结"   >          <a href="#组件注册小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件注册小结"></a> 组件注册小结</h3>      <p>组件注册相关注解使用汇总案例：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629153052661.png" alt="image-20210629153052661" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span> <span class="comment">// 导入外部资源文件</span></span><br><span class="line"><span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span> <span class="comment">// 满足当前条件，这个类中配置的所有bean注册才能生效</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Service.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;) ,</span></span><br><span class="line"><span class="meta">                @ComponentScan(value = &quot;com.zhao&quot;, includeFilters = &#123;</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ANNOTATION, classes = &#123;Repository.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">                        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">                &#125;, useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Import(&#123;User.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">// prototype：多实例的，singleton：单实例的</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudentFactoryBean <span class="title">studentFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>其中在<code>@Import</code>、<code>@Filter</code>、<code>@Conditional</code>注解中指定的类对象均实现了特定的接口，并会在容器加载时调用这些接口实现类的指定方法，从而使得不同的注解实现不同的效果（注册bean、过滤、判断条件等）。</p>        <h2 id="生命周期"   >          <a href="#生命周期" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h2>      <p>生命周期 ：从对象创建到对象销毁的过程。bean 的生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p><ol><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>把 bean 实例传递给<strong>后置处理器</strong>的方法 <code>postProcessBeforeInitialization</code></li><li>调用 bean 的<strong>初始化</strong>的方法（需要在配置初始化方法<code>init-method</code>）</li><li>把 bean 实例传递给<strong>后置处理器</strong>的方法 <code>postProcessAfterInitialization</code></li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的<strong>销毁</strong>方法（需要配置销毁的方法<code>destroy-method</code>）</li></ol><p>整个生命周期中，3和5由自定义的<strong>后置处理器BeanPostProcessor</strong>实现；4和7由自定义<strong>初始化和销毁方法</strong>实现；其余阶段默认由Spring容器完成。</p><p>大致流程：</p><ul><li>constructor构造器执行</li><li>set方法执行</li><li>BeanPostProcessor.postProcessBeforeInitialization方法执行</li><li>init-method执行</li><li>BeanPostProcessor.postProcessAfterInitialization方法执行</li><li>destroy-method执行</li></ul>        <h3 id="自定义初始化和销毁方法"   >          <a href="#自定义初始化和销毁方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自定义初始化和销毁方法"></a> 自定义初始化和销毁方法</h3>      <p>bean的生命周期由容器管理，可以自定义<strong>初始化</strong>和<strong>销毁</strong>方法：</p><ul><li>方式一：通过<code>@Bean</code>注解指定<code>initMethod</code>和<code>destroyMethod</code></li><li>方式二：通过让bean实现<code>InitializingBean</code>定义初始化逻辑和<code>DisposableBean</code>定义销毁逻辑</li><li>方式三：使用JSR250中<code>@PostConstruct</code>和<code>@PreDestroy</code>注解</li></ul><p>初始化方法在bean对象<strong>创建好并赋值后被调用</strong>，销毁方法在对象被销毁前被调用。</p><p>销毁时：</p><ul><li>单实例：容器关闭时销毁</li><li>多实例：容器不会管理这个bean，容器不会调用销毁方法，需要手动调用</li></ul>        <h4 id="方式一bean注解指定initmethod和destroymethod"   >          <a href="#方式一bean注解指定initmethod和destroymethod" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一bean注解指定initmethod和destroymethod"></a> 方式一：@Bean注解指定initMethod和destroyMethod</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfLifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; User destory ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式二bean实现initializingbean和disposablebean接口"   >          <a href="#方式二bean实现initializingbean和disposablebean接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二bean实现initializingbean和disposablebean接口"></a> 方式二：bean实现InitializingBean和DisposableBean接口</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat destory ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======&gt; Cat afterPropertiesSet ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.zhao.bean&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfLifeCycle</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式三使用jsr250中postconstruct和predestroy注解"   >          <a href="#方式三使用jsr250中postconstruct和predestroy注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三使用jsr250中postconstruct和predestroy注解"></a> 方式三：使用JSR250中@PostConstruct和@PreDestroy注解</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&gt; Dog init ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@PostConstruct</code>和<code>@PreDestroy</code>的注解信息会被<code>InitDestroyAnnotationBeanPostProcessor</code>获取到，并据此执行相应的初始化和销毁方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194708129.png" alt="image-20210629194708129" /></p>        <h3 id="后置处理器-beanpostprocessor"   >          <a href="#后置处理器-beanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#后置处理器-beanpostprocessor"></a> 后置处理器 BeanPostProcessor</h3>      <p><code>BeanPostProcessor</code>接口用于在bean的<strong>初始化前后</strong>进行一些处理工作：</p><ul><li><code>postProcessBeforeInitialization()</code>：在初始化方法之前工作</li><li><code>postProcessAfterInitialization()</code>：在初始化方法之后工作</li></ul><p>自定义后置处理器实现<code>BeanPostProcessor</code>的方法，并将其注册到容器中。之后所有的bean对象在初始化方法前后都会进入该类的方法中执行相应处理。即使一些bean没有自定义初始化方法，也不会影响后置处理器方法的执行。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// bean：当前被处理的bean对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessBeforeInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====&gt; postProcessAfterInitialization ... &quot;</span> + beanName + <span class="string">&quot;: &quot;</span> + bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以对bean进行一些包装</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="beanpostprocessor-执行流程源码分析"   >          <a href="#beanpostprocessor-执行流程源码分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor-执行流程源码分析"></a> BeanPostProcessor 执行流程源码分析</h3>      <ol><li>容器调用bean的构造方法创建对象</li><li><code>populateBean()</code>：容器调用bean的set方法为bean对象的属性赋值（红色框）</li><li><code>initializeBean()</code>：容器为bean做初始化操作（黄色框）</li></ol><p>方法栈位置：<code>AbstractAutowireCapableBeanFactory.java</code></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629163559536.png" alt="image-20210629163559536" /></p><p>======&gt; 进入黄色框的<code>initializeBean()</code>方法：</p><ul><li>执行<code>invokeAwareMethods()</code>方法（绿色框）</li><li>执行<code>applyBeanPostProcessorsBeforeInitialization()</code>方法（红色框）</li><li>执行<code>invokeInitMethods()</code>方法完成初始化（黄色框）</li><li>执行<code>applyBeanPostProcessorsAfterInitialization()</code>方法（红色框）</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210630214340913.png" alt="image-20210630214340913" /></p><p>======&gt; 进入红色框的<code>applyBeanPostProcessorsBeforeInitialization()</code>方法：</p><p>遍历得到容器中所有的<code>BeanPostProcessor</code>，并一执行<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization()</code>方法，将bean对象逐一经过每个<code>BeanPostProcessor</code>处理器。一旦返回null，跳出for循环后续不再执行。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/image-20210629164433894.png" alt="image-20210629164433894" /></p>        <h3 id="spring底层对beanpostprocessor的应用"   >          <a href="#spring底层对beanpostprocessor的应用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring底层对beanpostprocessor的应用"></a> Spring底层对BeanPostProcessor的应用</h3>      <p>使用<code>BeanPostProcessor</code>接口的实现类，可以实现：bean赋值、注入其他组件、<code>@Autowired</code>属性注入、生命周期注解功能等。</p><p><code>BeanPostProcessor</code>接口的实现类</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629190629663.png" alt="image-20210629190629663" /></p>        <h4 id="applicationcontextawareprocessor"   >          <a href="#applicationcontextawareprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#applicationcontextawareprocessor"></a> ApplicationContextAwareProcessor</h4>      <p><code>ApplicationContextAwareProcessor</code>是<code>BeanPostProcessor</code>的一个实现类。其原理同上述自定义的<code>MyBeanPostProcessor</code>类一样，都会在如下for循环中被获取到，并执行其实现的<code>postProcessBeforeInitialization()</code>方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629164433894.png" alt="image-20210629164433894" /></p><p><code>ApplicationContextAwareProcessor</code>类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629192447682.png" alt="image-20210629192447682" /></p><p>每个bean在进入该方法后都会判断是否符合黄色框中接口的实现类，若符合，则会执行<code>invokeAwareInterfaces()</code>方法，根据其实现的接口类型调用相应的方法设置相应的容器上下文属性。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629192653559.png" alt="image-20210629192653559" /></p>        <h4 id="autowiredannotationbeanpostprocessor"   >          <a href="#autowiredannotationbeanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autowiredannotationbeanpostprocessor"></a> AutowiredAnnotationBeanPostProcessor</h4>      <p>在对象创建完后，获取被<code>@Autowired</code>注解修饰的属性，从而实现属性注入。</p>        <h4 id="beanvalidationpostprocessor"   >          <a href="#beanvalidationpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanvalidationpostprocessor"></a> BeanValidationPostProcessor</h4>      <p><code>BeanValidationPostProcessor</code>常用在JavaWeb中用于<strong>数据校验</strong>。</p><p>其类实现的<code>postProcessBeforeInitialization()</code>方法如下：</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194216136.png" alt="image-20210629194216136" /></p><p>在其<code>doValidate()</code>方法中提供了数据校验的功能。因此可以在bean初始化前后完成校验工作。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194247408.png" alt="image-20210629194247408" /></p>        <h4 id="initdestroyannotationbeanpostprocessor"   >          <a href="#initdestroyannotationbeanpostprocessor" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#initdestroyannotationbeanpostprocessor"></a> InitDestroyAnnotationBeanPostProcessor</h4>      <p><code>InitDestroyAnnotationBeanPostProcessor</code>用于获取bean对象的<code>@PostConstruct</code>和<code>@PreDestroy</code>注解信息，并据此执行相应的初始化和销毁方法。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/image-20210629194708129.png" alt="image-20210629194708129" /></p>        <h3 id="beanpostprocessor总结"   >          <a href="#beanpostprocessor总结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#beanpostprocessor总结"></a> BeanPostProcessor总结</h3>      <p>每个bean对象在被注册到容器的过程中，会在执行<code>invokeInitMethods()</code>方法初始化bean之前，执行用户自定义注册的<code>BeanPostProcessor</code>实现类和容器默认注册的<code>BeanPostProcessor</code>实现类的<code>postProcessBeforeInitialization()</code>方法。不同实现类的<code>postProcessBeforeInitialization()</code>方法功能不同，可以自定义地为其设置不同的功能，包括输出日志、添加上下文容器、添加环境属性、添加资源解析器等。</p><p>若想让某些bean获得上述功能，只需要该类实现<code>BeanPostProcessor</code>接口的<code>postProcessBeforeInitialization()</code>方法即可。</p><p>使用<code>BeanPostProcessor</code>接口的实现类，可以实现：bean赋值、注入其他组件、<code>@Autowired</code>属性注入、生命周期注解功能等。</p>        <h2 id="组件属性赋值"   >          <a href="#组件属性赋值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件属性赋值"></a> 组件属性赋值</h2>              <h3 id="value"   >          <a href="#value" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#value"></a> @Value</h3>      <p>​@Value注解可以赋值的类型：</p><ul><li>基本数据类型值</li><li>SpEL：#{}，可以在其中进行数值运算</li><li>${}取出配置文件中的值（在运行环境变量里的值），读取配置文件时需要在配置类上添加注解<code>@PropertySource</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &#123;&quot;classpath:/person.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.phone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="组件自动装配"   >          <a href="#组件自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#组件自动装配"></a> 组件自动装配</h2>      <p>Spring利用依赖注入DI，完成对IoC容器中各个组件的依赖关系赋值。</p><p><strong>Spring提供的自动装配注解</strong>：</p><ul><li><code>@Autowired</code>：根据属性<strong>类型</strong>进行自动装配</li><li><code>@Qualifier</code>：根据属性<strong>名称</strong>进行自动装配</li><li><code>@Primary</code>：根据设置为<strong>默认首选</strong>的bean进行自动装配</li></ul><p>Java规范提供的注解：</p><ul><li><code>@Resource</code>：可以根据类型注入，也可以根据名称注入，但不支持<code>@Primary</code>和<code>@Autowired(required=false)</code></li><li><code>@Inject</code>：功能和<code>@Autowired</code>一样，没有<code>required=false</code>功能</li></ul>        <h3 id="autowired按照属性类型自动装配"   >          <a href="#autowired按照属性类型自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#autowired按照属性类型自动装配"></a> @Autowired：按照属性类型自动装配</h3>      <p>如果找到多个相同类型的组件，再将<strong>属性的名称</strong>作为组件的id去容器中查找，若找不到指定名称的组件，则程序报错，此时可以添加<code>required=false</code>属性使得当前组件即使找不到程序也不会报错。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要添加set方法</span></span><br><span class="line">    <span class="meta">@Autowired(required=false)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>@Autowired</code>也可以修饰方法、有参构造器、方法参数上。</p><p>有参构造器说明：若组件只有一个有参构造器，这个有参构造器的<code>@Autowired</code>可以省略，参数位置的组件仍然能从容器中获取。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰有参构造</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userDao = userDao;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修饰方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userDao = userDao;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在配置类中使用<code>@Autowired</code>修饰方法参数（可以省略）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 或直接省略@Autowired</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="qualifier按照属性名称自动装配"   >          <a href="#qualifier按照属性名称自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#qualifier按照属性名称自动装配"></a> @Qualifier：按照属性名称自动装配</h3>      <p><code>@Qualifier</code>：根据对象<strong>名称</strong>进行装配，可以和<code>@Autowired</code> 一起使用（目的在于区别同一接口下有多个实现类）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要添加 set 方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userDao1&quot;)</span> </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="primary根据设置为默认首选的bean进行自动装配"   >          <a href="#primary根据设置为默认首选的bean进行自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#primary根据设置为默认首选的bean进行自动装配"></a> @Primary：根据设置为默认首选的bean进行自动装配</h3>      <p>被<code>@Primary</code>注解修饰的bean会在自动装配时被设置为首选项。但也可以继续使用<code>@Qualifier</code>指定需要装配的bean。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary()</span></span><br><span class="line">    <span class="meta">@Bean(&quot;userDao1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Qualifier(value = &quot;userDao1&quot;) 不设置时默认注入@Primary()修饰的userDao1</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="profile根据环境动态注册组件"   >          <a href="#profile根据环境动态注册组件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#profile根据环境动态注册组件"></a> @Profile：根据环境动态注册组件</h3>      <p><code>@Profile</code>可以指定组件在哪个运行环境下才能被注册到容器中，若不指定则任何环境都能注册这个组件。可用于在开发环境、测试环境和生产环境中动态地注册组件。</p><p>加了环境标识的组件，只有当这个环境被激活时才能注册到容器中。默认环境是<code>default</code>。没有添加<code>@Profile</code>的组件在任何环境下都会被注册。</p><p><code>@Profile</code>既可以修饰方法，又可以修饰配置类。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile(&quot;default&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Profile(&quot;develop&quot;)</span></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>激活环境的方式：</p><ul><li>在IDEA中设置<code>VM arguments：-Dspring.profiles.active=test</code></li><li>在代码中手动激活环境</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">context.getEnvironment().setActiveProfiles(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;dev&quot;</span>);</span><br><span class="line">context.register(SpringConfigOfPropertyValue.class);</span><br><span class="line">context.refresh();</span><br></pre></td></tr></table></div></figure>        <h2 id="aop"   >          <a href="#aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop"></a> AOP</h2>      <p>采用<strong>动态代理</strong>的设计模式，在程序运行期间动态地将某段代码切入到指定方法（切入点）指定位置进行运行的编程方式。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>定义一个业务逻辑类（<code>MathCalculator</code>）。试图在业务逻辑运行的时候将日志进行打印（方法之前，方法运行结束，方法出现异常等）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i/j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>定义一个日志切面类（<code>LogAspects</code>），在切面类里需要动态感知<code>MathCalculator.div()</code>方法运行到什么阶段并执行相应通知方法。通知方法：</p><ul><li>前置通知（<code>@Before</code>）：在切入点（<code>PointCut</code>）运行之前运行</li><li>后置通知（<code>@After</code>）：在切入点运行结束之后运行（无论方法是否正常结束）</li><li>返回通知（<code>@AfterReturning</code>）：在切入点正常返回之后运行（异常不执行）</li><li>异常通知（<code>@AfterThrowing</code>）：在切入点出现异常之后运行</li><li>环绕通知（<code>@Around</code>）：动态代理的方式手动推进切入点运行（<code>joinPoint.procced()</code>），是最底层的通知（在<code>@Before</code>前执行进入<code>@Around</code>修饰的方法，并在<code>@After</code>执行后调用<code>joinPoint.procced()</code>方法）</li></ul><p><strong>通知方法的执行顺序</strong>：</p><ul><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法之前的代码</li><li>前置通知（<code>@Before</code>）</li><li>业务代码</li><li>返回通知（<code>@AfterReturning</code>）/ 若有异常，此时执行异常通知（<code>@AfterThrowing</code>）</li><li>后置通知（<code>@After</code>）</li><li>环绕通知（<code>@Around</code>）<code>joinPoint.procced()</code>方法以及其之后的代码</li></ul>        <h3 id="aop使用案例"   >          <a href="#aop使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop使用案例"></a> AOP使用案例</h3>      <p>配置类需要<strong>添加@EnableAspectJAutoProxy以开启注解版的AOP自动代理。整个AOP就是从@EnableAspectJAutoProxy注解开始执行的。</strong>（Spring中有很多的<code>@EnableXXX</code>注解，其作用是代替xml文件中的一些配置开启某些功能）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigAOP</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将业务逻辑类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">calculator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切面类加入到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogsAspects <span class="title">logsAspects</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogsAspects();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>切面类<code>LogsAspects</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogsAspects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽取公共的切入点表达式</span></span><br><span class="line">    <span class="comment">// 1. 本类可以引用</span></span><br><span class="line">    <span class="comment">// 2. 其他的切面类也可以引用（需要全类名）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(int com.zhao.aop.MathCalculator.div(int, int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs(); <span class="comment">// 方法参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;切入点&quot;</span> + joinPoint.getSignature().getName() + <span class="string">&quot;运行@Before .... 参数列表：&#123;&quot;</span> + Arrays.asList(args) + <span class="string">&quot;&#125;&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zhao.aop.MathCalculator.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切入点结束@After....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">// result: 方法返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;切入点正常返回@AfterReturning....运行结果：&#123;&quot;</span> + result + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切入点异常@AfterThrowing....异常信息：&#123;&quot;</span> + exception + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前.... &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名: &quot;</span> + proceedingJoinPoint.getSignature());</span><br><span class="line"></span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行目标方法proceed</span></span><br><span class="line">        Object result = proceedingJoinPoint.proceed(args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后.. 返回结果： &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOfAop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfigAOP.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器创建完成....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须从容器中获得bean才能启动AOP</span></span><br><span class="line">        MathCalculator bean = context.getBean(MathCalculator.class);</span><br><span class="line">        bean.div(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>控制台打印：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">容器创建完成....</span><br><span class="line">环绕前.... </span><br><span class="line">签名: int com.zhao.aop.MathCalculator.div(int,int)</span><br><span class="line">切入点div运行@Before .... 参数列表：&#123;[1, 1]&#125;</span><br><span class="line">div方法执行...</span><br><span class="line">切入点正常返回@AfterReturning....运行结果：&#123;1&#125;</span><br><span class="line">切入点结束@After....</span><br><span class="line">环绕后.. 返回结果： 1</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure>        <h2 id="声明式事务"   >          <a href="#声明式事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务"></a> 声明式事务</h2>      ]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringMVC】SSM整合案例</title>
      <link href="2021/06/03/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/"/>
      <url>2021/06/03/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="../images/%E3%80%90SpringMVC%E3%80%91SSM%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/image-20210603213159116.png" alt="image-20210603213159116" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【前端】AJAX</title>
      <link href="2021/06/03/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91AJAX/"/>
      <url>2021/06/03/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91AJAX/</url>
      
        <content type="html"><![CDATA[        <h2 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>      <p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<strong>AJAX 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><p>传统的网页(即不用AJAX技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。而使用AJAX技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。使用AJAX，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>        <h2 id="jqueryajax"   >          <a href="#jqueryajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jqueryajax"></a> jQuery.ajax</h2>      <ul><li>AJAX的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery AJAX本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">       部分参数：</span><br><span class="line">              url：请求地址</span><br><span class="line">             type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">          headers：请求头</span><br><span class="line">             data：要发送的数据</span><br><span class="line">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">            <span class="keyword">async</span>：是否异步</span><br><span class="line">          timeout：设置请求超时时间（毫秒）</span><br><span class="line">       beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">         complete：完成之后执行的回调函数(全局)</span><br><span class="line">          success：成功之后执行的回调函数(全局)</span><br><span class="line">            error：失败之后执行的回调函数(全局)</span><br><span class="line">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</span><br><span class="line">         dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">            <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">           <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">         <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">          <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></div></figure><p>ajax常用参数：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://www.hzhuti.com&quot;</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data: &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;value&quot;</span> &#125;,    <span class="comment">//参数值</span></span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//请求方式</span></span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="使用案例"   >          <a href="#使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用案例"></a> 使用案例</h2>      <p>配置文件</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写一个AjaxController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan3&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>前端页面</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#content&quot;</span>).html(html);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringMVC】SpringMVC</title>
      <link href="2021/06/03/%E3%80%90SpringMVC%E3%80%91SpringMVC/"/>
      <url>2021/06/03/%E3%80%90SpringMVC%E3%80%91SpringMVC/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyfda8e4e5-ada1-4a2e-b5f5-ef679f7a85e8.png" alt="img" /></p>        <h2 id="回顾mvc"   >          <a href="#回顾mvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#回顾mvc"></a> 回顾MVC</h2>              <h3 id="什么是mvc"   >          <a href="#什么是mvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#什么是mvc"></a> 什么是MVC</h3>      <ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li><li>是将业务逻辑、数据、显示分离的方法来组织代码</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong></li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong></li></ul><p><strong>Model（模型）</strong>：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）</strong>：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）</strong>：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy5989b959-a64d-4469-952f-d23699b0bad7.png" alt="img" /></p><span id="more"></span>        <h3 id="mvc框架要做哪些事"   >          <a href="#mvc框架要做哪些事" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mvc框架要做哪些事"></a> MVC框架要做哪些事</h3>      <ul><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求—调用相关的业务处理—封装响应数据</li><li>将响应的数据进行渲染 .jsp / html 等表示层数据</li></ul><p><strong>说明：</strong></p><p>常见的服务器端MVC框架有：Struts、Spring MVC、<span class="exturl"><a class="exturl__link"   href="http://ASP.NET" >ASP.NET</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p>        <h2 id="springmvc简介"   >          <a href="#springmvc简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springmvc简介"></a> SpringMVC简介</h2>              <h3 id="概述"   >          <a href="#概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3>      <p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyfda8e4e5-ada1-4a2e-b5f5-ef679f7a85e8.png" alt="img" /></p><p><strong>SpringMVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</strong></p><p>查看官方文档：<span class="exturl"><a class="exturl__link"   href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" >https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>SpringMVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol>        <h3 id="中心控制器"   >          <a href="#中心控制器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#中心控制器"></a> 中心控制器</h3>      <p>Spring的web框架围绕DispatcherServlet[ 调度Servlet ] 设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudyc49f3d6f-e0c6-4228-9bd7-6a40400c3bd4.png" alt="img" /></p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy00854e07-7eac-476c-a9dd-dcebb7ac0b89.png" alt="img" /></p>        <h3 id="springmvc执行原理"   >          <a href="#springmvc执行原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springmvc执行原理"></a> SpringMVC执行原理</h3>      <p><img src="/images/%E3%80%90SpringMVC%E3%80%91SpringMVC/kuangstudy0214fd0a-0df0-4910-a467-5b7d61712868.png" alt="img" /></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>假设请求的url为 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/SpringMVC/hello" >http://localhost:8080/SpringMVC/hello</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <strong>该url可拆分成三部分：</strong></p><ul><li><a href="http://localhost:8080%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%9F%E5%90%8D/">http://localhost:8080服务器域名</a></li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li></ul><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p><ul><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ul>        <h2 id="hello-springmvc"   >          <a href="#hello-springmvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hello-springmvc"></a> Hello SpringMVC</h2>              <h3 id="配置webxml"   >          <a href="#配置webxml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#配置webxml"></a> 配置web.xml</h3>      <p>注册DispatcherServlet</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1，在web服务器启动时优先启动，启动顺序，数字越小，启动越早--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- / 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li>/ 不会匹配到 .jsp</li><li>/* 匹配所有的请求，包括 .jsp</li></ul>        <h3 id="添加springmvc配置文件"   >          <a href="#添加springmvc配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#添加springmvc配置文件"></a> 添加SpringMVC配置文件</h3>      <ul><li>让IoC的注解生效</li><li>静态资源过滤 ：HTML，JS ，CSS ，图片，视频 ……</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><p>在resource目录下添加SpringMVC的配置文件，名称：<strong>springmvc-servlet.xml</strong> : [servletname]-servlet.xml。配置的形式与Spring容器配置基本类似，为了支持基于注解的IoC，设置了自动扫描包的功能，具体配置信息如下：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IoC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源，否则静态资源无法找到对应的映射，会报错。将SpringMVC无法处理的请求交给Tomcat默认的Servlet处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动，</span></span><br><span class="line"><span class="comment">1. 映射动态请求</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">2. 支持SpringMVC更高级的一些功能，如JSR303校验，快捷的AJAX</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p>&lt;mvc:default-servlet-handler /&gt;将在SpringMVC上下文中定义一个DefaultServletHttpRequestHandle：</p><ul><li>它会对进入DispatcherSevlet的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由WEB应用服务器默认的Servlet处理（将SpringMVC无法处理的请求交给Tomcat默认的Servlet处理）</li><li>会过滤静态资源文件：如果不是静态资源的请求，才由DispatcherServlet继续处理。</li></ul>        <h3 id="创建controller"   >          <a href="#创建controller" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建controller"></a> 创建Controller</h3>      <p>编写一个Java控制类： com.zhao.controller.HelloController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC&quot;</span>);</span><br><span class="line">        <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Controller" >@Controller</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是为了让Spring IoC容器初始化时自动扫描到；</li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/RequestMapping" >@RequestMapping</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是<code>/HelloController/hello</code>；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成<code>WEB-INF/jsp/hello.jsp</code></li></ul>        <h3 id="创建视图层"   >          <a href="#创建视图层" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建视图层"></a> 创建视图层</h3>      <p>在WEB-INF/ jsp目录中创建hello.jsp，视图可以直接取出并展示从Controller带回的信息；可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;SpringMVC&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>      <p>实现步骤：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>创建对应的控制类Controller</li><li>最后完善前端视图和Controller之间的对应</li><li>测试运行调试.</li></ol><p>使用SpringMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>        <h2 id="restful"   >          <a href="#restful" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#restful"></a> RESTful</h2>              <h3 id="概念"   >          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3>      <p>REST：Representational State Transfer，直译过来表现层状态转换，是目前最流行的一种互联网软件架构。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>资源</strong>（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识别符。</p><p><strong>表现层</strong>（Representation）：把资源具体呈现出来的形式，叫做它的表现层（Representation）。比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</p><p><strong>状态转化</strong>（State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。具体说，就是 HTTP 协议里面，四个表示操作方式的动词：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>。它们分别对应四种基本操作：</p><ul><li><code>GET</code>用来获取资源</li><li><code>POST</code>用来新建资源</li><li><code>PUT</code>用来更新资源</li><li><code>DELETE</code>用来删除资源</li></ul><p>满足REST设计风格的程序或接口我们称之为RESTful(从单词字面来看就是一个形容词)。所以RESTful API 就是满足REST架构风格的接口。它不是标准也不是协议，只是一种风格，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>        <h3 id="功能"   >          <a href="#功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#功能"></a> 功能</h3>      <p><strong>传统方式操作资源</strong>：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><ul><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/queryItem.action?id=1" >http://127.0.0.1/item/queryItem.action?id=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 查询，GET</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/saveItem.action" >http://127.0.0.1/item/saveItem.action</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 新增，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/updateItem.action" >http://127.0.0.1/item/updateItem.action</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 更新，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/deleteItem.action?id=1" >http://127.0.0.1/item/deleteItem.action?id=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 删除，GET或POST</li></ul><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><ul><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/1" >http://127.0.0.1/item/1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 查询，GET</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item" >http://127.0.0.1/item</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 新增，POST</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item" >http://127.0.0.1/item</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 更新，PUT</li><li><span class="exturl"><a class="exturl__link"   href="http://127.0.0.1/item/1" >http://127.0.0.1/item/1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 删除，DELETE</li></ul>        <h3 id="使用"   >          <a href="#使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>      <p>在Spring MVC中可以使用 <span class="exturl"><a class="exturl__link"   href="https://github.com/PathVariable" >@PathVariable</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable(&quot;p1&quot;)</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable(&quot;p2&quot;)</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>使用method属性指定请求类型</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://github.com/RequestMapping" >@RequestMapping</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 注解能够处理 HTTP 请求的方法，约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求才能访问到</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个： 组合注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://github.com/GetMapping" >@GetMapping</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 是一个组合注解，它所扮演的是 <span class="exturl"><a class="exturl__link"   href="https://github.com/RequestMapping" >@RequestMapping</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>(method =RequestMethod.GET) 的一个快捷方式。</p><p><code>HiddenHttpMethodFilter</code>：浏览器 form 表单只支持 <code>GET</code> 与 <code>POST</code>请求，而<code>DELETE</code>、<code>PUT</code>等 method 并不支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法，使得支持 <code>GET</code>、<code>POST</code>、<code>PUT</code>与<code>DELETE</code>请求。使用时需要在web.xml中添加<code>HiddenHttpMethodFilter</code>：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用REST风格的URI，将页面的POST请求转换为指定的DELETE或PUT请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="结果跳转方式"   >          <a href="#结果跳转方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#结果跳转方式"></a> 结果跳转方式</h2>              <h3 id="modelandview"   >          <a href="#modelandview" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#modelandview"></a> ModelAndView</h3>      <p>设置ModelAndView对象，根据view的名称和视图解析器跳到指定的页面。</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>对应的Controller类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="servletapi"   >          <a href="#servletapi" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletapi"></a> ServletAPI</h3>      <p>通过设置ServletAPI，不需要视图解析器。</p><ul><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="springmvc"   >          <a href="#springmvc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#springmvc"></a> SpringMVC</h3>      <p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向不需要视图解析器，本质就是重新请求到一个新地方，所以注意路径问题.</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="数据处理"   >          <a href="#数据处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据处理"></a> 数据处理</h2>              <h3 id="处理提交数据"   >          <a href="#处理提交数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#处理提交数据"></a> 处理提交数据</h3>      <p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/hello?name=zhangsan" >http://localhost:8080/hello?name=zhangsan</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/hello?username=zhangsan" >http://localhost:8080/hello?username=zhangsan</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用<code>@RequestParam(&quot;username&quot;)</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// : username提交的域的名称</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><p>实体类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="comment">//get/set</span></span><br><span class="line">    <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>提交数据 : <span class="exturl"><a class="exturl__link"   href="http://localhost:8080/mvc04/user?name=zhangsan&amp;id=1&amp;age=15" >http://localhost:8080/mvc04/user?name=zhangsan&amp;id=1&amp;age=15</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>处理方法 :</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>后台输出 : User { id=1, name=’zhangsan’, age=15 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p>        <h3 id="数据显示到前端"   >          <a href="#数据显示到前端" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据显示到前端"></a> 数据显示到前端</h3>      <p><strong>第一种 : 通过ModelAndView</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>第二种 : 通过ModelMap</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>第三种 : 通过Model</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>对比</strong></p><ul><li><code>Model</code>只有寥寥几个方法只适合用于储存数据，简化了新手对于<code>Model</code>对象的操作和理解；</li><li><code>ModelMap</code>继承了 <code>LinkedMap</code>，除了实现了自身的一些方法，同样的继承 <code>LinkedMap</code>的方法和特性；</li><li><code>ModelAndView</code>可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</li></ul>        <h3 id="乱码问题"   >          <a href="#乱码问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#乱码问题"></a> 乱码问题</h3>      <p>SpringMVC给我们提供了一个过滤器，可以在web.xml中配置。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注意：<url-pattern>里需要写上/*而非/，否则.jsp文件无法经过该过滤器，因此无法解决.jsp文件的乱码问题。</p>        <h2 id="controller返回json数据"   >          <a href="#controller返回json数据" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#controller返回json数据"></a> Controller返回JSON数据</h2>      <p>JSON解析工具：</p><ul><li>jackson</li><li>fastjson（阿里巴巴）</li></ul><p>首先使用jackson，导入jar包：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置web.xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置springmvc-servlet.xml</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>假设已经存在实体类User，编写一个Controller：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/json1&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里使用到注解<code>@ResponseBody</code>，其会将return 返回的字符串转为JSON格式</p><p>注意：使用JSON时记得处理可能出现的乱码问题，解决方案：在<code>@RequestMapping</code>中设置utf-8</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></div></figure><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加。可以通过Spring配置统一指定，这样就不用每次都去处理乱码问题。</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong><span class="exturl"><a class="exturl__link"   href="https://github.com/RestController" >@RestController</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></strong> ，这样子，里面所有的方法都只会返回 JSON字符串了，不用再每一个方法都添加<span class="exturl"><a class="exturl__link"   href="https://github.com/ResponseBody" >@ResponseBody</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 。在前后端分离开发中，一般都使用 <span class="exturl"><a class="exturl__link"   href="https://github.com/RestController" >@RestController</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> ，十分便捷。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//由于@RestController，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="fastjson"   >          <a href="#fastjson" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#fastjson"></a> fastJson</h3>      <p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现JSON对象与JavaBean对象的转换，实现JavaBean对象与JSON字符串的转换，实现JSON对象与JSON字符串的转换。实现JSON的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>fastjson 三个主要的类：</p><ul><li><p>【JSONObject 代表 json 对象 】</p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应JSON对象，通过各种形式的get()方法可以获取JSON对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li><p>【JSONArray 代表 JSON对象数组】</p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p>【JSON 代表 JSONObject和JSONArray的转化】</p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">        </span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="ajax"   >          <a href="#ajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ajax"></a> AJAX</h2>              <h3 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>      <p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<strong>AJAX 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><p>传统的网页(即不用AJAX技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。而使用AJAX技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。使用AJAX，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>        <h3 id="jqueryajax"   >          <a href="#jqueryajax" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jqueryajax"></a> jQuery.ajax</h3>      <ul><li>AJAX的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery AJAX本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">       部分参数：</span><br><span class="line">              url：请求地址</span><br><span class="line">             type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">          headers：请求头</span><br><span class="line">             data：要发送的数据</span><br><span class="line">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">            <span class="keyword">async</span>：是否异步</span><br><span class="line">          timeout：设置请求超时时间（毫秒）</span><br><span class="line">       beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">         complete：完成之后执行的回调函数(全局)</span><br><span class="line">          success：成功之后执行的回调函数(全局)</span><br><span class="line">            error：失败之后执行的回调函数(全局)</span><br><span class="line">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</span><br><span class="line">         dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">            <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">           <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">         <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">           <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">          <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></div></figure><p>ajax常用参数：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://www.hzhuti.com&quot;</span>,    <span class="comment">//请求的url地址</span></span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,   <span class="comment">//返回格式为json</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>, <span class="comment">//请求是否异步，默认为异步，这也是ajax重要特性</span></span><br><span class="line">    data: &#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;value&quot;</span> &#125;,    <span class="comment">//参数值</span></span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,   <span class="comment">//请求方式</span></span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求前的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求成功时处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求完成的处理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请求出错处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><p>技巧：<code>data</code>属性中若想添加某个表单里的数据时，一个一个获取表单属性值较为繁琐，可以使用jQuery提供的<code>.serialize()</code>方法获取完整的表单数据，例如：<code>data: $&#123;#form&#125;.serialize()</code></p>        <h3 id="使用案例"   >          <a href="#使用案例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用案例"></a> 使用案例</h3>      <p>配置文件</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写一个AjaxController</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajax1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan1&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan2&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">&quot;zhangsan3&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>前端页面</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span></span><br><span class="line"><span class="javascript">                    html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#content&quot;</span>).html(html);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>kuang  ----  zhao</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring事务</title>
      <link href="2021/05/31/%E3%80%90Spring%E3%80%91Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/05/31/%E3%80%90Spring%E3%80%91Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring%E4%BA%8B%E5%8A%A1/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="spring-事务管理介绍"   >          <a href="#spring-事务管理介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-事务管理介绍"></a> Spring 事务管理介绍</h2>      <ol><li>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</li><li>在 Spring 进行事务管理操作 ；两种方式：编程式事务管理、<strong>声明式事务管理</strong>（推荐使用）</li><li>声明式事务管理 （1）基于注解方式（推荐使用） （2）基于 xml 配置文件方式</li><li>在 Spring 进行声明式事务管理，底层使用 AOP 原理</li><li>Spring 事务管理 API ：提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</li></ol>        <h2 id="注解声明式事务管理"   >          <a href="#注解声明式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注解声明式事务管理"></a> 注解声明式事务管理</h2>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、在 spring 配置文件，开启事务注解,引入名称空间！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、在 spring 配置文件配置事务管理器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transactionmanager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、在 service 类上面（或者 service 类里面方法上面）添加事务注解--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        （1）@Transactional，这个注解添加到类上面，也可以添加方法上面</span></span><br><span class="line"><span class="comment">        （2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</span></span><br><span class="line"><span class="comment">        （3）如果把这个注解添加方法上面，为这个方法添加事务——@Transactional</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(propagation = Propagation.REQUIRED)</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用update方法</span></span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="声明式事务传播特性"   >          <a href="#声明式事务传播特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务传播特性"></a> 声明式事务传播特性</h2>      <p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。Spring支持7种事务传播行为：</p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li><strong>propagation_required_new</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 <code>PROPAGATION_REQUIRED</code>，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p>        <h3 id="xml-声明式事务管理"   >          <a href="#xml-声明式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#xml-声明式事务管理"></a> XML 声明式事务管理</h3>      <p>在 Spring 配置文件中进行配置：</p><ul><li>第一步：配置事务管理器</li><li>第二步：配置通知</li><li>第三步：配置切入点和切面</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*</span></span></span><br><span class="line"><span class="tag"><span class="string">                                      com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring AOP</title>
      <link href="2021/05/29/%E3%80%90Spring%E3%80%91Spring-AOP/"/>
      <url>2021/05/29/%E3%80%90Spring%E3%80%91Spring-AOP/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="aop-基本概念"   >          <a href="#aop-基本概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基本概念"></a> AOP 基本概念</h2>      <p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudyfffec70f-ce10-4ca2-a71b-dbc535b0e07c.png" alt="img" /></p><ul><li><p>面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率；</p></li><li><p>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能。</p></li><li><p>使用登录例子说明 AOP：</p></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/20200702135106266.png" alt="img" /></p>        <h2 id="aop-底层原理"   >          <a href="#aop-底层原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-底层原理"></a> <strong>AOP 底层原理</strong></h2>      <p>AOP 底层使用动态代理 ，动态代理有两种情况：</p><p>第一种 有接口情况，使用 JDK 动态代理 ；创建<strong>接口实现类代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/20200702135134128.png" alt="在这里插入图片描述" /></p><p>第二种 没有接口情况，使用 CGLIB 动态代理；创建<strong>子类的代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/2020070213514980.png" alt="在这里插入图片描述" /></p><span id="more"></span>        <h2 id="aop-jdk-动态代理"   >          <a href="#aop-jdk-动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-jdk-动态代理"></a> <strong>AOP JDK 动态代理</strong></h2>      <p>1）使用 JDK 动态代理，使用 <code>Proxy</code>类里面的方法创建代理对象：</p><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InvocationHandler h)</span></span></span><br></pre></td></tr></table></div></figure><ul><li>参数一：类加载器</li><li>参数二：增强方法所在的类，这个类实现的接口，支持多个接口</li><li>参数三：实现这个接口 <code>InvocationHandler</code>，创建代理对象，写增强的部分</li></ul><p>2）编写 JDK 动态代理代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建接口，定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（2）创建接口实现类，实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">        <span class="comment">/** 第一参数，类加载器 </span></span><br><span class="line"><span class="comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span></span><br><span class="line"><span class="comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span></span><br><span class="line">        UserDao dao =(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line">                                                     <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="aop-术语"   >          <a href="#aop-术语" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-术语"></a> AOP 术语</h2>      <ul><li>连接点（JointPoint）：类里面哪些方法可以被增强，这些方法称为连接点。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义，实际被真正增强的方法称为切入点。</li><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（Aspect）：横切关注点被模块化的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。包含前置通知，后置通知，环绕通知 ，异常通知和最终通知。</li><li>目标（Target）：被通知的对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-AOP/kuangstudy7a512991-1651-44b4-afca-d09e12cbbe6f.png" alt="img" /></p>        <h2 id="aop-操作"   >          <a href="#aop-操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-操作"></a> AOP 操作</h2>      <p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作。基于 AspectJ 实现 AOP 操作的两种方式：</p><ul><li>基于 xml 配置文件实现</li><li>基于注解方式实现</li></ul><p>【重点】使用AOP织入，需要导入一个依赖包！</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>切入点表达式，如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class="line">（<span class="number">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class="line">（<span class="number">3</span>）例子如下：</span><br><span class="line">    例 <span class="number">1</span>：对 com.zhao.dao.BookDao 类里面的 add 进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.add(..))</span><br><span class="line"> 例 <span class="number">2</span>：对 com.zhao.dao.BookDao 类里面的所有的方法进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.* (..))</span><br><span class="line">    例 <span class="number">3</span>：对 com.zhao.dao 包里面所有类，类里面所有方法进行增强</span><br><span class="line">execution(* com.zhao.dao.*.* (..))</span><br></pre></td></tr></table></div></figure>        <h2 id="方式一通过-spring-api-实现aop"   >          <a href="#方式一通过-spring-api-实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一通过-spring-api-实现aop"></a> 方式一：通过 Spring API 实现AOP</h2>      <p>第一步：首先编写业务接口和实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：然后编写增强类 ：一个前置增强，一个后置增强</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">    <span class="comment">//Object : 目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue 返回值</span></span><br><span class="line">    <span class="comment">//method被调用的方法</span></span><br><span class="line">    <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">    <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">                           +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">                           +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第三步：最后去Spring的文件中注册 , 并实现AOP切入实现 , 注意导入约束</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点  expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第四步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.search();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 ，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用。</p>        <h2 id="方式二自定义类来实现aop"   >          <a href="#方式二自定义类来实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二自定义类来实现aop"></a> 方式二：自定义类来实现AOP</h2>      <p>目标业务类不变依旧是userServiceImpl</p><p>第一步：编写一个切入类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：在Spring中配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="方式三使用注解实现"   >          <a href="#方式三使用注解实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三使用注解实现"></a> 方式三：使用注解实现</h2>      <p>第一步：编写一个注解实现的增强类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.config;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointcut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名:&quot;</span>+jp.getSignature());</span><br><span class="line">        <span class="comment">//执行目标方法proceed</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式:注解实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.config.AnnotationPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><p>aop:aspectj-autoproxy：说明</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过aop命名空间的<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>声明自动为spring容器中那些配置@Aspect切面的bean创建代理，织入切面。当然，Spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>隐藏起来了</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>  <span class="attr">poxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则Spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></div></figure><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span></span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】Servlet</title>
      <link href="2021/05/28/%E3%80%90JavaWeb%E3%80%91Servlet/"/>
      <url>2021/05/28/%E3%80%90JavaWeb%E3%80%91Servlet/</url>
      
        <content type="html"><![CDATA[        <h2 id="servlet"   >          <a href="#servlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h2>      <p>Servlet是Sun公司开发动态web的一门技术。Sun在这些API中提供了一个接口：Servlet。开发Servlet程序需要完成两个步骤：</p><ul><li>编写一个Java类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中</li></ul><p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p>        <h3 id="helloservlet"   >          <a href="#helloservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#helloservlet"></a> HelloServlet</h3>      <p>Sevlet接口Sun公司提供有两个默认的实现类：HttpServlt，GenericServlet</p><ol><li><p>构建一个普通的Maven项目（不带模板），删掉里面的src目录，这个空的工程就是Maven的主工程。之后在这个项目里建立Module，新建的Module均为Maven父项目的子项目。</p></li><li><p>关于Maven父子工程的理解：在父项目中会有</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>父项目中的Maven依赖环境Jar包子项目可以直接使用</p></li><li><p>Maven环境优化：修改web.xml（与本地Tomcat中的内容一致）</p></li></ol>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>编写一个Servlet程序<ul><li>编写一个普通类</li><li>实现Servlet接口，这里继承HttpServlet</li></ul></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于get或者post只是请求实现的不同方式，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>编写Servlet映射：写的Java程序要通过浏览器访问，浏览器需要连接web服务器，所以需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能访问到的路径。</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="6"><li>配置Tomcat，注意配置项目发布的路径</li><li>启动测试</li></ol><span id="more"></span>        <h3 id="servlet原理"   >          <a href="#servlet原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet原理"></a> Servlet原理</h3>      <p>Servlet是由web服务器调用，web服务器在收到浏览器请求后会调用<code>service()</code>方法，该方法会根据请求的类型<code>GET</code>或<code>POST</code>分发处理，执行相应的<code>doGet()</code>或<code>doPost()</code>方法。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91Servlet/image-20210501200459226.png" alt="image-20210501200459226" /></p>        <h3 id="mapping问题"   >          <a href="#mapping问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapping问题"></a> Mapping问题</h3>      <ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>一个Servlet可以指定多个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>一个Servlet可以指定通用映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>默认请求路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>优先级问题：</p><p>指定了<strong>固有的映射路径优先级最高</strong>，如果找不到匹配的固有映射路径，则就会走默认路径（*)</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Error Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ErrorServlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="servletcontext"   >          <a href="#servletcontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletcontext"></a> ServletContext</h3>      <p>是一个接口，代表Servlet上下文对象，一个工程只有一个ServletContext对象，是一个域对象（这里的域指的是整个web工程）。</p><p>web容器在启动时，他会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用。</p><p>作用1：共享数据，即在某个Servlet中保存的数据可以在另一个Servlet中获得。</p><p>存入数据的Servlet类，用于保存数据到ServletContext对象中。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// this.getInitParameter();  初始化参数</span></span><br><span class="line">        <span class="comment">// this.getServletConfig();  Servlet配置</span></span><br><span class="line">        <span class="comment">// this.getServletContext(); Servlet上下文</span></span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = <span class="string">&quot;zhangsan&quot;</span>; <span class="comment">// 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个数据以键值对形式保存在了ServletContext中。</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>读入数据的Servlet类，用于从ServletContext对象中读取数据。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String)context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>作用2：获取初始化参数。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是上下文参数（属于整个web工程） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">resp.getWriter().print(url);</span><br></pre></td></tr></table></div></figure><p>作用3：请求转发。</p><p>访问当前url时，将消息转发给指定的其他url（当前url不会发生变化，重定向会变化）。当前url只充当转发功能。<strong>请求转发不需要添加项目名，只需要/+映射路径</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发的请求参数</span></span><br><span class="line">RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/servlet01&quot;</span>);</span><br><span class="line">requestDispatcher.forward(req, resp); <span class="comment">// 调用forward实现请求转发</span></span><br></pre></td></tr></table></div></figure><p>请求转发的特点：</p><ul><li>浏览器地址栏没有变化</li><li>是一次请求</li><li>共享Request域中的数据</li><li>可以转发到<code>WEB-INF</code>目录下</li><li>无法访问项目以外的其他资源（如百度）</li></ul><p>作用4：读取资源文件</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现都被打包到了同一个路径下：<code>/WEB-INF/classes</code>，将这个路径称为classpath。</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(resourceAsStream);</span><br><span class="line">String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">resp.getWriter().print(url + <span class="string">&#x27;:&#x27;</span> + password);</span><br></pre></td></tr></table></div></figure>        <h3 id="httpservletresponse"   >          <a href="#httpservletresponse" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletresponse"></a> HttpServletResponse</h3>      <p>web服务器接收到客户端的HTTP请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象。</p><ul><li>如果要获取客户端请求过来的参数，使用HttpServletRequest</li><li>如果要给客户端响应一些信息，使用HttpServletResponse</li></ul><p>负责向浏览器发送数据的方法：</p><ul><li><code>getOutputStream()</code></li><li><code>getWriter()</code></li></ul><p>常见应用：</p><ol><li>向浏览器输出消息</li><li>下载文件</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置让浏览器能够支持附件下载</span></span><br><span class="line">respones.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br></pre></td></tr></table></div></figure><ol start="3"><li>实现重定向</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/projectName/url&quot;</span>); <span class="comment">// 重定向到其他url</span></span><br></pre></td></tr></table></div></figure><p><strong>重定向和转发的区别</strong></p><ul><li>请求转发时，url不会发生变化。（转发在服务器内部完成，不需要加项目名路径，如&quot;/url&quot;）</li><li>重定向时，url会发生变化。（需要加项目名路径，如&quot;/projectName/url&quot;)</li></ul><p>在前端文件中写跳转链接时，因其不能得知服务器内部的项目结构，因此需要人为指定contextPath（在Servlet程序中不需要再指定当前项目在服务器内的路径）</p><p>细节：当用户提交完请求，浏览器会记录下最后一次请求的全部信息。当用户按下功能键F5，就会发起浏览器记录的最后一次请求。在此情况下如果使用请求转发的方式跳转页面，用户按下F5后会再次发起请求，因此这种情况应该使用重定向。</p>        <h3 id="httpservletrequest"   >          <a href="#httpservletrequest" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletrequest"></a> HttpServletRequest</h3>      <p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP协议中的所有消息信息会被封装到HttpServletRequest，通过该类的方法可以获得客户端传来的请求信息。</p><ol><li>获取传递的参数</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="2"><li>请求转发</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(requset, response);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91Servlet/image-20210501221519475.png" alt="image-20210501221519475" /></p><ol start="3"><li>获取请求头中Referer信息（浏览器发起请求时的url），可用于重定向回原地址</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = req.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="web中-斜杠的不同意义"   >          <a href="#web中-斜杠的不同意义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web中-斜杠的不同意义"></a> Web中 / 斜杠的不同意义</h3>      <p>在web中，/ 是一种绝对路径：</p><ul><li>/ 如果被<strong>浏览器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/ （指写在静态html代码中，无法被服务器解析，只能被浏览器解析）</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>/ 如果被<strong>服务器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/工程路径</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 映射</span><br><span class="line">&lt;url-pattern&gt;&#x2F;servlet1&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取绝对路径</span><br><span class="line">servletContext.getRealPath(&quot;&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请求转发</span><br><span class="line">request.getRequestDispacther(&quot;&#x2F;&quot;);</span><br></pre></td></tr></table></div></figure><ul><li>特殊情况：response.senRedirect(&quot;/&quot;); 会将斜杠发送给浏览器解析，得到http://ip:port/</li></ul><p><strong>/WEB-INF/目录下的资源文件，客户端无法直接访问（即不能在浏览器中输入url直接跳转），而只能在servlet程序中跳转</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring IoC</title>
      <link href="2021/05/24/%E3%80%90Spring%E3%80%91Spring-IoC/"/>
      <url>2021/05/24/%E3%80%90Spring%E3%80%91Spring-IoC/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E3%80%90Spring%E3%80%91Spring-IoC/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p>        <h2 id="spring-ioc容器"   >          <a href="#spring-ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-ioc容器"></a> Spring IoC容器</h2>      <p><strong>1、什么是IoC</strong></p><ul><li>把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IoC目的：为了降低耦合度</li></ul><p><strong>2、IoC底层</strong></p><p>xml解析、工厂模式、反射</p><p><strong>3、Spring提供的IoC容器实现的两种方式（两个接口）</strong></p><ul><li>BeanFactory接口：IoC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</li><li>ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</li></ul><p><strong>4、ApplicationContext接口的实现类</strong></p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring-IoC/image-20210523201040536.png" alt="image-20210523201040536" /></p><span id="more"></span>        <h2 id="bean管理基于xml方式"   >          <a href="#bean管理基于xml方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean管理基于xml方式"></a> Bean管理——基于XML方式</h2>      <p><strong>1、IoC操作Bean管理</strong></p><p>Bean管理就是两个操作：</p><ul><li>Spring创建对象；</li><li>Spring注入属性</li></ul><p><strong>2、基于XML配置文件创建对象</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>3、基于XML方式注入属性</strong>（DI：依赖注入（注入属性））</p><p><mark>set方式注入</mark></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建属性</span></span><br><span class="line">        <span class="keyword">private</span> String bname;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bname = bname;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>有参构造函数注入</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式：创建类，构建有参函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname,String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式：有参数构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>p名称空间注入</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   &lt;!--在这里添加一行p--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;very&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;good&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>4、注入空值和特殊符号</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（1）null值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="comment">&lt;!--属性里边添加一个null标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--（2）特殊符号赋值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">       b 把带特殊符号内容写到CDATA</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>5、注入属性-外部bean</strong></p><p>创建两个类service和dao类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;<span class="comment">//service类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add...............&quot;</span>);</span><br><span class="line">        userDao.update();<span class="comment">//调用dao方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;<span class="comment">//dao类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在spring配置文件中进行配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 service和dao对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>6、基于XML方式注入内部bean和级联赋值</strong></p><p>注入属性-内部bean</p><ul><li>一对多关系：部门和员工一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）</li><li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</li><li>在spring配置文件中配置</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span><span class="comment">&lt;!--内部bean赋值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宣传部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注入属性-级联赋值</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;公关部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二：生成dept的get方法（get方法必须有！！）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jams&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>7、IoC 操作 Bean 管理——xml 注入集合属性</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">//2 list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">//3 map集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//4 set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）在 spring 配置文件进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>8、在集合里面设置对象类型值</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生所学多门课程</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courseList;<span class="comment">//创建集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.courseList = courseList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; &lt;!--添加util名称空间--&gt;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  <span class="comment">&lt;!--添加util名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把集合注入部分提取出来--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 提取list集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>Bean作用域</strong></p><p>在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><ul><li>在 Spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</li><li><code>singleton</code>：表示是单实例对；<code>prototype</code>：表示是多实例对象</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span> <span class="comment">&lt;!--设置为多实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>设置 scope 值是 <code>singleton</code> 时候，加载 Spring 配置文件时候就会创建实例对象 ；设置 scope 值是 <code>prototype</code>时候，不是在加载 Spring 配置文件时候创建对象，而是在调用 <code>getBean</code>方法时候才创建实例对象</p><p><strong>Bean生命周期</strong></p><p>生命周期 ：从对象创建到对象销毁的过程。bean 的生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</li><li>调用 bean 的初始化的方法（需要在配置文件中配置初始化的方法<code>init-method</code>）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法<code>destroy-method</code>）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;<span class="comment">//创建后置处理器实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>FactoryBean</strong></p><p>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><ul><li>普通bean：在配置文件中定义 bean 类型就是返回类型</li><li>工厂bean：在配置文件定义 bean 类型可以和返回类型不一样。<ul><li>第一步：创建类，让这个类作为工厂bean，实现接口<code>FactoryBean</code>；</li><li>第二步：实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ApplicationContext context =</span><br><span class="line"> <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"> Course course = context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);<span class="comment">//返回值类型可以不是定义的bean类型！</span></span><br><span class="line"> System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>引入外部属性文件（如Druid）</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--引入context名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="bean管理基于注解方式"   >          <a href="#bean管理基于注解方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean管理基于注解方式"></a> Bean管理——基于注解方式</h2>      <p><strong>1、什么是注解</strong></p><ul><li>注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解目的：简化 xml 配置</li></ul><p><strong>2、Spring 针对 Bean 管理中创建对象提供注解</strong></p><p>下面四个注解功能是一样的，都可以用来创建 bean 实例</p><ul><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ul><p><strong>3、基于注解方式实现对象创建</strong></p><p>第一步 引入依赖 （引入spring-aop jar包）</p><p>第二步 开启组件扫描</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment"> 1 如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment"> 2 扫描包上层目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>4、开启组件扫描细节配置</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span> <span class="attr">use-defaultfilters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>5、基于注解方式实现属性注入</strong></p><p>（1）<code>@Autowired</code>：根据属性<strong>类型</strong>进行自动装配:</p><ul><li>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</li><li>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义 dao 类型属性</span></span><br><span class="line">    <span class="comment">//不需要添加 set 方法</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）<code>@Qualifier</code>：根据对象<strong>名称</strong>进行注入，这个<code>@Qualifier</code> 注解的使用，和上面<code>@Autowired</code> 一起使用（目的在于区别同一接口下有多个实现类）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（3）<code>@Resource</code>：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（4）<code>@Value</code>：注入<strong>普通类型属性</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name</span><br></pre></td></tr></table></div></figure><p><strong>总结：若某类型的对象只有一个，则可以使用<code>@Autowired</code>注解，此时只会找到唯一的一个对象；但若某类型的对象不止一个，则要使用<code>@Qualifier</code>注解，其会根据对象名称去寻找指定的对象。若注入基本类型对象使用<code>@Value</code></strong>。</p><p><strong>6、完全注解开发</strong></p><p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zhao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）编写测试类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载配置类</span></span><br><span class="line">    ApplicationContext context</span><br><span class="line">        = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>,</span><br><span class="line">                                              UserService.class);</span><br><span class="line">    System.out.println(userService);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】Spring5</title>
      <link href="2021/05/23/%E3%80%90Spring%E3%80%91Spring5/"/>
      <url>2021/05/23/%E3%80%90Spring%E3%80%91Spring5/</url>
      
        <content type="html"><![CDATA[        <h2 id="spring框架概述"   >          <a href="#spring框架概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring框架概述"></a> Spring框架概述</h2>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/kuangstudyf90849ac-8a55-459f-846b-6382d38d6a4d.png" alt="img" /></p><p>Spring是轻量级的开源的JavaEE框架，可以解决企业应用开发的复杂性。</p><p>Spring有两个核心部分：</p><ul><li><strong>IoC（Inversion of Control）</strong>：控制反转，把创建对象过程交给Spring容器进行管理</li><li><strong>AOP（Aspect Oriented Program）</strong>：面向切面编程，不修改源代码进行功能增强</li></ul><p>Spring优点：</p><ul><li>开源、免费</li><li>轻量级，非侵入式</li><li>方便解耦、简化开发</li><li>AOP编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li></ul>        <h2 id="spring-ioc"   >          <a href="#spring-ioc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-ioc"></a> Spring IoC</h2>              <h3 id="ioc容器"   >          <a href="#ioc容器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ioc容器"></a> IoC容器</h3>              <h4 id="1-什么是ioc"   >          <a href="#1-什么是ioc" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-什么是ioc"></a> 1、什么是IoC</h4>      <ul><li>把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IoC目的：为了降低耦合度</li></ul>        <h4 id="2-ioc底层"   >          <a href="#2-ioc底层" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-ioc底层"></a> 2、IoC底层</h4>      <p>xml解析、工厂模式、反射</p>        <h4 id="3-spring提供的ioc容器实现的两种方式两个接口"   >          <a href="#3-spring提供的ioc容器实现的两种方式两个接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-spring提供的ioc容器实现的两种方式两个接口"></a> 3、Spring提供的IoC容器实现的两种方式（两个接口）</h4>      <ul><li>BeanFactory接口：IoC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</li><li>ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</li></ul>        <h4 id="4-applicationcontext接口的实现类"   >          <a href="#4-applicationcontext接口的实现类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-applicationcontext接口的实现类"></a> 4、ApplicationContext接口的实现类</h4>      <p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/image-20210523201040536.png" alt="image-20210523201040536" /></p><span id="more"></span>        <h3 id="bean管理基于xml方式"   >          <a href="#bean管理基于xml方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean管理基于xml方式"></a> Bean管理——基于XML方式</h3>              <h4 id="1-ioc操作bean管理"   >          <a href="#1-ioc操作bean管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-ioc操作bean管理"></a> 1、IoC操作Bean管理</h4>      <p>Bean管理就是两个操作：</p><ul><li>Spring创建对象；</li><li>Spring注入属性</li></ul>        <h4 id="2-基于xml配置文件创建对象"   >          <a href="#2-基于xml配置文件创建对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-基于xml配置文件创建对象"></a> 2、基于XML配置文件创建对象</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>获取类对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//在执行getBean的时候, user已经创建好了, 通过无参构造</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    <span class="comment">//User user = (User) context.getBean(&quot;user&quot;);</span></span><br><span class="line">    <span class="comment">//调用对象的方法</span></span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3-基于xml方式注入属性di依赖注入注入属性"   >          <a href="#3-基于xml方式注入属性di依赖注入注入属性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-基于xml方式注入属性di依赖注入注入属性"></a> 3、基于XML方式注入属性（DI：依赖注入（注入属性））</h4>      <p><mark>set方式注入</mark></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建属性</span></span><br><span class="line">        <span class="keyword">private</span> String bname;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bname = bname;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>有参构造函数注入</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式：创建类，构建有参函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname,String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式：有参数构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>p名称空间注入</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、添加p名称空间在配置文件头部--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   &lt;!--在这里添加一行p--&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;very&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;good&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="4-注入空值和特殊符号"   >          <a href="#4-注入空值和特殊符号" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-注入空值和特殊符号"></a> 4、注入空值和特殊符号</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（1）null值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span> <span class="comment">&lt;!--属性里边添加一个null标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--（2）特殊符号赋值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性值包含特殊符号</span></span><br><span class="line"><span class="comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">       b 把带特殊符号内容写到CDATA</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="5-注入属性-外部bean"   >          <a href="#5-注入属性-外部bean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-注入属性-外部bean"></a> 5、注入属性-外部bean</h4>      <p>创建两个类service和dao类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;<span class="comment">//service类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserDao类型属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add...............&quot;</span>);</span><br><span class="line">        userDao.update();<span class="comment">//调用dao方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;<span class="comment">//dao类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在Spring配置文件中进行配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 service和dao对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入userDao对象</span></span><br><span class="line"><span class="comment">        name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="注入属性-bean自动装配"   >          <a href="#注入属性-bean自动装配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注入属性-bean自动装配"></a> 注入属性-Bean自动装配</h4>      <p>在不使用自动装配时需要手动注入每个bean</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不使用自动装配时需要手动注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在XML中使用<code>autowire</code>设置自动装配：</p><ul><li>byName：按照bean名称自动装配</li><li>byType：按照bean类型自动装配</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="6-基于xml方式注入内部bean和级联赋值"   >          <a href="#6-基于xml方式注入内部bean和级联赋值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-基于xml方式注入内部bean和级联赋值"></a> 6、基于XML方式注入内部bean和级联赋值</h4>      <p>注入属性-内部bean</p><ul><li>一对多关系：部门和员工一个部门有多个员工，一个员工属于一个部门（部门是一，员工是多）</li><li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性进行表示</li><li>在spring配置文件中配置</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某一个部门，使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置对象类型属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span><span class="comment">&lt;!--内部bean赋值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宣传部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注入属性-级联赋值</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;公关部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二：生成dept的get方法（get方法必须有！！）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置两个普通属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jams&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部门&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="7-ioc-操作-bean-管理xml注入集合属性"   >          <a href="#7-ioc-操作-bean-管理xml注入集合属性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-ioc-操作-bean-管理xml注入集合属性"></a> 7、IoC 操作 Bean 管理——XML注入集合属性</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建类，定义数组、list、map、set 类型属性，生成对应 set 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="comment">//2 list集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="comment">//3 map集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    <span class="comment">//4 set集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）在 spring 配置文件进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="8-在集合里面设置对象类型值"   >          <a href="#8-在集合里面设置对象类型值" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-在集合里面设置对象类型值"></a> 8、在集合里面设置对象类型值</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生所学多门课程</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courseList;<span class="comment">//创建集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.courseList = courseList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注入list集合类型，值是对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步：在 spring 配置文件中引入名称空间 util--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line">       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; &lt;!--添加util名称空间--&gt;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  <span class="comment">&lt;!--添加util名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二步：使用 util 标签完成 list 集合注入提取--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把集合注入部分提取出来--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 提取list集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="9-bean作用域"   >          <a href="#9-bean作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-bean作用域"></a> 9. Bean作用域</h4>      <p>在 Spring 里面，默认情况下，bean 是单实例对象，下面进行作用域设置：</p><ul><li>在 Spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</li><li><code>singleton</code>：表示是单实例对；<code>prototype</code>：表示是多实例对象</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span> <span class="comment">&lt;!--设置为多实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>设置 scope 值是 <code>singleton</code> 时候，加载 Spring 配置文件时候就会创建实例对象 ；设置 scope 值是 <code>prototype</code>时候，不是在加载 Spring 配置文件时候创建对象，而是在调用 <code>getBean</code>方法时候才创建实例对象</p><p><strong>Bean生命周期</strong></p><p>生命周期 ：从对象创建到对象销毁的过程。bean 的生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p><ul><li>通过构造器创建 bean 实例（无参数构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</li><li>调用 bean 的初始化的方法（需要在配置文件中配置初始化的方法<code>init-method</code>）</li><li>把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法<code>destroy-method</code>）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;<span class="comment">//创建后置处理器实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="10-factorybean"   >          <a href="#10-factorybean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-factorybean"></a> 10. FactoryBean</h4>      <p>Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><ul><li>普通bean：在配置文件中定义 bean 类型就是返回类型</li><li>工厂bean：在配置文件定义 bean 类型可以和返回类型不一样。<ul><li>第一步：创建类，让这个类作为工厂bean，实现接口<code>FactoryBean</code>；</li><li>第二步：实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ApplicationContext context =</span><br><span class="line"> <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"> Course course = context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);<span class="comment">//返回值类型可以不是定义的bean类型！</span></span><br><span class="line"> System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="11-引入外部属性文件如druid"   >          <a href="#11-引入外部属性文件如druid" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-引入外部属性文件如druid"></a> 11. 引入外部属性文件（如Druid）</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><span class="comment">&lt;!--引入context名称空间--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="bean管理基于注解方式"   >          <a href="#bean管理基于注解方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#bean管理基于注解方式"></a> Bean管理——基于注解方式</h3>              <h4 id="1-什么是注解"   >          <a href="#1-什么是注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-什么是注解"></a> 1、什么是注解</h4>      <ul><li>注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值…)</li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解目的：简化 xml 配置</li></ul>        <h4 id="2-spring-针对-bean-管理中创建对象提供注解"   >          <a href="#2-spring-针对-bean-管理中创建对象提供注解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-spring-针对-bean-管理中创建对象提供注解"></a> 2、Spring 针对 Bean 管理中创建对象提供注解</h4>      <p>下面四个注解功能是一样的，都可以用来创建 bean 实例</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Component" >@Component</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Controller" >@Controller</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：web层</li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Service" >@Service</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：service层</li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/Repository" >@Repository</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>：dao层</li></ul>        <h4 id="3-基于注解方式实现对象创建"   >          <a href="#3-基于注解方式实现对象创建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-基于注解方式实现对象创建"></a> 3、基于注解方式实现对象创建</h4>      <p>第一步 引入依赖 （引入spring-aop jar包）</p><p>第二步 开启组件扫描</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment"> 1 如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment"> 2 扫描包上层目录 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步 创建类，在类上面添加创建对象注解</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面 value 属性值可以省略不写，</span></span><br><span class="line"><span class="comment">//默认值是类名称，首字母小写</span></span><br><span class="line"><span class="comment">//UserService -- userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span> <span class="comment">//注解等同于XML配置文件：&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-开启组件扫描细节配置"   >          <a href="#4-开启组件扫描细节配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-开启组件扫描细节配置"></a> 4、开启组件扫描细节配置</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="5-基于注解方式实现属性注入"   >          <a href="#5-基于注解方式实现属性注入" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-基于注解方式实现属性注入"></a> 5、基于注解方式实现属性注入</h4>      <p>（1）<code>@Autowired</code>：根据属性<strong>类型</strong>进行自动装配:</p><ul><li>第一步 把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</li><li>第二步 在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义 dao 类型属性</span></span><br><span class="line">    <span class="comment">//不需要添加 set 方法</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add.......&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）<code>@Qualifier</code>：根据对象<strong>名称</strong>进行注入，这个<code>@Qualifier</code> 注解的使用，和上面<code>@Autowired</code> 一起使用（目的在于区别同一接口下有多个实现类）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义 dao 类型属性</span></span><br><span class="line"><span class="comment">//不需要添加 set 方法</span></span><br><span class="line"><span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line"><span class="comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（3）<code>@Resource</code>：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource //根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></div></figure><p>（4）<code>@Value</code>：注入<strong>普通类型属性</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name</span><br></pre></td></tr></table></div></figure><p><strong>总结：若某类型的对象只有一个，则可以使用<code>@Autowired</code>注解，此时只会找到唯一的一个对象；但若某类型的对象不止一个，则要使用<code>@Qualifier</code>注解，其会根据对象名称去寻找指定的对象。若注入基本类型对象使用<code>@Value</code></strong>。</p>        <h4 id="6-作用域"   >          <a href="#6-作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-作用域"></a> 6、作用域</h4>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/scope" >@scope</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;秦疆&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="7-完全注解开发"   >          <a href="#7-完全注解开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-完全注解开发"></a> 7、完全注解开发</h4>      <p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.zhao&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(SpringConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册一个bean，相当于之前的一个bean标签</span></span><br><span class="line">    <span class="comment">// 方法名称，相当于bean标签里的id属性</span></span><br><span class="line">    <span class="comment">// 方法返回值，相当于bean标签里的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>（2）编写测试类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载配置类</span></span><br><span class="line">    ApplicationContext context</span><br><span class="line">        = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>,</span><br><span class="line">                                              UserService.class);</span><br><span class="line">    System.out.println(userService);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="spring-aop"   >          <a href="#spring-aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-aop"></a> Spring AOP</h2>              <h3 id="aop-基本概念"   >          <a href="#aop-基本概念" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-基本概念"></a> AOP 基本概念</h3>      <p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/kuangstudyfffec70f-ce10-4ca2-a71b-dbc535b0e07c.png" alt="img" /></p><ul><li><p>面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率；</p></li><li><p>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能。</p></li><li><p>使用登录例子说明 AOP：</p></li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/20200702135106266.png" alt="img" /></p>        <h3 id="aop-底层原理"   >          <a href="#aop-底层原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-底层原理"></a> <strong>AOP 底层原理</strong></h3>      <p>AOP 底层使用动态代理 ，动态代理有两种情况：</p><p>第一种 有接口情况，使用 JDK 动态代理 ；创建<strong>接口实现类代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/20200702135134128.png" alt="在这里插入图片描述" /></p><p>第二种 没有接口情况，使用 CGLIB 动态代理；创建<strong>子类的代理对象</strong>，增强类的方法<br /><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/2020070213514980.png" alt="在这里插入图片描述" /></p>        <h3 id="aop-jdk-动态代理"   >          <a href="#aop-jdk-动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-jdk-动态代理"></a> <strong>AOP JDK 动态代理</strong></h3>      <p>1）使用 JDK 动态代理，使用 <code>Proxy</code>类里面的方法创建代理对象：</p><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      InvocationHandler h)</span></span></span><br></pre></td></tr></table></div></figure><ul><li>参数一：类加载器</li><li>参数二：增强方法所在的类，这个类实现的接口，支持多个接口</li><li>参数三：实现这个接口 <code>InvocationHandler</code>，创建代理对象，写增强的部分</li></ul><p>2）编写 JDK 动态代理代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建接口，定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（2）创建接口实现类，实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（3）使用 Proxy 类创建接口代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">        <span class="comment">/** 第一参数，类加载器 </span></span><br><span class="line"><span class="comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span></span><br><span class="line"><span class="comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span></span><br><span class="line">        UserDao dao =(UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="line">                                                     <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> result = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 把创建的是谁的代理对象，把谁传递过来</span></span><br><span class="line">    <span class="comment">//有参数构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行....&quot;</span>+obj);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="aop-术语"   >          <a href="#aop-术语" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-术语"></a> AOP 术语</h3>      <ul><li>连接点（JointPoint）：类里面哪些方法可以被增强，这些方法称为连接点。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义，实际被真正增强的方法称为切入点。</li><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（Aspect）：横切关注点被模块化的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。包含前置通知，后置通知，环绕通知 ，异常通知和最终通知。</li><li>目标（Target）：被通知的对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li></ul><p><img src="/images/%E3%80%90Spring%E3%80%91Spring5%E5%9F%BA%E7%A1%80/kuangstudy7a512991-1651-44b4-afca-d09e12cbbe6f.png" alt="img" /></p>        <h3 id="aop-操作"   >          <a href="#aop-操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#aop-操作"></a> AOP 操作</h3>      <p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作。基于 AspectJ 实现 AOP 操作的两种方式：</p><ul><li>基于 xml 配置文件实现</li><li>基于注解方式实现</li></ul><p>【重点】使用AOP织入，需要导入一个依赖包！</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>切入点表达式，如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 </span><br><span class="line">（<span class="number">2</span>）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )</span><br><span class="line">（<span class="number">3</span>）例子如下：</span><br><span class="line">    例 <span class="number">1</span>：对 com.zhao.dao.BookDao 类里面的 add 进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.add(..))</span><br><span class="line"> 例 <span class="number">2</span>：对 com.zhao.dao.BookDao 类里面的所有的方法进行增强</span><br><span class="line">execution(* com.zhao.dao.BookDao.* (..))</span><br><span class="line">    例 <span class="number">3</span>：对 com.zhao.dao 包里面所有类，类里面所有方法进行增强</span><br><span class="line">execution(* com.zhao.dao.*.* (..))</span><br></pre></td></tr></table></div></figure>        <h3 id="方式一通过-spring-api-实现aop"   >          <a href="#方式一通过-spring-api-实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一通过-spring-api-实现aop"></a> 方式一：通过 Spring API 实现AOP</h3>      <p>第一步：首先编写业务接口和实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：然后编写增强类 ：一个前置增强，一个后置增强</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">    <span class="comment">//Object : 目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println( o.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue 返回值</span></span><br><span class="line">    <span class="comment">//method被调用的方法</span></span><br><span class="line">    <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">    <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">                           +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">                           +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第三步：最后去Spring的文件中注册 , 并实现AOP切入实现 , 注意导入约束</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点  expression:表达式匹配要执行的方法 ..代表该包下的子包也能被扫描到 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第四步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.search();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 ，当执行领域业务时，将会把公共业务加进来，实现公共业务的重复利用。</p>        <h3 id="方式二自定义类来实现aop"   >          <a href="#方式二自定义类来实现aop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二自定义类来实现aop"></a> 方式二：自定义类来实现AOP</h3>      <p>目标业务类不变依旧是userServiceImpl</p><p>第一步：编写一个切入类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：在Spring中配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.config.DiyPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zhao.service.UserServiceImpl..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>第三步：测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="方式三使用注解实现"   >          <a href="#方式三使用注解实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三使用注解实现"></a> 方式三：使用注解实现</h3>      <p>第一步：编写一个注解实现的增强类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.config;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointcut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.zhao.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名:&quot;</span>+jp.getSignature());</span><br><span class="line">        <span class="comment">//执行目标方法proceed</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式:注解实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.config.AnnotationPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><p>aop:aspectj-autoproxy：说明</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过aop命名空间的<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>声明自动为spring容器中那些配置@Aspect切面的bean创建代理，织入切面。当然，Spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>隐藏起来了</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>  <span class="attr">poxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则Spring将自动使用CGLib动态代理。</span><br></pre></td></tr></table></div></figure><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span></span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="spring-事务"   >          <a href="#spring-事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-事务"></a> Spring 事务</h2>              <h3 id="spring-事务管理介绍"   >          <a href="#spring-事务管理介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#spring-事务管理介绍"></a> Spring 事务管理介绍</h3>      <ol><li>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</li><li>在 Spring 进行事务管理操作 ；两种方式：编程式事务管理、<strong>声明式事务管理</strong>（推荐使用）</li><li>声明式事务管理 （1）基于注解方式（推荐使用） （2）基于 xml 配置文件方式</li><li>在 Spring 进行声明式事务管理，底层使用 AOP 原理</li><li>Spring 事务管理 API ：提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</li></ol>        <h3 id="注解声明式事务管理"   >          <a href="#注解声明式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注解声明式事务管理"></a> 注解声明式事务管理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、在 spring 配置文件，开启事务注解,引入名称空间！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、在 spring 配置文件配置事务管理器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transactionmanager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、在 service 类上面（或者 service 类里面方法上面）添加事务注解--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        （1）@Transactional，这个注解添加到类上面，也可以添加方法上面</span></span><br><span class="line"><span class="comment">        （2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务</span></span><br><span class="line"><span class="comment">        （3）如果把这个注解添加方法上面，为这个方法添加事务——@Transactional</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(propagation = Propagation.REQUIRED)</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用update方法</span></span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="声明式事务传播特性"   >          <a href="#声明式事务传播特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#声明式事务传播特性"></a> 声明式事务传播特性</h3>      <p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。Spring支持7种事务传播行为：</p><ul><li><strong>propagation_requierd</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li><strong>propagation_required_new</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 <code>PROPAGATION_REQUIRED</code>，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p>        <h3 id="xml-声明式事务管理"   >          <a href="#xml-声明式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#xml-声明式事务管理"></a> XML 声明式事务管理</h3>      <p>在 Spring 配置文件中进行配置：</p><ul><li>第一步：配置事务管理器</li><li>第二步：配置通知</li><li>第三步：配置切入点和切面</li></ul><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点的所有方法都是事务方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有以account开头的切入点方法都是事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*                com.zhao.spring5.service.UserService..*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MyBatis】MyBatis</title>
      <link href="2021/05/15/%E3%80%90MyBatis%E3%80%91MyBatis/"/>
      <url>2021/05/15/%E3%80%90MyBatis%E3%80%91MyBatis/</url>
      
        <content type="html"><![CDATA[        <h2 id="mybatis简介"   >          <a href="#mybatis简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis简介"></a> MyBatis简介</h2>      <p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudyb0b1cef3-3796-4822-bfe8-52a894961853.png" alt="img" /></p>        <h3 id="什么是mybatis"   >          <a href="#什么是mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#什么是mybatis"></a> 什么是MyBatis</h3>      <ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。在2013年11月迁移到<strong>Github</strong> .</li><li>Mybatis官方文档 : <span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/index.html" >http://www.mybatis.org/mybatis-3/zh/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>GitHub : <span class="exturl"><a class="exturl__link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul>        <h3 id="持久化"   >          <a href="#持久化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h3>      <p>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li></ul>        <h3 id="mybatis的优点"   >          <a href="#mybatis的优点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis的优点"></a> MyBatis的优点</h3>      <ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li></ul><span id="more"></span>        <h2 id="hello-mybatis"   >          <a href="#hello-mybatis" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hello-mybatis"></a> Hello MyBatis</h2>      <p><strong>1.  maven中添加依赖</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置路径，保证src中的.xml文件能够被识别，解决静态资源路径问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>2. 配置mybatis-config.xml</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部资源文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将数据库字段名按照驼峰命名规定映射为实体类属性名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给某个类起别名，在mapper配置文件中可以直接使用别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在某个包下扫描所有类，首字母小写后作为其别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhao.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册mapper类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/zhao/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>db.properties</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zhaoyuyun</span></span><br></pre></td></tr></table></div></figure><p><strong>注意</strong>：在MyBatis的核心配置文件xml中，配置数据库的参数时，url=xxx&amp;amp;characterset=xxx需要带上转义符号amp; 但是如果通过db.properties中设置参数时不需要加上转义符，只需要&amp;</p><p><strong>3. 编写MyBatis工具类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置自动提交事务</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>4. 注册实体类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;        <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;    <span class="comment">//密码</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//构造,有参,无参</span></span><br><span class="line">    <span class="comment">//set/get</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>5. 编写Mapper接口类</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhao.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>6. 编写Mapper.xml配置文件（配置文件中namespace中的名称为对应Mapper接口或者Dao接口的完整包名，必须一致！）</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>7. 测试</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法一:</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList(&quot;com.zhao.mapper.UserMapper.selectUser&quot;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法二:</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis-crud"   >          <a href="#mybatis-crud" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis-crud"></a> MyBatis CRUD</h2>              <h3 id="select"   >          <a href="#select" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#select"></a> select</h3>      <p>四种语句的通用属性：</p><ul><li><code>id</code>：命名空间中唯一的标识符，接口中的方法名与映射文件中的SQL语句id一一对应</li><li><code>parameterType</code>：传入SQL语句的参数类型（可以使用万能的Map）</li><li><code>resultType</code>：SQL语句返回值类型（完整的类名或者别名）</li></ul><p><strong>需求：根据id查询用户</strong></p><ol><li><p>在UserMapper中添加对应方法（可以使用<code>@Param</code>注解给形参名起别名）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123; </span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="comment">//根据id查询用户    </span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>在UserMapper.xml中添加select语句（MyBatis会将<code>select *</code>返回的数据库字段名映射为pojo类对象的属性，即去对应的实体类中查找相应字段名的set方法设值【自动映射】，若属性名与数据库字段名不一致，即找不到对应的set方法，则属性值为null，此时需要使用<code>ResultMap</code>）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tsetSelectUserById</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//获取SqlSession连接  </span></span><br><span class="line">    SqlSession session = MybatisUtils.getSession();  </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="insert"   >          <a href="#insert" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#insert"></a> insert</h3>      <p><strong>需求：给数据库增加一个用户</strong></p><ol><li><p>在UserMapper接口中添加对应的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>在UserMapper.xml中添加insert语句（传入形参是pojo时，SQL语句中的#{}会与类对象的属性变量名判断是否能够对应，不能对应的解析为null）</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span>     </span><br><span class="line">    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession(); </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;zxcvbn&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.addUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务，不写的话不会提交到数据库，除非设置sqlSessionFactory.openSession(true);</span></span><br><span class="line">    session.commit();</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol><p><strong>注意：增、删、改操作需要提交事务！设置方法：</strong></p><ul><li>每次会话使用完后<code>session.commit();</code></li><li>或在工具类中设置<code>sqlSessionFactory.openSession(true);</code></li></ul>        <h3 id="update"   >          <a href="#update" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#update"></a> update</h3>      <p><strong>需求：修改用户的信息</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    user.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.updateUser(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="delete"   >          <a href="#delete" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#delete"></a> delete</h3>      <p><strong>需求：根据id删除一个用户</strong></p><ol><li><p>编写接口方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure></li><li><p>编写对应的配置文件SQL</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ol>        <h3 id="传参时变量名不一致问题"   >          <a href="#传参时变量名不一致问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#传参时变量名不一致问题"></a> 传参时变量名不一致问题</h3>      <p>当传入的形参变量名称与SQL语句中的#{}中变量名不一致时，有两种解决方案：</p><ol><li>使用<code>@Param</code>注解</li></ol><ul><li>在方法只接受一个参数的情况下，可以不使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</li><li>在方法接受多个参数的情况下，建议一定要使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>注解给参数命名。</li><li>如果参数是 JavaBean ， 则不能使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</li><li>不使用<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>注解时，参数只能有一个，并且是Javabean。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过密码和名字查询用户</span></span><br><span class="line"><span class="function">User <span class="title">selectUserByNP</span><span class="params">(<span class="meta">@Param(&quot;uname&quot;)</span> String username, <span class="meta">@Param(&quot;pwd&quot;)</span> String password)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;select id=&quot;selectUserByNP&quot; resultType=&quot;com.zhao.pojo.User&quot;&gt;</span></span><br><span class="line"><span class="comment">      select * from user where name = #&#123;uname&#125; and password = #&#123;pwd&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>使用万能的Map</li></ol><p>在接口方法中，参数直接传递Map；</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUserByNP2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></div></figure><p>编写SQL语句的时候，需要传递参数类型，参数类型为Map</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByNP2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name = #&#123;uname&#125; and password = #&#123;pwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;小明&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">User user = mapper.selectUserByNP2(map);</span><br></pre></td></tr></table></div></figure><p><strong>小结：</strong></p><ul><li>所有的增删改操作都需要提交事务</li><li>接口所有的普通参数，尽量都写上<span class="exturl"><a class="exturl__link"   href="https://github.com/Param" >@Param</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>参数，尤其是多个参数时，必须写上</li><li>有时候根据业务的需求，可以考虑使用map传递参数</li><li>为了规范操作，在SQL的配置文件中，尽量将Parameter参数和resultType都写上</li></ul>        <h3 id="与的区别"   >          <a href="#与的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#与的区别"></a> #与$的区别</h3>      <ul><li><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? ，其可以防止SQL注入问题【推荐使用】</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user (name) VALUES (#&#123;name&#125;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (?);</span><br></pre></td></tr></table></div></figure></li><li><p>${} 的作用是直接进行字符串替换</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;$&#123;name&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (name) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="mybatis配置解析"   >          <a href="#mybatis配置解析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis配置解析"></a> MyBatis配置解析</h2>              <h3 id="核心配置文件"   >          <a href="#核心配置文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#核心配置文件"></a> 核心配置文件</h3>      <ul><li>mybatis-config.xml 系统核心配置文件</li><li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li><li>能配置的内容如下：</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="environments"   >          <a href="#environments" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#environments"></a> environments</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC|MANAGED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED|POOLED|JNDI&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p><p>子元素节点：<strong>environment</strong></p><ul><li>具体的一套环境，通过设置id进行区别，id保证唯一</li><li>子元素节点：transactionManager - [ 事务管理器 ]<ul><li>详情：<span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/configuration.html#environments" >点击查看官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>这两种事务管理器类型都不需要设置任何属性。</li></ul></li><li>子元素节点：<strong>数据源（dataSource）</strong><ul><li>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</li><li>数据源是必须配置的。</li><li>有三种内建的数据源类型</li><li>unpooled： 这个数据源的实现只是每次被请求时打开和关闭连接。</li><li><strong>pooled</strong>： 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</li><li>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</li><li>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</li></ul></li></ul>        <h3 id="mappers"   >          <a href="#mappers" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mappers"></a> mappers</h3>      <p>映射器 : 定义映射SQL语句文件。</p>        <h4 id="引入资源方式"   >          <a href="#引入资源方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#引入资源方式"></a> 引入资源方式</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器但是需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="mapper文件"   >          <a href="#mapper文件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapper文件"></a> Mapper文件</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>namespace中文意思：命名空间，作用如下：</p><ol><li>namespace和子元素的id联合保证唯一，区别不同的mapper</li><li>绑定DAO接口<ul><li>namespace的命名必须跟某个接口同名</li><li>接口中的方法与映射文件中sql语句id应该一一对应</li></ul></li><li>namespace命名规则 : 包名+类名</li></ol>        <h3 id="typealiases"   >          <a href="#typealiases" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#typealiases"></a> typeAliases</h3>      <p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.zhao.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>当这样配置时，<code>User</code>可以用在任何使用<code>com.zhao.pojo.User</code>的地方。也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhao.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>每一个在包 <code>com.zhao.pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>若有注解，则别名为其注解值：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="settings"   >          <a href="#settings" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#settings"></a> settings</h3>      <p><span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" >设置（settings）</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>相关</p><ul><li>懒加载</li><li>日志实现</li><li>缓存开启关闭</li></ul><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="resultmap"   >          <a href="#resultmap" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#resultmap"></a> ResultMap</h2>      <p><strong>要解决的问题：pojo属性名和数据库字段名不一致</strong>。解决方案：</p><ol><li><p>方案一：为字段名指定别名，别名和java实体类的属性名一致 .</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>    </span><br><span class="line">    select id, name, pwd as password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ol><p><strong>2. 方案二：使用结果集映射-&gt;ResultMap</strong> 【推荐】</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="自动映射"   >          <a href="#自动映射" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#自动映射"></a> 自动映射</h3>      <ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让开发人员从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来。</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li></ul><p>默认情况没有显式指定 <code>resultMap</code>。比如：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。我们的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p>        <h3 id="手动映射"   >          <a href="#手动映射" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#手动映射"></a> 手动映射</h3>      <ol><li><p>返回值类型为<code>resultMap</code></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li><li><p>编写<code>resultMap</code>，实现手动映射</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名, property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></div></figure></li></ol>        <h2 id="使用注解开发"   >          <a href="#使用注解开发" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用注解开发"></a> 使用注解开发</h2>      <p>使用注解开发时不需要再写mapper.xml文件，直接在接口类的方法上添加注解即可。共有四个注解 :</p><ul><li><code>@select()</code></li><li><code>@update()</code></li><li><code>@Insert()</code></li><li><code>@delete()</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id删除用</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis执行流程分析"   >          <a href="#mybatis执行流程分析" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis执行流程分析"></a> MyBatis执行流程分析</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部用户</span></span><br><span class="line"><span class="meta">@Select(&quot;select id,name,pwd password from user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用class绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.zhao.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    <span class="comment">//本质上利用了jvm的动态代理机制</span></span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">●   List&lt;User&gt; users = mapper.getAllUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>利用Debug查看本质</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy116bbcb8-3fb6-457d-829b-174782854039.png" alt="img" /></p><p><code>sqlSession</code>对象内包含：</p><ul><li><code>configuration</code>：用于加载<code>mybatis-config.xml</code>文件中的所有配置信息；</li><li><code>executor</code>：执行器，用于执行sql语句，含有缓存等信息。</li></ul><p><code>mapper</code>对象是指定<code>Mapper</code>接口的<strong>动态代理类</strong>，包含：</p><ul><li><code>sqlSession</code>：每个<code>mapper</code>都拥有一份<code>sqlSession</code>对象，用于执行sql语句；</li><li><code>mapperInterface</code>：通过反射机制获取<code>Mapper</code>接口的全路径名等信息；</li><li><code>methodCache</code>：方法缓存，包含接口的每个方法和实现。</li></ul><p>首先通过反射机制从<code>session.getMapper(UserMapper.class);</code>中获取到接口信息，然后动态创建出一个代理类对象<code>mapper</code>，其实现了接口的所有方法，使用该代理类执行相应的sql语句。</p><p>本质上利用了jvm的动态代理机制</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy49f6378c-cff1-46c0-9a2b-aec78e014953.png" alt="img" /></p><p>Mybatis详细的执行流程</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudyd3552e34-af83-4ce8-a4ab-45feb0fee43f.png" alt="img" /></p>        <h2 id="多对一处理"   >          <a href="#多对一处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多对一处理"></a> 多对一处理</h2>      <p>多对一的理解：多个学生对应一个老师</p>        <h3 id="按查询嵌套处理"   >          <a href="#按查询嵌套处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按查询嵌套处理"></a> 按查询嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">        2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">        3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">            1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">            2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">            3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">               多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">            4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">      select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association关联属性  property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">    association中column多参数配置：</span></span><br><span class="line"><span class="comment">        column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">        其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="按结果嵌套处理"   >          <a href="#按结果嵌套处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按结果嵌套处理"></a> 按结果嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>      <ul><li>按照<strong>查询</strong>进行嵌套处理就像SQL中的子查询</li><li>按照<strong>结果</strong>进行嵌套处理就像SQL中的联表查询</li></ul>        <h2 id="一对多处理"   >          <a href="#一对多处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一对多处理"></a> 一对多处理</h2>      <p>一对多的理解：一个老师拥有多个学生，即一个老师拥有一群学生（集合）</p>        <h3 id="按结果嵌套处理-2"   >          <a href="#按结果嵌套处理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按结果嵌套处理-2"></a> 按结果嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhao.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">        2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">            1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">                JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">                JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">                ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="按查询嵌套处理-2"   >          <a href="#按查询嵌套处理-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#按查询嵌套处理-2"></a> 按查询嵌套处理</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">  select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="小结-2"   >          <a href="#小结-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3>      <ul><li>关联-association用于一对一和多对一</li><li>集合-collection用于一对多的关系</li></ul><p>JavaType和ofType都是用来指定对象类型的</p><ul><li>JavaType是用来指定pojo中属性的类型</li><li>ofType指定的是映射到list集合属性中pojo的类型。</li></ul>        <h2 id="动态sql"   >          <a href="#动态sql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态sql"></a> 动态SQL</h2>      <p><span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="介绍"   >          <a href="#介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3>      <p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。    </span><br><span class="line">虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。    </span><br><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。  </span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line">- if    </span><br><span class="line">- choose (when, otherwise)</span><br><span class="line">- trim (where, set)</span><br><span class="line">- foreach    </span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></div></figure><p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p><p>那么怎么去解决这个问题呢？这就要使用 MyBatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>        <h3 id="if"   >          <a href="#if" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#if"></a> if</h3>      <p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#{title}，但是如果title为空呢？那么查询语句为 select * from user where and author=#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p>        <h3 id="where"   >          <a href="#where" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#where"></a> where</h3>      <p>修改上面的SQL语句：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以 AND 或 OR 开头的，则它会剔除掉。【使用最频繁】</p>        <h3 id="set"   >          <a href="#set" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set"></a> set</h3>      <p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">              title = #&#123;title&#125;,</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">              author = #&#123;author&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="choose"   >          <a href="#choose" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#choose"></a> choose</h3>      <p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                 title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="sql片段"   >          <a href="#sql片段" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#sql片段"></a> SQL片段</h3>      <p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p><p><strong>提取SQL片段：</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>引用SQL片段：</strong></p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li>最好基于 单表来定义 sql 片段，提高片段的可重用性</li><li>在 SQL 片段中不要包括 where</li></ul>        <h3 id="foreach"   >          <a href="#foreach" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#foreach"></a> foreach</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">        item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">        open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">        close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">        separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">        select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>测试</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    </span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    </span><br><span class="line">    System.out.println(blogs);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="mybatis缓存"   >          <a href="#mybatis缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis缓存"></a> MyBatis缓存</h2>              <h3 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>      <p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>为什么使用缓存？：减少和数据库的交互次数，减少系统开销，提高系统效率。什么样的数据能使用缓存？：经常查询并且不经常改变的数据。</p>        <h3 id="mybatis缓存-2"   >          <a href="#mybatis缓存-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mybatis缓存-2"></a> Mybatis缓存</h3>      <p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li>默认情况下，只有一级缓存开启，他是<strong>SqlSession</strong>级别的缓存，也称为本地缓存</li><li>二级缓存需要手动开启和配置，他是基于<strong>namespace</strong>级别的缓存</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li><li><strong>新的会话查询前会先查找二级缓存中是否有对应数据，若没有再去数据库查找</strong></li></ul>        <h3 id="一级缓存"   >          <a href="#一级缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一级缓存"></a> 一级缓存</h3>      <p>一级缓存也叫本地缓存：</p><ul><li>与数据库<strong>同一次会话期间</strong>（SqlSession）查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    </span><br><span class="line">    User user1 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    </span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>user1==user2</code>判断结果为true，即同一个SqlSession中查询到的数据会保存到一级缓存中。<strong>每个sqlSession中的缓存相互独立</strong></p><p>一级缓存失效的情况：</p><ul><li>两次查询之间执行了增删改操作（因为增删改操作可能会对当前数据产生影响，所以一级缓存清空）</li><li>手动清除一级缓存<code>session.clearCache();</code></li></ul><p><strong>一级缓存就是一个map</strong></p>        <h3 id="二级缓存"   >          <a href="#二级缓存" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二级缓存"></a> 二级缓存</h3>      <p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存。二级缓存是基于<strong>namespace</strong>级别的缓存，一个名称空间，对应一个二级缓存；</p><p>工作机制：</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li></ul><p>开启二级缓存步骤：</p><ol><li>开启全局缓存 【mybatis-config.xml】</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>去每个mapper.xml中配置使用二级缓存</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 --&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>代码测试</li></ol><ul><li>所有的实体类先实现序列化接口</li><li>测试</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">    </span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>结论</strong></p><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li><strong>查出的数据都会被默认先放在一级缓存中</strong></li><li><strong>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</strong></li></ul>        <h3 id="缓存原理"   >          <a href="#缓存原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缓存原理"></a> 缓存原理</h3>      <p>新会话创建后本身没有一级缓存，其在查询前会先在二级缓存中查找是否有对应的数据，若没有再去数据库查找</p><p><img src="/images/%E3%80%90MyBatis%E3%80%91MyBatis/kuangstudy203221f0-73d7-4d4c-bb81-84b1af9a63db.png" alt="img" /></p>        <h3 id="ehcache"   >          <a href="#ehcache" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#ehcache"></a> EhCache</h3>      <p>第三方缓存实现—EhCache：Ehcache是一种广泛使用的java分布式缓存，用于通用缓存。<span class="exturl"><a class="exturl__link"   href="http://www.mybatis.org/ehcache-cache/" >官方文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>要在应用程序中使用Ehcache，需要引入依赖的jar包</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>在mapper.xml中使用对应的缓存即可</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">“org.acme.FooMapper”</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span> = <span class="string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>编写ehcache.xml文件，如果在<code>加载时</code>未找到<code>/ehcache.xml</code>资源或出现问题，则将使用默认配置。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>  <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git】常用Git命令</title>
      <link href="2021/05/15/%E3%80%90Git%E3%80%91%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/"/>
      <url>2021/05/15/%E3%80%90Git%E3%80%91%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[        <h3 id="在远程分支与本地分支之间建立联系"   >          <a href="#在远程分支与本地分支之间建立联系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#在远程分支与本地分支之间建立联系"></a> 在远程分支与本地分支之间建立联系</h3>      <p>在本地分支新创建的分支没有与远程分支建立联系，需要使用以下指令建立本地分支与远程分支的联系，之后即可pull</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/dev dev</span><br><span class="line"></span><br><span class="line">git pull origin dev</span><br></pre></td></tr></table></div></figure>        <h3 id="更新远程分支列表"   >          <a href="#更新远程分支列表" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#更新远程分支列表"></a> 更新远程分支列表</h3>      <p>在远程仓库的分支发生变化而本地仓库的分支没有更新时使用</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune</span><br><span class="line">git fetch --all</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】文件上传</title>
      <link href="2021/04/28/%E3%80%90JavaWeb%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/04/28/%E3%80%90JavaWeb%E3%80%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[        <h2 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2>      <p>apache的开源工具common-fileupload包负责完成文件上传，其依赖于common-io包</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="使用类介绍"   >          <a href="#使用类介绍" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#使用类介绍"></a> 使用类介绍</h2>      <p>文件上传的注意事项：</p><ul><li>为保证服务器安全，上传文件应该放在外界无法访问的目录下，比如<code>WEB-INF</code>目录下（<strong>该目录下的文件只能通过转发和重定向跳转</strong>）</li><li>为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名（使用uuid或时间戳）</li><li>要限制上传文件的最大值</li><li>可以限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法</li></ul><p>使用类：</p><ul><li><strong>DiskFileItemFactory</strong>：解析ServletFileUpload对象</li><li><strong>ServletFileUpload</strong>：负责处理上传的文件数据，并将表单中每个输入项封装成一个FileItem对象</li><li><strong>FileItem</strong>：表单的每个输入项都是一个FileItem对象</li></ul><span id="more"></span>        <h2 id="用法示例"   >          <a href="#用法示例" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#用法示例"></a> 用法示例</h2>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;%-- 通过表单上传文件</span><br><span class="line">     get：上传文件大小有限制</span><br><span class="line">     post：上传文件大小没限制</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload.do&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    上传用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span> | <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;</span><br><span class="line">    FileItemFactory fileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload servletFileUpload = <span class="keyword">new</span> ServletFileUpload(fileItemFactory);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">            <span class="comment">// 普通表单项</span></span><br><span class="line">            System.out.println(fileItem.getFieldName());</span><br><span class="line">            System.out.println(fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileItem.write(<span class="keyword">new</span> File(<span class="string">&quot;D:\\fileItem.getFieldName()&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JavaWeb】JavaWeb基础</title>
      <link href="2021/04/16/%E3%80%90JavaWeb%E3%80%91JavaWeb/"/>
      <url>2021/04/16/%E3%80%90JavaWeb%E3%80%91JavaWeb/</url>
      
        <content type="html"><![CDATA[        <h2 id="javaweb"   >          <a href="#javaweb" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javaweb"></a> JavaWeb</h2>      <p>JavaWeb是指所有通过Java语言编写的，可以通过浏览器访问的程序的总称。JavaWeb是基于请求和响应开发的。</p><ul><li>请求：客户端给服务器发送数据，Request</li><li>响应：服务器给客户端传回数据，Response</li></ul><p>JavaWeb三大组件：Servlet程序、Filter过滤器、Listener监听器</p>        <h2 id="http"   >          <a href="#http" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2>      <p>HTTP：超文本传输协议。是一个简单的请求-响应协议，通常运行在TCP之上，端口号：80。HTTPS相比HTTP更为安全。HTTP两个时代：</p><ul><li>HTTP1.0：客户端与web服务器连接后，只能获得一个web资源。</li><li>HTTP2.0：客户端与web服务器连接后，可以获得多个web资源。</li></ul>        <h3 id="http请求"   >          <a href="#http请求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http请求"></a> HTTP请求</h3>      <p><strong>请求行</strong>：</p><ul><li>请求行中的请求方式：<code>GET</code>或<code>POST</code></li><li>请求方式：<code>GET</code>、<code>POST</code>、<code>HEAD</code>、<code>DELETE</code>、<code>PUT</code><ul><li><code>GET</code>：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li><li><code>POST</code>：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li></ul></li></ul><p><strong>GET请求</strong></p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501214204632.png" alt="image-20210501214204632" /></p><p><strong>POST请求</strong></p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501214745892.png" alt="image-20210501214745892" /></p>        <h3 id="http-响应"   >          <a href="#http-响应" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#http-响应"></a> HTTP 响应</h3>      <p>响应状态码：</p><ul><li>200：请求响应成功</li><li>3xx：请求与重定向</li><li>4xx：找不到资源（404 资源不存在）</li><li>5xx：服务器代码错误（500），网关错误（502）</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501215225830.png" alt="image-20210501215225830" /></p><span id="more"></span>        <h2 id="tomcat"   >          <a href="#tomcat" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h2>      <p><strong>Tomcat</strong>是由Apache软件基金会属下<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Jakarta%E9%A1%B9%E7%9B%AE" >Jakarta项目</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>开发的<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Servlet" >Servlet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>容器，按照<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Sun_Microsystems" >Sun Microsystems</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提供的技术规范，实现了对<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Servlet" >Servlet</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>和<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/JavaServer_Page" >JavaServer Page</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/JSP" >JSP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>）的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全局管理和Tomcat阀等。由于Tomcat本身也内含了<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/HTTP" >HTTP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8" >服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，因此也可以视作单独的<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8" >Web服务器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。Tomcat提供了一个Jasper<span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8" >编译器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>用以将JSP编译成对应的Servlet。</p><p>在官网安装Tomcat 9.0.45版本压缩包，解压到本地即可，无需配置环境变量。在构建Servlet项目时，在IDEA中指定Tomcat根目录即可使用Tomcat。</p>        <h2 id="maven"   >          <a href="#maven" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven"></a> Maven</h2>              <h3 id="maven项目架构管理工具"   >          <a href="#maven项目架构管理工具" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven项目架构管理工具"></a> Maven项目架构管理工具</h3>      <p>用于方便导入jar包。核心思想：约定大于配置。有约束，不要去违反。Maven会规定好如何去编写Java代码，必须按照这个规范组织结构。</p><p>修改为Maven阿里云镜像：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>建立本地仓库：localRepository</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.8.1\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="maven仓库"   >          <a href="#maven仓库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven仓库"></a> Maven仓库</h3>      <p>Maven repository：<span class="exturl"><a class="exturl__link"   href="https://mvnrepository.com/" >https://mvnrepository.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="maven约定"   >          <a href="#maven约定" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#maven约定"></a> Maven约定</h3>      <p>创建JavaWeb项目时，webapp目录创建在src/main目录下才能够自动导入maven配置文件中添加的包，否则需要在项目结构中手动导入包。</p>        <h2 id="servlet"   >          <a href="#servlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h2>      <p>Servlet是Sun公司开发动态web的一门技术。Sun在这些API中提供了一个接口：Servlet。开发Servlet程序需要完成两个步骤：</p><ul><li>编写一个Java类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中</li></ul><p><strong>把实现了Servlet接口的Java程序叫做Servlet</strong></p>        <h3 id="helloservlet"   >          <a href="#helloservlet" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#helloservlet"></a> HelloServlet</h3>      <p>Sevlet接口Sun公司提供有两个默认的实现类：HttpServlt，GenericServlet</p><ol><li><p>构建一个普通的Maven项目（不带模板），删掉里面的src目录，这个空的工程就是Maven的主工程。之后在这个项目里建立Module，新建的Module均为Maven父项目的子项目。</p></li><li><p>关于Maven父子工程的理解：在父项目中会有</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>父项目中的Maven依赖环境Jar包子项目可以直接使用</p></li><li><p>Maven环境优化：修改web.xml（与本地Tomcat中的内容一致）</p></li></ol>  <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>编写一个Servlet程序<ul><li>编写一个普通类</li><li>实现Servlet接口，这里继承HttpServlet</li></ul></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于get或者post只是请求实现的不同方式，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="5"><li>编写Servlet映射：写的Java程序要通过浏览器访问，浏览器需要连接web服务器，所以需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能访问到的路径。</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="6"><li>配置Tomcat，注意配置项目发布的路径</li><li>启动测试</li></ol>        <h3 id="servlet原理"   >          <a href="#servlet原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servlet原理"></a> Servlet原理</h3>      <p>Servlet是由web服务器调用，web服务器在收到浏览器请求后会调用<code>service()</code>方法，该方法会根据请求的类型<code>GET</code>或<code>POST</code>分发处理，执行相应的<code>doGet()</code>或<code>doPost()</code>方法。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501200459226.png" alt="image-20210501200459226" /></p>        <h3 id="mapping问题"   >          <a href="#mapping问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mapping问题"></a> Mapping问题</h3>      <ol><li>一个Servlet可以指定一个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>一个Servlet可以指定多个映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="3"><li>一个Servlet可以指定通用映射路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="4"><li>默认请求路径</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>优先级问题：</p><p>指定了<strong>固有的映射路径优先级最高</strong>，如果找不到匹配的固有映射路径，则就会走默认路径（*)</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Error Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ErrorServlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="servletcontext"   >          <a href="#servletcontext" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#servletcontext"></a> ServletContext</h3>      <p>是一个接口，代表Servlet上下文对象，一个工程只有一个ServletContext对象，是一个域对象（这里的域指的是整个web工程）。</p><p>web容器在启动时，他会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用。</p><p>作用1：共享数据，即在某个Servlet中保存的数据可以在另一个Servlet中获得。</p><p>存入数据的Servlet类，用于保存数据到ServletContext对象中。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// this.getInitParameter();  初始化参数</span></span><br><span class="line">        <span class="comment">// this.getServletConfig();  Servlet配置</span></span><br><span class="line">        <span class="comment">// this.getServletContext(); Servlet上下文</span></span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = <span class="string">&quot;zhangsan&quot;</span>; <span class="comment">// 数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将一个数据以键值对形式保存在了ServletContext中。</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>读入数据的Servlet类，用于从ServletContext对象中读取数据。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String)context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>作用2：获取初始化参数。</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是上下文参数（属于整个web工程） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">resp.getWriter().print(url);</span><br></pre></td></tr></table></div></figure><p>作用3：请求转发。</p><p>访问当前url时，将消息转发给指定的其他url（当前url不会发生变化，重定向会变化）。当前url只充当转发功能。<strong>请求转发不需要添加项目名，只需要/+映射路径</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发的请求参数</span></span><br><span class="line">RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/servlet01&quot;</span>);</span><br><span class="line">requestDispatcher.forward(req, resp); <span class="comment">// 调用forward实现请求转发</span></span><br></pre></td></tr></table></div></figure><p>请求转发的特点：</p><ul><li>浏览器地址栏没有变化</li><li>是一次请求</li><li>共享Request域中的数据</li><li>可以转发到<code>WEB-INF</code>目录下</li><li>无法访问项目以外的其他资源（如百度）</li></ul><p>作用4：读取资源文件</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现都被打包到了同一个路径下：<code>/WEB-INF/classes</code>，将这个路径称为classpath。</p><p><strong>classpath</strong>：<code>src/main/</code>下的<code>java</code>目录和<code>resources</code>目录下的文件会被合并到<code>/WEB-INF/classes</code>下，将该路径称为classpath</p><figure class="highlight properties"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream resourceAsStream = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.load(resourceAsStream);</span><br><span class="line">String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">resp.getWriter().print(url + <span class="string">&#x27;:&#x27;</span> + password);</span><br></pre></td></tr></table></div></figure>        <h3 id="httpservletresponse"   >          <a href="#httpservletresponse" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletresponse"></a> HttpServletResponse</h3>      <p>web服务器接收到客户端的HTTP请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象。</p><ul><li>如果要获取客户端请求过来的参数，使用HttpServletRequest</li><li>如果要给客户端响应一些信息，使用HttpServletResponse</li></ul><p>负责向浏览器发送数据的方法：</p><ul><li><code>getOutputStream()</code></li><li><code>getWriter()</code></li></ul><p>常见应用：</p><ol><li>向浏览器输出消息</li><li>下载文件</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置让浏览器能够支持附件下载</span></span><br><span class="line">respones.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br></pre></td></tr></table></div></figure><ol start="3"><li>实现重定向</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;/projectName/url&quot;</span>); <span class="comment">// 重定向到其他url</span></span><br></pre></td></tr></table></div></figure><p><strong>重定向和转发的区别</strong></p><ul><li>请求转发时，url不会发生变化。（转发在服务器内部完成，不需要加项目名路径，如&quot;/工程名&quot;）</li><li>重定向时，url会发生变化。（需要加项目名路径，如&quot;/projectName/url&quot;)</li><li>请求转发是服务器级别的，可以访问/WEB-INF/下的资源</li><li>重定向是浏览器级别的，无法访问/WEB-INF/下的资源</li><li>请求转发会将斜杠&quot;/&quot;发送给服务器解析，得到http://ip:port/工程名</li><li>重定向会将斜杠&quot;/&quot;发送给浏览器解析，得到http://ip:port/</li></ul><p>在前端文件中写跳转链接时，因其不能得知服务器内部的项目结构，因此需要人为指定contextPath（在Servlet程序中不需要再指定当前项目在服务器内的路径）</p><p>细节：当用户提交完请求，浏览器会记录下最后一次请求的全部信息。当用户按下功能键F5，就会发起浏览器记录的最后一次请求。在此情况下如果使用请求转发的方式跳转页面，用户按下F5后会再次发起请求，因此这种情况应该使用重定向。</p>        <h3 id="httpservletrequest"   >          <a href="#httpservletrequest" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#httpservletrequest"></a> HttpServletRequest</h3>      <p>HttpServletRequest代表客户端的请求，用户通过HTTP协议访问服务器，HTTP协议中的所有消息信息会被封装到HttpServletRequest，通过该类的方法可以获得客户端传来的请求信息。</p><ol><li>获取传递的参数</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></div></figure><ol start="2"><li>请求转发</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(requset, response);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210501221519475.png" alt="image-20210501221519475" /></p><ol start="3"><li>获取请求头中Referer信息（浏览器发起请求时的url），可用于重定向回原地址</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = req.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="web中-斜杠的不同意义"   >          <a href="#web中-斜杠的不同意义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#web中-斜杠的不同意义"></a> Web中 / 斜杠的不同意义</h3>      <p>在Web中，/ 是一种绝对路径：</p><ul><li>/ 如果被<strong>浏览器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/ （指写在静态html代码中，无法被服务器解析，只能被浏览器解析）</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ul><li>/ 如果被<strong>服务器</strong>解析，得到的地址是：<span class="exturl"><a class="exturl__link"   href="http://ip" >http://ip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>:port/工程路径</li></ul><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 映射</span><br><span class="line">&lt;url-pattern&gt;&#x2F;servlet1&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取绝对路径</span><br><span class="line">servletContext.getRealPath(&quot;&#x2F;&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请求转发</span><br><span class="line">request.getRequestDispacther(&quot;&#x2F;&quot;);</span><br></pre></td></tr></table></div></figure><ul><li>特殊情况：<code>response.sendRedirect(&quot;/&quot;);</code>会将斜杠发送给浏览器解析，得到http://ip:port/ ，因此需要再加上工程名<code>response.sendRedirect(&quot;/projectName/xxx&quot;);</code></li></ul><p><strong>/WEB-INF/目录下的资源文件，客户端无法直接访问（即不能在浏览器中输入url直接跳转），而只能在servlet程序中跳转</strong></p><p><strong>在IDEA中，&quot;/“代表的项目文件路径为”<code>target/项目名-1.0-SNAPSHOT/</code>&quot;</strong></p><p>在Web应用的前端程序（.jsp）中：</p><ul><li>不以 / 开始的相对路径找资源时以当前资源的路径为基准，容易出现问题（不推荐使用）</li><li>以 / 开始的相对路径找资源时以http://ip:port/为基准，不包含<strong>当前项目名称路径</strong>，因此需要在资源前加上<code>$&#123;pageContext.request.contextPath&#125;/</code>以使程序能找到&quot;<code>target/项目名-1.0-SNAPSHOT/</code>&quot;下的资源文件。例如若想在.jsp文件中引入css文件的路径，需要写 <code>href=&quot;$&#123;pageContext.request.contextPath&#125;/css/style.css&quot;</code></li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210604105603326.png" alt="image-20210604105603326" /></p>        <h2 id="cookie-session"   >          <a href="#cookie-session" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cookie-session"></a> Cookie Session</h2>      <p>会话：用户打开一个浏览器，访问了一些web资源，关闭浏览器，这个过程可以称为一个会话。</p><p>有状态会话：浏览器能够保存客户端信息的会话。</p>        <h3 id="保存会话"   >          <a href="#保存会话" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#保存会话"></a> 保存会话</h3>      <p><strong>Cookie</strong>：客户端技术（请求，响应），服务器给客户端创建Cookie。是服务器通知客户端保存键值对的一种技术，客户端有了Cookie后，每次请求都会发送给服务器，每个Cookie的大小不能超过4kb</p><p><strong>Session</strong>：服务器技术，可以保存用户的会话信息。可以把信息和数据放在session中</p>        <h3 id="cookie"   >          <a href="#cookie" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h3>      <p>服务器创建Cookie</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210505095556020.png" alt="image-20210505095556020" /></p><p>服务器获取客户端的Cookie</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210505100507884.png" alt="image-20210505100507884" /></p><ol><li>从请求中拿到Cookie信息</li><li>服务器响应给客户端Cookie</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">// 获得cookies</span></span><br><span class="line"></span><br><span class="line">cookie.getName(); <span class="comment">// 获得cookie中的Key</span></span><br><span class="line">cookie.getValue(); <span class="comment">// 获得cookie中的Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;keyName&quot;</span>, value); <span class="comment">// 新建一个Cookie</span></span><br><span class="line"></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">// 设置cookie的有效期，不设置默认关闭浏览器时删除</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">// 响应给客户端一个cookie</span></span><br></pre></td></tr></table></div></figure><p>删除Cookie的方法：</p><ul><li>不设置有效期，关闭浏览器（关闭Session），自动失效；</li><li>设置有效期，时间为0。</li></ul><p>Cookie有效路径Path的设置：通过设置path路径可以过滤掉不符合路径的Cookie。</p>        <h3 id="session"   >          <a href="#session" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#session"></a> Session</h3>      <p>服务器会给每一个用户（浏览器）创建一个Session对象。一个Session独占一个浏览器，只要浏览器没关，这个Session就一直存在。用户登录之后，整个网站都可以访问到用户信息。</p><p>Session技术，底层是基于Cookie技术实现的：每次创建出的Session对象都会保存成一个Cookie对象传给浏览器保存（该Cookie对象的生命周期为Session级别，即关闭浏览器后销毁）。</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210506103813937.png" alt="image-20210506103813937" /></p><p>Session和Cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li><li>Session是把用户的浏览器写到用户独占的Session中，服务器保存（保存重要的信息，减少资源的浪费）</li><li>Session对象由服务器创建</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息</li><li>购物车信息</li><li>在整个网站中经常用到的数据</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在session中存入信息</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从session中获取信息</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">String name = session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注销session</span></span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></div></figure><p>Session销毁方法：</p><ol><li>手动销毁：</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSession().invalidate();</span><br></pre></td></tr></table></div></figure><ol start="2"><li>自动销毁：设置会话自动过期：web.xml配置</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 15分钟后过期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="jsp"   >          <a href="#jsp" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp"></a> JSP</h2>      <p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于动态web技术。JSP页面中可以嵌入Java代码，为用户提供动态数据。其主要用于代替Servlet程序回传html页面的数据。</p>        <h3 id="jsp原理"   >          <a href="#jsp原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp原理"></a> JSP原理</h3>      <p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet。在Tomcat部署网页后，会为每个JSP文件生成对应的Java代码（放在work目录下），即<strong>JSP最终会被转换成Java源码</strong>，<strong>JSP本质上就是一个Servlet</strong>。</p><p>在JSP页面中，Java代码会原封还不动的输出，html代码会进行转换：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></div></figure><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210423133239836.png" alt="image-20210423133239836" /></p>        <h3 id="jsp基础语法"   >          <a href="#jsp基础语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp基础语法"></a> JSP基础语法</h3>      <p><strong>JSP表达式</strong>：将结果输出到客户端</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- JSP表达式</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSP脚本片段</strong>：代码片段会被生成到_jspService方法中作为Java代码的一部分。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- jsp脚本片段 --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(<span class="string">&quot;&lt;h1&gt;sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSP声明</strong>：会被编译到JSP生成的Java的类中，作为属性或方法声明。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了test方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="jsp指令"   >          <a href="#jsp指令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp指令"></a> JSP指令</h3>      <p>静态包含：<code>&lt;%@ include file=&quot;common/header.jsp&quot; %&gt;</code></p><p>特点：静态包含不会翻译被包含的jsp页面，其实是把被包含的jsp页面的代码拷贝到包含的位置执行输出，两个页面的作用域会冲突。</p><p>动态包含：<code>&lt; jsp:include page=&quot; &quot; &gt;&lt;/jsp:include&gt;</code></p><p>特点：动态包含会被包含的jsp页面翻译成java代码，两个页面的作用域不会冲突。</p><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page args... %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--@ include ：静态包含，会将两个页面合而为一，在这里定义的变量不能重复，作用域冲突--%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;common/header.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;common/footer.jsp&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- JSP标签</span><br><span class="line">    jsp:include 拼接两个页面，本质还是三个网页，在这里定义的变量可以重复，作用域不冲突</span><br><span class="line">&lt; jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span> /&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页主体</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt; jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span> /&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="九大内置对象"   >          <a href="#九大内置对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#九大内置对象"></a> 九大内置对象</h3>      <ul><li>PageContext</li><li>Request</li><li>Response</li><li>Session</li><li>Application【ServletContext】</li><li>Config【ServletConfig】</li><li>out</li><li>page</li><li>exception</li></ul><p>四个能够保存数据信息的对象：</p><ul><li>PageContext：保存的数据只在一个页面中有效</li><li>Request：保存的数据只在一次请求中有效，请求转发会携带这个数据</li><li>Session：保存的数据只在一次会话中有效，从打开服务器到关闭服务器</li><li>Application【ServletContext】：保存的数据只在服务器中有效，从打开服务器到关闭服务器</li></ul><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">   pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;zhangsan1&quot;</span>);  <span class="comment">// 保存的数据只在一个页面中有效</span></span><br><span class="line">   request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;zhangsan2&quot;</span>);      <span class="comment">// 保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">   session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;zhangsan3&quot;</span>);      <span class="comment">// 保存的数据只在一次会话中有效，从打开服务器到关闭服务器</span></span><br><span class="line">   application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;zhangsan4&quot;</span>);  <span class="comment">// 保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">   String name1 = (String) pageContext.getAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">   String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">   String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">   String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line"></span><br><span class="line">   request.setAttribute(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;zhangsan2&quot;</span>);</span><br><span class="line">   session.setAttribute(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;zhangsan3&quot;</span>);</span><br><span class="line">   application.setAttribute(<span class="string">&quot;name4&quot;</span>, <span class="string">&quot;zhangsan4&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="out和responsegetwriter区别"   >          <a href="#out和responsegetwriter区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#out和responsegetwriter区别"></a> out和response.getWriter()区别</h3>      <p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210502203944192.png" alt="image-20210502203944192" /></p>        <h3 id="jsp标签-jstl标签-el表达式"   >          <a href="#jsp标签-jstl标签-el表达式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jsp标签-jstl标签-el表达式"></a> JSP标签、JSTL标签、EL表达式</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p><strong>EL（Expression Language）表达式</strong>：<code>$&#123;&#125;</code></p><ul><li>获取数据：<code>$&#123;username&#125;</code></li><li>执行运算：<code>$&#123;param.username==&quot;zhangsan&quot;&#125;</code></li><li>获取web开发的常用对象：<code>$&#123;param.username&#125;</code></li></ul><p><strong>JSP标签</strong></p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param name=&quot;name&quot;, value=&quot;zhangsan&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;age&quot;, value=&quot;3&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></div></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足，它自定义了许多标签，可以供我们使用 ，标签的功能和Java代码一样。</p><ul><li><strong>核心标签</strong></li><li>格式化标签</li><li>SQL标签</li><li>XML标签</li></ul><p><strong>JSTL标签库使用步骤：</strong></p><ol><li>引入对应的taglib才能使用JSTL标签</li></ol><figure class="highlight jsp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=:http:<span class="comment">//java.sun.com/jsp/jstl/core&quot; %&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>在Tomcat也需要引入JSTL的包，否则无法解析JSTL库</li><li>使用其中的方法</li></ol><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span> &gt;</span><br><span class="line">&lt;c:out value=&quot;管理员欢迎您&quot;&gt;&lt;/c:out&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></div></figure><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;&amp;&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></div></figure>        <h3 id="javabean"   >          <a href="#javabean" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javabean"></a> JavaBean</h3>      <p>JavaBean有特定的写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有get/set方法</li></ul><p>一般用来和数据库的字段做映射。</p><p>ORM：对象关系映射：</p><ul><li>数据库中的表——&gt;Java中的类</li><li>数据库中的字段——&gt;Java中的类的属性</li><li>数据库中的行数据——&gt;Java中的类的对象</li></ul>        <h2 id="mvc三层架构"   >          <a href="#mvc三层架构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#mvc三层架构"></a> MVC三层架构</h2>      <p><strong>MVC：Model View Controller</strong></p><p><strong>Controller(Servlet)</strong>：专注于处理请求以及控制视图跳转</p><ul><li>接受用户的请求</li><li>响应给客户端内容（交给业务层处理，接受业务层返回的数据）</li><li>重定向或转发（视图跳转）</li></ul><p><strong>View（JSP）</strong>：专注于显示网页与数据</p><ul><li>展示网页界面</li><li>提供用户操作，为Controller提供请求</li></ul><p><strong>Model（数据库）</strong>：</p><ul><li>存储数据</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/MVC%20(1).png" alt="MVC (1)" /></p><p>Model</p><ul><li>业务处理：业务逻辑（Servce）</li><li>数据持久层：CRUD（Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求（a，form，img…）</li></ul><p>Controller</p><ul><li>接受用户的请求（req：请求参数，Session信息）</li><li>交给业务层处理对应的代码，接受业务层返回的结果</li><li>控制视图的跳转</li></ul>        <h2 id="filter"   >          <a href="#filter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filter"></a> Filter</h2>      <p>Filter：过滤器，用来过滤网站的数据。</p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210507213832192.png" alt="image-20210507213832192" /></p><p>Filter的先后执行顺序由Filter类在web.xml中定义的顺序有关</p><p>匹配方式：</p><ul><li>精确匹配：精确到具体的文件名</li><li>目录匹配：匹配到指定目录下的所有文件：/admin/*</li><li>后缀名匹配：匹配到指定后缀名的文件：*.html（不能以/开头）</li></ul><ol><li>实现<code>Filter</code>类的功能（处理中文乱码）</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化：web服务器启动时就初始化，随时等待过滤对象出现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Chain：链</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response); <span class="comment">// 让请求继续写，如果不写，程序到这里就被拦截停止</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在web.xml中配置Filter</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zhao.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Filter的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定url下的任何请求都会经过这个过滤器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若想任意url下的请求都可以经过这个过滤器，则写/* 其会拦截jsp文件，否则无法过滤jsp文件里= --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>Filter的使用场景之一（事务）：在Filter中捕获Service层的异常</p><p><img src="/images/%E3%80%90JavaWeb%E3%80%91JavaWeb/image-20210509102119700.png" alt="image-20210509102119700" /></p>        <h2 id="listener"   >          <a href="#listener" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#listener"></a> Listener</h2>      <p>Listener：监听器</p><ol><li>实现监听器的接口</li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一旦创建Session就会触发一次这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) servletContext.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁Session监听</span></span><br><span class="line">    <span class="comment">// 一旦销毁Session就会触发一次这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) servletContext.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount == <span class="keyword">null</span>) &#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>在web.xml中配置Listener</li></ol><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zhao.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】JavaScript</title>
      <link href="2021/04/14/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript/"/>
      <url>2021/04/14/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript/</url>
      
        <content type="html"><![CDATA[        <h2 id="javascript"   >          <a href="#javascript" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h2>      <p>JavaScript是一门世界上最流行的脚本语言。<strong>ECMAScript</strong>可以理解为是JavaScript的一个标准</p>        <h3 id="引入javascript"   >          <a href="#引入javascript" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#引入javascript"></a> 引入JavaScript</h3>      <ol><li>内部标签</li></ol><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Script标签内，写JavaScript代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">   ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><ol start="2"><li>外部引入</li></ol><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/helloworld.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="基本语法"   >          <a href="#基本语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h3>      <figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Script标签内，写JavaScript代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(&#x27;hello world&#x27;);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> score = <span class="number">1</span>;</span></span><br><span class="line">    if (score &gt; 60)&#123;</span><br><span class="line"><span class="javascript">        alert(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="literal">false</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// console.log() 在浏览器的控制台打印变量</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="严格检查格式"   >          <a href="#严格检查格式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#严格检查格式"></a> 严格检查格式</h3>      <p><code>'use strict';</code> 严格检查模式，必须写在JavaScript第一行，防止JavaScript不严谨的语法误用。（前提:IDEA需要设置支持ES6语法）</p><span id="more"></span>        <h2 id="数据类型"   >          <a href="#数据类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>      <p>JavaScript数据类型包括：数值、文本、图形、音频、视频。</p><p>所有变量类型都是<code>var / let</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line">let num; <span class="comment">//（推荐）局部变量建议使用let定义</span></span><br></pre></td></tr></table></div></figure>        <h3 id="number"   >          <a href="#number" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#number"></a> number</h3>      <p>JavaScript不区分小数和整数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span>      <span class="comment">// 整数</span></span><br><span class="line"><span class="number">123.1</span>    <span class="comment">// 浮点数</span></span><br><span class="line"><span class="number">1.123e4</span>  <span class="comment">// 科学计数法</span></span><br><span class="line"><span class="literal">NaN</span>      <span class="comment">// not a number</span></span><br></pre></td></tr></table></div></figure>        <h3 id="字符串"   >          <a href="#字符串" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">`abc <span class="subst">$&#123;str1&#125;</span>`</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="比较运算符"   >          <a href="#比较运算符" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#比较运算符"></a> 比较运算符</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=    <span class="comment">// 赋值</span></span><br><span class="line">==   <span class="comment">// 等于（类型不一样，值一样，也会判断为true）</span></span><br><span class="line">===  <span class="comment">// 绝对等于（类型一样，值一样，才会判断为true）</span></span><br></pre></td></tr></table></div></figure><p>注意：</p><ul><li><code>NaN===NaN</code>，这个与所有数值都不相等，包括自己</li><li>只能通过<code>isNaN(NaN)</code>判断是否为<code>NaN</code></li></ul>        <h3 id="null和undefined"   >          <a href="#null和undefined" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#null和undefined"></a> null和undefined</h3>      <ul><li>null：空</li><li>undefined：未定义</li></ul>        <h3 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></div></figure><p>取数组下标如果越界了，则返回<code>undefined</code>。</p><p>常用方法：</p><ul><li>indexOf()：获取某元素对应的索引</li><li>slice()：截取Array的一部分，返回一个新数组</li><li>push()：向尾部压入一个数据</li><li>pop()：弹出尾部的一个元素</li><li>unshift()：向头部压入数据</li><li>shift()：弹出头部的第一个数据</li><li>sort()：排序</li><li>reverse()：元素反转</li><li>concat()：连接数组</li><li>join()：打印使用特定字符串连接后的数组</li></ul>        <h3 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象"></a> 对象</h3>      <p>对象是大括号，数组是中括号。每个属性之间使用逗号隔开，最后一个不需要</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">13</span>,</span><br><span class="line">    tags:[<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看某属性对应的值</span></span><br><span class="line">person.name</span><br><span class="line">&gt; <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">person.name = <span class="string">&quot;lisi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加</span></span><br><span class="line">person.newAttribute = <span class="string">&quot;new attribute&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断某属性是否在这个对象中 xxx in xxx</span></span><br><span class="line"><span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&gt; <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h3 id="map和set"   >          <a href="#map和set" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map和set"></a> Map和Set</h3>      <blockquote><p>Map：可重复的键值对集合</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>], [<span class="string">&#x27;jack&#x27;</span>, <span class="number">90</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>, <span class="number">123456</span>);</span><br><span class="line">map.delete(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></div></figure><blockquote><p>Set：无序不重复的集合</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]);</span><br><span class="line">set.add(<span class="number">4</span>);</span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>));</span><br></pre></td></tr></table></div></figure>        <h3 id="iterator"   >          <a href="#iterator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#iterator"></a> iterator</h3>      <p>遍历数组</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in：取索引</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// of：取元素值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt; <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></div></figure><p>遍历Map</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>], [<span class="string">&#x27;jack&#x27;</span>, <span class="number">90</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>遍历Set</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="函数"   >          <a href="#函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>              <h3 id="定义函数"   >          <a href="#定义函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定义函数"></a> 定义函数</h3>      <blockquote><p>定义方式一</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>定义方式二</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><code>function(x)&#123;....&#125;</code>是一个匿名函数。但是可以把结果赋值给<code>abs</code>，通过<code>abs</code>就可以调用函数。</p><blockquote><p>调用函数</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">10</span>);</span><br><span class="line">abs(-<span class="number">10</span>);</span><br></pre></td></tr></table></div></figure><p>参数问题：JavaScript可以传任意个参数，也可以不传参数（返回<code>undefined</code>）。假设不传入参数，需要手动判断：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 手动抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>arguments</p></blockquote><p>代表传递进来的所有参数，是一个数组。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;x=&gt;&quot;</span> + x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>rest</p></blockquote><p>ES6引入的新特性，获取除了已经定义的参数外的所有参数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a=&gt;&quot;</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b=&gt;&quot;</span> + b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="变量的作用域"   >          <a href="#变量的作用域" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#变量的作用域"></a> 变量的作用域</h3>      <p>在JavaScript中，var定义变量实际是有作用域的。假设在<strong>函数体中</strong>声明，则在<strong>函数体外</strong>不可以使用。内部函数可以访问外部函数的成员变量，反之不行。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = x + <span class="number">2</span>; <span class="comment">// Uncaught Reference </span></span><br></pre></td></tr></table></div></figure><blockquote><p>提升变量的作用域</p></blockquote><p>JavaScript执行引擎会先定义所有全局变量，然后按顺序赋值。</p><blockquote><p>全局变量</p></blockquote><p>放在函数外面的变量都是全局变量。默认所有的全局变量，都会自动绑定在window对象上.</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x);</span><br></pre></td></tr></table></div></figure><p>JavaScript实际上只有一个全局作用域（<code>window</code>对象），任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域（<code>windows</code>对象中）都没找到，报错<code>ReferenceError</code></p><blockquote><p>规范</p></blockquote><p>由于所有的全局变量都会绑定到<code>window</code>上，如果不同的js文件，使用了相同的全局变量，就会发生冲突。为避免冲突，可使用自定义唯一全局变量。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">MyApp.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">MyApp.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>将自己的代码全部放入自定义的唯一空间名中，降低全局命名冲突的问题</p><blockquote><p>局部作用域 let</p></blockquote><p>ES6 <code>let</code>关键字，解决局部作用域冲突问题</p><blockquote><p>常量 const</p></blockquote><p>ES6 <code>const</code>关键字</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&#x27;3.14&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3>      <blockquote><p>定义方法</p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    birth: <span class="number">2020</span>;</span><br><span class="line">    age: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 今年-出生的年</span></span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.name;</span><br><span class="line">person.age();</span><br></pre></td></tr></table></div></figure>        <h2 id="内部对象"   >          <a href="#内部对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#内部对象"></a> 内部对象</h2>              <h3 id="json"   >          <a href="#json" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#json"></a> JSON</h3>      <p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。在JavaScript中一切即为对象，任何js支持的类型都可以用JSON表示。格式：</p><ul><li>对象用<code>&#123; &#125;</code></li><li>数组用<code>[ ]</code></li><li>所有的键值对用<code>key: value</code></li></ul><p>JSON字符串和JS对象的转换：</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转化为json字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json字符串转换为对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: 3&#125;);</span></span><br></pre></td></tr></table></div></figure>        <h2 id="面向对象编程"   >          <a href="#面向对象编程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#面向对象编程"></a> 面向对象编程</h2>      <ul><li>类：模板，原型对象</li><li>对象：具体的实例</li></ul><blockquote><p>原型对象</p></blockquote><p>语法：<code>childObj.__proto__ = parentObj</code>。子对象的原型是父对象，可获得父对象的方法。</p><blockquote><p>class继承</p></blockquote><p><code>class</code>关键字，是在ES6引入的。</p><ol><li>定义一个类，包含属性和方法</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">xiaoming.hello();</span><br></pre></td></tr></table></div></figure><ol start="2"><li>继承</li></ol><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, grade</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;xiaohong&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">xiaohong.myGrade();</span><br></pre></td></tr></table></div></figure><blockquote><p>原型链</p></blockquote><p>__ proto __：Object()的原型对象还是Object()对象。</p>        <h2 id="操作bom对象"   >          <a href="#操作bom对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作bom对象"></a> 操作BOM对象</h2>      <p>BOM：浏览器对象模型。</p><blockquote><p>window</p></blockquote><p><code>window</code>代表浏览器窗口。</p><blockquote><p>Navigator</p></blockquote><p><code>Navigator</code>封装了浏览器的信息。</p><blockquote><p>screen</p></blockquote><p><code>screen</code>代表屏幕属性。</p><blockquote><p>location</p></blockquote><p><code>location</code>代表当前界面的URL信息。</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">host: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">href:<span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line">protocol:<span class="string">&quot;https:&quot;</span></span><br><span class="line">reload:f reload() 刷新网页</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新的地址，网页会跳转到指定为地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;https://xxxxx&#x27;</span>) </span><br></pre></td></tr></table></div></figure><blockquote><p>document</p></blockquote><p><code>document</code>代表当前页面</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.title <span class="comment">// 当前页面的标题</span></span><br></pre></td></tr></table></div></figure><p>获取具体的文档树节点</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>获取cookie</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></div></figure><blockquote><p>history</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.back()    <span class="comment">// 后退</span></span><br><span class="line">history.forward() <span class="comment">// 前进</span></span><br></pre></td></tr></table></div></figure>        <h2 id="操作dom对象"   >          <a href="#操作dom对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作dom对象"></a> 操作DOM对象</h2>      <p>DOM：文档对象模型。浏览器网页就是一个DOM属性结构。</p><ul><li>更新：更新DOM节点</li><li>遍历：遍历得到DOM节点</li><li>删除：删除DOM节点</li><li>添加：添加新DOM节点</li></ul><blockquote><p>获得DOM节点</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementsById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = father.children;</span><br></pre></td></tr></table></div></figure><blockquote><p>更新DOM节点</p></blockquote><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;id1&#x27;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> id1 = <span class="built_in">document</span>.getElementsById(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>操作文本</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id1.innerText = <span class="string">&#x27;456&#x27;</span> <span class="comment">// 修改文本的值</span></span><br><span class="line">id1.innerHTML = <span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>操作JS</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id1.style.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">id1.style.fontSize = <span class="string">&#x27;20px&#x27;</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>删除节点</p></blockquote><p>步骤：获取父节点 ——&gt; 通过父节点删除自己</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> father = p1.parentElement;</span><br><span class="line">father.removeChild(self);</span><br></pre></td></tr></table></div></figure><blockquote><p>插入节点：appendChild</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">list.appendChild(js);</span><br></pre></td></tr></table></div></figure><blockquote><p>插入节点：insert</p></blockquote><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要包含的节点.insertBefore(newNode, targetNode)</span></span><br><span class="line">list.insertBefore(js, ee);</span><br></pre></td></tr></table></div></figure>        <h2 id="操作表单"   >          <a href="#操作表单" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作表单"></a> 操作表单</h2>      <blockquote><p>表单：form DOM树</p></blockquote><ul><li>文本框 text</li><li>下拉框 select</li><li>单选框 radio</li><li>多选框 checkbox</li><li>隐藏域 hidden</li><li>密码框 password</li></ul><p>表单的作用：提交信息</p><blockquote><p>获得要提交的信息</p></blockquote><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多选框的值，就是定义好的value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;boy&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;girl&#x27;</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">// 得到输入框的值</span></span></span><br><span class="line">    input_text.value;</span><br><span class="line"><span class="javascript">    <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="javascript">    input_text.value = <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    boy_radio.checked; <span class="comment">// 查看是否被选中</span></span></span><br><span class="line"><span class="javascript">    girl_radio.checked = <span class="literal">true</span>; <span class="comment">// 设置被选中</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="事件"   >          <a href="#事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事件"></a> 事件</h2>              <h3 id="静态注册事件"   >          <a href="#静态注册事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态注册事件"></a> 静态注册事件</h3>      <p>在html标签中直接添加事件的响应函数，并在js文件中定义函数内容，这样既可在触发html标签事件时执行相应的响应函数。</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun();&quot;</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="动态注册事件"   >          <a href="#动态注册事件" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态注册事件"></a> 动态注册事件</h3>      <p>网页加载后就注册好事件。这样每次检测到事件被触发就会执行响应函数</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">    btnObj.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="jquery"   >          <a href="#jquery" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jquery"></a> JQuery</h2>      <p>jQuery库，里面存在大量的JavaScript函数，用于简化开发。</p><p><strong>jQuery的本质</strong>：jQuery对象是DOM对象的数组 + jQuery提供的一系列功能函数。其会将查询到的符合条件的DOM对象封装成一个数组存放并附加一些功能函数。</p><p>jQuery对象和DOM对象互相转换：</p><ul><li>DOM转jQuery：var $obj= $(DOM对象)</li><li>jQuery转DOM：var dom = $obj[下标]</li></ul><p>公式：<strong>$(选择器).事件(响应函数)</strong></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 导入jQuery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">公式：$(selector).action()</span></span><br><span class="line"><span class="comment">selector就是css的选择器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello, jQuery&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="选择器"   >          <a href="#选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#选择器"></a> 选择器</h3>      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click(); <span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;#id1&#x27;</span>).click(); <span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">&#x27;.class1&#x27;</span>).click(); <span class="comment">// class选择器</span></span><br></pre></td></tr></table></div></figure>        <h3 id="事件-2"   >          <a href="#事件-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事件-2"></a> 事件</h3>      <ul><li>鼠标事件</li><li>键盘事件</li><li>其他事件</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.6.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #divMove&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">公式：$(selector).action()</span></span><br><span class="line"><span class="comment">selector就是css的选择器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">mouse: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    在这里移动鼠标试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello, jQuery&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 当网页元素加载完毕之后响应事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27; x: &#x27;</span>+e.pageX + <span class="string">&#x27;  y: &#x27;</span>+e.pageY)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="操作dom"   >          <a href="#操作dom" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#操作dom"></a> 操作DOM</h3>      <p>节点文本操作</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).text();</span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).text(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>css操作</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).css(<span class="string">&quot;color:red&quot;</span>);</span><br></pre></td></tr></table></div></figure><p>元素的显示和隐藏。本质：<code>display: none</code></p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).show()</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=cpp]&#x27;</span>).hide()</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端】HTML5+CSS3</title>
      <link href="2021/04/10/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91HTML5/"/>
      <url>2021/04/10/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91HTML5/</url>
      
        <content type="html"><![CDATA[        <h2 id="html"   >          <a href="#html" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#html"></a> HTML</h2>              <h3 id="html-2"   >          <a href="#html-2" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#html-2"></a> HTML</h3>      <p><strong>Hyper Text Markup Language</strong>（超文本标记语言）</p>        <h3 id="w3c标准"   >          <a href="#w3c标准" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#w3c标准"></a> W3C标准</h3>      <p><strong>W3C：World Wide Web Consortium</strong>（万维网联盟），成立于1994年，是Web技术领域最权威和最具影响力的国际<strong>中立性技术标准结构</strong>。</p><p>W3C标准包括：</p><ul><li><strong>结构</strong>化标准语言（HTML、XML）</li><li><strong>表现</strong>标准语言（CSS）</li><li><strong>行为</strong>标准（DOM、ECMAScript）</li></ul><span id="more"></span>        <h2 id="css"   >          <a href="#css" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#css"></a> CSS</h2>      <p><strong>Cascading Style Sheet</strong>层叠级联样式表 。用于美化页面，可以设置字体、颜色、编剧、高度、宽度、背景图片、网页定位、网页浮动等。</p><p>导入CSS文件</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="基本选择器"   >          <a href="#基本选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#基本选择器"></a> 基本选择器</h3>      <blockquote><p>作用：选择页面上某一个或者某一类元素</p></blockquote><ul><li>标签选择器：选中一类标签。<code>标签&#123;&#125;</code></li><li>类<code>class</code>选择器：选中所有class属性一致的标签，可以跨标签。<code>.类名&#123;&#125;</code></li><li><code>id</code>选择器：全局唯一，不可重复。<code>#id名&#123;&#125;</code></li></ul><p>选择器优先级不遵循就近原则，是固定的：<strong>id选择器 &gt; class选择器 &gt; 标签选择器</strong></p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: deepskyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*id选择器，id必须唯一*/</span></span></span><br><span class="line">        #id1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: antiquewhite;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*类选择器*/</span></span></span><br><span class="line">        .style1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: darkorange;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span> = <span class="string">&quot;id1&quot;</span>&gt;</span> 标题1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;style1&quot;</span>&gt;</span> 标题2 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">&quot;style1&quot;</span>&gt;</span> 标题3 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 标题4 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="层次选择器"   >          <a href="#层次选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#层次选择器"></a> 层次选择器</h3>      <ul><li>后代选择器</li><li>子选择器</li><li>相邻兄弟选择器</li><li>通用选择器</li></ul><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*后代选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*子选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>&gt;<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*相邻兄弟选择器，只有一个，并且相邻向下*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*通用兄弟选择器，当前选中元素的向下所有兄弟元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span>~<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: darkorange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p0 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p01 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p1 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p2 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> p3 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span> p11 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p4 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p5 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> p6 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="属性选择器"   >          <a href="#属性选择器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#属性选择器"></a> 属性选择器</h3>      <blockquote><p>id 和 class的结合</p></blockquote><ul><li><code>=</code>：完全相等</li><li><code>*=</code>：包含等于</li><li><code>^=</code>：以xxx开头</li><li><code>$=</code>：以xxx结尾</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】MySQL高级</title>
      <link href="2021/04/06/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/"/>
      <url>2021/04/06/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[        <h2 id="1-索引"   >          <a href="#1-索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-索引"></a> 1. 索引</h2>      <blockquote><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL<strong>高效</strong>获取数据的数据结构</p><p>索引的本质：索引是数据结构</p></blockquote>        <h3 id="11-索引简介"   >          <a href="#11-索引简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-索引简介"></a> 1.1 索引简介</h3>      <p>索引在数据库表的字段上添加，是为了提高查询效率而存在的一种机制。索引是各种数据库进行优化时的重要手段，优化时优先考虑的因素就是索引。一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引。</p><p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。MySQL在查询方面主要是两种方式：</p><ul><li><strong>全表扫描</strong>：一条一条检索，效率较低</li><li><strong>根据索引检索</strong>：先通过索引定位大概位置，然后在此局部范围内扫描，效率较高</li></ul><p>缩小扫描范围，就是扫描某个具体区间。在MySQL数据库中索引也是需要排序的，并且这个索引的排序和TreeSet数据结构相同。在MySQL当中，索引是一个<strong>自平衡二叉树</strong>(B-Tree) 数据结构。遵循左小右大原则存放，采用中序遍历方式遍历取数据。</p>        <h3 id="12-索引的实现原理"   >          <a href="#12-索引的实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-索引的实现原理"></a> 1.2 索引的实现原理</h3>      <ol><li>在任何数据库当中<strong>主键上都会自动添加索引对象</strong>。另外在MySQL当中，一个字段上如果有<strong>UNIQUE</strong>约束的话，也会自动创建索引对象。</li><li>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有—个硬盘上的物理存储编号。</li><li>在MySQL当中，索引是一个单独的对象，在不同的存储引擎中以不同的形式存在。<ul><li>MyISAM：索引存储在一个.MYI文件中；</li><li>InnoDB：索引存储在一个逻辑名称叫做tablespace的空间当中；</li><li>MBMORY：索引被存储在内存当中。</li></ul></li></ol><p>不管索引存储在哪里，索引在MySQL当中都是以<strong>自平衡二叉树</strong>(B-Tree) 的形式存在。</p><blockquote><p>索引的简易实现原理：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Vy4y1z7EX?p=115" >https://www.bilibili.com/video/BV1Vy4y1z7EX?p=115</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br />索引的数据结构：<span class="exturl"><a class="exturl__link"   href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" >http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><img src="/images/%E3%80%90MySQL%E3%80%91MySQL%E9%AB%98%E7%BA%A7/index.png" alt="index" /></p><p>索引的实际实现原理更加复杂（数组+树的结合体），上图只是简易原理。</p><span id="more"></span>        <h3 id="13-索引原则"   >          <a href="#13-索引原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#13-索引原则"></a> 1.3 索引原则</h3>      <ul><li>索引不是越多越好（因为索引也是需要维护的，太多的话反而降低性能）</li><li>不要对经常变动的数据加索引（因为DML之后，索引需要重新排序）</li><li>小数据量的表不需要加索引（数据量庞大时才需要）</li><li>索引一般加在常用来查询的字段上（常出现在<code>WHERE</code>之后）</li><li>建议通过主键或<code>UNIQUE</code>字段修饰的字段进行查询</li></ul>        <h3 id="14-创建和删除索引"   >          <a href="#14-创建和删除索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#14-创建和删除索引"></a> 1.4 创建和删除索引</h3>      <blockquote><p>创建索引</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX emp_ename_index <span class="keyword">ON</span> emp(ename);</span><br></pre></td></tr></table></div></figure><p>给emp表的ename字段添加索引并起别名：emp_ename_index。</p><blockquote><p>删除索引</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX emp_ename_index <span class="keyword">ON</span> emp;</span><br></pre></td></tr></table></div></figure><p>将emp表上的emp_ename_index索引对象删除。</p><blockquote><p>查看某一个SQL语句是否使用了索引进行检索</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="15-索引失效的情况"   >          <a href="#15-索引失效的情况" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#15-索引失效的情况"></a> 1.5 索引失效的情况</h3>      <ol><li>使用模糊查询<code>LIKE</code>，并以<code>%</code>开始时索引失效（因为索引检索时需要知道第一个字母）</li><li>使用<code>OR</code>时，如果<code>OR</code>两边的条件字段<strong>有一个没有索引</strong>，则查询时索引失效（这种情况下可以使用<code>UNION</code>代替<code>OR</code>）</li><li>使用<strong>复合索引</strong>（两个字段或更多字段联合起来添加一个索引）的时候，没有使用<strong>左侧</strong>的列查找，索引失效</li><li>在<code>WHERE</code>中<strong>索引列参与了运算</strong>时，索引失效</li><li>在<code>WHERE</code>中索引列使用了<strong>函数</strong>时，索引失效</li></ol>        <h3 id="16-索引的分类"   >          <a href="#16-索引的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#16-索引的分类"></a> 1.6 索引的分类</h3>      <blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li>单一索引：一个字段上添加索引</li><li>复合索引：两个或更多字段上添加索引</li><li>主键索引：主键上添加索引</li><li>唯一索引：具有UNIQUE约束的字段上添加索引</li></ul><blockquote><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL<strong>高效</strong>获取数据的数据结构</p><p>索引的本质：索引是数据结构</p></blockquote>        <h3 id="1-索引的分类"   >          <a href="#1-索引的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-索引的分类"></a> .1 索引的分类</h3>      <blockquote><p>在一个表中，主键索引只能有一个，唯一索引可以有多个</p></blockquote><ul><li><p>主键索引（PRIMARY KEY)</p><ul><li>唯一的标识，主键不可重复，只能有一列作为主键</li></ul></li><li><p>唯一索引（UNIQUE KEY）</p><ul><li>唯一索引的名字不能重复出现，避免重复的列出现，唯一索引可以有多个</li></ul></li><li><p>常规索引（KEY/INDEX）</p><ul><li>默认的，用INDEX或KEY来设置</li></ul></li><li><p>全文索引（FULLTEXT）</p><ul><li>快速定位数据</li></ul></li></ul><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1. 在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2. 创建完毕后，增加索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引  ADD FULLTEXT INDEX 索引名（列名）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school.`student` <span class="keyword">ADD</span> FULLTEXT INDEX `studentName`(`studentName`);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析sql执行的状况 </span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(studentName) AGAINST(<span class="string">&#x27;张&#x27;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="72-测试索引"   >          <a href="#72-测试索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#72-测试索引"></a> 7.2 测试索引</h3>      <p>增加索引后查询时速度提高很多</p><p>索引在大数据的时候区别十分明显。</p>        <h3 id="73-索引原则"   >          <a href="#73-索引原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#73-索引原则"></a> 7.3 索引原则</h3>      <ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上</li></ul><blockquote><p>索引的数据结构：<span class="exturl"><a class="exturl__link"   href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" >http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>Hash类型的索引</p><p>Btree：InnoDB的默认数据结构</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】JDBC</title>
      <link href="2021/04/01/%E3%80%90MySQL%E3%80%91JDBC/"/>
      <url>2021/04/01/%E3%80%90MySQL%E3%80%91JDBC/</url>
      
        <content type="html"><![CDATA[        <h2 id="jdbc简介"   >          <a href="#jdbc简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdbc简介"></a> JDBC简介</h2>      <blockquote><p>JDBC概念：<span class="exturl"><a class="exturl__link"   href="https://www.jianshu.com/p/e71990336319" >https://www.jianshu.com/p/e71990336319</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>JDBC（Java Data Base Connectivity，java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p><p>普通应用程序无法直接和数据库进行通讯连接，需要借助<strong>数据库驱动</strong>和数据库连接。SUN公司为了简化开发人员对数据库的统一操作，提供了一个Java操作数据库的规范，俗称JDBC。这些规范由具体的厂商去做，开发人员只需要调用接口即可连接数据库进行开发。</p><p>应用程序 ——&gt;  JDBC  ——&gt; MySQL驱动 /Oracle驱动 ——&gt; MySQL数据库/Oracle数据库</p><p><img src="/images/%E3%80%90MySQL%E3%80%91JDBC/image-20210517213554324.png" alt="image-20210517213554324" /></p>        <h2 id="jdbc使用"   >          <a href="#jdbc使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdbc使用"></a> JDBC使用</h2>      <p>JDBC使用步骤：</p><ul><li>加载驱动：<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></li><li>连接数据库：<code>DriverManager.getConnection(url, username, password);</code></li><li>创建执行sql语句的对象：<code>Statement statement = connection.createStatement();</code></li><li>获得返回的结果集：<code>ResultSet resultSet = statement.executeQuery(sql);</code></li><li>释放连接：<code>resultSet.close();</code></li></ul><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuyunzhao.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* useUnicode=true：设置使用Unicode编码，支持中文</span></span><br><span class="line"><span class="comment">        *  characterEncoding=utf8：设置字符集为utf-8</span></span><br><span class="line"><span class="comment">        *  userSSL=true：安全连接</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 2. 设置用户信息和url</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/school?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;zhaoyuyun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 连接成功，Connection代表数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建执行SQL的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;SELECT * FROM `student`&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 执行sql语句，返回的结果集中封装了全部查询结果</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;studentno = &quot;</span> +  resultSet.getInt(<span class="string">&quot;studentno&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;sex = &quot;</span> +  resultSet.getInt(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;======================================== &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="statement对象"   >          <a href="#statement对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#statement对象"></a> Statement对象</h2>      <p>JDBC中的Statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。</p><p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化)。</p><p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>        <h3 id="executeupdate方法"   >          <a href="#executeupdate方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#executeupdate方法"></a> executeUpdate方法</h3>      <blockquote><p>CRUD操作-create</p></blockquote><p>使用executeUpdate(String sql)方法完成数据添加操作：</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st <span class="operator">=</span> conn.createStatement();</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;insert into user(...) values(...)&quot;;</span><br><span class="line"><span class="type">int</span> num <span class="operator">=</span> st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">if (num &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;插入成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>CRUD操作-delete</p></blockquote><p>使用executeUpdate(String sql)方法完成数据删除操作：</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st <span class="operator">=</span> conn.createStatement();</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;delete from user where id=1&quot;;</span><br><span class="line"><span class="type">int</span> num <span class="operator">=</span> st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">if (num &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>CRUD操作-update</p></blockquote><p>使用executeUpdate(String sql)方法完成数据修改操作：</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st <span class="operator">=</span> conn.createStatement();</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;update user set name= &#x27;&#x27; where name=&#x27;&#x27;&quot;;</span><br><span class="line"><span class="type">int</span> num <span class="operator">=</span> st.executeUpdate(<span class="keyword">sql</span>);</span><br><span class="line">if (num &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;修改成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="executequery方法"   >          <a href="#executequery方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#executequery方法"></a> executeQuery方法</h3>      <blockquote><p>CRUD操作-read</p></blockquote><p>使用executeQuery(String sql)方法完成数据查询操作：</p><figure class="highlight"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Statement st <span class="operator">=</span> conn.createStatement();</span><br><span class="line">String <span class="keyword">sql</span> <span class="operator">=</span> &quot;select * from user where id=1&quot;;</span><br><span class="line">ResultSet rs <span class="operator">=</span> st.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line">if (rs.next())&#123;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><blockquote><p>SQL注入的问题</p></blockquote><p>sql存在漏洞，会被攻击导致数据泄漏。例如，在sql语句中加入&quot; xxx or 1=1&quot;的字段，就会导致原先的判断条件失效，从而造成数据泄漏。</p>        <h2 id="preparedstatement对象"   >          <a href="#preparedstatement对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#preparedstatement对象"></a> PreparedStatement对象</h2>      <p><strong>PreparedStatement接口是Statement的子接口，它表示一条预编译过的SQL语句，其能最大可能地提高性能：</strong></p><ul><li>PreparedStatement对象可以防止SQL注入，效率更高。其会预编译SQL语句，并通过传参的形式设置参数值。</li><li>DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码即可；</li><li>在statement语句中，即使是相同操作但是因为数据内容不一样，所以整个语句本身不能匹配，没有缓存语句的意义，事实是没有数据库会对普通语句变异后的执行代码缓存。这样每执行一次都要对传入的语句编译一次。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;inset into users(`id`, `name`, `password`) values(?, ?, ?)&quot;</span>;</span><br><span class="line">PreparedStatment st = connection.prepareStatement(sql);</span><br><span class="line">st.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">st.setString(<span class="number">2</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">st.setString(<span class="number">3</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>PreparedStatement防止SQL注入的本质：把传进来的参数当做字符，假设其中存在转义字符，就直接忽略，‘’引号会被直接转义。</p>        <h2 id="事务"   >          <a href="#事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#事务"></a> 事务</h2>      <p>要么都执行，要么都不执行。</p><blockquote><p>ACID原则</p></blockquote><p><strong>1. 原子性(Atomicity)</strong></p><p>原子性是指<strong>事务是一个不可分割的工作单位</strong>，事务中的操作<strong>要么都执行，要么都不执行</strong>。</p><p><strong>2. 一致性(Consistency)</strong></p><p>事务必须使数据库从一个一致性状态变换到另一个一致性状态。（例如A给B转账前后，数据库中二者余额之和相等，转账前为一个一致性状态，转账后也为一个一致性状态）。</p><p><strong>3. 隔离性(Isolation)</strong></p><p>隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他数据是隔离的，并发执行的各个事务之间不能互相干扰。</p><p><strong>4. 持久性(Durability)</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p><blockquote><p>代码实现</p></blockquote><ol><li>开启事务：<code>connection.setAutoCommit(false);</code></li><li>一组业务执行完毕，提交事务：<code>connection.commit();</code></li><li>在catch中显式定义回滚语句，但默认失败后就回滚：<code>connection.rollback();</code></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuyunzhao.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* useUnicode=true：设置使用Unicode编码，支持中文</span></span><br><span class="line"><span class="comment">         *  characterEncoding=utf8：设置字符集为utf-8</span></span><br><span class="line"><span class="comment">         *  userSSL=true：安全连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 设置用户信息和url</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;zhaoyuyun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 连接成功，Connection代表数据库对象</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭数据库的自动提交，自动会开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            String sql1 = <span class="string">&quot;update `account` set `money` = `money` - 100 where `name` = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">            st = connection.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟报错</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">&quot;update `account` set `money` = `money` + 100 where `name` = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">            st = connection.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务完毕，提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 如果上述事务执行过程中异常，则回滚</span></span><br><span class="line">            <span class="comment">// 默认会回滚</span></span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                connection.rollback(); <span class="comment">// 如果失败则回滚事务</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            st.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="数据库连接池"   >          <a href="#数据库连接池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据库连接池"></a> 数据库连接池</h2>      <p>数据库连接–执行完毕–释放。频繁的<code>连接--释放</code>十分浪费系统资源。</p><p><strong>池化技术：准备一些预先的资源，执行任务时就直接连接预先准备好的资源</strong></p><p>编写连接池，实现DataSource的接口。</p><blockquote><p>开源数据源实现</p></blockquote><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】MySQL基础</title>
      <link href="2021/03/29/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/29/%E3%80%90MySQL%E3%80%91MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[        <h2 id="1-初识mysql"   >          <a href="#1-初识mysql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-初识mysql"></a> 1. 初识MySQL</h2>      <ul><li><strong>DB</strong>：DataBase，数据库，实际上在硬盘上以文件的形式存在</li><li><strong>SQL</strong>：Structured Query Language，结构化查询语言，是一门标准通用的语言，标准sql适用于所有的数据库产品，SQL语句在执行时，内部会先进行编译，然后再执行。（SQL语句的编译由DBMS完成）</li><li><strong>DBMS</strong>： DataBase Management System，数据库管理系统，如MySQL，Oracle，DB2等，用来管理DB（用来管理数据库中的数据）</li></ul><p><strong>DBMS负责执行sql语句，其通过执行sql语句来操作DB中的数据。</strong></p>        <h3 id="11-启动mysql服务"   >          <a href="#11-启动mysql服务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-启动mysql服务"></a> 1.1 启动MySQL服务</h3>      <p>命令行启动MySQL服务（管理员模式）</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></div></figure>        <h3 id="12-连接数据库"   >          <a href="#12-连接数据库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-连接数据库"></a> 1.2 连接数据库</h3>      <p>命令行连接数据库（管理员模式）</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p xxxxx  <span class="comment">-- 连接数据库</span></span><br></pre></td></tr></table></div></figure>        <h3 id="13-sql命令"   >          <a href="#13-sql命令" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#13-sql命令"></a> 1.3 SQL命令</h3>      <p>更改用户密码并刷新权限（sql语句需要以;结尾）</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user <span class="keyword">SET</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> <span class="keyword">AND</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 更改用户密码</span></span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES; <span class="comment">-- 刷新权限</span></span><br></pre></td></tr></table></div></figure><span id="more"></span><p>基本命令</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 查询所有数据库</span></span><br><span class="line">USE xxx; <span class="comment">-- 切换数据库 use 数据库名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> TABLES; <span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> student; <span class="comment">-- 显示数据库中所有的表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE westos; <span class="comment">-- 创建一个数据库</span></span><br><span class="line"></span><br><span class="line">EXIT; <span class="comment">-- 退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">hello </span></span><br><span class="line"><span class="comment">MySQL</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>        <h3 id="14-数据库语言分类"   >          <a href="#14-数据库语言分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#14-数据库语言分类"></a> 1.4 数据库语言分类</h3>      <ul><li><strong>DDL： Database Definition Language</strong> 数据库定义语言。用于对<strong>表的结构</strong>进行增删改：CREATE  DROP ALTER</li><li><strong>DML：Data Manipulation Language</strong>  数据库操纵语言。用于对<strong>表的数据</strong>进行增删改：INSERT DELETE UPDATE</li><li><strong>DQL：Data Query Language</strong> 数据库查询语言。用于查询表中的数据，基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：</li><li><strong>DCL：Data Control Language</strong> 数据库控制语言。用来授予或回收访问数据库的某种特权：GRANT REVOKE</li><li><strong>TCL：Transaction Control Language</strong> 事务控制语言。控制数据库操纵事务发生的时间及效果，对数据库实行监视等：COMMIT ROLLBACK</li></ul>        <h2 id="2-数据库基础"   >          <a href="#2-数据库基础" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-数据库基础"></a> 2. 数据库基础</h2>              <h3 id="21-操作数据库"   >          <a href="#21-操作数据库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#21-操作数据库"></a> 2.1 操作数据库</h3>      <p>操作数据库 ——&gt; 操作数据库中的表 ——&gt; 操作数据库中表的数据</p><p><mark><strong>MySQL关键字不区分大小写</strong></mark></p><p>以下关键字属于MySQL命令，并非SQL语句，只有在MySQL中才能使用</p><ol><li>创建数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] school;</span><br></pre></td></tr></table></div></figure><ol start="2"><li>删除数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] school;</span><br></pre></td></tr></table></div></figure><ol start="3"><li>使用数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果表名或者字符段名是一个特殊字符，需要带上 ` `</span></span><br><span class="line">USE `school`;</span><br></pre></td></tr></table></div></figure><ol start="4"><li>查看数据库</li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;  <span class="comment">-- 查看所有数据库</span></span><br></pre></td></tr></table></div></figure>        <h3 id="22-数据库的列类型"   >          <a href="#22-数据库的列类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#22-数据库的列类型"></a> 2.2 数据库的列类型</h3>      <blockquote><p>数值</p></blockquote><ul><li>tinyint：   十分小的数据 ，        1个字节</li><li>smallint：     较小的数据  ，           2个字节</li><li>mediumint：中等大小的数据，     3个字节</li><li><strong>int：              标准的整数 ，          4个字节</strong></li><li>bigint：          较大的数据 ，            8个字节</li><li>float：            浮点数，                     4个字节</li><li>double：        浮点数，                     8个字节</li><li>decimal：      字符串形式的浮点数，  金融计算时，一般使用decimal</li></ul><p>其中浮点型数据创建时可以指定保留位数。例如double(M, D)代表小数点后保留D位小数，M代表整数部位+小数部位的总长度，如果超出范围，则插入临界值。M和D可以省略，如果是decimal，则默认M=10，D=0；如果是float和double，则会根据插入的数值的精度来决定精度。</p><blockquote><p>字符串</p></blockquote><ul><li>char：       <strong>固定大小</strong>字符串 0~255（在内存中分配固定长度存储数据）</li><li><strong>varchar： 可变长度字符串 0~65535，类比Java中String（按照实际字符串大小在内存中分配空间）</strong></li><li>tinytext： 微型文本  2^8 - 1</li><li>text：        文本串     2 ^16 - 1  保存大文本</li></ul><p>char(M)表示最大长度不能超过M，其中M可以省略，默认为1；<strong>varchar(M)的M不可以省略</strong>。</p><blockquote><p>时间日期</p></blockquote><p>类比java.util.Date</p><ul><li>date：  YYYY-MM-DD    日期格式</li><li>time ：  HH:mm::ss         时间格式</li><li><strong>datetime：    YYYY-MM-DD HH:mm::ss     最常用的时间格式</strong></li><li><strong>timestamp：  时间戳，1970.01.01到现在的毫秒数</strong></li><li>year： 年份表示</li></ul><blockquote><p>大对象</p></blockquote><ul><li>BLOB：Binary Large Object 二进制大对象（存储图片、视频等流媒体信息）对应Java中的Object</li><li>CLOB：Character Large Object 字符大对象（存储较大文本，比如可以存储4G的字符串）对应Java中的Object</li></ul><blockquote><p>NULL</p></blockquote><ul><li>没有值，未知</li><li><mark><strong>注意，不要使用NULL进行运算，NULL和任何数参与运算，计算结果都为NULL</strong></mark></li><li>想避免NULL对运算结果产生影响，则使用<code>IFNULL</code>空处理函数：<code>IFNULL(XXX, 0)</code></li></ul>        <h3 id="23-存储引擎"   >          <a href="#23-存储引擎" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#23-存储引擎"></a> 2.3 存储引擎</h3>      <p>存储引擎即一张表在数据库中的存储方式。</p><div class="table-container"><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持（最新版支持）</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持，只支持表锁</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持（最新版支持）</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table></div><ul><li><strong>MyISAM</strong>：<strong>可被转换为压缩、只读表来节省空间</strong>。节约空间，速度较快</li><li><strong>InnoDB</strong>：安全性高，支持<strong>事务</strong>的处理，多表多用户操作，在MySQL服务器<strong>崩溃后提供自动恢复</strong>，支持级联删除和更新</li><li><strong>MEMORY</strong>：查询速度最快，<strong>表数据和索引</strong>被存储在<strong>内存</strong>中，不支持事务，数据容易丢失。不能包含TEXT或BLOB字段</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有数据库文件都存在data目录下，一个文件夹就是一个数据库，本质还是文件的存储。</p><p>MySQL引擎在物理文件上的区别：</p><ul><li>InnoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MyISAM对应文件<ul><li>*.frm  表结构的定义文件</li><li>*.MYD 数据文件（data）</li><li>*.MYI  索引文件（index）</li></ul></li></ul><p>三种存储引擎的适用条件：</p><ul><li>MyISAM：适用于大量的数据读而少量数据更新的混合操作，另一种适用情形是使用压缩的只读表</li><li>InnoDB：适用于查询中包含较多的数据更新操作，其行级锁机制和多版本的支持为数据读取和更新的混合操作提供了良好的并发机制</li><li>MEMORY：适用于存储非永久需要的数据，或者是能够从基于磁盘的表中重新生成的数据</li></ul>        <h3 id="24-数据表的类型"   >          <a href="#24-数据表的类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#24-数据表的类型"></a> 2.4 数据表的类型</h3>      <blockquote><p>设置数据库表的字符集编码</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></div></figure><p>不设置的话，会是MySQL默认的字符集编码Latin1（不支持中文）。</p><p>可以在my.ini中配置默认的编码：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">-</span>server<span class="operator">=</span>utf8</span><br></pre></td></tr></table></div></figure>        <h3 id="25-约束"   >          <a href="#25-约束" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#25-约束"></a> 2.5 约束</h3>      <p>在创建表时，可以给表的字段添加相应的约束，从而保证表中数据的合法性、有效性和完整性。</p><ul><li>非空约束（NOT NULL）：约束的字段不能为NULL</li><li>唯一约束（UNIQUE）：约束的字段不能重复</li><li>主键约束（PRIMARY KEY）：约束的字段既不能为NULL，也不能重复（简称PK）</li><li>外键约束（FOREIGN KEY)：用于限制两个表的关系，约束的字段的值必须来自于主表的关联列的值（简称FK）</li><li>无符号约束（UNSIGNED）：约束该字段为无符号</li><li>零填充约束（ZEROFILL）：限制该字段0填充</li><li>自增约束（AUTO_INCREMENT）：限制该字段自增</li><li>默认值约束（DEFAULT）：设置该字段的默认值</li></ul><blockquote><p>唯一性约束（UNIQUE）</p></blockquote><p><strong>UNIQUE</strong>：唯一性约束修饰的字段具有唯一性，不能重复，但可以设置为NULL。</p><p>若给两列同时加UNIQUE，则为表级约束，联合起来不重复即可。若在列后面直接加UNIQUE，则为列级约束，该列数据不能有重复。</p><blockquote><p>主键（PRIMARY KEY）</p></blockquote><p><strong>PRIMARY KEY</strong>：主键值是这行数据在这张表中的唯一标识（第一范式要求每张表必须有主键）。</p><p>一张表的主键约束只能有一个，可以是单一主键（推荐）或复合主键（不推荐，违反三范式）。主键值最好是和业务没有关系的自然数。在字段后添加AUTO_INCREMENT设置主键值自增</p><blockquote><p>外键（FOREIGN KEY）</p></blockquote><p><strong>FOREIGN KEY</strong>：用于减少表的冗余，将一张表拆成两张表。</p><p>外键引用的父表的字段必须是唯一的（UNIQUE），一般情况都是子表外键引用父表主键</p><blockquote><p>无符号约束（UNSIGNED）</p></blockquote><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><blockquote><p>零填充约束（ZEROFILL）</p></blockquote><ul><li>0填充的</li><li>不足的位数，使用0填充。zerofill设置为3时，5——005</li></ul><blockquote><p>自增约束（AUTO_INCREMENT）</p></blockquote><ul><li>自动在上一条记录的基础上+1（默认）</li><li>通常用来设计唯一的主键，例如Index，必须是整数类型</li><li>可以自定义设置主键自增的起始值和步长</li></ul><blockquote><p>默认值约束（DEFAULT）</p></blockquote><ul><li>设置默认的值</li><li>例如若sex设置默认值为男，如果不指定该列的值，则会设置为默认值</li></ul><p>增加外键约束的方式：</p><blockquote><p>方式一：在创建表的时候，增加约束（比较麻烦）</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表的gradeid字段要去引用年级表的gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键KEY</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束（执行引用） reference 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(`id`), </span><br><span class="line">     <span class="keyword">CONSTRAINT</span> uq <span class="keyword">UNIQUE</span>(`name`), </span><br><span class="line"> KEY `FK_gradeid`(`gradeid`),</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> `FK_gradid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure><p>删除有外键关系的表时，必须先删除引用别人的表（从表），再删除被引用的表（主表）</p><blockquote><p>方式二：创建表成功后，添加外键约束</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade`(</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级id&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生年级&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表（哪个字段)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY(`gradeid`) <span class="keyword">REFERENCES</span> `grade`(`gradeid`);</span><br></pre></td></tr></table></div></figure><p>以上操作都是<code>物理外键</code>，数据库级别的外键，不建议使用（避免数据库过多造成困扰）</p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>想使用多张表的数据，想使用外键时，使用程序实现</li></ul><p><strong>主键约束（PRIMARY KEY）和唯一约束（UNIQUE）对比：</strong></p><div class="table-container"><table><thead><tr><th></th><th>保证唯一性</th><th>是否允许为空</th><th>一个表可以有几个</th><th>是否允许组合</th></tr></thead><tbody><tr><td><strong>主键约束</strong></td><td>√</td><td>×</td><td>最多有一个</td><td>√</td></tr><tr><td><strong>唯一约束</strong></td><td>√</td><td>√</td><td>可以有多个</td><td>√</td></tr></tbody></table></div><p><strong>列级约束和表级约束对比</strong></p><div class="table-container"><table><thead><tr><th></th><th>位置</th><th>支持的约束类型</th><th>是否可以起约束名</th></tr></thead><tbody><tr><td><strong>列级约束</strong></td><td>列的后面</td><td>语法都支持，但外键没有效果</td><td>不可以</td></tr><tr><td><strong>表级约束</strong></td><td>所有列的下面</td><td>默认和非空约束不支持，其他支持</td><td>可以（主键没有效果）</td></tr></tbody></table></div>        <h2 id="3-数据库定义语言ddl"   >          <a href="#3-数据库定义语言ddl" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-数据库定义语言ddl"></a> 3.  数据库定义语言（DDL）</h2>              <h3 id="31-创建表create"   >          <a href="#31-创建表create" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#31-创建表create"></a> 3.1 创建表（CREATE）</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意点 英文括号()，表的名称和字段尽量使用``</span></span><br><span class="line"><span class="comment">-- 字符串使用单引号&#x27;&#x27;括起来</span></span><br><span class="line"><span class="comment">-- 所有语句后面加,（最后一句不用加）</span></span><br><span class="line"><span class="comment">-- PRIMAY KEY 一张表的主键约束只能有一个。单一主键或复合主键（不推荐，因为违反三范式）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT  COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123456&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;女&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`birthday` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure><p>一般格式：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    ...</span><br><span class="line">    `字段名` 列类型 [约束] [索引] [注释],</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`字段名`)</span><br><span class="line">)[表类型][注释][字符集设置];</span><br></pre></td></tr></table></div></figure><p>约束位置处可以添加：</p><ul><li><code>UNSIGNED</code>：限制该字段为无符号</li><li><code>ZEROFILL</code>：该字段0填充</li><li><code>AUTO_INCREMENT</code>：该字段自增</li><li><code>DEFAULT</code> ：设置该字段的默认值</li><li><code>NOT NULL</code>：限制该字段不能为NULL</li><li><code>UNIQUE</code>：限制该字段不能重复</li><li><code>PRIMARY KEY</code>：约束该字段既不能为NULL，也不能重复</li><li><code>FOREIGN KEY</code>：约束该字段的值必须来自于主表的关联列的值（外键约束在列级约束处无效果）</li></ul><p>常用命令：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `school`; <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`;   <span class="comment">-- 查看创建student数据表的语句，使用Navicat生成表后，可以使用该命令查看创建表的语句</span></span><br><span class="line"><span class="keyword">DESC</span> `student`;                <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></div></figure><p>复制表：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复制表的结构+数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student_2`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student_2` <span class="keyword">LIKE</span> `student`;</span><br></pre></td></tr></table></div></figure>        <h3 id="32-修改表alter"   >          <a href="#32-修改表alter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#32-修改表alter"></a> 3.2 修改表（ALTER）</h3>      <blockquote><p>修改表的结构</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名：ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test RENAME <span class="keyword">AS</span> teacher1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加表的字段：ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段（修改字段类型以及约束，字段重命名）</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>); <span class="comment">-- 修改字段类型以及约束</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 CHANGE 旧字段名 新字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 CHANGE age age1 <span class="type">INT</span>(<span class="number">1</span>); <span class="comment">-- 字段重命名</span></span><br></pre></td></tr></table></div></figure><blockquote><p>删除表的结构</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表的字段：ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1;</span><br></pre></td></tr></table></div></figure><p>注意点：</p><ul><li>字段名使用``包裹</li><li>注释用-- 或/**/</li><li>sql关键字大小写不敏感</li></ul>        <h3 id="33-删除表drop"   >          <a href="#33-删除表drop" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#33-删除表drop"></a> 3.3 删除表（DROP）</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> t_student;</span><br></pre></td></tr></table></div></figure>        <h2 id="4-数据库操纵语言dml"   >          <a href="#4-数据库操纵语言dml" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-数据库操纵语言dml"></a> 4. 数据库操纵语言（DML）</h2>              <h3 id="41-添加数据insert"   >          <a href="#41-添加数据insert" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#41-添加数据insert"></a> 4.1 添加数据（INSERT）</h3>      <p>语法：<mark><strong>INSERT INTO 表名(字段名1, 字段名2) VALUES (‘值11’,‘值12’), (‘值21’,‘值22’)</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入一个数据的一个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`) VALUES (&#x27;值1&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一个数据的多个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`, `字段名2`) VALUES (&#x27;值1&#x27;, &#x27;值2&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`, `pwd`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;aaaaaa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个数据的多个字段时</span></span><br><span class="line"><span class="comment">-- INSERT INTO `表名`(`字段名1`, `字段名2`) VALUES (&#x27;值11&#x27;, &#x27;值12&#x27;), (&#x27;值21&#x27;, &#x27;值22&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`name`, `pwd`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;aaaaaa&#x27;</span>), (<span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>);</span><br></pre></td></tr></table></div></figure><p>注意事项：</p><ol><li>字段和字段使用英文逗号隔开</li><li>表后括号内的字段可以省略，但是后面的值必须与字段名一一对应</li><li>可以同时插入多条数据，此时VALUES后面的值使用逗号隔开<code>VALUES(), (), ()...</code></li></ol>        <h3 id="42-修改数据update"   >          <a href="#42-修改数据update" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#42-修改数据update"></a> 4.2 修改数据（UPDATE）</h3>      <p>语法：<mark><strong>UPDATE 表名 SET  字段名1=value, [字段名2=value2, …] WHERE [条件]</strong></mark></p><p>条件：WHERE子句，运算符</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  修改学员名字，带了条件</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况下，会改动所有的表</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span>, `email`<span class="operator">=</span><span class="string">&#x27;1234567@qq.com&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过多个条件定位数据，无上限</span></span><br><span class="line">UPDATE `student` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span> <span class="keyword">AND</span> `sex`<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多张表的记录</span></span><br><span class="line">UPDATE `student1` s1 </span><br><span class="line"><span class="keyword">JOIN</span> `student2` s2</span><br><span class="line"><span class="keyword">ON</span> s1.`id` <span class="operator">=</span> s2.`id`</span><br><span class="line"><span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;wangwu&#x27;</span></span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td style="text-align:left">&lt;=&gt;</td><td>安全等于</td><td>5&lt;=&gt;NULL</td><td>false</td></tr><tr><td style="text-align:left">&lt;&gt; 或 !=</td><td>不等于</td><td>5&lt;&gt;6</td><td>true</td></tr><tr><td style="text-align:left">&gt;，&gt;=</td><td>大于，大于等于</td><td>5&gt;6, 5&gt;=6</td><td>false</td></tr><tr><td style="text-align:left">&lt;，&lt;=</td><td>小于，小于等于</td><td>5&lt;6, 5&lt;=6</td><td>true</td></tr><tr><td style="text-align:left">BETWEEN … AND …</td><td>闭区间[]</td><td>BETWEEN 2 AND 5</td><td>[2, 5]</td></tr><tr><td style="text-align:left">AND</td><td>&amp;&amp;</td><td>5&gt;1 AND 1&gt;2</td><td>false</td></tr><tr><td style="text-align:left">OR</td><td>||</td><td>5&gt;1 OR 1&gt;2</td><td>true</td></tr></tbody></table></div><p>注意：</p><ul><li>字段名是数据库的列，尽量带上``</li><li>筛选的条件如果没有指定，则会修改所有的列</li><li>value是一个具体的值，也可以是一个变量（时间变量）</li><li>多个设置的属性之间使用英文逗号隔开</li><li><strong>安全等于&lt;=&gt;可以判断某字段数值是否等于NULL，而普通等于=无法判断是否为NULL</strong></li></ul>        <h3 id="43-删除数据delete"   >          <a href="#43-删除数据delete" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#43-删除数据delete"></a> 4.3 删除数据（DELETE）</h3>      <p>语法：<mark><strong>DELETE  FROM 表名 [WHERE 条件]</strong></mark></p><p>作用：<strong>用于删除小表，删除后可以回滚，删除速度较慢</strong></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据 （避免这样写，会全部删除）</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `student` <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联表删除数据</span></span><br><span class="line"><span class="comment">-- 将userid为Bbiri的user表和my_employees表的记录删除</span></span><br><span class="line"><span class="keyword">DELETE</span> u, e </span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">JOIN</span> my_employees e</span><br><span class="line"><span class="keyword">ON</span> u.`userid` <span class="operator">=</span> r.`Userid`</span><br><span class="line"><span class="keyword">WHERE</span> u.`userid` <span class="operator">=</span> <span class="string">&#x27;Bbiri&#x27;</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>TRUNCATE 命令</p></blockquote><p>作用：**用于删除大表，表被截断，不可回滚，永久消失，删除速度较快。**完全清空一个数据库表，表的结构和索引约束不会变。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `student`;</span><br></pre></td></tr></table></div></figure><blockquote><p>TRUNCATE与DELETE区别</p></blockquote><ul><li>相同点：都能删除数据，都不会删除表结构</li><li>不同点：<ul><li>TRUNCATE：**删除后不可回滚，永久丢失，删除速度较快。**重新设置自增列，<strong>自增会归零</strong>，不会影响事务，其后不能加<code>WHERE</code>过滤</li><li>DELETE：<strong>删除后可以回滚，删除速度较慢。<strong>不影响自增列，删除后</strong>自增不归零</strong></li></ul></li></ul><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `test`;    <span class="comment">-- 不会影响自增</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> `test`; <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></div></figure><p>了解即可： <code>DELETE删除的问题</code></p><p>重启数据库时：</p><ul><li>InnoDB，自增列会从1开始（存在内存当中，断电即失）</li><li>MyISAM，继续从上一个自增量开始（存在文件中，不会丢失）</li></ul>        <h2 id="5-数据库查询语言dql"   >          <a href="#5-数据库查询语言dql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-数据库查询语言dql"></a> 5. 数据库查询语言（DQL）</h2>              <h3 id="51-dql"   >          <a href="#51-dql" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#51-dql"></a> 5.1 DQL</h3>      <p>DQL：Data Query Language，数据库查询语言</p><ul><li>所有的查询操作都使用SELECT</li><li>数据库中最核心的语言</li><li>使用频率最高</li></ul><p><strong>SELECT完整语法：</strong></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>[<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW <span class="operator">|</span> TOP]</span><br><span class="line">&#123;* | talbe.* | [table.]field1[AS alias1][,[table.]field2[AS alias2][,…]]&#125; -- 字段</span><br><span class="line"><span class="keyword">FROM</span> tableexpression[,…]  <span class="comment">-- 从哪张表（主表）查询</span></span><br><span class="line">[<span class="keyword">LEFT</span> <span class="operator">|</span> <span class="keyword">RIGHT</span> <span class="operator">|</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> externaldatabase]  <span class="comment">-- 联合查询</span></span><br><span class="line">[<span class="keyword">ON</span> …]          <span class="comment">-- 联合查询的等值判断</span></span><br><span class="line">[<span class="keyword">WHERE</span> …]       <span class="comment">-- 条件过滤：可以是具体的值，也可以是子查询语句</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> …]    <span class="comment">-- 分组：通过某个字段进行分组</span></span><br><span class="line">[<span class="keyword">HAVING</span> …]  <span class="comment">-- 过滤分组后信息：条件和WHERE相似，只是位置必须在GROUP BY之后</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> …]<span class="comment">-- 排序：通过某个字段排序</span></span><br><span class="line">[LIMIT ]        <span class="comment">-- 分页：指定查询记录从哪条，显示多少条</span></span><br></pre></td></tr></table></div></figure><p><mark><strong>SELECT语句执行顺序：</strong></mark></p><p><code>SELECT</code>在<code>HAVING</code>之后执行，因此分组函数不能在<code>WHERE</code>中使用</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>            <span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">FROM</span>              <span class="comment">-- 1</span></span><br><span class="line">[<span class="keyword">JOIN</span>  …]         <span class="comment">-- 2</span></span><br><span class="line">[<span class="keyword">ON</span>    …]         <span class="comment">-- 3</span></span><br><span class="line">[<span class="keyword">WHERE</span> …]         <span class="comment">-- 4</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> …]      <span class="comment">-- 5</span></span><br><span class="line">[<span class="keyword">HAVING</span> …]        <span class="comment">-- 6</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> …]      <span class="comment">-- 8</span></span><br><span class="line">[LIMIT ]          <span class="comment">-- 9</span></span><br></pre></td></tr></table></div></figure>        <h3 id="52-指定查询字段select"   >          <a href="#52-指定查询字段select" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#52-指定查询字段select"></a> 5.2 指定查询字段（SELECT）</h3>      <p>语法：<mark><strong>SELECT 字段，… FROM 表</strong></mark></p><blockquote><p>有时列的名字不是那么见名知意，此时可以其别名，使用AS ：字段名 AS 别名 或  表名 AS 别名</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全部学生 SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起个名字。可以给字段其别名，也可以给表名起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">AS</span> 学号, `StudentName` <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数 CONCAT(a, b)，将连接后字符串显示</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;姓名： &#x27;</span>, StudentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> `student`;</span><br></pre></td></tr></table></div></figure><blockquote><p>去重 DISTINCT</p></blockquote><p>作用：去除SELECT查询出来的结果中重复的数据，重复数据只显示一条</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询一下有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;            <span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` <span class="keyword">FROM</span> <span class="keyword">result</span>;  <span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `StudentNo` <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>数据库的列（表达式）</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION();                   <span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果;          <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTO</span>_INCREMENT_INCREMENT;  <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学员考试成绩+1分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult`<span class="operator">+</span><span class="number">1</span> <span class="keyword">AS</span> <span class="string">&#x27;提分后&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><p>数据库中的表达式：文本值，列，NULL，函数，计算表达式，系统变量…</p><p>语法：<mark><strong>SELECT 表达式  FROM 表</strong></mark></p>        <h3 id="53-条件子句where"   >          <a href="#53-条件子句where" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#53-条件子句where"></a> 5.3 条件子句（WHERE）</h3>      <p>作用：检索数据中<code>符合条件</code>的值</p><p>搜索的条件由一个或多个表达式组成，结果为布尔值</p><blockquote><p>逻辑运算符</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>AND  &amp;&amp;</td><td>a AND b   a &amp;&amp; b</td><td>逻辑与，两个都为真，结果为真</td></tr><tr><td>OR     ||</td><td>a OR b      a || b</td><td>逻辑或，其中一个为真，结果为真</td></tr><tr><td>NOT   !</td><td>NOT a       ! a</td><td>逻辑非，真变假，假变真</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- &amp;&amp; AND </span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult`<span class="operator">&gt;=</span><span class="number">95</span> <span class="operator">&amp;&amp;</span> `StudentResult`<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult`<span class="operator">&gt;=</span><span class="number">95</span> <span class="keyword">AND</span> `StudentResult`<span class="operator">&lt;=</span><span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 区间</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- != NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentResult` <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="operator">!=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> `StudentNo` <span class="operator">=</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></div></figure><blockquote><p>模糊查询：比较运算符</p></blockquote><div class="table-container"><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a IS NULL</td><td>如果操作符a为NULL，结果为真</td></tr><tr><td>IS NOT NULL</td><td>a IS NOT NULL</td><td>如果操作符a为NOT NULL，结果为真</td></tr><tr><td>BETWEEN</td><td>a BETWEEN b and c</td><td>若a在b和c之间，结果为真</td></tr><tr><td><strong>LIKE</strong></td><td>a   b</td><td>SQL匹配，如果a匹配b，结果为真</td></tr><tr><td><strong>IN</strong></td><td>a IN (a1, a2, a3…)</td><td>假设a在a1，或者a2…其中的某一个值中，则结果为真</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ======================= 模糊查询 =========================</span></span><br><span class="line"><span class="comment">-- 查询姓张的同学</span></span><br><span class="line"><span class="comment">-- LIKE结合 %(代表任意个字符)  _(表示一个字符)</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓张的同学，&#x27;张&#x27;后只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓张的同学，&#x27;张&#x27;后只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;张__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 若想匹配下划线&#x27;_&#x27;，则使用转义&#x27;\_&#x27;的方式才能查询到带有_的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有伟的字的同学 %伟%</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">&#x27;%伟%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======================= IN =========================</span></span><br><span class="line"><span class="comment">-- 查询1000,1001号学员</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (<span class="number">1000</span>, <span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在北京的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `Address` <span class="keyword">IN</span> (<span class="string">&#x27;北京朝阳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======================= NULL/NOT NULL ======================= </span></span><br><span class="line"><span class="comment">-- 查询地址为空的学生，即等于 NULL 或 &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> adress <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学，即不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName` <span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `BornDate` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></div></figure><p>注意：使用<code>LIKE</code>时，若想匹配下划线_，则使用转义的方式。</p>        <h3 id="54-连接查询join"   >          <a href="#54-连接查询join" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#54-连接查询join"></a> 5.4 连接查询（JOIN )</h3>      <ol><li><p>按照年代分类：</p><ul><li>SQL92（旧的语法）</li><li>SQL99（新的语法）</li></ul></li><li><p>按照表的连接方式分类：</p><ul><li>内连接（包括等值连接、非等值连接、自连接）</li><li>外连接（包括左外连接，右外连接）</li><li>全连接</li></ul></li></ol><p>笛卡尔积现象：当两张表进行连接查询时，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。（例如第一张表有7条数据，第二张表有8条数据，则不加条件限制时，查询出56条数据）避免笛卡尔积现象的方法：使用ON关键字加条件进行过滤。<strong>但避免笛卡尔积现象并不会减少记录的匹配次数，数据库在匹配数据时仍然是搜索了56次，但是只滤过剩下了符合条件的数据</strong></p><p>语法：<mark><strong>FROM 要查询的表 INNER/RIGHT/LEFT JOIN 要连接的表 ON 交叉条件</strong></mark></p><p><img src="http://wwxiong.oss-cn-beijing.aliyuncs.com/blog-img/technology/mysql/mysql-sql-joins/02.png" alt="七种SQL Joins 文氏图解" /></p><ul><li><strong>INNER JOIN</strong>：内连接，又叫等值连接，只返回两个表中连接字段相等的行数据</li><li><strong>LEFT JOIN</strong>：左连接，从左表中返回所有值，即使右表中没有匹配（没匹配上的数据显示NULL）</li><li><strong>RIGHT JOIN</strong>：右连接，从右表中返回所有值，即使左表中没有匹配（没匹配上的数据显示NULL）</li></ul><p>数据库在通过JOIN连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户，或与下一层的表进行连接。</p><p>在使用LEFT JOIN 时，ON和WHERE条件的区别如下：</p><ul><li>ON条件是在生成临时表时使用的条件，它不管ON中的条件是否为真，都会返回左边表中的记录。（为真的部分返回数值，为假的部分返回NULL）</li><li>WHERE条件是在临时表生成好后，再对临时表进行过滤的条件。</li></ul><p><strong>ON用于判断哪个字段在两个表中相等，从而连接两个表，WHERE则是在连接后生成的临时表的基础上进行过滤</strong>。</p><p>在使用INNER JOIN 时，ON和WHERE条件产生的效果相同。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- =========================== 连接查询 JOIN ==========================</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">result</span>`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 思路</span></span><br><span class="line"><span class="comment">1. 分析需求，分析查询的表来自哪些表</span></span><br><span class="line"><span class="comment">2. 确定使用哪种连接查询 7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件：student表中的StudenNo = result表中的 StudentNo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INNER JOIN 内连接，取二者共有的行，交集</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN：左连接。以左表为主表，展示左表所有的数据、右表符合ON条件的数据、以及右表不符合条件的数据（这些不符合的数据显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN：右连接，以右表为主表，展示右表所有的数据、左表符合ON条件的数据、以及左表不符合条件的数据（这些不符合的数据显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="comment">-- 增加WHERE，对查询结果进行筛选过滤</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- =========================== 多张表连接查询 ===========================</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息：学号，学生姓名，科目名，分数</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">As</span> r</span><br><span class="line"><span class="keyword">ON</span> r.`StudentNo` <span class="operator">=</span> s.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.SubjectNo <span class="operator">=</span> sub.SubjectName;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式：</span></span><br><span class="line"><span class="comment">-- SELECT 要查询哪些数据 </span></span><br><span class="line"><span class="comment">-- FROM 要查询的表 </span></span><br><span class="line"><span class="comment">-- XXX JOIN 要连接的表 </span></span><br><span class="line"><span class="comment">-- ON 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，先查询两张表，然后再查询另一张表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- FROM a LEFT JOIN b  a为基准</span></span><br><span class="line"><span class="comment">-- FROM a RIGHT JOIN b  b为基准</span></span><br></pre></td></tr></table></div></figure><blockquote><p>自连接</p></blockquote><p><mark><strong>自己的表和自己的表连接，核心：一张表拆为两张一样的表即可</strong></mark></p><p><strong>原表</strong></p><div class="table-container"><table><thead><tr><th>categoryid</th><th>pid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>信息技术</td></tr><tr><td>3</td><td>1</td><td>软件开发</td></tr><tr><td>4</td><td>3</td><td>数据库</td></tr><tr><td>5</td><td>1</td><td>美术设计</td></tr><tr><td>6</td><td>3</td><td>Web开发</td></tr><tr><td>7</td><td>5</td><td>PS技术</td></tr><tr><td>8</td><td>2</td><td>办公信息</td></tr></tbody></table></div><blockquote><p>拆成父类表和子类表</p></blockquote><p><strong>父类</strong></p><div class="table-container"><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr></tbody></table></div><p><strong>子类</strong></p><div class="table-container"><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>Web开发</td></tr><tr><td>5</td><td>7</td><td>PS技术</td></tr></tbody></table></div><p>操作：查询父类对应的子类关系</p><div class="table-container"><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>Web开发</td></tr><tr><td>美术设计</td><td>PS技术</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息： 把一张表选定为两张一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.`categoryName` <span class="keyword">AS</span>  <span class="string">&#x27;父栏目&#x27;</span>, b.`categoryNAME` <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `category` <span class="keyword">AS</span> a, `category` <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid` <span class="operator">=</span> b.`pid`;</span><br></pre></td></tr></table></div></figure>        <h3 id="55-分组和过滤group-by-having"   >          <a href="#55-分组和过滤group-by-having" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#55-分组和过滤group-by-having"></a> 5.5 分组和过滤（GROUP BY  / HAVING）</h3>      <p>语法：<mark><strong>GROUP BY  …   HAVING …</strong></mark></p><ul><li><code>GROUP BY</code>：按照某个字段或者某些字段进行分组，<strong>可以进行多个字段分组</strong></li><li><code>HAVING</code>：必须放在<code>GROUP BY</code>后，对<strong>分组后的结果</strong>进行过滤</li></ul><p><code>GROUP BY</code>语句在<code>WHERE</code>语句之后执行。</p><p><mark><strong>若某个语句中没有显式GROUP BY，则编译时会在最后添加缺省的GROUP BY</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80分</span></span><br><span class="line"><span class="comment">-- 核心：根据不同的课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> ANY_VALUE(subjectName), <span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分, <span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分, <span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectNo` <span class="operator">=</span> sub.`subjectNo`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.SubjectNo <span class="comment">-- 通过什么字段分组</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分 <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出每个部门不同工作岗位的最高薪资</span></span><br><span class="line"><span class="comment">-- 多字段分组</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, job, <span class="built_in">MAX</span>(sal) </span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">deptno, job;  <span class="comment">-- 按照部门和岗位分组，先部门，后岗位，多字段分组</span></span><br></pre></td></tr></table></div></figure><p><strong>当一条SQL语句有GROUP BY时，只允许SELECT查询<mark>参加分组</mark>的字段和<mark>分组函数</mark></strong>。</p><p>注意：<strong>在SELECT中使用到分组函数或使用GROUP BY关键字时，需要使用ANY_VALUE()修饰普通字段，其会选择被分到同一组的数据里第一条数据的指定列值作为返回数据，即只返回一个值</strong>。</p><p><strong>因为分组函数或使用GROUP BY关键字在使用时会从多条匹配到的数据中取出某一个作为返回结果（例如MAX()，只取了最大的数据），此时，没有被分组函数修饰的字段将匹配到多条数据，因此必须从中选出某一条作为返回结果，ANY_VALUE()即从中返回了第一条数据</strong>。</p><p>为提高效率，可先使用WHERE进行筛选，再在其基础上使用GROUP BY分组。若先GROUP BY，再HAVING，则效率低于前者。如果能在GROUP BY前使用WHERE过滤，则最好先使用WHERE。</p>        <h3 id="56-排序order-by"   >          <a href="#56-排序order-by" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#56-排序order-by"></a> 5.6 排序（ORDER BY ）</h3>      <p>语法：<mark><strong>ORDER BY 字段名 DESC/ASC</strong></mark></p><ul><li>升序ASC</li><li>降序DESC</li></ul><p>注意：当指定多个字段进行排序时，越靠前的字段越起主导地位，后面的字段只会在前面的字段排序相等的情况下才会启用。例如<code>ORDER BY XXX DESC, YYY ASC</code>，先按照XXX进行降序排列，再在其基础上，对XXX相等的数据进行升序排列。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ======================== 分页LIMIT 排序ORDER BY =========================</span></span><br><span class="line"><span class="comment">-- 排序：升序ASC，降序DESC</span></span><br><span class="line"><span class="comment">-- ORDER BY 通过哪个字段排序，怎么拍</span></span><br><span class="line"><span class="comment">-- 查询的结果根据成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="57-分页limit"   >          <a href="#57-分页limit" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#57-分页limit"></a> 5.7 分页（LIMIT）</h3>      <p>语法：<mark><strong>LIMIT 查询起始值，pagesize</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分页：缓解数据库压力，给人更好的体验</span></span><br><span class="line"><span class="comment">-- 网页应用：当前，总的页数，页面大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0, 5   1~5       </span></span><br><span class="line"><span class="comment">-- LIMIT 6, 5   6~10     </span></span><br><span class="line"><span class="comment">-- 第一页 LIMIT 0, 5</span></span><br><span class="line"><span class="comment">-- 第二页 LIMIT 5, 5</span></span><br><span class="line"><span class="comment">-- 第三页 LIMIT 10, 5</span></span><br><span class="line"><span class="comment">-- 第N页 LIMIT  (N-1)* pageSize, pageSize</span></span><br><span class="line"><span class="comment">-- [PageSize: 页面大小, (N-1)*PageSize：起始值, N: 当前页]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.`StudentNo`, `StudentName`, `SubjectName`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`StudentNo` <span class="operator">=</span> r.`StudentNo`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></div></figure>        <h3 id="58-子查询"   >          <a href="#58-子查询" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#58-子查询"></a> 5.8 子查询</h3>      <p>目标：WHERE（不使用固定值，而使用计算出来的值）</p><p>本质：<mark><strong>在WHERE语句中嵌套一个子查询语句</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据库结构-1的所有考试结果（学号，科目编号，成绩），降序排列</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, r.`SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` <span class="keyword">AS</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  `StudentResult` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询（由里及外）</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, r.`SubjectNo`, `StudentResult`</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">WHERE</span> `SubjectNo` <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `SubjectNo` </span><br><span class="line"><span class="keyword">FROM</span> `subject` </span><br><span class="line"><span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `StudentResult` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库结构-1的学生的学号</span></span><br><span class="line"><span class="keyword">SELECT</span> `SubjectNo` <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName`</span><br><span class="line"><span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `StudentName`</span><br><span class="line"><span class="keyword">FROM</span> `student` </span><br><span class="line"><span class="keyword">WHERE</span> `StudentNo` <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo` </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>`</span><br><span class="line"><span class="keyword">WHERE</span> `StudentResult` <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line">);</span><br></pre></td></tr></table></div></figure>        <h3 id="59-合并查询结果union"   >          <a href="#59-合并查询结果union" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#59-合并查询结果union"></a> 5.9 合并查询结果（UNION）</h3>      <p>语法：<mark><strong>SELECT XXXXX  UNION SELECT XXXXX</strong></mark></p><p>作用：用于将两个SELECT语句查询到的结果合并成一张表（行数据拼接起来），可以把两个<strong>不相干的表</strong>中的数据拼接起来显示（例如要查询的结果来自于多张表，并且这些表之间没有直接的连接关系）。</p><p>要求：</p><ul><li>前后两个查询结果的列数必须一致</li><li>多条查询语句的查询的每一列的类型和顺序最好一致</li><li><code>UNION</code>关键字默认去重，如果使用<code>UNION ALL</code>可以包含重复项</li></ul>        <h2 id="6-mysql函数"   >          <a href="#6-mysql函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-mysql函数"></a> 6. MySQL函数</h2>              <h3 id="61-普通函数"   >          <a href="#61-普通函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#61-普通函数"></a> 6.1 普通函数</h3>      <figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数学运算 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>);       <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>);  <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);    <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND();        <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">-2</span>);      <span class="comment">-- 判断一个数的符号 0返回0，负数返回-1，整数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- +号运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">90</span>;         <span class="comment">-- 两个操作数都为数值型，则做加法运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;123&#x27;</span> <span class="operator">+</span> <span class="number">90</span>；      <span class="comment">-- 其中一方为字符型，试图将字符型数值转换为数值型，</span></span><br><span class="line">                         <span class="comment">-- 如果转换成功，则继续做加法，如果转换失败，则将字符型数值转换成0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="operator">+</span> <span class="number">10</span>;        <span class="comment">-- 只要其中一方为NULL，则结果为NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;helloworld&#x27;</span>);          <span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27; World&#x27;</span>);          <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;He&#x27;</span>);  <span class="comment">-- 从某个位置开始替换某个字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;HELLOWORLD&#x27;</span>);                <span class="comment">-- 变小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;helloworld&#x27;</span>);                <span class="comment">-- 变大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;h&#x27;</span>);          <span class="comment">-- 返回第一次出现的字符串的位置，找不到返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>);   <span class="comment">-- 替换</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">4</span>, <span class="number">6</span>);        <span class="comment">-- 返回指定的子字符串（源字符串，截取的位置，截取的长度）从第4个字符开始取，取6个字符长度</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;hello world&#x27;</span>);             <span class="comment">-- 反转</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;   HELLO   &#x27;</span>);                <span class="comment">-- 将字符串前后的空格去掉</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaHELLOaaa&#x27;</span>);       <span class="comment">-- 将字符串前后的指定字符&#x27;a&#x27;去掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(studentName, <span class="string">&#x27;周&#x27;</span>, <span class="string">&#x27;邹&#x27;</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;周%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数（记住）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();  <span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();       <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();           <span class="comment">-- 获取当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();     <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();       <span class="comment">-- 本地时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 空处理函数，将xxx为NULL的值设置为0</span></span><br><span class="line">IFNULL(xxx, <span class="number">0</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="62-分组函数"   >          <a href="#62-分组函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#62-分组函数"></a> 6.2 分组函数</h3>      <p>分组函数都是对<strong>某一组</strong>数据进行操作的。 其也被称为聚合函数、多行处理函数：输入多行，最终输出一行结果。</p><ul><li><strong>分组函数自动忽略NULL，无需添加WHERE条件语句判断数据是否为NULL</strong></li><li><strong>分组函数不能直接使用在WHERE子句当中，因为WHERE语句在GROUP BY语句之前执行，而分组函数必须在分完组才能执行（即必须在GROUP BY语句之后执行）</strong></li><li><strong>分组函数一般都会和GROUP BY联合使用，其在GROUP BY语句执行后才执行</strong></li></ul><p>例如：<code>SELECT ename, sal FROM emp WHERE sal &gt; AVG(sal);</code>有语法错误，因为分组函数不能在WHERE子句中使用。修改办法：使用子查询语句<code>SELECT ename, sal FROM emp WHERE sal &gt; (SELECT AVG(sal) FROM emp);</code></p><div class="table-container"><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>计数</td></tr><tr><td>SUM()</td><td>求和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr></tbody></table></div><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`StudentName`) <span class="keyword">FROM</span> student;  <span class="comment">-- COUNT(字段)，指定查询某列，会忽略所有的NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;  <span class="comment">-- COUNT(*)，不会忽略NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="keyword">result</span>;   <span class="comment">-- COUNT(1)，不会忽略NULL值，效果同COUNT(*)，本质是在表中加了一列全是1的数据，然后统计1的个数，本质还是COUNT(*)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`studentResult`) <span class="keyword">AS</span> 总分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`studentResult`) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`studentResult`) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`studentResult`) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></div></figure><p>注意：<mark><strong>count(*)和count(某字段)的区别：</strong></mark></p><ul><li><code>count(*)</code>：和字段内容没关系，会查询所有包含NULL在内的行数（统计总记录条数）</li><li><code>count(某字段)</code>：和字段内容有关系，会查询除了NULL值以外的行数（忽略NULL值）</li></ul><p>分组函数在<code>GROUP BY</code><strong>之后</strong>使用，用于统计分组后同一组内数据的最大/小值、平均值和总数。</p>        <h3 id="63-数据库级别的md5加密扩展"   >          <a href="#63-数据库级别的md5加密扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#63-数据库级别的md5加密扩展"></a> 6.3 数据库级别的MD5加密（扩展）</h3>      <p>MD5：Message-Digest Algorithm，信息摘要算法。</p><p>MD5主要增强算法复杂度和不可逆性。MD5破解网站的原理：背后有一个字典，一一查询匹配MD5加密后的值与加密前的值，看能否找到匹配。</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ====================== 测试MD5 加密 ======================</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line">UPDATE `testmd5` <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd) <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">UPDATE `testmd5` <span class="keyword">SET</span> pwd<span class="operator">=</span>MD5(pwd);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据时加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `testmd5` <span class="keyword">VALUES</span>(<span class="number">4</span>, <span class="string">&#x27;zhaoliu&#x27;</span>, MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验：将用户传递进来的密码进行md5加密，然后对比加密后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> testmd5 <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;zhaoliu&#x27;</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>(MD5(<span class="string">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></div></figure>        <h2 id="7-事务"   >          <a href="#7-事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-事务"></a> 7. 事务</h2>              <h3 id="71-什么是事务"   >          <a href="#71-什么是事务" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#71-什么是事务"></a> 7.1 什么是事务</h3>      <p>TCL: Transaction Control Language 事务控制语言。</p><p>事务（Transaction）：事务由单独单元的一个或一组sql语句组成，在这个单元中，每个MySQL语句是相互依赖的，这个执行单元 <mark><strong>要么全部执行，要么全部不执行</strong></mark></p><ul><li>SQL语句1正在执行：A给B转账200     A：1000  ——&gt; 200   B：200</li><li>SQL语句2正在执行：B收到A的钱        B：800    ——&gt;            B：400</li></ul><p>将一组SQL放在一个批次中去执行。上述两条语句组成一组来执行，要么都成功，要么都失败，否则钱会凭空消失。</p>        <h3 id="72-事务原则"   >          <a href="#72-事务原则" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#72-事务原则"></a> 7.2 事务原则</h3>      <blockquote><p>事务原则：ACID原则——原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)；脏读，幻读，不可重复读</p></blockquote><p><strong>1. 原子性(Atomicity)</strong></p><p>原子性是指<strong>事务是一个不可分割的工作单位</strong>，事务中的操作<strong>要么都执行，要么都不执行</strong>。</p><p><strong>2. 一致性(Consistency)</strong></p><p>事务必须使数据库从一个一致性状态变换到另一个一致性状态。（例如A给B转账前后，数据库中二者余额之和相等，转账前为一个一致性状态，转账后也为一个一致性状态）。</p><p><strong>3. 隔离性(Isolation)</strong></p><p>隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他数据是隔离的，并发执行的各个事务之间不能互相干扰。</p><p><strong>4. 持久性(Durability)</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p>        <h3 id="73-事务隔离级别"   >          <a href="#73-事务隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#73-事务隔离级别"></a> 7.3 事务隔离级别</h3>      <blockquote><p>参考链接：<span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1450773" >https://cloud.tencent.com/developer/article/1450773</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题：</p><p><strong>1. 脏读（读取未提交数据）：</strong></p><p>指一个事务读取了另一个事务未提交的数据。例如，两个事务T1和T2，T1读取了已经被T2更新但是<strong>还没有被提交</strong>的字段，之后，若T2回滚，T1读取到的内容就是临时且无效的。</p><p><strong>2. 不可重复读（前后多次读取，数据内容不一致）：</strong></p><p>指在一个事务内读取表中的某一行数据，过段时间，该字段数据被另一事务修改，此时第一个事务<strong>再读时读取结果不同</strong>。例如，两个事务T1和T2，T1读取了一个字段，然后T2<strong>更新</strong>了该字段，之后，T1再此读取同一字段时，值就不同了。</p><p><strong>3. 幻读（前后多次读取，数据总量不一致）：</strong></p><p>事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，这个时候事务A读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据。</p><p><strong>不可重复读和幻读的区别:</strong></p><p>(1) 不可重复读是读取了其他事务更改的数据，<strong>针对UPDATE操作</strong></p><p>解决：使用行级锁，锁定该行，事务A多次读取操作完成后才释放该锁，这个时候才允许其他事务更改刚才的数据。</p><p>(2) 幻读是读取了其他事务新增的数据，<strong>针对INSERT和DELETE操作</strong></p><p>解决：使用表级锁，锁定整张表，事务A多次读取数据总量之后才释放该锁，这个时候才允许其他事务新增数据。</p><p>MySQL支持4种事务隔离级别，默认级别为 <mark><strong>REPEATABLE READ</strong></mark></p><ul><li><strong>READ UNCOMMITTED（读未提交数据）</strong>：允许事务读取未被其他事务提交的变更。脏读、不可重复读和幻读都可能出现</li><li><strong>READ COMMITTED（读已提交数据）</strong>：只允许事务读取已经被其他事务提交的变更。可以避免脏读，但不可重复读和幻读仍然可能出现</li><li><strong>REPEATABLE READ（可重复读）</strong>：确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新。<strong>此时即使其他事务修改某字段并COMMIT，本事务查询时仍是原先值</strong>。可以避免脏读和不可重复读，但幻读仍然可能出现，<strong>即其他事务若插入了新的行，本事务查询时也会多出这些行，导致看起来像幻觉一样，每次读取的数据总量不同</strong></li><li><strong>SERIALIZABLE（串行化）</strong>：确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作。所有并发问题都可以避免，但性能十分低下。在某个事务读取时，其他事务阻塞，无法对该表进行操作</li></ul><p>查看隔离级别：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION           <span class="comment">--（8.0以前） </span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANSACTION</span>_ISOLATION  <span class="comment">--（8.0以后）</span></span><br></pre></td></tr></table></div></figure><p>设置<strong>当前</strong>MySQL连接的隔离级别：</p><p><strong>SET <mark>SESSION</mark> TRANSACTION ISOLATION LEVEL <mark>READ COMMITTED</mark></strong></p><p>设置<strong>全局</strong>MySQL连接的隔离级别：</p><p><strong>SET <mark>GLOBAL</mark> TRANSACTION ISOLATION LEVEL <mark>READ COMMITTED</mark></strong></p>        <h3 id="74-悲观锁和乐观锁"   >          <a href="#74-悲观锁和乐观锁" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#74-悲观锁和乐观锁"></a> 7.4 悲观锁和乐观锁</h3>      <p>参考链接：<span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1450773" >https://cloud.tencent.com/developer/article/1450773</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><blockquote><p>悲观锁</p></blockquote><p>正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处 于锁定状态。</p><p>悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机 制，也无法保证外部系统不会修改数据）。</p><p>在悲观锁的情况下，为了保证事务的隔离性，就需要一致性锁定读。读取数据时给加锁，其它事务无法修改这些数据。修改删除数据时也要加锁，其它事务无法读取这些数据。</p><blockquote><p>乐观锁</p></blockquote><p>相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。</p><p>而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。</p><p>何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。</p><p>此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如 果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p>        <h3 id="75-执行事务顺序"   >          <a href="#75-执行事务顺序" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#75-执行事务顺序"></a> 7.5 执行事务顺序</h3>      <ol><li>关闭自动提交：<code>SET autocommit = 0</code></li><li>开启一个事务：<code>START TRANSACTION</code><ul><li>提交（执行成功）：<code>COMMIT</code> ，获得新的数据库</li><li>回滚（执行失败）：<code>ROLLBACK</code>，返回原先数据库</li></ul></li><li>开启自动提交：<code>SET autocommit = 1</code></li></ol><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL是默认开启事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 开启（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;   <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;    <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> xx;</span><br><span class="line"><span class="keyword">INSERT</span> xx;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化（成功）</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名称a;              <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> 保存点名称a;            <span class="comment">-- 回滚到保存点 </span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称;       <span class="comment">-- 撤销保存点 </span></span><br></pre></td></tr></table></div></figure><p>测试案例：</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 模拟转账</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;    <span class="comment">-- 开启一个事务</span></span><br><span class="line"></span><br><span class="line">UPDATE `account` <span class="keyword">SET</span> `money`<span class="operator">=</span>`money` <span class="operator">-</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">UPDATE `account` <span class="keyword">SET</span> `money`<span class="operator">=</span>`money` <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;    <span class="comment">-- 提交事务，执行后数据库内容才会修改</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- 回滚，数据库内容不会修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></div></figure>        <h3 id="76-delete和truncate在事务中的区别"   >          <a href="#76-delete和truncate在事务中的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#76-delete和truncate在事务中的区别"></a> 7.6 DELETE和TRUNCATE在事务中的区别</h3>      <ul><li><code>DELETE</code>在事务提交前使用，若回滚，则数据会恢复</li><li><code>TRUNCATE</code>事务提交前使用，若回滚，则数据依旧不会恢复</li></ul>        <h2 id="8-视图"   >          <a href="#8-视图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#8-视图"></a> 8. 视图</h2>      <blockquote><p>视图（VIEW）：一种虚拟存在的表。站在不同的角度去看待同一份数据</p></blockquote><p>视图是一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时<strong>动态生成的</strong>，<strong>只保存了SQL逻辑，不保存查询结果</strong>。视图使用时可以像操纵表一样操纵表中的数据。</p>        <h3 id="81-操作视图"   >          <a href="#81-操作视图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#81-操作视图"></a> 8.1 操作视图</h3>      <blockquote><p>创建视图</p></blockquote><p>语法：<mark><strong>CREATE VIEW 视图名 AS DQL语句（SELECT … FROM …)</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- CREATE后只能是DQL语句</span></span><br></pre></td></tr></table></div></figure><blockquote><p>删除视图</p></blockquote><p>语法：<mark><strong>DROP VIEW 视图名</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_view;</span><br></pre></td></tr></table></div></figure><blockquote><p>修改视图</p></blockquote><p>语法：<mark><strong>ALTER  VIEW  视图名</strong></mark></p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> emp_view  <span class="comment">-- 如果存在则替换</span></span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> emp_view</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></div></figure><blockquote><p>更新视图</p></blockquote><p>语法同操作表时一模一样</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE emp_view <span class="keyword">SET</span> sal <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> dname <span class="operator">=</span> <span class="string">&#x27;ACCOUNTING&#x27;</span>;</span><br></pre></td></tr></table></div></figure><p><strong>视图的更新性和视图中查询的定义有关系，以下类型的视图时不能更新的：</strong></p><ul><li>包含以下关键字的SQL语句：分组函数、<code>DISTINCT</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>或<code>UNION ALL</code></li><li>常量视图</li><li><code>SELECT</code>中包含子查询</li><li><code>JOIN</code></li><li><code>FROM</code>一个不能更新的视图</li><li><code>WHERE</code>子句的子查询引用了<code>FROM</code>子句中的表</li></ul>        <h3 id="82-视图的作用"   >          <a href="#82-视图的作用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#82-视图的作用"></a> 8.2 视图的作用</h3>      <p>视图的特点：通过对视图的操作会影响到原表数据。可以<strong>面向视图对象</strong>进行增删改查，<strong>对视图对象的增删改查将会导致原表被操作</strong>。</p><p>视图的作用：假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。每次使用这条SQL语句的时候都需要重新编写（很麻烦），这时可以把这条复杂的SQL语句以视图对象的形式新建。在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发，并且有利于后期的维护，因为修改时只需要修改一个视图对象所映射的SQL语句。</p>        <h3 id="83-视图和表的区别"   >          <a href="#83-视图和表的区别" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#83-视图和表的区别"></a> 8.3 视图和表的区别</h3>      <div class="table-container"><table><thead><tr><th></th><th>创建语法</th><th>是否占用实际物理空间</th><th>使用</th></tr></thead><tbody><tr><td><strong>视图</strong></td><td><code>CREATE VIEW</code></td><td>只是保存了SQL逻辑</td><td>主要用来查询</td></tr><tr><td><strong>表</strong></td><td><code>CREATE TABLE</code></td><td>保存了实际数据</td><td>增删改查</td></tr></tbody></table></div>        <h2 id="9-变量"   >          <a href="#9-变量" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#9-变量"></a> 9. 变量</h2>      <p>MySQL中变量类型：</p><ul><li><strong>系统变量</strong>：<ul><li><strong>全局变量</strong>：针对数据库全局有效。服务器每次启动将为所有的全局变量赋初值，针对所有的会话（连接）有效，但是不能跨重启（数据库重启后之前设置的值会恢复）</li><li><strong>会话变量</strong>：仅针对某次会话（连接）有效</li></ul></li><li>自定义变量：<ul><li><strong>用户变量</strong>：在当前会话中有效，同与会话变量的作用域</li><li><strong>局部变量</strong>：仅仅在定义它的<code>BEGIN END</code>中有效</li></ul></li></ul><div class="table-container"><table><thead><tr><th></th><th>作用域</th><th>定义和使用的地方</th><th>语法</th></tr></thead><tbody><tr><td><strong>用户变量</strong></td><td>当前会话</td><td>会话中的任何地方</td><td><code>SET @a = 0;</code>必须加@符号，不用限定类型</td></tr><tr><td><strong>局部变量</strong></td><td><code>BEGIN END</code>中</td><td><code>BEGIN END</code>中，且为第一句话</td><td><code>DECLARE a INT DEFAULT 0;</code>一般不用加@符号，需要限定类型</td></tr></tbody></table></div>        <h2 id="10-存储过程和函数"   >          <a href="#10-存储过程和函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#10-存储过程和函数"></a> 10. 存储过程和函数</h2>      <p>存储过程：一组预编译好的SQL语句的集合，可以理解成批处理语句（类似于Java中的函数）。</p><ul><li>提高代码的重用性</li><li>简化操作</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</li></ul>        <h3 id="101-存储过程的语法"   >          <a href="#101-存储过程的语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#101-存储过程的语法"></a> 10.1 存储过程的语法</h3>      <blockquote><p>创建存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名（参数列表）</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体（一组合法的<span class="keyword">SQL</span>语句）</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></div></figure><p>参数列表包含三部分：参数模式、参数名和参数类型。其中参数模式包含：</p><ul><li><code>IN</code>：该参数可以作为输入，也就是该参数需要调用方传入值</li><li><code>OUT</code> ：该参数可以作为输出，也就是该参数可以作为返回值</li><li><code>INOUT</code>：该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</li></ul><p>如果存储过程体仅仅只有一句话，则<code>BEGIN END</code>可以省略。存储过程体中的每句SQL语句的结尾要求必须加分号。存储过程的结尾可以使用<code>DELIMITER</code>重新设置。</p><blockquote><p>调用存储方法</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名（实参列表）；</span><br></pre></td></tr></table></div></figure><blockquote><p>删除存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> 存储过程名;</span><br></pre></td></tr></table></div></figure><blockquote><p>查看存储过程的信息</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名;</span><br></pre></td></tr></table></div></figure>        <h3 id="102-创建和调用存储过程"   >          <a href="#102-创建和调用存储过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#102-创建和调用存储过程"></a> 10.2 创建和调用存储过程</h3>      <blockquote><p>空参列表</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `admin`;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admin`(`username`, `password`) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp1() $</span><br></pre></td></tr></table></div></figure><blockquote><p>带IN模式参数的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp2(<span class="keyword">IN</span> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> `userid`</span><br><span class="line"><span class="keyword">FROM</span> `student`</span><br><span class="line"><span class="keyword">WHERE</span> `username` <span class="operator">=</span> `name`;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp2(<span class="string">&#x27;zhangsan&#x27;</span>)$</span><br></pre></td></tr></table></div></figure><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp3(<span class="keyword">IN</span> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">IN</span> `password` <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> `<span class="keyword">result</span>` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; <span class="comment">-- 声明局部变量并初始化</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span>     <span class="comment">-- 将查询结果赋值给变量</span></span><br><span class="line"><span class="keyword">FROM</span> `admin`</span><br><span class="line"><span class="keyword">WHERE</span> `admin`.`username` <span class="operator">=</span> `name`</span><br><span class="line"><span class="keyword">AND</span> `admin`.`password` <span class="operator">=</span> `password`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> IF(`<span class="keyword">result</span>` <span class="operator">&gt;</span> <span class="number">0</span>, <span class="string">&#x27;成功&#x27;</span>, <span class="string">&#x27;失败&#x27;</span>)  <span class="comment">-- 变量使用</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp3(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)$</span><br></pre></td></tr></table></div></figure><blockquote><p>带OUT模式的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp4(<span class="keyword">IN</span> beautyName <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.boyName <span class="keyword">INTO</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b </span><br><span class="line"><span class="keyword">ON</span> bo.id <span class="operator">=</span> b.boyfriend_id</span><br><span class="line"><span class="keyword">WHERE</span> b.name <span class="operator">=</span> beautyName;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户变量并调用存储过程</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@bName</span> $</span><br><span class="line"><span class="keyword">CALL</span> myp5(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="variable">@bName</span>)$</span><br></pre></td></tr></table></div></figure><blockquote><p>带INOUT模式的存储过程</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp5(<span class="keyword">INOUT</span> a <span class="type">INT</span>, <span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> b <span class="operator">=</span> b <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span> <span class="operator">=</span> <span class="number">10</span>$</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span> <span class="operator">=</span> <span class="number">20</span>$</span><br><span class="line"><span class="keyword">CALL</span> myp5(<span class="variable">@m</span>, <span class="variable">@n</span>)$</span><br></pre></td></tr></table></div></figure>        <h3 id="103-函数的语法"   >          <a href="#103-函数的语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#103-函数的语法"></a> 10.3 函数的语法</h3>      <p>存储过程和函数的区别：</p><ul><li>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入、批量更新</li><li>函数：有且只有一个返回，适合做处理数据后返回一个结果</li></ul><blockquote><p>创建函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数列表) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></div></figure><ul><li>参数列表包含：参数名、参数类型。</li><li>函数体：肯定会有<code>RETURN</code>语句。如果<code>RETURN</code>语句没有放在函数体的最后也不会报错，但不建议</li><li>当函数体中只有一句话，可以省略<code>BEGIN END</code></li><li>使用<code>DELIMITER</code>语句设置结束标记</li></ul><blockquote><p>调用函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(列表参数)</span><br></pre></td></tr></table></div></figure><blockquote><p>查看函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf1;</span><br></pre></td></tr></table></div></figure><blockquote><p>删除函数</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> myf1;</span><br></pre></td></tr></table></div></figure>        <h3 id="104-创建和调用函数"   >          <a href="#104-创建和调用函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#104-创建和调用函数"></a> 10.4 创建和调用函数</h3>      <blockquote><p>无参数，有返回</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf1() <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;  <span class="comment">-- 定义局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> c    <span class="comment">-- 给c赋值</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> c;                 <span class="comment">-- 返回值</span></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myf1()$</span><br></pre></td></tr></table></div></figure><blockquote><p>有参数，有返回</p></blockquote><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> myf2(empName <span class="type">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sal</span> <span class="operator">=</span> <span class="number">0</span>;             <span class="comment">-- 定义用户变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> <span class="variable">@sal</span>   <span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> <span class="variable">@sal</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myf2(<span class="string">&#x27;king&#x27;</span>) $</span><br></pre></td></tr></table></div></figure>        <h2 id="11-权限管理和备份"   >          <a href="#11-权限管理和备份" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#11-权限管理和备份"></a> 11. 权限管理和备份</h2>              <h3 id="111-权限管理"   >          <a href="#111-权限管理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#111-权限管理"></a> 11.1 权限管理</h3>      <blockquote><p>SQL命令</p></blockquote><p>用户表：mysql.user（存储用户信息）</p><p>本质：修改权限，添加用户等操作本质上是对这张表进行增删改查</p><figure class="highlight sql"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户： CREATE USER 用户名 IDENTIFIED BY &#x27;密码&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zhangsan IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改指定用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> zhangsan <span class="operator">=</span> PASSWORD(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名： RENAME USER 原名 TO 新名</span></span><br><span class="line">RENAME <span class="keyword">USER</span> zhangsan <span class="keyword">TO</span> zhangsanfeng;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权： ALL PRIVILEGES 全部权限 TO 库.表</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权，其他都权限都有</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> zhangsan;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> zhangsan <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> root<span class="variable">@localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限： REVOKE 哪些权限 ON 在哪个库 FROM 给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> zhangsan;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> zhangsan;</span><br></pre></td></tr></table></div></figure>        <h3 id="112-mysql备份"   >          <a href="#112-mysql备份" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#112-mysql备份"></a> 11.2 MySQL备份</h3>      <p>为什么要备份：</p><ul><li>保证重要的数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份的方式：</p><ul><li>直接拷贝物理文件，data目录</li><li>在Navicat工具中手动导出</li><li>使用命令行：mysqldump</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =================================  导出 ===============================</span></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 schoool student &gt; D:/student.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 schoool &gt; D:/school.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================  导入 ===============================</span></span><br><span class="line"><span class="comment"># 在登入的情况下，切换到指定数据库</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">mysql&gt; USE school;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> D:/student.sql <span class="comment"># 或 source D:/school.sql</span></span><br></pre></td></tr></table></div></figure>        <h2 id="12-数据库设计的三大范式"   >          <a href="#12-数据库设计的三大范式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#12-数据库设计的三大范式"></a> 12. 数据库设计的三大范式</h2>              <h3 id="121-为什么需要设计"   >          <a href="#121-为什么需要设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#121-为什么需要设计"></a> 12.1 为什么需要设计</h3>      <p>当数据库交复杂时，就需要设计</p><p><strong>糟糕的数据库设计：</strong></p><ul><li>数据冗余，浪费空间</li><li>数据库插入和删除都会麻烦/异常（屏蔽使用物理外键）</li><li>程序的性能差</li></ul><p><strong>良好的数据库设计：</strong></p><ul><li>节省内存空间</li><li>保证数据库的完整性</li><li>方便开发系统</li></ul><p><strong>软件开发中，关于数据库的设计：</strong></p><ul><li>分析需求，分析业务和需要处理的数据库需求</li><li>概要设计：设计关系图 E-R图</li></ul><p><strong>设计数据库的步骤：（个人博客）</strong></p><ul><li>收集信息，分析需求<ul><li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li><li>分类表（文章分类，谁创建的）</li><li>文章表（文章的信息）</li><li>评论表（评论的信息）</li><li>友链表（友链信息）</li><li>自定义表（系统信息，某个关键的字，或者一些主字段） 表中两列：key  | value</li></ul></li><li>标识实体（把需求落地到每个字段）</li><li>标识实体之间的关系<ul><li>写博客：user --&gt; blog</li><li>创建分类：user --&gt; category</li><li>关注：user --&gt; user</li><li>友链：links</li><li>评论：user --&gt; user --&gt; blog</li></ul></li></ul>        <h3 id="122-三大范式"   >          <a href="#122-三大范式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#122-三大范式"></a> 12.2 三大范式</h3>      <blockquote><p>三大范式：设计表的依据，按照这个三范式设计的表不会出现数据冗余 <span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1fx411X7BD?p=74" >https://www.bilibili.com/video/BV1fx411X7BD?p=74</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p><strong>1. 第一范式（1NF）：原子性</strong></p><p>任何一张表都应该有<strong>主键</strong>，并且每一个字段<strong>原子性不可再分</strong>，即每一列的信息不可再分</p><p><strong>2. 第二范式（2NF）：不可部分依赖</strong></p><p>前提：必须满足第一范式。所有非主键字段<strong>完全依赖</strong>主键，不能产生<strong>部分依赖</strong>。即每一列都只和主键相关，而不能只与主键的一部分相关（主要针对<strong>联合主键</strong>而言），例如，某表中有联合主键，某些非主键字段只依赖联合主键中的其中一个，不依赖于另一个，就产生了冗余</p><p><strong>多对多，三张表，关系表两个外键。<strong>若遇到不符合第二范式的表时，将一张</strong>多对多</strong>关系的表拆成<strong>三张表</strong>：</p><ul><li>两个表分别存储独立的信息，每个表有一个主键</li><li>一张关系表，关系表里有两个外键，分别引用两个独立表</li></ul><p><strong>3. 第三范式（3NF）：不可传递依赖</strong></p><p>前提：必须满足第一范式和第二范式。所有非主键字段<strong>直接依赖</strong>主键，不能产生<strong>传递依赖</strong>。</p><p><strong>一对多，两张表，多的表加外键。<strong>若遇到不符合第二范式的表时，将一张</strong>一对多</strong>关系的表拆成<strong>两张表</strong>：</p><ul><li>一张内容少的表，存储会产生传递依赖的信息</li><li>另一张内容多的表加外键，引用第一张表</li></ul><p><strong>规范性和性能的问题：在实际的开发中，以满足客户的需求位置，有时候会拿冗余换执行速度</strong></p><ul><li>考虑商业化的需求和目标，数据库的性能更加重要</li><li>在规范性能问题的时候，需要适当考虑一下规范性</li><li>故意给某些表增加一些冗余的字段（从多表查询边单表查询）</li><li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】稀疏矩阵</title>
      <link href="2021/03/27/%E3%80%90Java%E3%80%91%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>2021/03/27/%E3%80%90Java%E3%80%91%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparesArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个二维数组 11*11  0：没有旗子， 1：黑棋， 2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的矩阵&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为稀疏数组</span></span><br><span class="line">        <span class="comment">// 1. 获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效值个数：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二维数组，将非零值放入稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span> + array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span> + array2[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ===============================================================</span></span><br><span class="line">        <span class="comment">// 稀疏数组还原</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 给其中元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++)&#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Stream API</title>
      <link href="2021/03/26/%E3%80%90Java%E3%80%91Stream-API/"/>
      <url>2021/03/26/%E3%80%90Java%E3%80%91Stream-API/</url>
      
        <content type="html"><![CDATA[        <h2 id="stream-api"   >          <a href="#stream-api" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream-api"></a> Stream API</h2>      <p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API。 Stream API ( <code>java.util.stream</code>) 把真正的<strong>函数式编程风格</strong>引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>Stream 是 Java8 中处理<strong>集合</strong>的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的<strong>查找</strong>、<strong>过滤</strong>和<strong>映射数据</strong>等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。 也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 “集合讲的是数据，Stream讲的是计算！” 注意：</p><ul><li>Stream 自己<strong>不会存储元素</strong>。</li><li>Stream <strong>不会改变源对象</strong>。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是<strong>延迟执行</strong>的。这意味着他们会等到需要结果的时候才执行。</li></ul>        <h3 id="为什么要是用stream-api"   >          <a href="#为什么要是用stream-api" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#为什么要是用stream-api"></a> 为什么要是用Stream API</h3>      <p>实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis 等，而这些 NoSQL 的数据就需要 Java 层面去处理。</p><p>Stream 和 Collection 集合的区别：Collection 是一种<strong>静态的内存数据结构</strong>，而 Stream 是有关<strong>计算</strong>的。前者是主要<strong>面向内存</strong>，存储在内存中， 后者主要是<strong>面向 CPU</strong>，通过 CPU 实现计算。</p>        <h3 id="stream的使用流程"   >          <a href="#stream的使用流程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream的使用流程"></a> Stream的使用流程</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626155810489.png" alt="image-20210626155810489" /></p><p>使用流程的注意点：</p><ul><li>一个中间操作链，对数据源的数据进行处理</li><li>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</li></ul>        <h3 id="创建stream的方式"   >          <a href="#创建stream的方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建stream的方式"></a> 创建Stream的方式</h3>              <h4 id="方式一通过集合"   >          <a href="#方式一通过集合" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一通过集合"></a> 方式一：通过集合</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160117139.png" alt="image-20210626160117139" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式二通过数组"   >          <a href="#方式二通过数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二通过数组"></a> 方式二：通过数组</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160210175.png" alt="image-20210626160210175" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式三通过stream的of"   >          <a href="#方式三通过stream的of" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三通过stream的of"></a> 方式三：通过Stream的of()</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160255007.png" alt="image-20210626160255007" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="方式四创建无限流"   >          <a href="#方式四创建无限流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式四创建无限流"></a> 方式四：创建无限流</h4>      <p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160338594.png" alt="image-20210626160338594" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>总结四种方式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; parallelStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span></span><br><span class="line">    IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    Employee e2 = <span class="keyword">new</span> Employee(<span class="number">1002</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式三：通过Stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Stream方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stream中间操作"   >          <a href="#stream中间操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream中间操作"></a> Stream中间操作</h3>      <p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160546946.png" alt="image-20210626160546946" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160550965.png" alt="image-20210626160550965" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160554806.png" alt="image-20210626160554806" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployees();</span><br><span class="line">        <span class="comment">// filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class="line">        stream.filter(e -&gt; e.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class="line">        list.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//映射</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);</span><br><span class="line">        namesStream.filter(name -&gt; name.length() &gt; <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//练习2：</span></span><br><span class="line">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);</span><br><span class="line">        streamStream.forEach(s -&gt;&#123;</span><br><span class="line">            s.forEach(System.out::println);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">        Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">        characterStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">fromStringToStream</span><span class="params">(String str)</span></span>&#123;<span class="comment">//aa</span></span><br><span class="line">        ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character c : str.toCharArray())&#123;</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="number">4</span>);</span><br><span class="line">        list2.add(<span class="number">5</span>);</span><br><span class="line">        list2.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list1.add(list2);</span></span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//sorted()——自然排序</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>, <span class="number">43</span>, <span class="number">65</span>, <span class="number">34</span>, <span class="number">87</span>, <span class="number">0</span>, -<span class="number">98</span>, <span class="number">7</span>);</span><br><span class="line">        list.stream().sorted().forEach(System.out::println);</span><br><span class="line">        <span class="comment">//抛异常，原因:Employee没有实现Comparable接口</span></span><br><span class="line">        <span class="comment">//List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span></span><br><span class="line">        <span class="comment">//employees.stream().sorted().forEach(System.out::println);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//sorted(Comparator com)——定制排序</span></span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        employees.stream().sorted( (e1,e2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());</span><br><span class="line">            <span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ageValue;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stream终止操作"   >          <a href="#stream终止操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stream终止操作"></a> Stream终止操作</h3>      <p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：<code>List</code>、<code>Integer</code>，甚至是 <code>void</code>。流进行了终止操作后，不能再次使用。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160640867.png" alt="image-20210626160640867" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160645113.png" alt="image-20210626160645113" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160649435.png" alt="image-20210626160649435" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160653025.png" alt="image-20210626160653025" /></p><p>Collector需要使用Collectors提供实例。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626160700820.png" alt="image-20210626160700820" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-匹配与查找</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line">        <span class="comment">//练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">        <span class="keyword">boolean</span> allMatch = employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工的工资大于 10000</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工姓“雷”</span></span><br><span class="line">        <span class="keyword">boolean</span> noneMatch = employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br><span class="line">        <span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().findFirst();</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        <span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">        Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        <span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line">        <span class="keyword">long</span> count = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">5000</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//max(Comparator c)——返回流中最大值</span></span><br><span class="line">        <span class="comment">//练习：返回最高的工资：</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br><span class="line">        <span class="comment">//min(Comparator c)——返回流中最小值</span></span><br><span class="line">        <span class="comment">//练习：返回最低工资的员工</span></span><br><span class="line">        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//forEach(Consumer c)——内部迭代</span></span><br><span class="line">        employees.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用集合的遍历操作</span></span><br><span class="line">        employees.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-归约</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">        <span class="comment">//练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        Integer sum = list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line">        <span class="comment">//练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);</span><br><span class="line">        <span class="comment">//Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span></span><br><span class="line">        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);</span><br><span class="line">        System.out.println(sumMoney.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-收集</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line">        <span class="comment">//练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line">        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        employeeSet.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="optional类"   >          <a href="#optional类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#optional类"></a> Optional类</h2>      <p>Optional类：为了解决java中的空指针问题而生。</p><p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。 以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代 码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p><p>Optional 类(<code>java.util.Optional</code>) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存 null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p><p>Optional类的 Javadoc 描述如下：这是一个可以为 null 的容器对象。如果值存在则<code>isPresent()</code>方法会返回true，调用<code>get()</code>方法会返回该对象。</p><p><img src="/images/%E3%80%90Java%E3%80%91Stream-API/image-20210626162456425.png" alt="image-20210626162456425" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//empty():创建的Optional对象内部的value = null</span></span><br><span class="line">    Optional&lt;Object&gt; op1 = Optional.empty();</span><br><span class="line">    <span class="keyword">if</span>(!op1.isPresent())&#123;<span class="comment">//Optional封装的数据是否包含数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(op1);</span><br><span class="line">    System.out.println(op1.isPresent());</span><br><span class="line">    <span class="comment">//如果Optional封装的数据value为空，则get()报错。否则，value不为空时，返回value.</span></span><br><span class="line">    <span class="comment">//System.out.println(op1.get());</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//str = null;</span></span><br><span class="line">    <span class="comment">//of(T t):封装数据t生成Optional对象。要求t非空，否则报错。</span></span><br><span class="line">    Optional&lt;String&gt; op1 = Optional.of(str);</span><br><span class="line">    <span class="comment">//get()通常与of()方法搭配使用。用于获取内部的封装的数据value</span></span><br><span class="line">    String str1 = op1.get();</span><br><span class="line">    System.out.println(str1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;beijing&quot;</span>;</span><br><span class="line">    str = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//ofNullable(T t) ：封装数据t赋给Optional内部的value。不要求t非空</span></span><br><span class="line">    Optional&lt;String&gt; op1 = Optional.ofNullable(str);</span><br><span class="line">    <span class="comment">//orElse(T t1):如果Optional内部的value非空，则返回此value值。如果</span></span><br><span class="line">    <span class="comment">//value为空，则返回t1.</span></span><br><span class="line">    String str2 = op1.orElse(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(str2);<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Lambda表达式</title>
      <link href="2021/03/26/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/03/26/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[        <h2 id="lambda表达式"   >          <a href="#lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lambda表达式"></a> Lambda表达式</h2>      <p>Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升、</p><p>从匿名内部类到 Lambda 的转换举例1：</p><p>匿名内部类形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">r1.run();</span><br></pre></td></tr></table></div></figure><p>Lambda 表达式形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runnable r2 = () -&gt; System.out.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">r2.run();</span><br></pre></td></tr></table></div></figure><p>从匿名内部类到Lambda 的转换举例2：</p><p>匿名内部类形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> compare1 = com1.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure><p>Lambda 表达式形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line"><span class="keyword">int</span> compare2 = com2.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure><p>方法引用形式：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line"><span class="keyword">int</span> compare3 = com3.compare(<span class="number">32</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="语法"   >          <a href="#语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3>      <p>Lambda 表达式：在Java 8语言中引入的一种新的语法元素和操作符。这个操作符为 “-&gt;” ， 该操作符被称为 Lambda 操作符或箭头操作符。它将 Lambda 分为两个部分：</p><ul><li>左侧：指定了 Lambda 表达式需要的参数列表</li><li>右侧：指定了 Lambda体 ，是抽象方法的实现逻辑，也即 Lambda 表达式要执行的功能。</li></ul>        <h3 id="六种使用方式"   >          <a href="#六种使用方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六种使用方式"></a> 六种使用方式</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150542844.png" alt="image-20210626150542844" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150547722.png" alt="image-20210626150547722" /></p><p>总结六种情况：</p><ul><li>左边：lambda 形参列表的参数类型可以省略(类型推断)；如果 lambda 形参列表只一个参数，其一对()也可以省略</li><li>右边：lambda 体应该使用一对{}包裹；如果 lambda 体只一条执行语句（可能是<code>return</code>语句，省略这一对{}和<code>return</code>关键字）</li></ul>        <h3 id="类型推断"   >          <a href="#类型推断" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#类型推断"></a> 类型推断</h3>      <p>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626150920181.png" alt="image-20210626150920181" /></p>        <h2 id="函数式接口"   >          <a href="#函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#函数式接口"></a> 函数式接口</h2>              <h3 id="定义"   >          <a href="#定义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3>      <p>只包含<strong>一个抽象方法的接口</strong>，称为<strong>函数式接口</strong>。</p><ul><li>可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>可以在一个接口上使用<code>@FunctionalInterface</code> 注解，这样可以检查它是否是一个函数式接口。</li><li>同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li></ul>        <h3 id="如何理解函数式接口"   >          <a href="#如何理解函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#如何理解函数式接口"></a> 如何理解函数式接口</h3>      <p>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP) 编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还 可以支持OOF（面向函数编程）</p><p>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在 Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的 对象类型——函数式接口。</p><p>简单的说，在Java8中，<strong>Lambda表达式就是一个函数式接口的实例</strong>。这就是 Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用 Lambda 表达式来表示。</p><p>所以以前用<strong>匿名实现类</strong>表示的现在都可以用 Lambda 表达式来写。</p><p><strong>Lambda表达式的本质：作为函数式接口的实例</strong></p><p>函数式接口举例：</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626151346747.png" alt="image-20210626151346747" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626151503858.png" alt="image-20210626151503858" /></p>        <h3 id="java内置四大核心函数式接口"   >          <a href="#java内置四大核心函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java内置四大核心函数式接口"></a> Java内置四大核心函数式接口</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153213826.png" alt="image-20210626153213826" /></p>        <h3 id="其他函数式接口"   >          <a href="#其他函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他函数式接口"></a> 其他函数式接口</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153330040.png" alt="image-20210626153330040" /></p>        <h2 id="方法引用"   >          <a href="#方法引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方法引用"></a> 方法引用</h2>      <p>方法引用可以看做是 Lambda 表达式深层次的表达。换句话说，<strong>方法引用就是Lambda表达式</strong>，也就是函数式接口的一个实例，通过方法的名字来指向一个方法。</p><ul><li>当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用。</li><li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致。</li><li>格式：使用操作符 “::” 将类(或对象) 与方法名分隔开来。</li><li>如下三种主要使用情况：<ul><li>情况一：对象::实例方法名</li><li>情况二：类::静态方法名</li><li>情况三：类::实例方法名</li></ul></li></ul><p>要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时：<code>ClassName::methodName</code>（针对于情况3）</p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626153934414.png" alt="image-20210626153934414" /></p><p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154023663.png" alt="image-20210626154023663" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">    con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    PrintStream ps = System.out;</span><br><span class="line">    Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">    con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee emp = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">    System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">    System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;Double,Long&gt; func = <span class="keyword">new</span> Function&lt;Double, Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Double d)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.round(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">    System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">    System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况：类 :: 实例方法  (难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">    System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">    System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">    System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">    System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">    System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">    System.out.println(func2.apply(employee));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="构造器引用"   >          <a href="#构造器引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#构造器引用"></a> 构造器引用</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154608885.png" alt="image-20210626154608885" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">    System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">    Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">    System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">    System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数组引用"   >          <a href="#数组引用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数组引用"></a> 数组引用</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20210626154622412.png" alt="image-20210626154622412" /></p><p>使用举例：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">    String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">    String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】网络编程</title>
      <link href="2021/03/25/%E3%80%90Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2021/03/25/%E3%80%90Java%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="inetaddress"   >          <a href="#inetaddress" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#inetaddress"></a> InetAddress</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line">        InetAddress inet1 = InetAddress.getByName(<span class="string">&quot;192.168.10.14&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(inet1);</span><br><span class="line"></span><br><span class="line">        InetAddress inet2 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(inet2);</span><br><span class="line"></span><br><span class="line">        InetAddress inet3 = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        System.out.println(inet3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本地ip</span></span><br><span class="line">        InetAddress inet4 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(inet4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getHostName()</span></span><br><span class="line">        System.out.println(inet2.getHostName());</span><br><span class="line">        <span class="comment">//getHostAddress()</span></span><br><span class="line">        System.out.println(inet2.getHostAddress());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="tcp-socket"   >          <a href="#tcp-socket" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#tcp-socket"></a> TCP Socket</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">            InetAddress inet = InetAddress.getByName(<span class="string">&quot;192.168.14.100&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(inet,<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.写出数据的操作</span></span><br><span class="line">            os.write(<span class="string">&quot;你好，我是客户端mm&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">8899</span>);</span><br><span class="line">            <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//3.获取输入流</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不建议这样写，可能会有乱码</span></span><br><span class="line">            <span class="comment">//        byte[] buffer = new byte[1024];</span></span><br><span class="line">            <span class="comment">//        int len;</span></span><br><span class="line">            <span class="comment">//        while((len = is.read(buffer)) != -1)&#123;</span></span><br><span class="line">            <span class="comment">//            String str = new String(buffer,0,len);</span></span><br><span class="line">            <span class="comment">//            System.out.print(str);</span></span><br><span class="line">            <span class="comment">//        &#125;</span></span><br><span class="line">            <span class="comment">//4.读取输入流中的数据</span></span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//5.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据的输出</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bufferr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span>((len1 = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer,<span class="number">0</span>,len1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.</span></span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        baos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这里涉及到的异常，应该使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        Socket socket = ss.accept();</span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;beauty.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//5.</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;图片传输完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;你好！&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.</span></span><br><span class="line">        fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="udp-datagramsocket"   >          <a href="#udp-datagramsocket" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#udp-datagramsocket"></a> UDP DatagramSocket</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;我是UDP方式发送的导弹&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">        InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>,data.length,inet,<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接收端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line"></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="url"   >          <a href="#url" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#url"></a> URL</h2>      <p>URL:统一资源定位符，对应着互联网的某一资源地址。</p><p>格式：<span class="exturl"><a class="exturl__link"   href="http://localhost:8080/examples/beauty.jpg?username=Tom" >http://localhost:8080/examples/beauty.jpg?username=Tom</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>协议  主机名  端口号 资源地址  参数列表</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/beauty.jpg?username=Tom&quot;</span>);</span><br><span class="line"><span class="comment">//            public String getProtocol(  )     获取该URL的协议名</span></span><br><span class="line">            System.out.println(url.getProtocol());</span><br><span class="line"><span class="comment">//            public String getHost(  )           获取该URL的主机名</span></span><br><span class="line">            System.out.println(url.getHost());</span><br><span class="line"><span class="comment">//            public String getPort(  )            获取该URL的端口号</span></span><br><span class="line">            System.out.println(url.getPort());</span><br><span class="line"><span class="comment">//            public String getPath(  )           获取该URL的文件路径</span></span><br><span class="line">            System.out.println(url.getPath());</span><br><span class="line"><span class="comment">//            public String getFile(  )             获取该URL的文件名</span></span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line"><span class="comment">//            public String getQuery(   )        获取该URL的查询名</span></span><br><span class="line">            System.out.println(url.getQuery());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】反射</title>
      <link href="2021/03/23/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/"/>
      <url>2021/03/23/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[        <h2 id="反射概述"   >          <a href="#反射概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射概述"></a> 反射概述</h2>      <p>Reflection（反射）是被视为<strong>动态语言</strong>的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作意对象部属性及方法。</p><p><strong>框架 = 反射 + 注解 + 设计模式</strong></p><p>加载完类之后，在<strong>堆内存的方法区</strong>中就产生了一个<code>Class</code>类型的对象（一个类只有一个<code>Class</code>对象），这个对象就包含了<strong>完整的类的结构信息</strong>。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</p><p><img src="/images/%E3%80%90Java%E3%80%91%E5%8F%8D%E5%B0%84/image-20210623202252209.png" alt="image-20210623202252209" /></p>        <h3 id="动态语言-vs-静态语言"   >          <a href="#动态语言-vs-静态语言" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态语言-vs-静态语言"></a> 动态语言 vs 静态语言</h3>      <p><strong>动态语言</strong>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言：<code>Object-C</code>、<code>C#</code>、<code>JavaScript</code>、<code>PHP</code>、<code>Python</code>、<code>Erlang</code>。</p><p><strong>静态语言</strong>与动态语言相对应的，运行时<strong>结构不可变</strong>的语言就是静态语言。如<code>Java</code>、<code>C</code>、<code>C++</code>。</p><p>Java不是动态语言，但Java可以称之为“<strong>准动态</strong>语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。 Java的动态性让编程的时候更加灵活。</p>        <h3 id="反射相关类"   >          <a href="#反射相关类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射相关类"></a> 反射相关类</h3>      <ul><li><code>java.lang.Class</code>：反射的源头</li><li><code>java.lang.reflect.Method</code></li><li><code>java.lang.reflect.Field</code></li><li><code>java.lang.reflect.Constructor</code></li></ul>        <h3 id="反射优点和缺点"   >          <a href="#反射优点和缺点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射优点和缺点"></a> 反射优点和缺点</h3>      <p>优点：可以动态地创建和使用对象（也是框架底层核心）</p><p>缺点：使用反射基本是解释执行，对执行速度有影响</p><span id="more"></span>        <h2 id="class类的理解"   >          <a href="#class类的理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#class类的理解"></a> Class类的理解</h2>      <p>类的加载过程：程序经过<code>javac.ex</code>e命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用<code>java.exe</code>命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为<code>Class</code>的一个实例。</p><p>换句话说，<strong>Class的实例就对应着一个运行时类，其包含该运行时类的完整结构信息</strong>。</p><p>加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类，<strong>得到的是同一个Class对象</strong>。</p>        <h2 id="获取class实例的几种方式"   >          <a href="#获取class实例的几种方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#获取class实例的几种方式"></a> 获取Class实例的几种方式</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">Class clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz2 = p1.getClass();</span><br><span class="line">System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三：调用Class的静态方法：forName(String classPath)，常用</span></span><br><span class="line">clazz3 = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式四：使用类的加载器：ClassLoader  (了解)</span></span><br><span class="line">ClassLoader classLoader = ReflectionTest.class.getClassLoader();</span><br><span class="line">Class clazz4 = classLoader.loadClass(<span class="string">&quot;com.zhao.java.Person&quot;</span>);</span><br><span class="line">System.out.println(clazz4);</span><br></pre></td></tr></table></div></figure><p>补充：<code>ClassLoader</code>类的使用：使用Classloader加载src目录下的配置文件</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Properties pros =  <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的方式一：</span></span><br><span class="line">    此时的文件默认在当前的<span class="keyword">module</span>下，与src同级。</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\jdbc1.properties&quot;</span>);</span><br><span class="line">    pros.load(fis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件的方式二：使用ClassLoader</span></span><br><span class="line">    <span class="comment">//配置文件默认识别为：当前module的src下</span></span><br><span class="line">    ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">    InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc1.properties&quot;</span>);</span><br><span class="line">    pros.load(is);</span><br><span class="line"></span><br><span class="line">    String user = pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    String password = pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user + <span class="string">&quot;,password = &quot;</span> + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用一创建运行时类的对象"   >          <a href="#反射应用一创建运行时类的对象" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用一创建运行时类的对象"></a> 反射应用一：创建运行时类的对象</h2>      <p>代码举例</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">Person obj = clazz.newInstance();</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></div></figure><p>说明<code>newInstance():</code>调用此方法，创建对应的运行时类的对象。<strong>内部调用了运行时类的空参的构造器。</strong></p><p>要想此方法正常的创建运行时类的对象，要求：</p><ul><li>运行时类必须提供<strong>空参</strong>的构造器</li><li>空参的构造器的<strong>访问权限</strong>得够。通常，设置为public。</li></ul><p>在javabean中要求提供一个public的空参构造器。原因：</p><ul><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行时类时，子类默认调用super()时能保证父类有默认构造器</li></ul>        <h2 id="反射应用二获取运行时类的完整结构"   >          <a href="#反射应用二获取运行时类的完整结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用二获取运行时类的完整结构"></a> 反射应用二：获取运行时类的完整结构</h2>      <p>通过反射，可以获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取属性结构</span></span><br><span class="line">    <span class="comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : fields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getDeclaredFields():获取当前运行时类中声明的所属性。（不包含父类中声明的属性）</span></span><br><span class="line">    Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getMethods():获取当前运行时类及其所父类中声明为public权限的方法</span></span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : methods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法</span></span><br><span class="line">    Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method m : declaredMethods)&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取构造器结构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器</span></span><br><span class="line">    Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">    <span class="keyword">for</span>(Constructor c : constructors)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getDeclaredConstructors():获取当前运行时类中声明的所的构造器</span></span><br><span class="line">    Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span>(Constructor c : declaredConstructors)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Class superclass = clazz.getSuperclass();</span><br><span class="line">    System.out.println(superclass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    System.out.println(genericSuperclass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类的带泛型的父类的泛型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Type genericSuperclass = clazz.getGenericSuperclass();</span><br><span class="line">    ParameterizedType paramType = (ParameterizedType) genericSuperclass;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取泛型类型</span></span><br><span class="line">    Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line">    <span class="comment">//System.out.println(actualTypeArguments[0].getTypeName());</span></span><br><span class="line">    System.out.println(((Class)actualTypeArguments[<span class="number">0</span>]).getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类实现的接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">    <span class="keyword">for</span>(Class c : interfaces)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取运行时类的父类实现的接口</span></span><br><span class="line">    Class[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line">    <span class="keyword">for</span>(Class c : interfaces1)&#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类所在的包</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Package pack = clazz.getPackage();</span><br><span class="line">    System.out.println(pack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取运行时类声明的注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">    <span class="keyword">for</span>(Annotation annos : annotations)&#123;</span><br><span class="line">        System.out.println(annos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用三调用运行时类的指定结构"   >          <a href="#反射应用三调用运行时类的指定结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用三调用运行时类的指定结构"></a> 反射应用三：调用运行时类的指定结构</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testField1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建运行时类的对象</span></span><br><span class="line">    Person p = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span></span><br><span class="line">    Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">    name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//3.获取、设置指定对象的此属性值</span></span><br><span class="line">    name.set(p,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(name.get(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用指定的方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建运行时类的对象</span></span><br><span class="line">    Person p = (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1.获取指定的某个方法</span></span><br><span class="line"><span class="comment">      getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Method show = clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class);</span><br><span class="line">    <span class="comment">//2.保证当前方法是可访问的</span></span><br><span class="line">    show.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line"><span class="comment">      invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Object returnValue = show.invoke(p,<span class="string">&quot;CHN&quot;</span>); <span class="comment">//String nation = p.show(&quot;CHN&quot;);</span></span><br><span class="line">    System.out.println(returnValue);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*************如何调用静态方法*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private static void showDesc()</span></span><br><span class="line"></span><br><span class="line">    Method showDesc = clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line">    showDesc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//如果调用的运行时类中的方法没返回值，则此invoke()返回null</span></span><br><span class="line">    <span class="comment">//Object returnVal = showDesc.invoke(null);</span></span><br><span class="line">    Object returnVal = showDesc.invoke(Person.class);</span><br><span class="line">    System.out.println(returnVal);<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用指定的构造器：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Person(String name)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.获取指定的构造器</span></span><br><span class="line"><span class="comment">    getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.调用此构造器创建运行时类的对象</span></span><br><span class="line">    Person per = (Person) constructor.newInstance(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">    System.out.println(per);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="反射应用四动态代理"   >          <a href="#反射应用四动态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#反射应用四动态代理"></a> 反射应用四：动态代理</h2>              <h3 id="代理模式的原理"   >          <a href="#代理模式的原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#代理模式的原理"></a> 代理模式的原理</h3>      <p>使用一个代理将对象包装起来,，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p>        <h3 id="静态代理"   >          <a href="#静态代理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h3>      <p>举例：实现Runnable接口的方法创建多线程。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyThread implements Runnable&#123;&#125; <span class="comment">//相当于被代理类</span></span><br><span class="line">Class Thread implements Runnable&#123;&#125; <span class="comment">//相当于代理类</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(t);</span><br><span class="line">thread.start();<span class="comment">//启动线程；调用线程的run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="静态代理的缺点"   >          <a href="#静态代理的缺点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#静态代理的缺点"></a> 静态代理的缺点</h3>      <ul><li>代理类和目标对象的类都是在<strong>编译期间</strong>确定下来，不利于程序的扩展；</li><li><strong>每一个代理类只能为一个接口服务</strong>，这样一来程序开发中必然产生过多的代理。</li></ul>        <h3 id="动态代理的特点"   >          <a href="#动态代理的特点" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态代理的特点"></a> 动态代理的特点</h3>      <p>动态代理是指客户通过代理类来调用其它对象的方法，并且是在<strong>程序运行时</strong>根据需要<strong>动态</strong>创建目标类的代理对象。</p>        <h3 id="动态代理的实现"   >          <a href="#动态代理的实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#动态代理的实现"></a> 动态代理的实现</h3>      <p>需要解决的两个主要问题：</p><ul><li>问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。<br />（通过<code>Proxy.newProxyInstance()</code>实现）</li><li>问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。<br />（通过<code>InvocationHandler</code>接口的实现类及其方法<code>invoke()</code>）</li></ul><p>代码实现：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getBelief</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBelief</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法一====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================通用方法二====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用此方法，返回一个代理类的对象。解决问题一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span></span>&#123;<span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;<span class="comment">//需要使用被代理类的对象进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        HumanUtil util = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">        util.method1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        Object returnValue = method.invoke(obj,args);</span><br><span class="line">        </span><br><span class="line">        util.method2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuperMan superMan = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="comment">//proxyInstance:代理类的对象</span></span><br><span class="line">        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        String belief = proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;四川麻辣烫&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        NikeClothFactory nikeClothFactory = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);</span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>动态代理其他应用：</p><p>MyBatis中<code>sqlSession</code>返回的每个<code>mapper</code>对象都是一个代理类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】IO流</title>
      <link href="2021/03/18/%E3%80%90Java%E3%80%91IO%E6%B5%81/"/>
      <url>2021/03/18/%E3%80%90Java%E3%80%91IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[        <h2 id="file类"   >          <a href="#file类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#file类"></a> File类</h2>      <p><code>java.io.File</code>类：文件和文件目录路径的抽象表示形式，与平台无关</p><ul><li>File 能新建、删除、重命名文件和目录，但 File不能访问文件内容本身。 如果需要访问文件内容本身，则需要使用输入/输出流。</li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li><li>File对象可以作为参数传递给流的构造器，指明读取或写入的&quot;终点&quot;。</li></ul><p>Java路径：</p><ul><li>相对路径：相较于某个路径下，指明的路径。在某个Module下代码内的相对路径默认相对于当前Module</li><li>绝对路径：包含盘符在内的文件或文件目录的路径</li></ul><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如何创建File类的实例</span></span><br><span class="line"><span class="comment">        File(String filePath)</span></span><br><span class="line"><span class="comment">        File(String parentPath,String childPath)</span></span><br><span class="line"><span class="comment">        File(File parentFile,String childPath)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">    相对路径：相较于某个路径下，指明的路径。</span></span><br><span class="line"><span class="comment">    绝对路径：包含盘符在内的文件或文件目录的路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.路径分隔符</span></span><br><span class="line"><span class="comment">     windows:\\</span></span><br><span class="line"><span class="comment">     unix:/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相对于当前module</span></span><br><span class="line">        File file2 =  <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior\\day08\\he.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2：</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1&quot;</span>,<span class="string">&quot;JavaSenior&quot;</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3：</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3,<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public String getAbsolutePath()：获取绝对路径</span></span><br><span class="line"><span class="comment">    public String getPath() ：获取路径</span></span><br><span class="line"><span class="comment">    public String getName() ：获取名称</span></span><br><span class="line"><span class="comment">    public String getParent()：获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">    public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">    public long lastModified() ：获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如下的两个方法适用于文件目录：</span></span><br><span class="line"><span class="comment">    public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">    public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsolutePath());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(file2.lastModified());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\workspace_idea1\\JavaSenior&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">     比如：file1.renameTo(file2)为例：</span></span><br><span class="line"><span class="comment">        要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\hi.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file2.renameTo(file1);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public boolean isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">    public boolean isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">    public boolean exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">    public boolean canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">    public boolean canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">    public boolean isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        file1 = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io&quot;</span>);</span><br><span class="line">        file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());</span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建硬盘中对应的文件或文件目录</span></span><br><span class="line"><span class="comment">    public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">    public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">    public boolean mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    删除磁盘中的文件或文件目录</span></span><br><span class="line"><span class="comment">    public boolean delete()：删除文件或者文件夹</span></span><br><span class="line"><span class="comment">    删除注意事项：Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;hi.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">            <span class="comment">//文件的创建</span></span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//文件存在</span></span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file1.mkdir();</span><br><span class="line">        <span class="keyword">if</span>(mkdir)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;d:\\io\\io1\\io4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir1 = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span>(mkdir1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要想删除成功，io4文件目录下不能有子目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1\\io4&quot;</span>);</span><br><span class="line">        file3 = <span class="keyword">new</span> File(<span class="string">&quot;D:\\io\\io1&quot;</span>);</span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="io流原理及流的分类"   >          <a href="#io流原理及流的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流原理及流的分类"></a> IO流原理及流的分类</h2>              <h3 id="io流原理"   >          <a href="#io流原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流原理"></a> IO流原理</h3>      <ul><li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li><li>Java程序中，对于数据的输入/输出操作以“流(stream)” 的方式进行。</li><li>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</li></ul>        <h3 id="流的分类"   >          <a href="#流的分类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#流的分类"></a> 流的分类</h3>      <ul><li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132238499.png" alt="image-20210624132238499" /></p><p>IO流类型示意图</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132519552.png" alt="image-20210624132519552" /></p>        <h3 id="节点流和处理流"   >          <a href="#节点流和处理流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#节点流和处理流"></a> 节点流和处理流</h3>      <p><strong>节点流</strong>：直接从数据源或目的地读写数据。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132703272.png" alt="image-20210624132703272" /></p><p><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132713974.png" alt="image-20210624132713974" /></p>        <h3 id="io流体系"   >          <a href="#io流体系" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#io流体系"></a> IO流体系</h3>      <p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624132602926.png" alt="image-20210624132602926" /></p><div class="table-container"><table><thead><tr><th>抽象基类</th><th>节点流（或文件流）</th><th>缓冲流（处理流的一种）</th></tr></thead><tbody><tr><td><strong>InputStream</strong></td><td><strong>FileInputStream</strong> read(byte[] buffer)</td><td><strong>BufferedInputStream</strong> read(byte[] buffer)</td></tr><tr><td><strong>OutputStream</strong></td><td><strong>FileOutputStream</strong> write(byte[] buffer,0,len)</td><td><strong>BufferedOutputStream</strong> write(byte[] buffer,0,len) / flush()</td></tr><tr><td><strong>Reader</strong></td><td><strong>FileReader</strong> read(char[] cbuf)</td><td><strong>BufferedReader</strong> read(char[] cbuf) / readLine()</td></tr><tr><td><strong>Writer</strong></td><td><strong>FileWriter</strong> write(char[] cbuf,0,len)</td><td><strong>BufferedWriter</strong> write(char[] cbuf,0,len) / flush()</td></tr></tbody></table></div><ul><li>对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</li><li>对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理</li></ul>        <h2 id="filereader和filewriter"   >          <a href="#filereader和filewriter" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#filereader和filewriter"></a> FileReader和FileWriter</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;day09\\hello.txt&quot;</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将day09下的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明点：</span></span><br><span class="line"><span class="comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);<span class="comment">//相较于当前Module</span></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        int data = fr.read();</span></span><br><span class="line"><span class="comment">//        while(data != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)data);</span></span><br><span class="line"><span class="comment">//            data = fr.read();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对于方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭操作</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fr != null)</span></span><br><span class="line"><span class="comment">//                    fr.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//或</span></span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对read()操作升级：使用read的重载方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">    1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">    2.</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">         File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"><span class="comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span></span><br><span class="line"><span class="comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                if(fw != null)</span></span><br><span class="line"><span class="comment">//                    fw.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;finally&#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    if(fr != null)</span></span><br><span class="line"><span class="comment">//                        fr.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="fileinputstream和fileoutputstream"   >          <a href="#fileinputstream和fileoutputstream" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#fileinputstream和fileoutputstream"></a> FileInputStream和FileOutputStream</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 造文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//4.关闭资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现对图片的复制操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定路径下文件的复制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制的过程</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="缓冲流"   >          <a href="#缓冲流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#缓冲流"></a> 缓冲流</h2>      <p>处理流，就是“套接”在已有的流的基础上。缓冲流能提高读写速度，原因：内部提供了一个<strong>缓冲区</strong>，读写时先将内存中的数据存放在缓冲区内，当缓冲区内容满了再统一对硬盘进行读写，节省了大量向硬盘读写所耗费的时间。</p><ul><li><code>BufferedInputStream</code></li><li><code>BufferedOutputStream</code></li><li><code>BufferedReader</code></li><li><code>BufferedWriter</code></li></ul><p>**创建缓冲流时，需要将对应的节点流对象作为构造器参数传入。**关闭外部流（缓冲流）后，其内部流（节点流）会自动关闭，不需要再<code>close</code>。</p><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624140207933.png" alt="image-20210624140207933" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现非文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">&quot;爱情与友情3.jpg&quot;</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//                bos.flush();//刷新缓冲区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span></span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(bis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;</span><br><span class="line">        String destPath = <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;</span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath,destPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="comment">//618 - 176</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char[]数组</span></span><br><span class="line"><span class="comment">//            char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">//            int len;</span></span><br><span class="line"><span class="comment">//            while((len = br.read(cbuf)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//                bw.write(cbuf,0,len);</span></span><br><span class="line"><span class="comment">//    //            bw.flush();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span>((data = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">                bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="转换流"   >          <a href="#转换流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#转换流"></a> 转换流</h2>      <p>转换流：属于<strong>字符流</strong>。因为其后缀为<code>Reader</code>和<code>Writer</code>。</p><ul><li><code>InputStreamReader</code>：将一个字节输入流转换为字符输入流</li><li><code>OutputStreamWriter</code>：将一个字符输出流转换为字节输出流</li></ul><p>作用：提供字节流与字符流之间的转换。可指定使用不同的字符集编码方式读取同一段文本数据。</p><ul><li>解码：字节、字节数组 —&gt; 字符数组、字符串</li><li>编码：字符数组、字符串 —&gt; 字节、字节数组</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91IO%E6%B5%81/image-20210624140145352.png" alt="image-20210624140145352" /></p>        <h3 id="字符集"   >          <a href="#字符集" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符集"></a> 字符集</h3>      <ul><li>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</li><li>ISO8859-1：拉丁码表（欧洲码表）。用一个字节的8位表示。</li><li>GB2312：中国的中文编码表。多两个字节编码所有字符</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</li><li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</li><li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此时处理异常的话，仍然应该使用try-catch-finally</span></span><br><span class="line"><span class="comment">    综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.造文件、造流</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file1);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file2);</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读写过程</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="对象流"   >          <a href="#对象流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#对象流"></a> 对象流</h2>      <p><code>ObjectInputStream</code>和<code>OjbectOutputSteam</code></p><p>作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p><p>要想一个java对象是<strong>可序列化</strong>的，需要满足的要求：</p><ul><li>需要实现接口：<code>Serializable</code></li><li>当前类提供一个全局常量：<code>serialVersionUID</code>，其用于唯一标识该对象在数据源中的位置</li><li>除了当前类需要实现<code>Serializable</code>接口之外，还必须保证其内部所有属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）</li></ul><p>补充：<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>不能序列化<code>static</code>和<code>transient</code>修饰的成员变量。</p><p><strong>序列化机制：</strong></p><ul><li>对象序列化机制允许把内存中的Java对象转换成<strong>平台无关的二进制流</strong>，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</li><li>当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li></ul><p>Java的序列化机制是通过在运行时判断类的<code>serialVersionUID</code>来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的<code>serialVersionUID</code>与本地相应实体类的<code>serialVersionUID</code>进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(<code>InvalidCastException</code>)</p><p>谈谈你对java.io.Serializable接口的理解，我们知道它用于序列化， 是空方法接口，还有其它认识吗？</p><p>实现了<code>Serializable</code>接口的对象，可将它们转换成一系列字节，并可在以后完全恢复回原来的样子。<strong>这一过程亦可通过网络进行。这意味着序列化机制能自动补偿操作系统间的差异</strong>。换句话说，可以先在Windows机器上创建一个对象，对其序列化，然后通过网络发给一台Unix机器，然后在那里准确无误地重新“装配”。不必关心数据在不同机器上如何表示，也不必关心字节的顺序或者其他任何细节。由于大部分作为参数的类如String、Integer等都实现了<code>java.io.Serializable</code>的接口，也可以利用多态的性质，作为参数使接口更灵活。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">    使用ObjectOutputStream实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectOutputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">            oos.flush();<span class="comment">//每write一个对象就要刷新一次</span></span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;王铭&quot;</span>,<span class="number">23</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;张学良&quot;</span>,<span class="number">23</span>,<span class="number">1001</span>,<span class="keyword">new</span> Account(<span class="number">5000</span>)));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//3.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    反序列化：将磁盘文件中的对象还原为内存中的一个java对象</span></span><br><span class="line"><span class="comment">    使用ObjectInputStream来实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectInputStream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line">            String str = (String) obj;</span><br><span class="line"></span><br><span class="line">            Person p = (Person) ois.readObject();</span><br><span class="line">            Person p1 = (Person) ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">            System.out.println(p1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="randomaccessfile"   >          <a href="#randomaccessfile" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#randomaccessfile"></a> RandomAccessFile</h2>      <ul><li><code>RandomAccessFile</code>直接继承于<code>java.lang.Object</code>类，实现了<code>DataInput</code>和<code>DataOutput</code>接口</li><li><code>RandomAccessFile</code>既可以作为一个输入流，又可以作为一个输出流</li></ul><p>如果<code>RandomAccessFile</code>作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）可以通过相关的操作，实现<code>RandomAccessFile</code>“插入”数据的效果。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.</span></span><br><span class="line">            raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">            raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;爱情与友情1.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="comment">//2.</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//3.</span></span><br><span class="line">            <span class="keyword">if</span>(raf1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf1.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(raf2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());<span class="comment">//</span></span><br><span class="line">        raf1.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用RandomAccessFile实现数据的插入效果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">        <span class="comment">//保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>) <span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            builder.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调回指针，写入“xyz”</span></span><br><span class="line">        raf1.seek(<span class="number">3</span>);</span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将StringBuilder中的数据写入到文件中</span></span><br><span class="line">        raf1.write(builder.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="其他流"   >          <a href="#其他流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#其他流"></a> 其他流</h2>      <ul><li>标准的输入、输出流：<span class="exturl"><a class="exturl__link"   href="http://System.in" >System.in</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>、System.out</li><li>打印流：PrintStream、PrintWriter</li><li>数据流：DataInputStream、DataOutputStream。作用：用于读取或写出基本数据类型的变量或字符串</li></ul>        <h3 id="打印流"   >          <a href="#打印流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#打印流"></a> 打印流</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\IO\\text.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &#x27;\n&#x27; 时都会刷新输出缓冲区)</span></span><br><span class="line">        ps = <span class="keyword">new</span> PrintStream(fos, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">            System.setOut(ps);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">            System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">                System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="数据流"   >          <a href="#数据流" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据流"></a> 数据流</h3>      <p>将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。 注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</p><p>将内存中的字符串、基本数据类型的变量写出到文件中：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    dos.writeUTF(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    dos.flush();<span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">    dos.writeInt(<span class="number">23</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dos.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    String name = dis.readUTF();</span><br><span class="line">    <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">    <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">    System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    dis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】集合</title>
      <link href="2021/03/16/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/"/>
      <url>2021/03/16/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[        <h2 id="集合框架的概述"   >          <a href="#集合框架的概述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#集合框架的概述"></a> 集合框架的概述</h2>      <p>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。</p>        <h3 id="java数组"   >          <a href="#java数组" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java数组"></a> Java数组</h3>      <p>数组在存储多个数据方面的特点：</p><ul><li>一旦初始化以后，其长度就确定了。</li><li>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。比如：<code>String[] arr;int[] arr1;Object[] arr2;</code></li></ul><p>数组在存储多个数据方面的缺点：</p><ul><li>一旦初始化以后，其长度就不可修改。</li><li>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li></ul><p>数组存储数据的特点：<strong>有序、可重复。对于无序、不可重复的需求，不能满足。</strong></p>        <h3 id="java集合"   >          <a href="#java集合" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#java集合"></a> Java集合</h3>      <p>Java集合类可以用于存储数量不等的多个对象 ，还可用于保存具有映射关系的关联数组。其可分为 <code>Collection</code>和<code>Map</code>两种体系。</p><ul><li><code>Collection</code>接口：<strong>单列</strong>集合，用来存储一个一个的对象<ul><li><code>List</code>接口：存储<strong>有序的、可重复的</strong>数据。包含<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code></li><li><code>Set</code>接口：存储<strong>无序的、不可重复的</strong>数据。包含<code>HashSet</code>、<code>LinkedHashSet</code>、<code>TreeSet</code></li></ul></li><li><code>Map</code>接口：<strong>双列</strong>集合，用来存储一对(key-value)一对的数据。包含<code>HashMap</code>、<code>LinkedHashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>Properties</code></li></ul><p><strong>Collection接口继承树</strong></p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617161218475.png" alt="image-20210617161218475" /></p><p><strong>Map接口继承树</strong></p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617161305507.png" alt="image-20210617161305507" /></p><span id="more"></span>        <h2 id="collection接口"   >          <a href="#collection接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#collection接口"></a> Collection接口</h2>      <p>向<code>Collection</code>接口的实现类的对象中添加数据obj时，要求obj所在类要重写<code>equals()</code>方法。</p><p>Collection接口常用方法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e):将元素e添加到集合coll中</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size():获取添加的元素的个数</span></span><br><span class="line">        System.out.println(coll.size());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll1):将coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.size());<span class="comment">//6</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear():清空集合元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty():判断当前集合是否为空</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>向<code>Collection</code>接口的实现类的对象中添加数据obj时，要求obj所在类要重写<code>equals()</code>方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()。</span></span><br><span class="line">        <span class="keyword">boolean</span> contains = coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);</span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">4567</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj):从当前集合中移除obj元素。</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">123</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line"><span class="comment">//        Collection coll1 = Arrays.asList(123,456,789);</span></span><br><span class="line"><span class="comment">//        coll.retainAll(coll1);</span></span><br><span class="line"><span class="comment">//        System.out.println(coll);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll1.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll1.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.equals(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 ---&gt;数组：toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        List arr1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        List arr2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.iterator():返回Iterator接口的实例，用于遍历集合元素。放在IteratorTest.java中测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>集合元素的遍历操作，使用迭代器<code>Iterator</code>接口。获取方法：<code>collection.iterator();</code></p><ul><li>内部的方法：<code>hasNext()</code>和 <code>next()</code></li><li>集合对象每次调用<code>iterator()</code>方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</li><li>内部定义了<code>remove()</code>，可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用<code>remove()</code>。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hasNext():判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：</span></span><br><span class="line"><span class="comment">//        Iterator iterator = coll.iterator();</span></span><br><span class="line"><span class="comment">//        while((iterator.next()) != null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class="line">        <span class="keyword">while</span> (coll.iterator().hasNext())&#123;</span><br><span class="line">            System.out.println(coll.iterator().next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试Iterator中的remove()</span></span><br><span class="line">    <span class="comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span></span><br><span class="line">    <span class="comment">// 再调用remove都会报IllegalStateException。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用<code>next()</code>方法时，先将<code>iterator</code>的指针下移，再将下移后位置上的元素返回。</p><p>增强for循环：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line"><span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line"><span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="list接口"   >          <a href="#list接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#list接口"></a> List接口</h2>      <p>List接口：存储有序的、可重复的数据。是一种“动态”数组。能够替换原有的数组。其实现类有三种：</p><ul><li><strong>ArrayList</strong>：作为<code>List</code>接口的<strong>主要实现类</strong>；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>ArrayList</code>），效率高</strong>；底层使用<code>Object[] elementData</code><strong>数组</strong>存储；数组长度动态扩容时每次扩容1.5倍。</li><li><strong>LinkedList</strong>：对于<strong>频繁的插入、删除操作</strong>，使用此类效率比<code>ArrayList</code>高；底层使用<strong>双向链表</strong>存储。</li><li><strong>Vector</strong>：作为<code>List</code>接口的<strong>古老</strong>实现类；<strong>线程安全的，效率低</strong>；底层使用<code>Object[] elementData</code><strong>数组</strong>存储；数组长度动态扩容时每次扩容2倍。不常使用</li></ul><p>List接口中的常用方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span> <span class="comment">//在index位置插入ele元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection eles)</span> <span class="comment">//从index位置开始将eles中的所有元素添加进来</span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//获取指定index位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span> <span class="comment">//返回obj在集合中首次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span> <span class="comment">//返回obj在当前集合中末次出现的位置</span></span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">//移除指定index位置的元素，并返回此元素</span></span></span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object ele)</span> <span class="comment">//设置指定index位置的元素为ele</span></span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> <span class="comment">//返回从fromIndex到toIndex位置的子集合</span></span></span><br></pre></td></tr></table></div></figure><p>总结：</p><ul><li>增：add(Object obj)</li><li>删：remove(int index) / remove(Object obj)</li><li>改：set(int index, Object ele)</li><li>查：get(int index)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历：<ul><li>Iterator迭代器方式</li><li>增强for循环</li><li>普通的循环</li></ul></li></ul><p>注意：remove方法有两个重载，一个是删除指定索引位置，一个是删除指定对象</p>        <h3 id="arraylist"   >          <a href="#arraylist" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#arraylist"></a> ArrayList</h3>      <p><code>ArrayList</code>的源码分析</p><p>jdk 7情况下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();<span class="comment">//底层创建了长度是10的Object[]数组elementData</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//elementData[0] = new Integer(123);</span></span><br><span class="line">...</span><br><span class="line">list.add(<span class="number">11</span>);<span class="comment">//如果此次的添加导致底层elementData数组容量不够，则扩容1.5倍。</span></span><br></pre></td></tr></table></div></figure><p>默认情况下，扩容为原来的容量的1.5倍，<strong>同时需要将原有数组中的数据复制到新的数组中</strong>。<strong>结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity);</strong></p><p>jdk 8中<code>ArrayList</code>的变化：</p> <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();<span class="comment">//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span></span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><p>后续的添加和扩容操作与jdk 7无异。</p><p>小结：jdk 7中的ArrayList的对象的创建类似于单例的<strong>饿汉式</strong>，而jdk 8中的<code>ArrayList</code>的对象的创建类似于单例的<strong>懒汉式</strong>，延迟了数组的创建，节省内存。</p>        <h3 id="linkedlist"   >          <a href="#linkedlist" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedlist"></a> LinkedList</h3>      <p><code>LinkedList</code>的源码分析：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList(); <span class="comment">//内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class="line">list.add(<span class="number">123</span>);<span class="comment">//将123封装到Node中，创建了Node对象。</span></span><br></pre></td></tr></table></div></figure><p>其中，Node定义为：体现了LinkedList的双向链表的说法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="vector"   >          <a href="#vector" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#vector"></a> Vector</h3>      <p><code>Vector</code>的源码分析：jdk7和jdk8中通过<code>Vector()</code>构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。</p><p><strong>问：ArrayList、LinkedList、Vector三者的异同？</strong></p><ul><li>同：三个类都是实现了<code>List</code>接口，存储数据的特点相同：存储<strong>有序的、可重复的</strong>数据</li><li>异：<ul><li><code>ArrayList</code>和<code>Vector</code>区别：<code>ArrayList</code>效率高，线程不安全，<code>Vector</code>效率低，线程安全；数组长度动态扩容倍数不同；</li><li><code>ArrayList</code>和<code>LinkedList</code>的区别：<code>ArrayList</code>使用<strong>数组</strong>结构存储，<code>LinkedList</code>使用<strong>双向链表</strong>结构存储；<code>LinkedList</code>适用于频繁插入删除数据，<code>Array</code>适用于频繁查询某个位置数据；</li></ul></li></ul>        <h2 id="set接口"   >          <a href="#set接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set接口"></a> Set接口</h2>      <p>Set接口：存储无序的、不可重复的数据。<code>Set</code>接口中没有额外定义新的方法，使用的都是<code>Collection</code>中声明过的方法。其实现类有三个：</p><ul><li><strong>HashSet</strong>：作为<code>Set</code>接口的<strong>主要实现类</strong>；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>HashSet</code></strong>；可以存储<code>null</code>值；遍历时无法按照添加时的顺序遍历（<code>HashSet</code>底层是通过<code>HashMap</code>实现的，HashSet中的值就是<code>HashMap</code>中的key）<ul><li><strong>LinkedHashSet</strong>：作为<code>HashSet</code>的子类；遍历其内部数据时，<strong>可以按照添加的顺序遍历</strong>。对于频繁的<strong>遍历</strong>操作，<code>LinkedHashSet</code>效率高于<code>HashSet</code>。</li></ul></li><li><strong>TreeSet</strong>：可以按照添加对象的指定属性，进行排序。</li></ul><p>使用要求：向<code>Set</code>(主要指：<code>HashSet</code>、<code>LinkedHashSet</code>)中添加的数据，<strong>其所在的类一定要重写hashCode()和equals()方法</strong>。并且重写的<code>hashCode()</code>和<code>equals()</code>尽可能保持一致性：相等的对象必须具有相等的hashCode 值。重写两个方法的小技巧：对象中用作 <code>equals()</code>方法比较的 <code>Field</code>，都应该用来计算 hashCode 值。</p>        <h3 id="hashset"   >          <a href="#hashset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashset"></a> HashSet</h3>      <p><code>HashSet</code>底层：数组+链表的结构。</p><ul><li>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</li><li>不可重复性：保证添加的元素按照<code>equals()</code>判断时，不能返回true。即：相同的元素只能添加一个。</li></ul><p>添加元素的过程：</p><ul><li>向<code>HashSet</code>中添加元素a，首先调用元素a所在类的<code>hashCode</code>()方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在<code>HashSet</code>底层数组中的存放位置（即为：索引位置）；</li><li>判断数组此位置上是否已经有元素：如果此位置上没有其他元素，则元素a添加成功。（情况1）</li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：<ul><li>如果hash值不相同，则元素a添加成功。（情况2）</li><li>如果hash值相同，进而需要调用元素a所在类的<code>equals()</code>方法：<code>equals()</code>返回true，元素a添加失败；<code>equals()</code>返回false，则元素a添加成功。（情况3）</li></ul></li></ul><p>对于添加成功的情况2和情况3而言：元素a与已经存在指定索引位置上数据以<strong>链表</strong>的方式存储。jdk 7：元素a放到数组中，指向原来的元素。jdk 8：原来的元素在数组中，指向元素a</p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617201737187.png" alt="image-20210617201737187" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="linkedhashset"   >          <a href="#linkedhashset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedhashset"></a> LinkedHashSet</h3>      <p><code>LinkedHashSet</code>作为<code>HashSet</code>的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据（类似于双向链表结构）。优点：对于频繁的遍历操作，<code>LinkedHashSet</code>效率高于<code>HashSet</code>。<br /><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210617202602059.png" alt="image-20210617202602059" /></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Set set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">    set.add(<span class="number">456</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="number">123</span>);</span><br><span class="line">    set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="treeset"   >          <a href="#treeset" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#treeset"></a> TreeSet</h3>      <p><code>TreeSet</code>是 <code>SortedSet</code>接口的实现类，<code>TreeSet</code>可以确保集合元素处于排序状态。<code>TreeSet</code>底层使用<strong>红黑树</strong>结构存储数据。特点：有序，查询速度比List快。</p><p>向<code>TreeSet</code>中添加的数据，要求是<strong>相同类</strong>的对象。两种排序方式：自然排序（实现<code>Comparable</code>接口）和定制排序（<code>Comparator</code>）。自然排序中，比较两个对象是否相同的标准为：<code>compareTo()</code>返回0，不再使用<code>equals()</code>。定制排序中，比较两个对象是否相同的标准为：<code>compare()</code>返回0，不再使用<code>equals()</code>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">        <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User u1 = (User)o1;</span><br><span class="line">                User u2 = (User)o2;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数传入Comparator类的对象后将不再使用原先的compareTo方法判断</span></span><br><span class="line">    TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jim&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mike&quot;</span>,<span class="number">65</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Mary&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">33</span>));</span><br><span class="line">    set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">    Iterator iterator = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>List和Set插入数据时判断是否重复的方法：</strong></p><ul><li>List：遍历每个元素，调用其<code>equals()</code>方法判断是否相等。效率较低。</li><li>Set：计算插入数据的哈希值，判断是否已经存在该哈希值，不存在说明没有重复；若存在则调用<code>equals()</code>方法判断是否相等。效率较高。</li></ul>        <h3 id="set的使用"   >          <a href="#set的使用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#set的使用"></a> Set的使用</h3>      <p>List实现类对象和Set实现类对象可以相互转换，用于过滤List中重复的元素</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：在List内去除重复数字值，要求尽量简单</span></span><br><span class="line"><span class="comment">//方法：将List对象赋给Set对象，其会过滤掉重复的元素，再将其转回List</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">duplicateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    List list2 = duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>考察Set接口的底层原理：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="map接口"   >          <a href="#map接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map接口"></a> Map接口</h2>      <p><code>Map</code>：双列数据，存储key-value对的数据</p><ul><li><code>HashMap</code>：作为Map的主要实现类；<strong>线程不安全的（可使用Collections工具类返回线程安全的<code>HashMap</code>），效率高</strong>；可以存储null的key和value；不可以按照添加的顺序实现遍历（<code>HashSet</code>底层是通过<code>HashMap</code>实现的，<code>HashSet</code>中的值就是<code>HashMap</code>中的key）<ul><li><code>LinkedHashMap</code>：继承自<code>HashMap</code>，保证在遍历map元素时，<strong>可以按照添加的顺序实现遍历</strong>。原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行效率高于<code>HashMap</code></li></ul></li><li><code>TreeMap</code>：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序。底层使用<strong>红黑树</strong></li><li><code>Hashtable</code>：作为古老的实现类；<strong>线程安全的，效率低</strong>；不能存储null的key和value；其他实现细节和<code>HashMap</code>一致<ul><li><code>Properties</code>：常用来处理配置文件。key和value都是<code>String</code>类型</li></ul></li></ul><p><code>HashMap</code>的底层：数组+链表 （jdk7及之前）；数组+链表+红黑树 （jdk 8）</p><p>问：</p><ol><li><code>HashMap</code>的底层实现原理？</li><li><code>HashMap</code>和 <code>Hashtable</code>的异同？<ul><li>HashMap是线程不安全的，效率高，可以存储null的key和value</li><li>Hashtable是线程安全的，效率低，不可以存储null的key和value</li></ul></li><li><code>CurrentHashMap</code>与 <code>Hashtable</code>的异同？</li></ol>        <h3 id="map结构的理解"   >          <a href="#map结构的理解" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#map结构的理解"></a> Map结构的理解：</h3>      <p><code>Map</code>中的key：<strong>无序的、不可重复的</strong>，使用<code>Set</code>存储所有的key。key所在的类要重写<code>equals()</code>和<code>hashCode()</code>方法（以HashMap为例）</p><p><code>Map</code>中的value：<strong>无序的、可重复的</strong>，使用<code>Collection</code>存储所有的value。value所在的类要重写<code>equals()</code>方法。</p><p>一个键值对：key-value构成了一个<code>Entry</code>对象。<code>Map</code>中的<code>Entry</code>：<strong>无序的、不可重复的</strong>，使用<code>Set</code>存储所有的<code>Entry</code></p>        <h3 id="hashmap的底层实现原理"   >          <a href="#hashmap的底层实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashmap的底层实现原理"></a> HashMap的底层实现原理</h3>      <blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=552" >https://www.bilibili.com/video/BV1Kb411W75N?p=552</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>以jdk7为例说明：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></div></figure><p>在实例化以后，底层创建了长度是16的一维数组<code>Entry[] table</code>。经过执行过多次put()方法…</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(key1,value1);</span><br></pre></td></tr></table></div></figure><p>首先，调用key1所在类的<code>hashCode()</code>计算key1哈希值，此哈希值经过某种算法计算以后（一些位运算操作），得到在<code>Entry</code>数组中的存放位置。如果此位置上的数据为空，此时的key1-value1添加成功。 ---- 情况1</p><p>如果此位置上的数据不为空(意味着此位置上存在一个或多个数据(以<strong>链表</strong>形式存在))，比较key1和已经存在的一个或多个数据的哈希值：</p><ul><li>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。---- 情况2</li><li>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的<code>equals(key2)</code>方法，比较：<ul><li>如果<code>equals()</code>返回false：此时key1-value1添加成功。----情况3</li><li>如果<code>equals()</code>返回true：使用value1替换value2。</li></ul></li></ul><p>补充：关于情况2和情况3：此时key1-value1和原来的数据以<strong>链表</strong>的方式存储。</p><p>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210625091437538.png" alt="image-20210625091437538" /></p><p><strong>jdk8相较于jdk7在底层实现方面的不同：</strong></p><ol><li><code>new HashMap();</code> 底层没有立刻创建一个长度为16的数组</li><li>jdk 8底层的数组是：<code>Node[]</code>，而非<code>Entry[]</code></li><li>首次调用<code>put()</code>方法时，底层创建长度为16的数组</li><li>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+<strong>红黑树</strong>。<ul><li>形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储（若数组长度 &lt; 64，则数组扩容，不改用红黑树）。</li></ul></li></ol><p><img src="/images/%E3%80%90Java%E3%80%91%E9%9B%86%E5%90%88/image-20210625091347684.png" alt="image-20210625091347684" /></p><p>HashMap内重要常量：</p><ul><li><code>DEFAULT_INITIAL_CAPACITY</code>: <code>HashMap</code>的默认容量，16</li><li><code>DEFAULT_LOAD_FACTOR</code>：<code>HashMap</code>的默认加载因子：0.75</li><li><code>threshold</code>：扩容的临界值，= 容量*填充因子：16 * 0.75 =&gt; 12，大于该值时扩容</li><li><code>TREEIFY_THRESHOLD</code>：<code>Bucket</code>中链表长度大于该默认值，转化为红黑树:8</li><li><code>MIN_TREEIFY_CAPACITY</code>：桶中的<code>Node</code>被树化时最小的hash表容量:64</li></ul><p>问：负载因子值的大小，对HashMap有什么影响？</p><ul><li>负载因子的大小决定了HashMap的数据密度。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长, 造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul>        <h3 id="linkedhashmap的底层实现原理"   >          <a href="#linkedhashmap的底层实现原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#linkedhashmap的底层实现原理"></a> LinkedHashMap的底层实现原理</h3>      <p>继承自<code>HashMap</code>。修改了<code>Entry</code>的内容，增加了两个Entry类型对象代表链表结构中当前对象指向的前后对象。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;<span class="comment">//能够记录添加的元素的先后顺序</span></span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="hashmap常用方法"   >          <a href="#hashmap常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#hashmap常用方法"></a> HashMap常用方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">            Iterator iterator = set.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(Object obj : values)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式一：entrySet()</span></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Set keySet = map.keySet();</span><br><span class="line">        Iterator iterator2 = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator2.hasNext())&#123;</span><br><span class="line">            Object key = iterator2.next();</span><br><span class="line">            Object value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=====&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">// Object get(Object key)</span></span><br><span class="line">        System.out.println(map.get(<span class="number">45</span>));</span><br><span class="line">        <span class="comment">//containsKey(Object key)</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = map.containsKey(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">        isExist = map.containsValue(<span class="number">123</span>);</span><br><span class="line">        System.out.println(isExist);</span><br><span class="line"></span><br><span class="line">        map.clear();</span><br><span class="line"></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>,<span class="number">87</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">&quot;CC&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;DD&quot;</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        Object value = map.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map = null操作不同</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="comment">//        map = new Hashtable();</span></span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="treemap"   >          <a href="#treemap" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#treemap"></a> TreeMap</h3>      <p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象。因为要<strong>按照key进行排序</strong>：自然排序 、定制排序。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的类型不匹配！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">&quot;Rose&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="collections工具类"   >          <a href="#collections工具类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#collections工具类"></a> Collections工具类</h2>      <p>Collections 是一个操作 <code>Set</code>、<code>List</code> 和 <code>Map</code> 等集合的工具类（操作数组的工具类：Arrays）</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作， 还提供了对集合对象设置不可变、对集合对象实现同步控制等方法。</p><p>排序操作：（均为static方法）</p><ul><li><code>reverse(List)</code>：反转<code>List</code>中元素的顺序</li><li><code>shuffle(List)</code>：对<code>List</code>集合元素进行随机排序</li><li><code>sort(List)</code>：根据元素的自然顺序对指定<code>List</code>集合元素按升序排序</li><li><code>sort(List，Comparator)</code>：根据指定的<code>Comparator</code>产生的顺序对<code>List</code>集合元素进行排序</li><li><code>swap(List，int， int)</code>：将指定<code>List</code>集合中的 i 处元素和 j 处元素进行交换</li></ul><p>查找、替换</p><ul><li><code>Object max(Collection)</code>：根据元素的自然顺序，返回给定集合中的最大元素</li><li><code>Object max(Collection，Comparator)</code>：根据 <code>Comparator</code>指定的顺序，返回给定集合中的最大元素</li><li><code>Object min(Collection)</code>：根据元素的自然顺序，返回给定集合中的最小元素</li><li><code>Object min(Collection，Comparator)</code>：根据 <code>Comparator</code>指定的顺序，返回给定集合中的最小元素</li><li><code>int frequency(Collection，Object)</code>：返回指定集合中指定元素的出现次数</li><li><code>void copy(List dest,List src)</code>：将<code>src</code>中的内容复制到<code>dest</code>中</li><li><code>boolean replaceAll(List list，Object oldVal，Object newVal)</code>：使用新值替换 <code>List</code>对象的所有旧值</li></ul><p><strong>同步控制</strong>：<code>Collections</code>类中提供了多个 <code>synchronizedXxx()</code> 方法，该方法可使将指定集合包装成<strong>线程同步</strong>的集合，从而可以解决多线程并发访问集合时的线程安全问题。使用 <code>synchronizedXxx()</code> 方法，将返回一个新的集合类对象，其各个方法都添加了同步代码块：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.hashCode();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.get(index);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;list.add(index, element);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> list.remove(index);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();</span></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line"></span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span></span><br><span class="line"><span class="comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span></span><br><span class="line"><span class="comment">        多线程并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"><span class="comment">//        Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);</span></span><br><span class="line"><span class="comment">//        Collections.swap(list,1,2);</span></span><br><span class="line">        <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(frequency);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>问：Collection 和 Collections的区别？</p><ul><li><code>Collection</code>：集合中的一种接口，其实现类有<code>ArrayList</code>，<code>LinkedArrayList</code>等。</li><li><code>Collections</code>：集合工具类，用于对集合进行排序、查找等操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】String</title>
      <link href="2021/03/16/%E3%80%90Java%E3%80%91String/"/>
      <url>2021/03/16/%E3%80%90Java%E3%80%91String/</url>
      
        <content type="html"><![CDATA[        <h2 id="string的特性"   >          <a href="#string的特性" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string的特性"></a> String的特性</h2>      <p><code>String</code>类：代表字符串。Java 程序中的所有字符串<strong>字面值</strong>（如&quot;abc&quot;）都作为此类的实例实现。</p><ul><li><code>String</code>是一个<strong>final</strong>类，代表<strong>不可变</strong>的<strong>字符序列</strong>，其不可被继承。</li><li>字符串是<strong>常量</strong>，用双引号引起来表示。它们的值在创建之后<strong>不能更改</strong>。</li><li><code>String</code>对象的字符内容是存储在一个<strong>字符数组常量</strong><code>final char value[]</code>中的。</li><li><code>String</code>实现了<code>Serializable</code>接口：表示字符串是支持<strong>序列化</strong>的。实现了<code>Comparable</code>接口：表示<code>String</code>可以<strong>比较大小</strong>。</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625102721429.png" alt="image-20210625102721429" /></p><p><code>String</code>特性的体现：</p><ol><li>当对字符串重新赋值时，需要<strong>重新指定内存区域赋值</strong>，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用<code>String</code>的<code>replace()</code>方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>通过<strong>字面量</strong>（如&quot;abc&quot;）的方式（<strong>区别于new</strong>）给一个字符串赋值，此时的字符串值声明在<strong>字符串常量池</strong>中</li><li>字符串常量池中是<strong>不会存储相同内容</strong>的字符串的。</li></ol><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625102749139.png" alt="image-20210625102749139" /></p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1Kb411W75N?p=451" >https://www.bilibili.com/video/BV1Kb411W75N?p=451</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;abc&quot;</span>; <span class="comment">//字面量的定义方式</span></span><br><span class="line">    String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值 false</span></span><br><span class="line">    System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">    System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">    System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    String s5 = s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">    System.out.println(s5);<span class="comment">//mbc</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="string的实例化方式"   >          <a href="#string的实例化方式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string的实例化方式"></a> String的实例化方式</h2>      <ul><li>方式一：通过<strong>字面量</strong>定义的方式  <code>String str1 = &quot;abc&quot;;</code></li><li>方式二：通过<strong>new + 构造器</strong>的方式  <code>String str2 = new String(&quot;abc&quot;);</code></li></ul><p>二者区别：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103416513.png" alt="image-20210625103416513" /></p><p>字符串对象存储方式：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103432649.png" alt="image-20210625103432649" /></p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103730602.png" alt="image-20210625103730602" /></p><p>字符串的特性：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625103806711.png" alt="image-20210625103806711" /></p><p>结论：</p><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用<code>intern()</code>方法，返回值就在常量池中。</li></ul><p>测试代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span></span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    <span class="comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">    String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;Tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name.equals(p2.name));<span class="comment">//true</span></span><br><span class="line">    System.out.println(p1.name == p2.name);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;Jerry&quot;</span>;</span><br><span class="line">    System.out.println(p2.name);<span class="comment">//Tom</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">    String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">    System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    String s8 = s6.intern();<span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line">    System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    结论：</span></span><br><span class="line"><span class="comment">    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</span></span><br><span class="line"><span class="comment">    2.只要其中有一个是变量，结果就在堆中。</span></span><br><span class="line"><span class="comment">    3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s3 = s2 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String s4 = <span class="string">&quot;javaEE&quot;</span>;<span class="comment">//s4:常量</span></span><br><span class="line">    String s5 = s4 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s5);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>问：<code>String s = new String(&quot;abc&quot;);</code>方式创建对象，在内存中创建了几个对象？</p><p>答：两个。一个是堆空间中<code>new</code>出来的结构，另一个是<code>char[]</code>对应的常量池中的数据<code>&quot;abc&quot;</code></p>        <h2 id="string使用陷阱"   >          <a href="#string使用陷阱" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string使用陷阱"></a> String使用陷阱</h2>      <ul><li><code>String s1 = &quot;a&quot;;</code>说明：在字符串常量池中创建了一个字面量为<code>&quot;a&quot;</code>的字符串。</li><li><code>s1 = s1 + &quot;b&quot;;</code>说明：实际上原来的<code>&quot;a&quot;</code>字符串对象已经丢弃了，现在在堆空间中产生了一个字符串<code>s1+&quot;b&quot;</code>（也就是<code>&quot;ab&quot;</code>)。如果多次执行这些改变串内容的操作，会<strong>导致大量副本字符串对象存留在内存中，降低效率</strong>。如果这样的操作放到循环中，会极大影响程序的性能。</li><li><code>String s2 = &quot;ab&quot;;</code>说明：直接在字符串常量池中创建一个字面量为<code>&quot;ab&quot;</code>的字符串。</li><li><code>String s3 = &quot;a&quot; + &quot;b&quot;;</code>说明：s3指向字符串常量池中已经创建的<code>&quot;ab&quot;</code>的字符串。</li><li><code>String s4 = s1.intern();</code>说明：堆空间的s1对象在调用<code>intern()</code>之后，会将常量池中已经存在的<code>&quot;ab&quot;</code>字符串赋值给s4。</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625105035027.png" alt="image-20210625105035027" /></p><p>面试题：</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625105058682.png" alt="image-20210625105058682" /></p><p>结果：输出 good and best。原因：</p><ul><li><code>ex.str</code>传入<code>change()</code>方法后，在栈中创建了一个局部变量<code>str</code>，其同样指向<code>ex.str</code>所指向的字符串常量&quot;good&quot;，此时<code>str = &quot;test ok&quot;</code>执行后，局部变量str所指向的字符串常量变为&quot;test ok&quot;，但<code>ex.str</code>的内容保持不变（仍然指向字符串常量&quot;good&quot;）；</li><li><code>ex.ch</code>传入<code>change()</code>方法后，在栈中创建了局部变量<code>ch[]</code>，其同样指向<code>ex.ch</code>数组，但修改<code>ch[0]</code>会导致<code>ex.ch</code>的内容同样被修改。</li></ul><p>二者的区别在于：<code>String</code>类对象和<code>char</code>数组对象作为形参传入时都是引用类型，修改形参时原本对象也应该被修改，但<code>String</code>类的不可变性导致修改形参时在常量池中创建了新的字符串内容，因此原本对象内容没有改变，但<code>char</code>数组并无此特性，因此会被修改。</p>        <h2 id="string常用方法"   >          <a href="#string常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string常用方法"></a> String常用方法</h2>      <ul><li><code>int length()</code>：返回字符串的长度： return value.length</li><li><code>char charAt(int index)</code>： 返回某索引处的字符return value[index]</li><li><code>boolean isEmpty()</code>：判断是否是空字符串：return value.length == 0</li><li><code>String toLowerCase()</code>：使用默认语言环境，将 String 中的所有字符转换为小写</li><li><code>String toUpperCase()</code>：使用默认语言环境，将 String 中的所有字符转换为大写</li><li><code>String trim()</code>：返回字符串的副本，忽略前导空白和尾部空白</li><li><code>boolean equals(Object obj)</code>：比较字符串的内容是否相同</li><li><code>boolean equalsIgnoreCase(String anotherString)</code>：与equals方法类似，忽略大小写</li><li><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 等价于用“+”</li><li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小</li><li><code>String substring(int beginIndex)</code>：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。</li><li><code>String substring(int beginIndex, int endIndex)</code> ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li><li><code>boolean endsWith(String suffix)</code>：测试此字符串是否以指定的后缀结束</li><li><code>boolean startsWith(String prefix)</code>：测试此字符串是否以指定的前缀开始</li><li><code>boolean startsWith(String prefix, int toffset)</code>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li><li><code>boolean contains(CharSequence s)</code>：当且仅当此字符串包含指定的 char 值序列时，返回 true</li></ul>        <h3 id="索引"   >          <a href="#索引" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#索引"></a> 索引</h3>      <ul><li><code>int indexOf(String str)</code>：返回指定子字符串在此字符串中第一次出现处的索引</li><li><code>int indexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li><li><code>int lastIndexOf(String str)</code>：返回指定子字符串在此字符串中最右边出现处的索引</li><li><code>int lastIndexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</li></ul><p>注：<code>indexOf</code>和<code>lastIndexOf</code>方法如果未找到都是返回-1</p>        <h3 id="替换"   >          <a href="#替换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#替换"></a> 替换</h3>      <ul><li><code>String replace(char oldChar, char newChar)</code>：返回一个新的字符串，它是通过用 <code>newChar</code>替换此字符串中出现的所有 <code>oldChar</code>得到的。</li><li><code>String replace(CharSequence target, CharSequence replacement)</code>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li><li><code>String replaceAll(String regex, String replacement)</code>：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li><code>String replaceFirst(String regex, String replacement)</code>：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ul>        <h3 id="匹配"   >          <a href="#匹配" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#匹配"></a> 匹配</h3>      <ul><li><code>boolean matches(String regex)</code>：告知此字符串是否匹配给定的正则表达式。</li></ul>        <h3 id="切片"   >          <a href="#切片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3>      <ul><li><code>String[] split(String regex)</code>：根据给定正则表达式的匹配拆分此字符串。</li><li><code>String[] split(String regex, int limit)</code>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    替换：</span></span><br><span class="line"><span class="comment">    String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="comment">    String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="comment">    String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="comment">    String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="comment">    匹配:</span></span><br><span class="line"><span class="comment">    boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="comment">    切片：</span></span><br><span class="line"><span class="comment">    String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="comment">    String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;北京教育北京&quot;</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">&#x27;北&#x27;</span>, <span class="string">&#x27;东&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line"></span><br><span class="line">        String str3 = str1.replace(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        String str = <span class="string">&quot;12hello34world5java7891mysql456&quot;</span>;</span><br><span class="line">        <span class="comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span></span><br><span class="line">        String string = str.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;,&quot;</span>).replaceAll(<span class="string">&quot;^,|,$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">        <span class="keyword">boolean</span> matches = str.matches(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        System.out.println(matches);</span><br><span class="line">        String tel = <span class="string">&quot;0571-4534289&quot;</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tel.matches(<span class="string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************&quot;</span>);</span><br><span class="line">        str = <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        str2 = <span class="string">&quot;hello.world.java&quot;</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs2.length; i++) &#123;</span><br><span class="line">            System.out.println(strs2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="comment">    boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="comment">    boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="comment">    boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</span></span><br><span class="line"><span class="comment">    int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="comment">    int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="comment">    int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="comment">    int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="comment">    注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">&quot;hellowworld&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = str1.endsWith(<span class="string">&quot;rld&quot;</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = str1.startsWith(<span class="string">&quot;He&quot;</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = str1.startsWith(<span class="string">&quot;ll&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">&quot;wor&quot;</span>;</span><br><span class="line">        System.out.println(str1.contains(str2));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lol&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">&quot;lo&quot;</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        String str3 = <span class="string">&quot;hellorworld&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>));</span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">&quot;or&quot;</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span></span><br><span class="line">        <span class="comment">//情况一：存在唯一的一个str。情况二：不存在str</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int length()：返回字符串的长度： return value.length</span></span><br><span class="line"><span class="comment">    char charAt(int index)： 返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment">    boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line"><span class="comment">    String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line"><span class="comment">    String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line"><span class="comment">    String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment">    boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line"><span class="comment">    boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment">    String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line"><span class="comment">    int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment">    String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="comment">    String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s4 = s3.concat(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        String s5 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(<span class="string">&quot;abe&quot;</span>);</span><br><span class="line">        System.out.println(s5.compareTo(s6));<span class="comment">//涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line">        String s7 = <span class="string">&quot;北京尚硅谷教育&quot;</span>;</span><br><span class="line">        String s8 = s7.substring(<span class="number">2</span>);</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">        System.out.println(s8);</span><br><span class="line"></span><br><span class="line">        String s9 = s7.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s9);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">        System.out.println(s1.length());</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>));</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">9</span>));</span><br><span class="line"><span class="comment">//        System.out.println(s1.charAt(10));</span></span><br><span class="line"><span class="comment">//        s1 = &quot;&quot;;</span></span><br><span class="line">        System.out.println(s1.isEmpty());</span><br><span class="line"></span><br><span class="line">        String s2 = s1.toLowerCase();</span><br><span class="line">        System.out.println(s1);<span class="comment">//s1不可变的，仍然为原来的字符串</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//改成小写以后的字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">&quot;   he  llo   world   &quot;</span>;</span><br><span class="line">        String s4 = s3.trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s3 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span> + s4 + <span class="string">&quot;-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="string与其他数据类型转换"   >          <a href="#string与其他数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与其他数据类型转换"></a> String与其他数据类型转换</h2>              <h3 id="string与基本数据类型转换"   >          <a href="#string与基本数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与基本数据类型转换"></a> String与基本数据类型转换</h3>      <ul><li>字符串 ——&gt; 基本数据类型、包装类<ul><li><code>Integer</code>包装类的<code>public static int parseInt(String s)</code>：可以将由“数字”字符组成的字符串转换为整型。</li><li>类似地，使用<code>java.lang</code>包中的<code>Byte</code>、<code>Short</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。</li></ul></li><li>基本数据类型、包装类 ——&gt; 字符串<ul><li>调用<code>String</code>类的<code>public static String valueOf(int n)</code>可将int型转换为字符串</li><li><code>valueOf(byte b)</code>、<code>valueOf(long l)</code>、<code>valueOf(float f)</code>、<code>valueOf(double d)</code>、<code>valueOf(boolean b)</code>可由参数的相应类型到字符串的转换</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串 ——&gt; 基本数据类型、包装类 </span></span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本数据类型、包装类 ——&gt; 字符串 </span></span><br><span class="line">String str1 = String.valueOf(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">String str2 = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(str1 == str2); <span class="comment">//false 有String变量参与的运算都会new新的对象</span></span><br></pre></td></tr></table></div></figure>        <h3 id="string与字符数组char转换"   >          <a href="#string与字符数组char转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与字符数组char转换"></a> String与字符数组char[]转换</h3>      <ul><li>字符数组<code>char[]</code> ——&gt; 字符串<ul><li><code>String</code>类的构造器：<code>String(char[]) 和 String(char[]，int offset，int length)</code>分别用字符数组中的全部字符和部分字符创建字符串对象。</li></ul></li><li>字符串 ——&gt; 字符数组<code>char[]</code><ul><li><code>public char[] toCharArray()</code>：将字符串中的全部字符存放在一个字符数组中的方法。</li><li><code>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code>：提供了将指定索引范围内的字符串存放到数组中的方法。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符数组char[] ——&gt; 字符串</span></span><br><span class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">String str1 = <span class="keyword">new</span> String(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串 ——&gt; 字符数组char[]</span></span><br><span class="line">String str2 = <span class="string">&quot;abc123&quot;</span>;  </span><br><span class="line"><span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br></pre></td></tr></table></div></figure>        <h3 id="string与字节数组转换"   >          <a href="#string与字节数组转换" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string与字节数组转换"></a> String与字节数组转换</h3>      <ul><li>字节数组 ——&gt; 字符串<ul><li><code>String(byte[])</code>：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 <code>String</code>。</li><li><code>String(byte[]，int offset，int length)</code>：用指定的字节数组的一部分， 即从数组起始位置offset开始取length个字节构造一个字符串对象。</li></ul></li><li>字符串  ——&gt; 字节数组<ul><li><code>public byte[] getBytes()</code> ：使用平台的默认字符集将此 <code>String</code>编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li><li><code>public byte[] getBytes(String charsetName)</code> ：使用指定的字符集将此 <code>String</code>编码到 byte 序列，并将结果存储到新的 byte 数组。</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节数组 ——&gt; 字符串</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">System.out.println(str2);</span><br><span class="line"></span><br><span class="line">String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line"></span><br><span class="line">String str4 = <span class="keyword">new</span> String(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">System.out.println(str4);<span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串  ——&gt; 字节数组</span></span><br><span class="line">String str1 = <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(); <span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="stringbuffer和stringbuilder"   >          <a href="#stringbuffer和stringbuilder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer和stringbuilder"></a> StringBuffer和StringBuilder</h2>              <h3 id="stringbuffer"   >          <a href="#stringbuffer" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer"></a> StringBuffer</h3>      <p><code>java.lang.StringBuffer</code>代表<strong>可变</strong>的字符序列，JDK1.0中声明，可以对字符串内容进行增删，此时<strong>不会产生新的对象</strong>。很多方法与<code>String</code>相同。作为参数传递时，方法内部可以改变值。</p><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625131148661.png" alt="image-20210625131148661" /></p><p><code>StringBuffer</code>类不同于<code>String</code>，其对象必须使用构造器生成。有三个构造器：</p><ul><li><code>StringBuffer()</code>：初始容量为16的字符串缓冲区</li><li><code>StringBuffer(int size)</code>：构造指定容量的字符串缓冲区</li><li><code>StringBuffer(String str)</code>：将内容初始化为指定字符串内容</li></ul><p><img src="/images/%E3%80%90Java%E3%80%91String/image-20210625131436828.png" alt="image-20210625131436828" /></p>        <h3 id="stringbuffer的常用方法"   >          <a href="#stringbuffer的常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuffer的常用方法"></a> StringBuffer的常用方法</h3>      <ul><li><code>StringBuffer append(xxx)</code>：提供了很多的append()方法，用于进行字符串拼接</li><li><code>StringBuffer delete(int start,int end)</code>：删除指定位置的内容</li><li><code>StringBuffer replace(int start, int end, String str)</code>：把[start,end)位置替换为str</li><li><code>StringBuffer insert(int offset, xxx)</code>：在指定位置插入xxx</li><li><code>StringBuffer reverse()</code> ：把当前字符序列逆转</li><li><code>public int indexOf(String str)</code></li><li><code>public String substring(int start,int end)</code>:返回一个从start开始到end索引结束的左闭右开区间的子字符串</li><li><code>public int length()</code></li><li><code>public char charAt(int n )</code></li><li><code>public void setCharAt(int n ,char ch)</code></li></ul><p>当<code>append</code>和<code>insert</code>时，如果原来value数组长度不够，可扩容</p><p>总结：</p><ul><li>增：<code>append(xxx)</code></li><li>删：<code>delete(int start,int end)</code></li><li>改：<code>setCharAt(int n ,char ch) / replace(int start, int end, String str)</code></li><li>查：<code>charAt(int n )</code></li><li>插：<code>insert(int offset, xxx)</code></li><li>长度：<code>length()</code></li><li>*遍历：<code>for() + charAt() / toString()</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuffer s1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    s1.append(<span class="number">1</span>);</span><br><span class="line">    s1.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">    <span class="comment">// s1.delete(2,4);</span></span><br><span class="line">    <span class="comment">//s1.replace(2,4,&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">//s1.insert(2,false);</span></span><br><span class="line">    <span class="comment">//s1.reverse();</span></span><br><span class="line">    String s2 = s1.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">    System.out.println(s1.length());</span><br><span class="line">    System.out.println(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stringbuilder"   >          <a href="#stringbuilder" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#stringbuilder"></a> StringBuilder</h3>      <p><code>StringBuilder</code>和 <code>StringBuffer</code>非常类似，均代表<strong>可变</strong>的字符序列，而且提供相关功能的方法也一样。</p>        <h3 id="string-stringbuffer-stringbuilder三者的异同"   >          <a href="#string-stringbuffer-stringbuilder三者的异同" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#string-stringbuffer-stringbuilder三者的异同"></a> String、StringBuffer、StringBuilder三者的异同</h3>      <ul><li><code>String</code>:<strong>不可变</strong>的字符序列；底层使用<strong>final</strong> char[]存储</li><li><code>StringBuffer</code>:<strong>可变</strong>的字符序列；<strong>线程安全的，效率低</strong>；底层使用char[]存储</li><li><code>StringBuilder</code>:<strong>可变</strong>的字符序列；jdk5.0新增的，<strong>线程不安全的，效率高</strong>；底层使用char[]存储</li></ul><p>对比String、StringBuffer、StringBuilder三者的效率：<strong>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</strong></p><p>注意：作为参数传递时，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值（因为其内的<code>char[] value</code>不是<code>final</code>的）。</p><p><strong>源码分析：</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">System.out.println(sb1.length());<span class="comment">//0</span></span><br><span class="line">sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br></pre></td></tr></table></div></figure><ul><li>问题1. <code>System.out.println(sb2.length());</code> 答：3</li><li>问题2. 扩容问题：如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的<strong>2倍 + 2</strong>，<strong>同时将原有数组中的元素复制到新的数组中</strong>。</li></ul><p>开发中建议使用：<code>StringBuffer(int capacity)</code> 或<code>StringBuilder(int capacity)</code>。提前将容量设置好，以免扩容时复制元素造成时间浪费。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Java常用类</title>
      <link href="2021/03/15/%E3%80%90Java%E3%80%91Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>2021/03/15/%E3%80%90Java%E3%80%91Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[        <h2 id="日期时间类"   >          <a href="#日期时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#日期时间类"></a> 日期时间类</h2>              <h3 id="jdk-8之前的日期时间类"   >          <a href="#jdk-8之前的日期时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdk-8之前的日期时间类"></a> JDK 8之前的日期时间类</h3>      <ul><li><code>System</code>类中<code>currentTimeMillis()</code></li><li><code>java.util.Date</code>和子类<code>java.sql.Date</code></li><li><code>SimpleDateFormat</code></li><li><code>Calendar</code></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.System类中的currentTimeMillis()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line">        <span class="comment">//称为时间戳</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Date类</span></span><br><span class="line"><span class="comment">           |---java.sql.Date类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.两个构造器的使用</span></span><br><span class="line"><span class="comment">        &gt;构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line"><span class="comment">        &gt;构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment">    2.两个方法的使用</span></span><br><span class="line"><span class="comment">        &gt;toString():显示当前的年、月、日、时、分、秒</span></span><br><span class="line"><span class="comment">        &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3. java.sql.Date对应着数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment">        &gt;如何实例化</span></span><br><span class="line"><span class="comment">        &gt;如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line"></span><br><span class="line">        System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">155030620410L</span>);</span><br><span class="line">        System.out.println(date2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">        System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line">        <span class="comment">// Date date4 = new java.sql.Date(2343243242323L);</span></span><br><span class="line">        <span class="comment">// java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk 8之前的日期时间的API测试</span></span><br><span class="line"><span class="comment"> * 1. System类中currentTimeMillis();</span></span><br><span class="line"><span class="comment"> * 2. java.util.Date和子类java.sql.Date</span></span><br><span class="line"><span class="comment"> * 3. SimpleDateFormat</span></span><br><span class="line"><span class="comment"> * 4. Calendar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.两个操作：</span></span><br><span class="line"><span class="comment">    1.1 格式化：日期 ---&gt;字符串</span></span><br><span class="line"><span class="comment">    1.2 解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.SimpleDateFormat的实例化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleDateFormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//实例化SimpleDateFormat:使用默认的构造器</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化：日期 ---&gt;字符串</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line">        String str = <span class="string">&quot;19-12-18 上午11:43&quot;</span>;</span><br><span class="line">        Date date1 = sdf.parse(str);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2019-02-18 11:48:27</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">&quot;2020-02-18 11:48:27&quot;</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Calendar日历类(抽象类）的使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCalendar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.实例化</span></span><br><span class="line">        <span class="comment">//方式一：创建其子类（GregorianCalendar）的对象</span></span><br><span class="line">        <span class="comment">//方式二：调用其静态方法getInstance()</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"><span class="comment">//        System.out.println(calendar.getClass());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.常用方法</span></span><br><span class="line">        <span class="comment">//get()</span></span><br><span class="line">        <span class="keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_YEAR));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set()</span></span><br><span class="line">        <span class="comment">//calendar可变性</span></span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add()</span></span><br><span class="line">        calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getTime():日历类---&gt; Date</span></span><br><span class="line">        Date date = calendar.getTime();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//setTime():Date ---&gt; 日历类</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        calendar.setTime(date1);</span><br><span class="line">        days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="jdk-8中新时间类"   >          <a href="#jdk-8中新时间类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#jdk-8中新时间类"></a> JDK 8中新时间类</h3>      <ul><li><code>LocalDate</code></li><li><code>LocalTime</code></li><li><code>LocalDateTime</code>（常用）</li><li><code>DateTimeFormatter</code>（类似<code>SimpleTimeFormat</code>）</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk 8中日期时间API的测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDK8DateTimeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date(<span class="number">2020</span> - <span class="number">1900</span>,<span class="number">9</span> - <span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(date1);<span class="comment">//Tue Sep 08 00:00:00 GMT+08:00 2020</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    LocalDate、LocalTime、LocalDateTime 的使用</span></span><br><span class="line"><span class="comment">    说明：</span></span><br><span class="line"><span class="comment">        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高</span></span><br><span class="line"><span class="comment">        2.类似于Calendar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取当前的日期、时间、日期+时间</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span></span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">43</span>);</span><br><span class="line">        System.out.println(localDateTime1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getXxx()：获取相关的属性</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfMonth());</span><br><span class="line">        System.out.println(localDateTime.getDayOfWeek());</span><br><span class="line">        System.out.println(localDateTime.getMonth());</span><br><span class="line">        System.out.println(localDateTime.getMonthValue());</span><br><span class="line">        System.out.println(localDateTime.getMinute());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//体现不可变性</span></span><br><span class="line">        <span class="comment">//withXxx():设置相关的属性</span></span><br><span class="line">        LocalDate localDate1 = localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">        System.out.println(localDate1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime2 = localDateTime.withHour(<span class="number">4</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        LocalDateTime localDateTime3 = localDateTime.plusMonths(<span class="number">3</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime3);</span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime4 = localDateTime.minusDays(<span class="number">6</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(localDateTime4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Instant的使用</span></span><br><span class="line"><span class="comment">    类似于 java.util.Date类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取本初子午线对应的标准时间</span></span><br><span class="line">        Instant instant = Instant.now();</span><br><span class="line">        System.out.println(instant);<span class="comment">//2019-02-18T07:29:41.719Z</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加时间的偏移量</span></span><br><span class="line">        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(offsetDateTime);<span class="comment">//2019-02-18T15:32:50.611+08:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span></span><br><span class="line">        <span class="keyword">long</span> milli = instant.toEpochMilli();</span><br><span class="line">        System.out.println(milli);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span></span><br><span class="line">        Instant instant1 = Instant.ofEpochMilli(<span class="number">1550475314878L</span>);</span><br><span class="line">        System.out.println(instant1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    DateTimeFormatter:格式化或解析日期、时间</span></span><br><span class="line"><span class="comment">    类似于SimpleDateFormat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">//格式化:日期--&gt;字符串</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        String str1 = formatter.format(localDateTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(str1);<span class="comment">//2019-02-18T15:42:18.797</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串 --&gt;日期</span></span><br><span class="line">        TemporalAccessor parse = formatter.parse(<span class="string">&quot;2019-02-18T15:42:18.797&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        方式二：</span></span><br><span class="line"><span class="comment">//        本地化相关的格式。如：ofLocalizedDateTime()</span></span><br><span class="line"><span class="comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str2 = formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);<span class="comment">//2019年2月18日 下午03时47分16秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//      本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str3 = formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2019-2-18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span></span><br><span class="line">        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);<span class="comment">//2019-02-18 03:52:09</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        TemporalAccessor accessor = formatter3.parse(<span class="string">&quot;2019-02-18 03:52:09&quot;</span>);</span><br><span class="line">        System.out.println(accessor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="比较器"   >          <a href="#比较器" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#比较器"></a> 比较器</h2>      <ul><li>自然排序：<code>Comparable</code>接口，让类本身修改代码以实现排序</li><li>定制排序：<code>Comparator</code>接口</li></ul>        <h3 id="comparable"   >          <a href="#comparable" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#comparable"></a> Comparable</h3>      <p>像String、包装类等实现了<code>Comparable</code>接口，重写了<code>compareTo(obj)</code>方法，给出了比较两个对象大小的方式。重写<code>compareTo(obj)</code>的规则：</p><ul><li>如果当前对象this大于形参对象obj，则返回正整数</li><li>如果当前对象this小于形参对象obj，则返回负整数</li><li>如果当前对象this等于形参对象obj，则返回零。</li></ul><p>对于自定义类来说，如果需要排序，我们可以让自定义类实现<code>Comparable</code>接口，重写<code>compareTo(obj)</code>方法。在<code>compareTo(obj)</code>方法中指明如何排序。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> xxx)&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 比较大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="comparator"   >          <a href="#comparator" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#comparator"></a> Comparator</h3>      <p>当元素的类型没有实现<code>Comparable</code>接口而又不方便修改代码，或者实现了<code>Comparable</code>接口的排序规则不适合当前的操作，那么可以考虑使用 <code>Comparator</code>的对象来排序。重写 <code>Comparator</code>对象的<code>compare(Object o1, Object o2</code>)方法，比较o1和o2的大小：</p><ul><li>如果方法返回正整数，则表示o1大于o2；</li><li>如果返回0，表示相等；</li><li>返回负整数，表示o1小于o2。</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;KK&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;JJ&quot;</span>,<span class="string">&quot;DD&quot;</span>&#125;;</span><br><span class="line">    Arrays.sort(arr,<span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">        <span class="comment">//按照字符串从大到小的顺序排列</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span>  String)&#123;</span><br><span class="line">                String s1 = (String) o1;</span><br><span class="line">                String s2 = (String) o2;</span><br><span class="line">                <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】多线程</title>
      <link href="2021/03/14/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2021/03/14/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="创建多线程"   >          <a href="#创建多线程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#创建多线程"></a> 创建多线程</h2>      <p>创建多线程有四种方式：</p><ul><li>继承<code>Thread</code>类</li><li>实现<code>Runnable</code>接口</li><li>实现<code>Callable</code>接口</li><li>使用线程池</li></ul>        <h3 id="方式一继承thread类"   >          <a href="#方式一继承thread类" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一继承thread类"></a> 方式一：继承Thread类</h3>      <ol><li>创建一个继承于<code>Thread</code>类的子类</li><li>重写<code>Thread</code>类的<code>run()</code> --&gt; 将此线程执行的操作声明在<code>run()</code>中</li><li>创建<code>Thread</code>类的子类的对象</li><li>通过此对象调用<code>start()</code></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line">        <span class="comment">// t1.run();</span></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line">        <span class="comment">// t1.start();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot;***********main()************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="方式二实现runnable接口"   >          <a href="#方式二实现runnable接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二实现runnable接口"></a> 方式二：实现Runnable接口</h3>      <ol><li>创建一个实现了<code>Runnable</code>接口的类</li><li>实现类去实现<code>Runnable</code>中的抽象方法：<code>run()</code></li><li>创建实现类的对象</li><li>将此对象作为参数传递到<code>Thread</code>类的构造器中，创建<code>Thread</code>类的对象</li><li>通过Thread类的对象调用<code>start()</code></li></ol><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MyThread mThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>重点：Thread类实现了Runnable接口，该方法本质上使用了静态代理的设计模式</strong>：Thread类实现了Runnable接口中的run()方法，调用Thread的run()方法时，会调用在构造器中传入的自定义类的run()方法，因此是一种静态代理的设计模式</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread类的run()方法，其中target时构造方法中传入的自定义类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class MyThread implements Runnable&#123;&#125; <span class="comment">//相当于被代理类</span></span><br><span class="line">Class Thread implements Runnable&#123;&#125;   <span class="comment">//相当于代理类</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">MyThread t = <span class="keyword">new</span> MyThread();   <span class="comment">//创建被代理类对象</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(t); <span class="comment">//创建代理类，执行start方法时会调用接口的run()方法</span></span><br><span class="line">thread.start(); <span class="comment">//启动线程；调用线程的run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>比较创建线程的两种方式。开发中优先选择：实现<code>Runnable</code>接口的方式。原因：</p><ol><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有<strong>共享数据</strong>的情况。</li></ol><p>相同点：两种方式都需要重写<code>run()</code>，将线程要执行的逻辑声明在<code>run()</code>中。</p><span id="more"></span>        <h3 id="方式三实现callable接口"   >          <a href="#方式三实现callable接口" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三实现callable接口"></a> 方式三：实现Callable接口</h3>      <p>和<code>Runnable</code>相比，<code>Callable</code>功能更强大：</p><ul><li>相比<code>run()</code>方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助<code>FutureTask</code>类，比如获取返回结果</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 3. 创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将此Callable接口的实现类的对象传递到FutureTask构造器中</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 将FutureTask类对象作为参数传递到Thread类的构造器中，创建对象并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 获取Callable中call方法的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="方式四使用线程池"   >          <a href="#方式四使用线程池" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式四使用线程池"></a> 方式四：使用线程池</h3>      <p>经常创建和销毁、使用量特别大的资源，比如并发情况下线程对性能影响很大。思路： 提前创建好多个线程，放入池中使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。好处：</p><ul><li>提高响应速度 （减少了创建新线程的时间）</li><li>降低资源消耗 （重复利用线程池中，不需要每次都创建）</li><li>便于线程管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务时最多保持长间后会 终止</li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并使用多线程的第四种方法：使用线程池</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1.调用Executors的newFixedThreadPool(),返回指定线程数量的ExecutorService</span></span><br><span class="line">      ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 2.将Runnable实现类的对象作为形参传递给ExecutorService的submit()方法中，开启线程并执行相关的run()</span></span><br><span class="line">      pool.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">     </span><br><span class="line">      <span class="comment">// pool.submit(Callable callable);</span></span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 3.结束线程的使用</span></span><br><span class="line">      pool.shutdown();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 设置线程池属性</span></span><br><span class="line">      ThreadPoolExecutor service1 = (ThreadPoolExecutor)service;</span><br><span class="line">      service1.setCorePoolSize(<span class="number">15</span>);</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="thread类中常用方法"   >          <a href="#thread类中常用方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#thread类中常用方法"></a> Thread类中常用方法</h2>      <p><code>Thread</code>中的常用方法：</p><ul><li><code>start()</code>:启动当前线程；调用当前线程的<code>run()</code></li><li><code>run()</code>: 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li><code>currentThread()</code>:静态方法，返回执行当前代码的线程</li><li><code>getName()</code>:获取当前线程的名字</li><li><code>setName()</code>:设置当前线程的名字</li><li><code>yield()</code>:释放当前cpu的执行权，释放后所有线程重新竞争cpu执行权</li><li><code>join()</code>:在线程a中调用线程b的<code>join()</code>，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li><li><code>stop()</code>:已过时。当执行此方法时，强制结束当前线程。</li><li><code>sleep(long millitime)</code>:让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li><li><code>isAlive()</code>:判断当前线程是否存活</li></ul><p>线程的优先级：</p><ul><li><code>MAX_PRIORITY</code>：10</li><li><code>MIN_PRIORITY</code>：1</li><li><code>NORM_PRIORITY</code>：5  --&gt;默认优先级</li></ul><p>如何获取和设置当前线程的优先级：</p><ul><li><code>getPriority()</code>:获取线程的优先级</li><li><code>setPriority(int p)</code>:设置线程的优先级</li></ul><p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p>        <h2 id="线程的生命周期"   >          <a href="#线程的生命周期" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程的生命周期"></a> 线程的生命周期</h2>      <p><img src="/images/%E3%80%90Java%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20210615154527649.png" alt="image-20210615154527649" /></p>        <h2 id="解决线程安全问题"   >          <a href="#解决线程安全问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#解决线程安全问题"></a> 解决线程安全问题</h2>              <h3 id="方式一同步代码块"   >          <a href="#方式一同步代码块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式一同步代码块"></a> 方式一：同步代码块</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">// 需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低（局限性）。说明：</p><ol><li>操作共享数据的代码，即为需要被同步的代码。不能包含代码多了，也不能包含代码少了。</li><li>共享数据：多个线程共同操作的变量。</li><li>同步监视器，俗称：<strong>锁</strong>。<strong>任何一个类的对象，都可以充当锁</strong>。</li></ol><p>要求：<strong>多个线程必须要共用同一把锁（同步监视器）</strong>：</p><ul><li>在实现<code>Runnable</code>接口创建多线程的方式中，我们可以考虑使用<code>this</code>充当同步监视器。因为<code>Runnable</code>类对象被多个<code>Thread</code>类对象所共享，所以多个线程共用同一把锁。</li><li>在继承<code>Thread</code>类创建多线程的方式中，因为多个线程类对象本身不能共享数据，因此需要设置一个<code>static</code>修饰的对象作为锁，或使用反射方式<code>xxx.class</code>作为锁。</li></ul><p>实现Runnable接口例子：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123; <span class="comment">//此时的this:唯一的Window1的对象，也可以用其他任意类对象作为锁</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>若使用继承<code>Thread</code>类的方式，需要在类中设置一个<code>static</code>对象作为锁，或使用反射方式<code>Window1.class</code>。</p>        <h3 id="方式二同步方法"   >          <a href="#方式二同步方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式二同步方法"></a> 方式二：同步方法</h3>      <p>同步方法仍然涉及到同步监视器，只是不需要显示声明：</p><ul><li>非静态的同步方法（适用于实现<code>Runnable</code>接口），同步监视器是：<code>this</code></li><li>静态的同步方法（适用于继承<code>Thread</code>类），同步监视器是：当前类本身</li></ul><p>非静态的同步方法（适用于实现<code>Runnable</code>接口）：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 在while循环内加锁</span></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器：this</span></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>静态的同步方法（适用于继承<code>Thread</code>类）：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器：Window3.class</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="方式三lock锁"   >          <a href="#方式三lock锁" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#方式三lock锁"></a> 方式三：Lock锁</h3>      <p>解决线程安全问题的方式三：Lock锁  — JDK5.0新增</p><p><code>synchronized</code>与<code>Lock</code>的区别：</p><ul><li><code>synchronized</code>：在执行完同步代码以后自动释放同步监视器</li><li><code>Lock</code>：需要手动开启同步<code>lock()</code>，结束时需要手动<code>unlock()</code></li></ul><p>优先使用顺序：<code>Lock</code>——&gt; 同步代码块（已经进入了方法体，分配了相应资源）——&gt; 同步方法（在方法体之外）</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>死锁的理解：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。</p>        <h2 id="线程安全的懒汉式单例模式"   >          <a href="#线程安全的懒汉式单例模式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程安全的懒汉式单例模式"></a> 线程安全的懒汉式单例模式</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">                instance = new Bank();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return instance;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：效率更高，如果实例对象已经非空，说明已经造好了对象，不需要再进入同步代码块内</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="线程的通信"   >          <a href="#线程的通信" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#线程的通信"></a> 线程的通信</h2>      <p>涉及到的三个方法：</p><ul><li><code>wait()</code>：一旦执行此方法，当前线程就进入阻塞状态，<strong>并释放同步监视器</strong></li><li><code>notify()</code>：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li><li><code>notifyAll()</code>：一旦执行此方法，就会唤醒所有被wait的线程</li></ul><p>注意：</p><ul><li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>这三个方法必须使用在<strong>同步代码块或同步方法中</strong>；</li><li>三者的调用者必须是同步代码块或同步方法中的同步监视器，否则会出现<code>IllegalMonitorStateException</code>异常；</li><li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>这三个方法是定义在<code>java.lang.Object</code>类中。</li></ul><p>例子：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程通信的例子：使用两个线程交替打印1-100</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 涉及到三个方法：</span></span><br><span class="line"><span class="comment"> *  wait()：一旦执行此方法，当前线程就进入阻塞状态，**并释放同步监视器**</span></span><br><span class="line"><span class="comment"> *  notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</span></span><br><span class="line"><span class="comment"> *  notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// 唤醒其他所有线程</span></span><br><span class="line">                notifyAll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (number &lt; <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 使得调用wait()方法的线程进入阻塞状态，同时释放锁</span></span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>sleep()和wait()的异同</strong>：</p><ul><li>相同点：一旦执行方法，都可以使得当前线程进入阻塞状态</li><li>不同点：<ul><li>两个方法声明的位置不同：<code>Thread</code>类声明<code>sleep()</code>，<code>Object</code>类中声明<code>wait()</code></li><li>调用的要求不同：<code>sleep()</code>可以在任何需要的场景下调用，<code>wait()</code>必须在同步代码块或同步方法中调用</li><li>关于是否释放同步监视器：如果两个方法都是用在同步代码块或同步方法中，<code>sleep()</code>不会释放锁，<code>wait()</code>会释放锁</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】数据类型</title>
      <link href="2021/03/12/%E3%80%90Java%E3%80%91%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/03/12/%E3%80%90Java%E3%80%91%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[        <h2 id="整数类型扩展"   >          <a href="#整数类型扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#整数类型扩展"></a> 整数类型扩展</h2>      <p>整数进制：</p><ul><li>二进制：0b10，对应对应十进制2</li><li>十进制：10</li><li>八进制：010，对应十进制8</li><li>十六进制：0x10，对应十进制16</li></ul><p>多个不同整数类型的变量相加时，若其中有一个long类型，则相加结果为long；否则都为int类型。</p>        <h2 id="浮点数类型扩展"   >          <a href="#浮点数类型扩展" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#浮点数类型扩展"></a> 浮点数类型扩展</h2>      <p>使用浮点数时应注意，银行业务中不能使用float和double类型。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 理论上f和d应该相等</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是结果输出false</span></span><br><span class="line">System.out.println(f == d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">2158452165841256123584f</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = f1 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果输出true</span></span><br><span class="line">System.out.println(f1 == f2);</span><br></pre></td></tr></table></div></figure><p>浮点数float类型占32字节，double类型占64字节，其位数有限、是离散的、有舍入误差的，因此容易出现数值溢出的情况。两个浮点数可能很接近但不严格相等。</p><p>使用BigDecimal类进行判断。</p><p>float和double类型的变量相加时，结果为double类型。</p>        <h2 id="字符类型"   >          <a href="#字符类型" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h2>      <p>编码类型：Unicode  2字节，范围0-65536</p><p>转义字符：</p><ul><li><p>\t  制表符</p></li><li><p>\n  换行</p><p>基本数据类型：<br />整型：byte \ short \ int \ long<br />浮点型：float \ double<br />字符型：char<br />布尔型：boolean</p><p>引用数据类型：<br />类(class)<br />接口(interface)<br />数组(array)</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableTest1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)</span></span><br><span class="line"><span class="comment">//① byte范围：-128 ~ 127</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = -<span class="number">128</span>;</span><br><span class="line"><span class="comment">//b2 = 128;//编译不通过</span></span><br><span class="line">System.out.println(b1);</span><br><span class="line">System.out.println(b2);</span><br><span class="line"><span class="comment">// ② 声明long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾</span></span><br><span class="line"><span class="comment">// ③ 通常，定义整型变量时，使用int型。</span></span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">long</span> l1 = <span class="number">3414234324L</span>;</span><br><span class="line">System.out.println(l1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 浮点型：float(4字节) \ double(8字节)</span></span><br><span class="line"><span class="comment">//① 浮点型，表示带小数点的数值</span></span><br><span class="line"><span class="comment">//② float表示数值的范围比long还大</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.3</span>;</span><br><span class="line">System.out.println(d1 + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//③ 定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3F</span>;</span><br><span class="line">System.out.println(f1);</span><br><span class="line"><span class="comment">//④ 通常，定义浮点型变量时，使用double型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 字符型：char (1字符=2字节)</span></span><br><span class="line"><span class="comment">//① 定义char型变量，通常使用一对&#x27;&#x27;,内部只能写一个字符</span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//c1 = &#x27;AB&#x27;;</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c4 = <span class="string">&#x27;ス&#x27;</span>;</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println(c3);</span><br><span class="line">System.out.println(c4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</span></span><br><span class="line"><span class="keyword">char</span> c5 = <span class="string">&#x27;\n&#x27;</span>;<span class="comment">//换行符</span></span><br><span class="line">c5 = <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//制表符</span></span><br><span class="line">System.out.print(<span class="string">&quot;hello&quot;</span> + c5);</span><br><span class="line">System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c6 = <span class="string">&#x27;\u0043&#x27;</span>;</span><br><span class="line">System.out.println(c6);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.布尔型：boolean</span></span><br><span class="line"><span class="comment">//① 只能取两个值之一：true 、 false</span></span><br><span class="line"><span class="comment">//② 常常在条件判断、循环结构中使用</span></span><br><span class="line"><span class="keyword">boolean</span> bb1 = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(bb1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isMarried = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(isMarried)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你就不能参加\&quot;单身\&quot;party了！\\n很遗憾&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你可以多谈谈女朋友！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>\1. 自动类型提升：<br />结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。<br />byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double</p><p>特别的：当byte、char、short三种类型的变量做运算时，结果为int型</p><p>\2. 强制类型转换：见VariableTest3.java</p><p>说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Java基础</title>
      <link href="2021/03/11/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/11/%E3%80%90Java%E3%80%91Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】多态</title>
      <link href="2021/03/10/%E3%80%90Java%E3%80%91%E5%A4%9A%E6%80%81/"/>
      <url>2021/03/10/%E3%80%90Java%E3%80%91%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[        <h2 id="多态"   >          <a href="#多态" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#多态"></a> 多态</h2>      <ul><li>类的静态方法：多态时不受影响，父类指针指向子类时，会调用父类的静态方法；</li><li>类的普通方法：多态时受影响，父类指针指向子类时，会调用子类的静态方法；</li></ul><p>继承时，加@Override注解；静态方法不会发生继承；</p><p>对象能执行哪些方法，取决于对象左边的类型，和右边关系不大</p><p>父类类型的引用变量指向右边的子类类型时，该变量可以调用父类有的方法（该方法若被子类继承则调用子类的方法，若子类没有继承该方法，则调用父类的方法），若该变量想调用子类独有的方法，则会失败。</p><ul><li><p>子类类型变量只能调用自己的方法或继承自父类的方法</p></li><li><p>父类类型变量可以指向子类类型，但不能调用子类独有的方法，若想调用子类独有方法，则需要强制转换成子类类型变量</p></li><li><p>将子类转换成父类，向上转型；</p></li><li><p>将父类转换成子类，向下转型，需要强制类型转换（因为父类引用变量没有子类的独有方法，只有强制转换后才有子类的独有方法</p></li></ul><p><img src="Java-%E5%A4%9A%E6%80%81.assets/image-20210327224903670.png" alt="image-20210327224903670" /></p><p><img src="Java-%E5%A4%9A%E6%80%81.assets/image-20210328100440286.png" alt="image-20210328100440286" /></p><p>类中static {}包裹组成静态代码块，在类第一次构造前调用（只调用一次），并且再次构造该类时不会再执行。调用顺序：1 2 3</p><p>第二次new该类时，1不执行 2 3依旧执行</p><p><img src="Java-%E5%A4%9A%E6%80%81.assets/image-20210328101143567.png" alt="image-20210328101143567" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenCV】OpenCV读取摄像头数据</title>
      <link href="2021/03/10/%E3%80%90OpenCV%E3%80%91OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/%E3%80%90OpenCV%E3%80%91OpenCV%E8%AF%BB%E5%8F%96%E6%91%84%E5%83%8F%E5%A4%B4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>通过cv::VideoCapture类读取外接设备视频流（摄像头或外接读卡器获取到的视频流）</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cv::VideoCapture <span class="title">capture</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!capture.isOpened())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;could not open camera...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cv::namedWindow(<span class="string">&quot;capture&quot;</span>, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">cv::Mat frame;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!capture.read(frame)) </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    cv::imshow(<span class="string">&quot;capture&quot;</span>, frame);</span><br><span class="line">    <span class="keyword">char</span> c = waitKey(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (c &gt;= <span class="number">49</span>) &#123;</span><br><span class="line">    index = c - <span class="number">49</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">27</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capture.release();</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Qt】基于Qt显示OpenCV的Mat数据</title>
      <link href="2021/03/10/%E3%80%90Qt%E3%80%91%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/"/>
      <url>2021/03/10/%E3%80%90Qt%E3%80%91%E5%9F%BA%E4%BA%8EQt%E6%98%BE%E7%A4%BAOpenCV%E7%9A%84Mat%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="读取图片"   >          <a href="#读取图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#读取图片"></a> 读取图片</h2>      <p>使用<code>QFileDialog::getOpenFileName</code>函数获取文件名：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br></pre></td></tr></table></div></figure><p>使用<code>cv::imread</code>函数读取图片：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> xxxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h2 id="cvmat转换为qimage"   >          <a href="#cvmat转换为qimage" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#cvmat转换为qimage"></a> cv::Mat转换为QImage</h2>      <p>将<code>cv::Mat</code>类对象转换为<code>QImage</code>类对象。注意事项：</p><ol><li><p>cv::Mat类通道顺序为BGR，QImgae类为RGB，因此需要先使用<code>cv::cvtColor</code>做色彩转换。</p></li><li><p>需要判断Mat对象的通道数，单通道和三通道处理方式略有不同：</p></li></ol><ul><li>三通道RGB图片：<code>QImage::Format_RGB888</code></li><li>单通道图片：<code>QImage::Format_Indexed8</code></li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat rgbMat;</span><br><span class="line">QImage img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="qlabel显示图片"   >          <a href="#qlabel显示图片" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#qlabel显示图片"></a> QLabel显示图片</h2>      <p>在Qt Designer中创建一个<code>QLabel</code>类对象img_label，并根据需求设置其长宽大小，最后通过<code>setPixmap</code>函数设置QImage数据。</p><p>调整图片大小时有两种设置方式：</p><ul><li>图片尺寸调整到QLabel实际尺寸：<code>setScaledContents(true)</code></li><li>QLabel尺寸调整到图片实际尺寸：resize()</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br></pre></td></tr></table></div></figure>        <h2 id="完整代码"   >          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;Open Image&quot;</span>),<span class="string">&quot;&quot;</span>,tr(<span class="string">&quot;Image File(*.bmp *.jpg *.jpeg *.png)&quot;</span>));</span><br><span class="line">QTextCodec *code = QTextCodec::codecForName(<span class="string">&quot;gb18030&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> img_name = code-&gt;fromUnicode(filename).data();</span><br><span class="line"></span><br><span class="line">image_mat = cv::imread(img_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!image_mat.data)</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox msg_box;</span><br><span class="line">    msg_box.setText(tr(<span class="string">&quot;Image data is null&quot;</span>));</span><br><span class="line">    msg_box.exec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    cv::Mat rgbMat;</span><br><span class="line">    QImage img;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (image_mat.channels() == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::cvtColor(mat, rgbMat, CV_BGR2RGB); </span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(rgbMat.data), rgbMat.cols, rgbMat.rows, rgbMat.cols * rgbMat.channels(), QImage::Format_RGB888);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        img = QImage((<span class="keyword">const</span> uchar*)(mat.data), mat.cols, mat.rows, mat.cols * mat.channels(), QImage::Format_Indexed8);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setPixmap(QPixmap::fromImage(img));</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;img_label-&gt;setScaledContents(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//this-&gt;ui-&gt;img_label-&gt;resize(this-&gt;ui-&gt;img_label-&gt;pixmap()-&gt;size());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> OpenCV </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VTK】VTK8.2.0 + VS2019 + Win10 编译与配置</title>
      <link href="2021/03/02/%E3%80%90VTK%E3%80%91VTK%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/02/%E3%80%90VTK%E3%80%91VTK%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[        <h2 id="vtk编译与配置"   >          <a href="#vtk编译与配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#vtk编译与配置"></a> VTK编译与配置</h2>      <ul><li>系统平台</li></ul><p>Windows10 x64位系统</p><ul><li>所需工具：</li></ul><p>VS2019 + CMAKE 3.14.4 + QT 5.12.4（要勾选：QtWebEngine和QtScript）</p>    <div class="note-plugin success">      <span class="note-plugin__icon note-plugin__icon--success">              <i class="fas fa-check-circle"></i>            </span>      <p><strong>Success</strong><br />This is success note.</p>    </div>  ]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> VTK </category>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> VTK </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络原理</title>
      <link href="2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
      <url>2021/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[        <h2 id="计算机网络分层结构"   >          <a href="#计算机网络分层结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#计算机网络分层结构"></a> 计算机网络分层结构</h2>      <ul><li>OSI参考模型：7层</li><li>TCP/IP参考模型：4层</li></ul><p>一台主机的每一张网卡都拥有一个固定的物理地址（MAC地址）。两台主机在进行通讯时，交换机通过MAC地址确定传输目标对象，从而通过网线将数据包传输给目标主机。</p><span id="more"></span>        <h2 id="数据传输过程"   >          <a href="#数据传输过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#数据传输过程"></a> 数据传输过程</h2>      <p>一台主机A想与另一台主机B通讯时，需要首先知道对方的<strong>MAC地址</strong>（每张网卡有一个MAC地址），其先在缓存文件中寻找有没有这个MAC地址对应的设备，若没有，则通过<strong>ARP协议</strong>在子网内广播一个信号，判断哪台设备的ip地址是B的ip地址。目标设备B发现A要找的ip地址是自己时，就会返回给对方自己的MAC地址，并储存在交换机（不确定）中，此时A即知道了B的ip地址和MAC地址，即可进行通讯；</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/28/hello-world/"/>
      <url>2021/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="quick-start"   >          <a href="#quick-start" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>              <h3 id="create-a-new-post"   >          <a href="#create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="run-server"   >          <a href="#run-server" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><span id="more"></span>        <h3 id="generate-static-files"   >          <a href="#generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="deploy-to-remote-sites"   >          <a href="#deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【C++】C++实现ping功能</title>
      <link href="2021/02/12/%E3%80%90C%E3%80%91C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/"/>
      <url>2021/02/12/%E3%80%90C%E3%80%91C-%E5%AE%9E%E7%8E%B0ping%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[        <h2 id="目的"   >          <a href="#目的" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#目的"></a> 目的</h2>      <p>使用C++实现ping功能，用于在进行TCP/IP通讯前测试是否能与目标主机通讯。</p>        <h2 id="原理"   >          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2>      <p>ping 命令是基于ICMP 协议来工作的，「ICMP」全称为Internet 控制报文协议( Internet Control Message Protocol)。基于ICMP协议向目标IP发送ICMP响应请求报文，目标主机收到这个报文之后，会向源IP回复一个ICMP响应应答报文。</p>        <h2 id="c实现"   >          <a href="#c实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c实现"></a> C++实现</h2>      <p>构建ICMPPing类实现上述功能。</p><ul><li>icmp_ping.h：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ICMPPING_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ICMPPING_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iphlpapi.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Iphlpapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICMPPing</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI* ICMPCREATEFILE)</span><span class="params">(VOID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span><span class="params">(WINAPI* ICMPCLOSEHANDLE)</span><span class="params">(HANDLE)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">DWORD</span><span class="params">(WINAPI* ICMPSENDECHO)</span><span class="params">(HANDLE, DWORD, LPVOID, WORD, PIP_OPTION_INFORMATION, LPVOID, DWORD, DWORD)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ICMPPing();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~ICMPPing();</span><br><span class="line"><span class="function"><span class="keyword">static</span> ICMPPing* <span class="title">GetInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// init ICMP function, return true for success, or for error</span></span><br><span class="line"><span class="function">BOOL <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// ping host, return true for connect success, or for timeout</span></span><br><span class="line"><span class="function">BOOL <span class="title">Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> ICMPPing* icmp_ping_;</span><br><span class="line"><span class="comment">// pointer of function</span></span><br><span class="line">ICMPCREATEFILE pIcmpCreateFile_;</span><br><span class="line">ICMPCLOSEHANDLE pIcmpCloseHandle_;</span><br><span class="line">ICMPSENDECHO pIcmpSendEcho_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></div></figure><span id="more"></span><ul><li>icmp_ping.cpp：</li></ul><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ICMPPing* ICMPPing::icmp_ping_ = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ICMPPing::ICMPPing()</span><br><span class="line">    : pIcmpCreateFile_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpCloseHandle_(<span class="literal">NULL</span>),</span><br><span class="line">    pIcmpSendEcho_(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ICMPPing::~ICMPPing()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> icmp_ping_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ICMPPing* <span class="title">ICMPPing::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (icmp_ping_ == <span class="literal">NULL</span>)</span><br><span class="line">        icmp_ping_ = <span class="keyword">new</span> ICMPPing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> icmp_ping_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HINSTANCE hIcmp = LoadLibrary(<span class="string">&quot;ICMP.DLL&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hIcmp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pIcmpCreateFile_ = (ICMPCREATEFILE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCreateFile&quot;</span>);</span><br><span class="line">    pIcmpCloseHandle_ = (ICMPCLOSEHANDLE)GetProcAddress(hIcmp, <span class="string">&quot;IcmpCloseHandle&quot;</span>);</span><br><span class="line">    pIcmpSendEcho_ = (ICMPSENDECHO)GetProcAddress(hIcmp, <span class="string">&quot;IcmpSendEcho&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((pIcmpCreateFile_ == <span class="literal">NULL</span>) || (pIcmpCloseHandle_ == <span class="literal">NULL</span>) || (pIcmpSendEcho_ == <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">ICMPPing::Ping</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* host)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD timeOut = <span class="number">1000</span>;  </span><br><span class="line">    ULONG hAddr = inet_addr(host);  </span><br><span class="line">    <span class="keyword">if</span> (hAddr == INADDR_NONE)</span><br><span class="line">    &#123;</span><br><span class="line">        hostent* hp = gethostbyname(host);   </span><br><span class="line">        <span class="keyword">if</span> (hp)</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;hAddr, hp-&gt;h_addr_list, hp-&gt;h_length); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HANDLE hIp = pIcmpCreateFile_();</span><br><span class="line">    IP_OPTION_INFORMATION ipoi;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;ipoi, <span class="number">0</span>, <span class="keyword">sizeof</span>(IP_OPTION_INFORMATION));</span><br><span class="line">    ipoi.Ttl = <span class="number">128</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pSend[<span class="number">36</span>];  </span><br><span class="line">    <span class="built_in">memset</span>(pSend, <span class="string">&#x27;E&#x27;</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> repSize = <span class="keyword">sizeof</span>(ICMP_ECHO_REPLY) + <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> pReply[<span class="number">100</span>]; </span><br><span class="line">    ICMP_ECHO_REPLY* pEchoReply = (ICMP_ECHO_REPLY*)pReply;</span><br><span class="line"></span><br><span class="line">    DWORD nPackets = pIcmpSendEcho_(hIp, hAddr, pSend, <span class="number">32</span>, &amp;ipoi, pReply, repSize, timeOut);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pEchoReply-&gt;Status != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pIcmpCloseHandle_(hIp);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pIcmpCloseHandle_(hIp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>该类使用单例模式，在主程序中使用时，通过调用<code>GetInstance()</code>函数返回类指针对象；之后通过<code>Init()</code>函数进行初始化，并判断返回值是否为false；最后调用<code>Ping()</code>函数验证是否能和目标主机进行通讯。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;icmp_ping.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ICMPPing* icmp_ping = ICMPPing::GetInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!icmp_ping-&gt;Init())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;init error!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icmp_ping-&gt;Ping(<span class="string">&quot;192.168.0.12&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping success!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ping fail!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="注意"   >          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2>      <p>若该类同时与其他包含有&lt;Windows.h&gt;的文件放在同一项目下编译时，会报重定义的错误，这是因为&lt;Windows.h&gt;中包含了&lt;Winsock.h&gt;头文件，而本类包含了&lt;Winsock2.h&gt;文件，因此会有重定义。解决方案：</p><p>在项目属性  ——&gt;  C/C++  ———&gt;  预处理器  -------&gt; 预处理器定义</p><p>增加如下定义</p><p><code>WIN32_LEAN_AND_MEAN</code></p>        <h2 id="致谢"   >          <a href="#致谢" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#致谢"></a> 致谢</h2>      <blockquote><p>代码参考自http://www.cnblogs.com/guoyz1314/p/3527340.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
